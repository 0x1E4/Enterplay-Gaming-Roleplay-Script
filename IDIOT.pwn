/*															AAAAAAAAAAAAA   RRRRRRRRRRRRR   I
															A           A   R           R   I
															A           A   R           R   I
															A           A   R           R   I
															AAAAAAAAAAAAA   RRRRRRRRRRRRR   I
															A           A   R    R          I
															A           A   R      R        I
															A           A   R        R      I
															A           A   R           R   I

												W               W   I   W               W   I   NNNNNNNNN       N
												W               W   I   W               W   I   N       N       N
												W               W   I   W               W   I   N       N       N
												W               W   I   W               W   I   N       N       N
												W               W   I   W               W   I   N       N       N
												W       W       W   I   W       W       W   I   N       N       N
												W       W       W   I   W       W       W   I   N       N       N
												W       W       W   I   W       W       W   I   N       N       N
												WWWWWWWWWWWWWWWWW   I   WWWWWWWWWWWWWWWWW   I   N       NNNNNNNNN

																	#####      	#       #
																		#       #       #
																	 	#       #       #
																	 	#       #########
																	 	#               #
																	 	#               #
																	#########           #
																	
											"CODING ITU BISA DI COPYPASTE TETAPI IDE TIDAK AKAN BISA." - Christian "Tianmetal" Malik.
Gamemode Editor   	:
					- Ari "ArWin14" Pradana
Terimakasih kepada	:
					- Allah SWT
					- Families and Friends
					- Wining "Wiwin" Kulsum (My Dear)
					- AND YOU (FOR REQUEST AND SUGGESTION)
*/
#include <a_samp>
//#include <nex-ac>
#include <a_zones>
#include <sscanf2>
#include <streamer>
#include <YSI\y_ini>
#include <YSI\y_timers>
#include <audio>
#include <ACBS>//ACBS
#include <blood>
#include <BUD>
#include <BustAim>
#include <Dini>
#include <djson>
#include <foreach>//foreach
#include <geolocation>
#include <mSelection>
#include <shoot>
#include <OPA>
#include <OPSP>
#include <progress>
#include <zcmd>//zcmd
#include <yom_buttons>
#pragma dynamic 100000
//#define PATH "users/%s.ini"
#define                 SYNTAX_MESSAGE                          "Syntax: {FFFFFF}"
#define SERVER_GM_MAP "LS/FC/RC"
#define SERVER_GM_LANGUAGE "Bahasa Indonesia / English"
#define SERVER_GM_TEXT "ERP v2.7a SYOW [0.3.7-R2]"
#define SERVER_NAME "Enterplay Gaming Roleplay"
#define DIALOG_INVENTORY (3123)
#define BAN_DIALOG (3124)
#define RATE_INC (500) // The sensitivity per message, no need to modify.
#define RATE_MAX (500) // When the flood rate reaches this value the action below will be taken
enum LIST_ANTIFLOOD
{
	lastCheck,
	floodRate
}
new AntiFlood_Data[MAX_PLAYERS][LIST_ANTIFLOOD];
//GUN HOLDING
#define DIALOG_EDIT_BONE 1520

enum weaponInfo
{
	Float:Position[6],
	Bone,
	Hidden
}

new WeaponInfo[MAX_PLAYERS][39][weaponInfo], WeaponCheckTimer[MAX_PLAYERS], EditingWeapon[MAX_PLAYERS];
//Ammo define
#define 				AMMO_MELEE 								99999
#define 				AMMO_MINIGUN 							650 //Without F means for faction
#define 				AMMO_SHOTGUN 							250
#define 				AMMO_M4AK 								1000
#define 				AMMO_SNIPER 							25
#define 				AMMO_GRANADE 							3
#define 				AMMO_RPG 								1
#define 				AMMO_FT 								900
#define 				AMMO_GG 								900
#define 				AMMO_TRUCK 								3 //Truck for trucker bonuses
#define 				AMMO_TRUCK2 							15
#define 				AMMO_SGMINIGUN 							150 //SG to bottom for SellGun
#define 				AMMO_SGSHOTGUN 							35
#define 				AMMO_SGM4AK 							250
#define 				AMMO_SGSNIPER 							20
#define 				AMMO_SGGRANADE 							1
#define 				AMMO_DEAGLE 							200
#define 				AMMO_9MM 								750
#define					DIALOG_MAKEAMMO	                        (86)
#define					DIALOG_REFUEL                       	(87)
#define 				DIALOG_MODIF                            (119)
#define                 DIALOG_INSTALLNEON                      (1401)
#define                 DIALOG_FIXCAR                           (76)
#define                 DIALOG_VEHMENU                          (77)
#define 				DIALOG_CREATEGUN 						(85)
#define 				DIALOG_PLANTSEED						(88)
new szPlayerName[MAX_PLAYER_NAME];
//Desc Text - AriWiwin14
new Text:DescriptionText[MAX_PLAYERS];
new DescriptionTimer[MAX_PLAYERS];
//Fixed
new CurGMX;
// strcpy - Simon / Y_LESS
#define strcpy(%0,%1,%2) \
    strcat((%0[0] = '\0', %0), %1, %2)

#define MAX_BUSINESSES 25
#define MAX_ATM 50
#define MAX_COBJECTS 10000
#define MAX_RENT 20
#define MAX_WORKSHOP 10
#define MAX_GYMOBJECT 100
#define MAX_WEAPON_HACK_WARNINGS (1)
#define MAX_FARM 10
#define MAX_BUYPOINT 100
#define MAX_MOD 5
#define SPECIAL_ACTION_PISSING 68
#define MAX_OBJECTS_PER_PLAYER 10
//ANIMATION Coded by AriWiwin14
#define MAX_ANIMS (1812)
#define IANIM_DEFAULT_TIME (5000)
#define IANIM_DEFAULT_SPEED (2.0)
#define IANIM_DEFAULT_LOOP (0)
#define IANIM_DEFAULT_LOCKX (1)
#define IANIM_DEFAULT_LOCKY (1)
#define IANIM_DEFAULT_FREEZE (0)
#define IANIM_DEFAULT_FORCESYNC (1)
//HARGA
new HargaBensin, FishPrice, HargaAnggur, HargaBlueberry, HargaStrawberry, HargaGandum, HargaTomat; //PlantPrice;
//REWRITTEN BunnyHopping and Bus Label by AriWiwin14
new PlayerPressedJump[MAX_PLAYERS];
new togbh[MAX_PLAYERS];
//BIZ INTERIOR Coded by AriWiwin14
#define BUSINESSES_INT 5000
//ATM Coded by AriWiwin14
new Text3D:atm[MAX_ATM];
new SpawnedATM;
#define BIZ_HEX             "{FFFF00}"
//DROP GUN
#define MAX_DROP_ITEMS 1000
#define COLOR_ACTION 0xFFC0CBFF
//NO ADMIN CHAT
new noadmin = 0;
//Object
new oEdit[MAX_PLAYERS];
new oEditID[MAX_PLAYERS]; // Object's ID
new Float:oPos[MAX_PLAYERS][3];
new Float:oRot[MAX_PLAYERS][3];
// Kick Fix
forward                 antiCheat();
new kick_gTimer[MAX_PLAYERS];

stock FixedKick(playerid) {
    KillTimer(kick_gTimer[playerid]);
    kick_gTimer[playerid] = SetTimerEx("DelayedKick", 500, false, "i", playerid);
    return 1;
}

forward KickPublic(playerid);
public KickPublic(playerid) { Kick(playerid); }

forward DelayedKick(playerid);
public DelayedKick(playerid) {
    if (!IsPlayerConnected(playerid)) return 1;
    Kick(playerid);
    return 1;
}
//Text
new Text:Rp;
new Text:sen;
new Text:koma2;
//NPC Bus
new NPCBedjo;
new NPCSanusi;
new BusID[MAX_PLAYERS];
new PlayerSitting[MAX_PLAYERS];
new Float:Playerx[MAX_PLAYERS], Float:Playery[MAX_PLAYERS], Float:Playerz[MAX_PLAYERS], Float:Playera[MAX_PLAYERS], PlayerSkin[MAX_PLAYERS];
forward IsAtBlueBusStop(playerid);
forward IsAtBlackBusStop(playerid);
forward ResetView(playerid);
forward CPOff(playerid);
new Text:Time, Text:Date;
forward settime(playerid);
//prison interior
new door[5];
new cell[36];
new fence[36];
new stair[3];
//Skin Selection
new skinlist = mS_INVALID_LISTID;
new FACTIONSKIN = mS_INVALID_LISTID;
//Toys Selection
new toy1000list = mS_INVALID_LISTID;
new toy1500list = mS_INVALID_LISTID;
new toy2000list = mS_INVALID_LISTID;
new toy3000list = mS_INVALID_LISTID;
new toy4000list = mS_INVALID_LISTID;
new toy5000list = mS_INVALID_LISTID;
new toylist = mS_INVALID_LISTID;
new vtoylist = mS_INVALID_LISTID;
// Serverlock ARWIN14
new bool:ServerLocked = false;
new bool:DialogHauling[10];
new bool:DialogSweeper[3];
new bool:DialogBus[3];
new bool:DialogSaya[MAX_PLAYERS][10];
new TrailerHauling[MAX_PLAYERS];
//hunger bladder energy
new PBHTimer[MAX_PLAYERS];
new PBETimer[MAX_PLAYERS];
new PBBTimer[MAX_PLAYERS];
new PBCTimer[MAX_PLAYERS];
//Textdraw
new Text:BSText[10];
//Bar
new Bar:hungry[MAX_PLAYERS] = {INVALID_BAR_ID, ...};
new Bar:tired[MAX_PLAYERS] = {INVALID_BAR_ID, ...};
new Bar:clean[MAX_PLAYERS] = {INVALID_BAR_ID, ...};
new FirstSpawn[MAX_PLAYERS];
//new Text:bilal;
new Text:Kotak;
new Text:forum;

//Animation
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new animation[MAX_PLAYERS];
new Text:txtAnimHelper;
//Checkpoint
new CheckDoorPoint[MAX_PLAYERS];
new CheckBizPoint[MAX_PLAYERS];
//Countdown
#define Count_Start 1000
#define Count_End 700
#define FillTime 300

//paytoll
new paytoll1;
new paytoll2;
//Flashing Neon
new togneon[MAX_PLAYERS];
new neontog[MAX_PLAYERS];
forward togneonoff(playerid);
forward togneonon(playerid);

new Text3D:business1[MAX_BUSINESSES];
new Text3D:business2[MAX_BUSINESSES];
new SpawnedBusinesses;
new SpawnedWS;
new Text3D:MaskLabel[MAX_PLAYERS];
new Neon1[MAX_PLAYERS];
new Neon2[MAX_PLAYERS];
new SedangMancing[MAX_PLAYERS];
new SedangTrucking[MAX_PLAYERS];
new SedangHauling[MAX_PLAYERS];
new TakeTrucking[MAX_PLAYERS];
new CarTrucking[MAX_PLAYERS];
new Text3D:pickupML, Text3D:pickupML2, Text3D:pickupComp, Text3D:pickupPlant, Text3D:pickupPot, Text3D:equipment1, Text3D:equipment2, Text3D:equipment3;
new FishHolding[MAX_PLAYERS];
new CompHolding[MAX_PLAYERS];
//DMVCar
new DMVPlate1;
new DMVPlate2;
new DMVPlate3;
new DMVPlate4;
new DMVPlate5;
new DMVCar[6];
//new DMVPCar[4];
new LicenseTest[MAX_PLAYERS];
//new LicenseTestP[MAX_PLAYERS];
new CPD[MAX_PLAYERS];
//Rental Kendaraan
new Text3D:rent[MAX_RENT];
new RentVeh;

enum rInfo
{
	Float:rPosX,
	Float:rPosY,
	Float:rPosZ,
	rPickupID,
	rVehicle1,
	rVehicle2,
	rCost1,
	rCost2,
	rCost3,
	rCost4,
	rCost5,
	rCost6,
	Float:rSpawnX,
	Float:rSpawnY,
	Float:rSpawnZ,
	Float:rAngle,
};
new RentInfo[MAX_RENT][rInfo];
//ANIMATION
enum IANIM_DATA
{
	Float:iAnim_Speed,
	iAnim_Loop,
	iAnim_Lockx,
	iAnim_Locky,
	iAnim_Freeze,
	iAnim_Time,
	iAnim_ForceSync
}
new iAnim_AnimData[ MAX_ANIMS ][ IANIM_DATA ];

new bool:iAnim_PlayerUsingAnim[ MAX_PLAYERS char ];
//MONEYBAGS
#define MAX_MONEYBAGS  (150)
enum mbInfo
{
	mCreated,
    Float:mbX,
    Float:mbY,
    Float:mbZ,
    mPickup,
    mAmount,
    mMoneybag
};
new MoneyInfo[MAX_MONEYBAGS][mbInfo];
//FlyMode
// Players Move Speed
#define MOVE_SPEED              100.0
#define ACCEL_RATE              0.03

// Players Mode
#define CAMERA_MODE_NONE    	0
#define CAMERA_MODE_FLY     	1

// Key state definitions
#define MOVE_FORWARD    		1
#define MOVE_BACK       		2
#define MOVE_LEFT       		3
#define MOVE_RIGHT      		4
#define MOVE_FORWARD_LEFT       5
#define MOVE_FORWARD_RIGHT      6
#define MOVE_BACK_LEFT          7
#define MOVE_BACK_RIGHT         8

// Enumeration for storing data about the player
enum noclipenum
{
	cameramode,
	flyobject,
	mode,
	lrold,
	udold,
	lastmove,
	Float:accelmul
}
new noclipdata[MAX_PLAYERS][noclipenum];

//--------------------------------------------------

//Speedo
#define GREEN 			0x21DD00FF
#define RED 			0xE60000FF
#define YELLOW 			0xFFFF00FF
#define ORANGE 			0xF97804FF
#define LIGHTRED 		0xFF8080FF
#define LIGHTBLUE 		0x00C2ECFF
#define PURPLE 			0xB360FDFF
#define BLUE 			0x1229FAFF
#define LIGHTGREEN 		0x38FF06FF
#define DARKPINK 		0xE100E1FF
#define DARKGREEN 		0x008040FF
#define ANNOUNCEMENT 	0x6AF7E1FF
#define GREY 			0xCECECEFF
#define PINK 			0xD52DFFFF
#define DARKGREY    	0x626262FF
#define AQUAGREEN   	0x03D687FF
#define WHITE 			0xFFFFFFFF

#define PLAYERS 200

#define L_VEHICLE 200


//******************************************************************************
// SpeedoMeter Configurations
//******************************************************************************

//::::::::::::::::::::::::::::::::::::
// -> Functions Config <-
//::::::::::::::::::::::::::::::::::::
#define VehicleMaxSpeed  500                //Define the Speed Limit! (KPH)
#define UpdateConfig     500               //Update Speedo functions in ... (Miliseconds)


//::::::::::::::::::::::::::::::::::::
// -> Speedo TextDraw Config <-
//::::::::::::::::::::::::::::::::::::
//Enable = true || Disable = false


//::::::::::::::::::::::::::::::::::::
// -> Speedo Colors Config <-
//::::::::::::::::::::::::::::::::::::
#define BoxColor         0xffffffff     //Color of Speedo Box
#define SideLinesColor   0xffffffff     //Color of Speedo Side Lines
#define TopLinesColor    0xffffffff     //Color of Speedo Top lines
#define CategoriesColor  "~b~"          //Color of (Vehicle,Health,Altitude,Gps)
#define MPH_KPH_Color    "~g~"          //Color of (MPH,KPH)

//******************************************************************************


//-----------------------------------------> Change

#define MAX_ZONE_NAME 28

new Text:LBox[MAX_PLAYERS];
new Text:LLine1[MAX_PLAYERS];
new Text:LLine2[MAX_PLAYERS];
new Text:LLine3[MAX_PLAYERS];
new Text:LCredits[MAX_PLAYERS];
new LuX_SpeedoMeter[MAX_PLAYERS];

new lString[256];

enum ReadPositions{Float:ReadX,Float:ReadY,Float:ReadZ}
new Float:VehPosX[MAX_VEHICLES], Float:VehPosY[MAX_VEHICLES], Float:VehPosZ[MAX_VEHICLES];

forward LAutoUnlock(vehicleid);

new LVehiclesName[][] =
{
   "Landstalker",
   "Bravura",
   "Buffalo",
   "Linerunner",
   "Pereniel",
   "Sentinel",
   "Dumper",
   "Firetruck",
   "Trashmaster",
   "Stretch",
   "Manana",
   "Infernus",
   "Voodoo",
   "Pony",
   "Mule",
   "Cheetah",
   "Ambulance",
   "Leviathan",
   "Moonbeam",
   "Esperanto",
   "Taxi",
   "Washington",
   "Bobcat",
   "Mr Whoopee",
   "BF Injection",
   "Hunter",
   "Premier",
   "Enforcer",
   "Securicar",
   "Banshee",
   "Predator",
   "Bus",
   "Rhino",
   "Barracks",
   "Hotknife",
   "Trailer",
   "Previon",
   "Coach",
   "Cabbie",
   "Stallion",
   "Rumpo",
   "RC Bandit",
   "Romero",
   "Packer",
   "Monster Truck",
   "Admiral",
   "Squalo",
   "Seasparrow",
   "Pizzaboy",
   "Tram",
   "Trailer",
   "Turismo",
   "Speeder",
   "Reefer",
   "Tropic",
   "Flatbed",
   "Yankee",
   "Caddy",
   "Solair",
   "Berkley's RC Van",
   "Skimmer",
   "PCJ-600",
   "Faggio",
   "Freeway",
   "RC Baron",
   "RC Raider",
   "Glendale",
   "Oceanic",
   "Sanchez",
   "Sparrow",
   "Patriot",
   "Quad",
   "Coastguard",
   "Dinghy",
   "Hermes",
   "Sabre",
   "Rustler",
   "ZR-350",
   "Walton",
   "Regina",
   "Comet",
   "BMX",
   "Burrito",
   "Camper",
   "Marquis",
   "Baggage",
   "Dozer",
   "Maverick",
   "News Chopper",
   "Rancher",
   "FBI Rancher",
   "Virgo",
   "Greenwood",
   "Jetmax",
   "Hotring",
   "Sandking",
   "Blista Compact",
   "Police Maverick",
   "Boxville",
   "Benson",
   "Mesa",
   "RC Goblin",
   "Hotring Racer",
   "Hotring Racer",
   "Bloodring Banger",
   "Rancher",
   "Super GT",
   "Elegant",
   "Journey",
   "Bike",
   "Mountain Bike",
   "Beagle",
   "Cropdust",
   "Stunt",
   "Tanker",
   "RoadTrain",
   "Nebula",
   "Majestic",
   "Buccaneer",
   "Shamal",
   "Hydra",
   "FCR-900",
   "NRG-500",
   "HPV1000",
   "Cement Truck",
   "Tow Truck",
   "Fortune",
   "Cadrona",
   "FBI Truck",
   "Willard",
   "Forklift",
   "Tractor",
   "Combine",
   "Feltzer",
   "Remington",
   "Slamvan",
   "Blade",
   "Freight",
   "Streak",
   "Vortex",
   "Vincent",
   "Bullet",
   "Clover",
   "Sadler",
   "Firetruck",
   "Hustler",
   "Intruder",
   "Primo",
   "Cargobob",
   "Tampa",
   "Sunrise",
   "Merit",
   "Utility",
   "Nevada",
   "Yosemite",
   "Windsor",
   "Monster Truck",
   "Monster Truck",
   "Uranus",
   "Jester",
   "Sultan",
   "Stratum",
   "Elegy",
   "Raindance",
   "RC Tiger",
   "Flash",
   "Tahoma",
   "Savanna",
   "Bandito",
   "Freight",
   "Trailer",
   "Kart",
   "Mower",
   "Duneride",
   "Sweeper",
   "Broadway",
   "Tornado",
   "AT-400",
   "DFT-30",
   "Huntley",
   "Stafford",
   "BF-400",
   "Newsvan",
   "Tug",
   "Trailer",
   "Emperor",
   "Wayfarer",
   "Euros",
   "Hotdog",
   "Club",
   "Trailer",
   "Trailer",
   "Andromada",
   "Dodo",
   "RC Cam",
   "Launch",
   "Police Car (LS)",
   "Police Car (SF)",
   "Police Car (LV)",
   "Police Ranger",
   "Picador",
   "S.W.A.T. Van",
   "Alpha",
   "Phoenix",
   "Glendale",
   "Sadler",
   "Luggage Trailer",
   "Luggage Trailer",
   "Stair Trailer",
   "Boxville",
   "Farm Plow",
   "Utility Trailer"
};


forward LuX_SpeedoMeterUp();

//

#define TEXT_DRAW_FONT      	(2)
#define TEXT_DRAW_X_FACTOR  	(0.4)
#define TEXT_DRAW_Y_FACTOR  	(0.8)

#define PLAYERS 200

//--------------------
#define DTUT    15769
#define DTUT1   15770
#undef INVALID_TEXT_DRAW
#define INVALID_TEXT_DRAW (Text:0xFFFF)
#define LOAD_ON_START


static gTeam[MAX_PLAYERS];
static pvehicleid[MAX_PLAYERS]; // array containing players vehicle id (loaded when player enters as driver)
static pmodelid[MAX_PLAYERS]; // array containing players vehicle MODEL id (loaded when player enters as driver)

#define MAX_PING 800
#define RADIO2 0x2641FEAA

#define	TYPE_TPMATRUNTIMER 1
#define	TYPE_TPDRUGRUNTIMER 2
#define	TYPE_ARMSTIMER 3
#define	TYPE_GIVEWEAPONTIMER 4
#define	TYPE_HOSPITALTIMER 5
#define	TYPE_SEXTIMER 6
#define	TYPE_FLOODPROTECTION 7
#define	TYPE_HEALTIMER 8
#define TYPE_GUARDTIMER 9
#define TYPE_SELLMATSTIMER 12

#define	MAX_BARRICADES	10
#define MAX_MODS 15
#define MAX_DEALERSHIPVEHICLES 20
#define MAX_CARDEALERSHIPS 8
#define DIALOG_CDEDIT 1329
#define DIALOG_CDUPGRADE 1328
#define DIALOG_CDTILL 1327
#define DIALOG_CDEDITCARS 1326
#define DIALOG_CDEDITONE 1325
#define DIALOG_CDEDITMODEL 1324
#define DIALOG_CDEDITCOST 1323
#define DIALOG_CDEDITPARK 1322
#define DIALOG_CDDELVEH 1321
#define DIALOG_CDNEWVEH 1320
#define DIALOG_CDRADIUS 1319
#define DIALOG_CDNAME 1318
#define DIALOG_CDPRICE 1317
#define DIALOG_CDBUY 1316
#define DIALOG_CDWITHDRAW 1315
#define DIALOG_CDDEPOSIT 1314
#define DIALOG_CDSELL 1313
#define RED_FLAG_OBJ 1580
#define BLUE_FLAG_OBJ 1579
#define HILL_OBJ 1578
#define INVALID_WEED_ID 	-1
#define VEHICLE_RESPAWN 7200
#define SPEEDGUN 43
#define MAX_NOP_WARNINGS 4

#define GetVehicleName(%0) VehicleName[GetVehicleModel(%0)-400]
#define GetPlayerCash(%0) GetPVarInt(%0, "Cash")
#define IsNull(%1) \
((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))

#define SetPVarInt(%0,%1,0); DeletePVar(%0,%1);

#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)
stock const gWeather[] = {
	14, 1, 7, 3, 5, 12, 9, 8, 15
};
new MaleSkin[] = { 1,2,4,5,6,7,14,15,20,21,22,23,24,25,26,29,30,38,44,46,47,48,58,59,60,66,67,72,73,98,101,134,135,136,149,170,183,184,185,186,187,212,213,217,221,222,223,235,236,240,241,242,250,261,262,290,291,299 };
new FemaleSkin[] = { 9,10,12,13,39,40,41,54,55,56,69,76,88,89,93,148,150,151,169,190,191,192,193,195,211,214,215,216,218,219,224,225,226,231,232,233,298 };

// Script Commodities (Points, Houses, Etc)
#define NEW_VULNERABLE 24
#define TIME_TO_CLAIM 1
#define TIME_TO_TAKEOVER 10
#define MAX_FAMILY 14
#define MAX_POINTS 9
#define MAX_DMAPICONS 400
#define MAX_DDOORS 800
#define MAX_HOUSES 1400
#define MAX_SPEED_HACK_WARNINGS 4
#define MAX_GATES 1400
#define INVALID_HOUSE_ID -1

// Main Menu
#define MAINMENU 4070
#define MAINMENU2 4071

#define DOORLOCK 5001

// NMute & AdMute
#define NMUTE 4100
#define ADMUTE 4101

// Shop Orders
#define DIALOG_HELP 5305
#define ACCOUNT 5306
#define CHAT 5307
#define GENERAL 5308
#define VEHICLE 5309
#define LSPDHELP 5310
#define FBIHELP 5311
#define SFPDHELP 5312
#define SAMDHELP 5313
#define GOVHELP 5314
#define SASDHELP 5315
#define SANHELP 5316
#define TAXIHELP 5317
#define AHELP1 5318
#define FAMHELP 5319
#define CHELP 5320
#define VIPHELP 5321
#define BIZHELP 5322
#define HOUSEHELP 5323
#define RENTHELP 5324
#define FAILED 5325
#define FAILED2 5326
#define VEH_MENU    11025

// Player Vehicle Defines
#define MAX_PLAYERVEHICLES 5
#define MAX_PLAYERTOYS 10
#define MAX_MODS 15
#define MAX_GANG_VEHICLES 10
#define INVALID_PLAYER_VEHICLE_ID 0

// Admin Defines
#define MAX_REPORTS  1000
#define INVALID_REPORT_ID -1
#define WEAPON_HACKER_WARNINGS  4
#define NOOB_SKIN 299

// FBI
#define FDUTYMENU 111
#define FDUTYMENU2 222
#define FDUTYMENU3 333
#define FDUTYMENU4 444
#define FDUTYMENU5 6666

#define DUTYMENU 555
#define DUTY_OPTIONS 10041
#define DUTYMENU2 666
#define DUTYMENU3 777
#define DUTYMENU4 888
#define DUTYMENU5 11111
#define STOREMENU 999
#define PETROLMENU 19301
#define GYMMENU 19302
#define LOTTOMENU 987
#define ELEVATOR 18456
#define ELEVATOR2 18455
#define ELEVATOR3 18457
#define VIPNUMMENU 18726
#define VIPNUMMENU2 18765
#define VIPNUMMENU3 17658
#define TRACKCAR 19101
#define GOTOPLAYERCAR 19103
#define DELETECAR 19104
#define House275CAR 19200
#define PAYTICKET 19300

//Rental
#define RENTMENU 17654
#define RENTVEH 17655
#define RENTVEH21 17656
#define RENTVEH22 17657
//#define RENTMENUFAGGIO 18458

// Number Plate Registration
#define FIGHTMENU 22222
#define REPORTSMENU 10031

#define LSMDDIVDUTYMENU 1312
#define LSMDDIVDUTYMENU2 1313
#define LSMDDIVDUTYMENU3 1314
#define LSMDDIVDUTYMENU4 1315
#define LSMDDIVDUTYMENU5 1316

// SFPD
#define	DIALOG_SFPD	5502
#define DIALOG_SFPD_WEAPONS 5503
#define DIALOG_SFPD_CLOTHING 5504
#define DIALOG_SFPD_CLOTHING_TWO 5505

// SASD
#define DIALOG_SASD 5506
#define DIALOG_SASD_WEAPONS 5507
#define DIALOG_SASD_CLOTHING 5508
#define	DIALOG_SASD_CLOTHING_TWO 5509

// SANews
#define DIALOG_SANEWS 5510

// VIP
#define VIPWEPSMENU 3489

// Water Patrol
#define WPDUTYMENU 6549
#define WPDUTYMENU2 2645
#define WPDUTYMENU3 9874
#define WPDUTYMENU4 3649

// LSMD
#define LSMDMENU 7777
#define LSMDSKINS 9999

#define SAGSMENU 4374
#define SESKINS 4375

#define GIVEKEYS 4394
#define REMOVEKEYS 4395
#define MPSFRELEASE 4396
#define HQENTRANCE 4397
#define HQEXIT 4398
#define HQCUSTOMINT 4399
#define HQDELETE 4400

#define FAQMENU 4377
#define COLOREDDOTSFAQ 4378
#define LOCKSFAQ 4379
#define SKINSFAQ 4380
#define ATMFAQ 4381
#define FACTIONSFAQ 4382
#define GANGSFAQ 4383
#define HITMENFAQ 4384
#define WEBSITEFAQ 4385
#define FURTHERHELPFAQ 4386
#define UNMODCARMENU 4388

stock IsAPlane(carid2)
{
        new carid = GetVehicleModel(carid2);
        if(carid == 592 || carid == 577 || carid == 511 || carid == 512 || carid == 593 || carid == 520 || carid == 553 || carid == 476 || carid == 519 || carid == 460 || carid == 513) return 1;
        return 0;
}

stock IsABoat(carid)
{
        new modelid = GetVehicleModel(carid);
        if(modelid == 430 || modelid == 446 || modelid == 452 || modelid == 453 || modelid == 454 || modelid == 472 || modelid == 473 || modelid == 484 || modelid == 493 || modelid == 595)
        {
                return 1;
        }
        return 0;
}
IsVIPModel(carid)
{
	new Cars[] = { 451, 541, 411, 429, 522, 444, 556, 557 };
	for(new i = 0; i < sizeof(Cars); i++)
	{
		if(GetVehicleModel(carid) == Cars[i]) return 1;
	}
	return 0;
}

// JOB HELP DIALOGS
#define JOBHELPMENU 10000
#define DRUGDEALERJOB 10010
#define DRUGDEALERJOB2 10011
#define DRUGDEALERJOB3 10012
#define MECHANICJOB 10013
#define MECHANICJOB2 10014
#define MECHANICJOB3 10015
#define BODYGUARDJOB 10016
#define BODYGUARDJOB2 10017
#define BODYGUARDJOB3 10018
#define ARMSDEALERJOB 10019
#define ARMSDEALERJOB2 10020
#define ARMSDEALERJOB3 10021
#define TAXIJOB 10025
#define TAXIJOB2 10026
#define TAXIJOB3 10027
#define SMUGGLEJOB 10028
#define SMUGGLEJOB2 10029
#define SMUGGLEJOB3 10030
#define TRUCKERJOB 10033
#define FARMERJOB 10035

//MDC
#define MDC_START_ID    10098
#define MDC_MAIN        10099
#define MDC_FIND 		10100
#define MDC_MEMBERS     10101
#define MDC_BLANK	    10102
#define MDC_WARRANTS    10103
#define MDC_CHECK       10104
#define MDC_LICENSES    10105
#define MDC_LSPD        10106
#define MDC_SFPD        10107
#define MDC_FBI         10108
#define MDC_LSMD       10109
#define MDC_MESSAGE     10110
#define MDC_SMS         10111
#define MDC_BOLOLIST    10112
#define MDC_ISSUE       10113
#define MDC_DELETE      10114
#define MDC_DEL_WARRANT 10115
#define MDC_DEL_BOLO    10116
#define MDC_LOGOUT      10117
#define MDC_CREATE      10118
#define MDC_CIVILIANS   10119
#define MDC_ISSUE_SLOT  10120
#define MDC_MESSAGE_2   10121
#define MDC_SMS_2       10122
#define MDC_BOLO        10123
#define MDC_BOLO_SLOT   10124
#define MDC_END_ID    	10125

#define AUDIO_URL 		10126
#define TIPDIALOG      	10129

#define LAELEVATOR      10130

//Vehicle Toy
#define BUYVTOYS        12345
#define BUYVTOYS2       12346
#define DIALOG_VTOYS    12347
#define DELETEVTOYS     12348
#define VTOYEDIT        12350
#define EDITVTOYS       12351
#define VTOYCOL         12352
#define VTOYCOL2        12353
#define VTOYCOL3        12354
#define VTOYCOL4        12355
#define VTOYTEXT        12349
#define VTOYTEXTCOL     12356
#define VTOYTEXT1       12357
#define VTOYTEXTCOL1    12358
#define VTOYTEXTSIZE    12359
#define VTOYTEXTSIZE1   12360
#define BUYVTOYS3       12361
#define BUYVTOYS4       12363
#define VTOYTEXTFONT    12364
#define VTOYTEXTFONT1   12365

//Fix bugged Player
#define BUGGED          12362
//
#define TOYS        	10131
#define DELETETOY       10132
#define WEARTOY         10133
#define BUYTOYS         10134
#define BUYTOYS2        10135
#define BUYTOYS3        10136
#define BUYTOYSGOLD     10137
#define BUYTOYSGOLD2    10138
#define BUYTOYSGOLD3    10139
#define EDITTOYS        10140
#define EDITTOYS2       10141
#define EDITTOYSBONE    10142
#define EDITTOYSPX      10143
#define EDITTOYSPY      10144
#define EDITTOYSPZ      10145
#define EDITTOYSRX      10146
#define EDITTOYSRY      10147
#define EDITTOYSRZ      10148

#define LAELEVATORPASS  10149

#define BUYTOYSCOP      10153
#define BUYTOYSCOP2     10154
#define BUYTOYSCOP3     10155

// LICENSES
#define DIALOG_LICENSE_BUY 10040

//LSMD MDC
#define FMDC 10156

// Colors/Misc.
#define MAX_STRING 255
#define CHECKPOINT_NONE 0
#define CHECKPOINT_HOME 12
#define CHECKPOINT_RETURNTRUCK 97652
#define COLOR_DARKRED 0xAA3333FF
#define COLOR_GOLD 	0xF6C861FF
#define COLOR_NICERED 0xFF0000FF
#define COLOR_TWGRAY 0x808080FF
#define COLOR_TWOLIVE 0x808000FF
#define COLOR_TWPURPLE 0x800080FF
#define COLOR_TWTAN 0xD2B48CFF
#define COLOR_TWAQUA 0x00FFFF00
#define COLOR_TWORANGE 0xFF8C00FF
#define COLOR_TWAZURE 0x007FFFFF
#define COLOR_NICEGREEN 0x00FF00FF
#define COLOR_LIGHTNEUTRALBLUE 0xabcdefFF
#define COLOR_TWGREEN 0x008000FF
#define COLOR_TWBLUE 0x0000FFFF
#define COLOR_TWBLACK 0x000000FF
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFFF
#define COLOR_GREEN 0x33AA33FF
#define COLOR_RED 0xFF0000FF
#define COLOR_REALRED 0xFF0606FF
#define COLOR_LIGHTGREEN 0x9ACD3200
#define COLOR_YELLOW 0xFFFF00FF
#define COLOR_BLUE 0x1229FAFF
#define COLOR_VIP 0xC93CCE00
#define COLOR_ARWIN 0x00B6FFFF
#define COLOR_ORANGE 0xFFA500FF
#define COLOR_LIGHTBLUE 0xADD8E6FF
#define COLOR_YELLOW2 0xE6FF00FF
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAFF
#define COLOR_PINK 0xFF66FFAA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_BLACK 0x000000AA
#define TEAM_SFPD   0x6699FF00
#define TEAM_SASD   0xCC993300
#define COLOR_NEWS 0xFFA50000
#define COLOR_OOC 0xE0FFFFAA
#define COLOR_NG 0x9ACD3200
#define COLOR_TR 0x56B9B900
#define COLOR_TR2 0x11DCDC00
#define COLOR_FBI 0x8D8DFFFF
#define COL_FORUM 0x808000C8
#define PUBLICRADIO_COLOR 0x6DFB6DFF
#define TEAM_CYAN 1
#define TEAM_BLUE 2
#define TEAM_GREEN 3
#define FIND_COLOR 0xB90000FF
// #define COLOR_PMC 0xC8B56000
#define COLOR_PMC 0x930A16FF
#define TEAM_GREEN_COLOR 0xFFFFFFAA
#define TEAM_LSSD_COLOR 0x33AA3300
#define TEAM_JOB_COLOR 0xFFB6C1AA
#define TEAM_HIT_COLOR 0xFFFFFF00
#define TEAM_BLUE_COLOR 0x2641FE00
#define TEAM_FBI_COLOR 0x8D8DFF00
#define TEAM_NEWS_COLOR 0x049C7100
#define TEAM_LSMD_COLOR 0xFF828200
#define TEAM_TAXI_COLOR 0xF2FF0000
#define COP_GREEN_COLOR 0x33AA33AA
#define COLOR_ADD 0x63FF60AA
#define TEAM_GROVE_COLOR 0x00D900C8
#define TEAM_VAGOS_COLOR 0xFFC801C8
#define TEAM_BALLAS_COLOR 0xD900D3C8
#define TEAM_AZTECAS_COLOR 0x01FCFFC8
#define TEAM_CYAN_COLOR 0xFF8282AA
#define TEAM_MED_COLOR 0xFF828200
#define TEAM_ORANGE_COLOR 0xFF800000
#define TEAM_COR_COLOR 0x39393900
#define TEAM_BAR_COLOR 0x00D90000
#define TEAM_TAT_COLOR 0xBDCB9200
#define TEAM_CUN_COLOR 0xD900D300
#define TEAM_STR_COLOR 0x01FCFF00
#define TEAM_ADMIN_COLOR 0x00808000
#define COLOR_INVIS 0xAFAFAF00
#define COLOR_SPEC 0xBFC0C200
#define DEPTRADIO 0xFFD7004A
#define RADIO 0x8D8DFFFF
#define FRADIO 0xAA3333AA
#define COLOR_NEWBIE 0x7DAEFFFF
#define COLOR_COMBINEDCHAT 0x6CEFF0FF
#define COLOR_REPORT 0xFFFF91FF
#define COLOR_SHOP 0xE7E784FF
#define ResetMoneyBar AC_BS_ResetPlayerMoney
#define UpdateMoneyBar AC_BS_GivePlayerMoney
//GPS
#define GPSFile ("Positions.db") //The file where everything should be saved!
#define MAX_LOCATIONS 50 //How many locations you want to have!
#define UseTd //Comment This if you dont want to use the TextDraw! (To comment put // at the begining of this line)
//ACTOR SYSTEM -ARIWIWIN14
#define SEM(%0,%1) SendClientMessage(%0,0xBFC0C200,%1) 					// SEM = Send Error Message by 	Myself
#define Loop(%0,%1) for(new %0 = 0; %0 < %1; %0++)                      // Loop                     by 	Myself
#define IsNull(%1) ((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))    // IsNull macro 			by 	Y_Less
#define strToLower(%0) \
    for(new i; %0[i] != EOS; ++i) \
        %0[i] = ('A' <= %0[i] <= 'Z') ? (%0[i] += 'a' - 'A') : (%0[i])  // strToLower 				by 	RyDeR`
#define RGBAToInt(%0,%1,%2,%3) \
	((16777216 * (%0)) + (65536 * (%1)) + (256 * (%2)) + (%3))          // RGBAToInt 				by 	RyDeR`
	#define MAX_EDITING_ACTOR    (100)

new Iterator:DynamicActors<MAX_EDITING_ACTOR>;
new DynamicActor[MAX_EDITING_ACTOR];
new Text3D:DynamicActorLabel[MAX_EDITING_ACTOR];
//ANTI AIMBOT -ARIWIWIN14
new AimbotWarnings[MAX_PLAYERS];
//Cammode -ARIWIWIN14
new Cammode[MAX_PLAYERS];
//STROBE -ARIWIWIN14
new Strobe[MAX_VEHICLES];
new StrobeObject[MAX_VEHICLES];
//SideJob Sweeper - ARIWIWIN14
new KerjaSweeper[MAX_PLAYERS];
new SweeperSteps[MAX_PLAYERS][4];
//Sidejob Bus - ARIWIWIN14
new KerjaBus[MAX_PLAYERS];
new BusSteps[MAX_PLAYERS][4];
//KULI BANGUNAN - ARIWIWIN14
new SedangKuli[MAX_PLAYERS];
//=============speedometer by Rifky ==============================
new Float:VehicleFuel[MAX_VEHICLES];
//Lumberjack by AriWiwin14 - Special 2Years Anniversary
new kgcutt[MAX_PLAYERS];
new cuttrands;
new timecutt[MAX_PLAYERS];
new Text3D:Wood3DText;
forward TimeDrov(playerid);
new randomcutt[][1] =
{
    {25},{27},{29},{28},{33},{30},{35},{32},{37},{41},{36},
	{42},{47},{52},{39},{40},{53},{54},{43},{44},{45}
};
//KNIFE
forward Damagee(playerid);
new infect[MAX_PLAYERS];
new damagee[MAX_PLAYERS];
new timerr;
//FARMER -ARIWIWIN14
#define MAX_PLANT 1000
#define LIBRARY "BOMBER"
#define ANIMATION "BOM_Plant_Crouch_In"
new Farmer_Area;
//HAULING - ARIWIN14
#define HAULING 5555
//IMPOUND ARWIN14
#define MPSPAYTICKETS 5556
//HOUSEGARAGE ARWIN14
#define TAKEVEH 5557
//SIDEJOB ARWIN14
#define SWEEPERJOB 5558
#define BUSJOB 5559
//INSURANCES
#define CLAIMINSURANCE 5560
//WORKSHOP ARWIN14
#define WORKSHOP 5561
//WEAPON SKILL ARWIN14
#define TRAININGSKILL 5600
//BUSINESS ARWIN14
#define BUSINESESS 5700
//GYM ARWIN14
enum GYMObjectInfo
{
	Float:GYMOBJPos[6],
	Text3D:GYMOBJText,
	GYMOBJType,
	GYMOBJObject,
	GYMOBJUsed,
	GYMOBJCondition
};
new GYMInfo[MAX_GYMOBJECT][GYMObjectInfo];
new gymEdit[MAX_PLAYERS]; //1=object posisi
new gymEditID[MAX_PLAYERS];
new Float:gymObjectPos[MAX_PLAYERS][3];
new Float:gymObjectRot[MAX_PLAYERS][3];
//ENUM PLANT
enum plantInfo
{
	plantTime,
	plantType,
	Float:plantPos[3],
	plantObject
}

new PlantInfo[MAX_PLANT][plantInfo];

forward stonedtimer(playerid);
public stonedtimer(playerid)
{
	SetPlayerWeather(playerid,0);
	return 1;
}

//FLASH LIGHT LIKE ELM - Coded by AriWiwin14
#define flashtime 115 //milliseconds for the flash, larger number = slower flash
new Flash[MAX_VEHICLES];
new FlashTime[MAX_VEHICLES];

//=================================//
//  	VIP DEFINE				  //
//================================//
//Vtoys
#define VSPA 12004
// System Neon
#pragma tabsize 0
#define neondialog 8131

// strcpy - Simon / Y_LESS
#define SendFormattedMessage(%0,%1,%2) do{new _str[128]; format(_str,128,%2); SendClientMessageEx(%0,%1,_str);}while(FALSE)

/* Forwards (TODO: Convert to Naked or Move right above function.) */
forward SetupPlayerForClassSelection(playerid);
forward ModCar(playerid);
forward SetCamBack(playerid);
forward simpenmaxlimit();
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num);
forward SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi);
forward SetPlayerCriminal(playerid,declare,reason[]);
forward SetPlayerFree(playerid,declare,reason[]);
forward SetPlayerWeapons(playerid);
forward SetPlayerWeaponsEx(playerid);
forward splits(const strsrc[], strdest[][], delimiter);
forward OnPlayerLogin(playerid, password[]);
forward DoGMX();
forward DisplayActionMessage(playerid);
forward SafeLogin(playerid);
forward SafeLoadObjects(playerid);
forward OnPlayerStatsUpdate(playerid);
forward OnPlayerRegister(playerid, password[]);
forward OnPlayerOfflineLogin(playername[]);
forward OnPlayerOfflineSave(playername[]);
forward BroadCast(color,String[]);
forward OOCOff(color,String[]);
forward OOCNews(color,String[]);
forward SendJobMessage(job, color, String[]);
forward SendFamilyMessage(family, color, String[]);
forward SendNewFamilyMessage(family, color, String[]);
forward RadioBroadCast(playerid, color, String[]);
forward SendDepartmentMessage(member, color, String[]);
forward SendRadioMessage(team, color, String[]);
forward SendRadioOOCMessage(member, color, String[]);
forward SendAdminMessage(color, String[]);
forward AddCar(carcoords);
forward ClearHouse(houseid);
forward ClearWS(wsid);
forward ClearFarm(farmid);
forward ClearGas(gasid);
forward ClearFamily(family);
forward ClearMarriage(playerid);
forward ClearPaper(paper);
forward ClearCrime(playerid);
forward ClearReports();
forward CarInit();
forward CarTow(carid);
forward CarRespawn(carid);
forward SyncTime();
forward SyncMinTime();
forward SyncPlayerTime(playerid);
forward Checkprop();
forward PayDay();
forward ini_GetKey( line[] );
forward ini_GetValue( line[] );
forward PlayerPlayMusic(playerid);
forward StopMusic();
forward PlayerFixRadio(playerid);
forward PlayerFixRadio2();
//forward SetCamBack(playerid);
forward FixHour(hour);
forward GetColorCode(clr[]);
forward DoorOpen(playerid);
forward DoorClose(playerid);
forward ShowPlayerBeaconForCops(playerid);
forward HidePlayerBeaconForCops(playerid);
forward ShowPlayerBeaconForMedics(playerid);
forward HidePlayerBeaconForMedics(playerid);
forward AddReportToken(playerid);
forward SeeReportToken(playerid,name[],day,month,year);
forward SendEMSQueue(playerid,type);
forward KillEMSQueue(playerid);
forward MoveEMS(playerid);
forward OAddFlag(name[],adminid,reason[]);
forward ORemoveFlag(name[]);
forward AddFlag(playerid,adminid,reason[]);
forward RemoveFlag(playerid);
forward OAddWarrant(name[],judgeid,crime[]);
forward ORemoveWarrant(name[]);
forward AddWarrant(playerid,judgeid,crime[]);
forward RemoveWarrant(playerid);
forward firstaid5(playerid);
forward firstaidexpire(playerid);
forward rccam(playerid);
forward cameraexpire(playerid);
forward CloseCourtGate1();
forward CloseCourtGate2();
forward CloseWestLobby();
forward CloseEastLobby();
forward CloseBlastDoor();
forward CloseBlastDoor2();
forward CloseBlastDoor3();
forward CloseCage();
forward CloseEntranceDoor();
forward CloseLocker();
forward CloseCCTV();
forward CloseChief();
forward CloseChiefFbi();
forward CloseSASD1();
forward CloseSASD2();
forward CloseSASD3();
forward CloseSASD4();
forward CloseSASD5();
forward CloseSANewsStudio();
forward CloseSANewsPrivate();
forward CloseSANewsOffice();
forward CloseElevatorDoors(floor);
//------------------------------------------------------------------------------------------------------

//---------------------------------------[Random Messages System]-----------------------//
new Text3D:PlayerADO[MAX_PLAYERS];//ADO
//tambahan
#define SCM SendClientMessage
#define HOUSES_INT 6000
new Siren[MAX_VEHICLES];
new SirenObject[MAX_VEHICLES];
new togglepm[MAX_PLAYERS];
new togaccent[MAX_PLAYERS];
new advertise[MAX_PLAYERS][128];
//AIMWARNINGS
static ids[MAX_PLAYERS];
//VIP Advertisement
new adTick[MAX_PLAYERS];
//ASK TIMER
new askTick[MAX_PLAYERS];
// Textdraw Global Variables
new Text:GPS[MAX_PLAYERS];

new vehicleMods[212][MAX_MODS][4];

new textdrawscount;

new InsideShamal[MAX_PLAYERS];
new InsideMainMenu[MAX_PLAYERS];
new InsideTut[MAX_PLAYERS];

new courtgates[2];
new VehicleStatus[MAX_VEHICLES char] = 0; // 0 == none, 1 == vehicle dead about to respawn
new RefuelingVehicle[MAX_PLAYERS];
new RefuelingVehiclePrice[MAX_PLAYERS];
new RefuelingVehicleTimer[MAX_PLAYERS];
new CounterRefuel[MAX_PLAYERS] = 0;
new LimitFuel[MAX_PLAYERS] = 0;
new Bar:FuelBar[MAX_PLAYERS] = INVALID_BAR_ID;

new audiohandle[MAX_PLAYERS][100];
new audiohandleglobal = 0;

new TextSpamTimes[MAX_PLAYERS];
new TextSpamUnmute[MAX_PLAYERS];
new CommandSpamTimes[MAX_PLAYERS];
new CommandSpamUnmute[MAX_PLAYERS];

new IsPlayerSteppingInVehicle[MAX_PLAYERS] = -1;
new scoreMusic[MAX_PLAYERS];
new stationidp[MAX_PLAYERS];
new stationidv[MAX_VEHICLES];
new courtjail[MAX_PLAYERS];

new TotalLogin, TotalConnect, TotalAutoBan, TotalRegister,PlayersConnected,MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,MPMinute,PlayerCars,TotalUptime;
new Float:StopaniFloats[MAX_PLAYERS][3];
new HHcheckUsed = 0;
new Float:HHcheckFloats[MAX_PLAYERS][6];
new HHcheckInt[MAX_PLAYERS];
new HHcheckVW[MAX_PLAYERS];
new Float:EventFloats[MAX_PLAYERS][6];
new EventLastInt[MAX_PLAYERS]; new EventLastVW[MAX_PLAYERS];
new Float:BroadcastFloats[MAX_PLAYERS][6];
new BroadcastLastVW[MAX_PLAYERS];
new BroadcastLastInt[MAX_PLAYERS];
new GiftAllowed;
new SpecTimer;
new gTime;
new OrderAssignedTo[MAX_PLAYERS];
new eastin, eastout, lockerin, lockerout, cctvin, cctvout, elevator, roofkey, garagekey, chiefout, chiefin, westin, westout, fbichiefin, fbichiefout, fbichief1, fbichief2;
new eastlobby1, eastlobby2, westlobby1, westlobby2, cctv1, cctv2, locker1, locker2, chief1, chief2, sasd1A, sasd2A, sasd3A, sasd4A, sasd5A, sasd1B, sasd2B, sasd3B, sasd4B, sasd5B;
new SANewsStudio, SANewsStudioA, SANewsStudioB;
new SANewsLock = 1;
new SANewsPrivate, SANewsPrivateOPP, SANewsPrivateA, SANewsPrivateB;
new SANewsOffice, SANewsOfficeA, SANewsOfficeB;
new LAElevatorDoorLeft[20];
new LAElevatorDoorRight[20];
new LAElevatorDoorStatus;
new LAElevator;
new LAElevatorFloor;
new LAElevatorButton[20];
new LAElevatorFloorPick;
new LAElevatorMoving;
new LAElevatorFloorName[20][24];
new LAElevatorFloorPass[20][24];
new Text3D:SANews3DText;
new gBug[MAX_PLAYERS];
//new Frozen[MAX_PLAYERS];
new gRadio[MAX_PLAYERS];
new pcRadio[MAX_PLAYERS];
new OnKTP[MAX_PLAYERS];
new pTerluka[MAX_PLAYERS];
new NOPTrigger[MAX_PLAYERS];
new gBugSIU[MAX_PLAYERS];
new pTazer[MAX_PLAYERS];
new pTazerReplace[MAX_PLAYERS];
new TazerTimeout[MAX_PLAYERS];
new pCurrentWeapon[MAX_PLAYERS];
//new Float: explodehealth; new explodeveh;
new ReleasingMenu[MAX_PLAYERS];
new ListItemReleaseId[MAX_PLAYERS][50];
new Barricade[MAX_BARRICADES];
new GiveKeysTo[MAX_PLAYERS];
new ListItemTrackId[MAX_PLAYERS][50];
new nextteam;
new SANGate;
new SANGateStatus;
new LSPDGate;
new LSPDGate1;
new LSPDGate2;
new LSPDGateStatus;
new LSPDGate2Status;
new MatsHolding[MAX_PLAYERS];
new MatDeliver[MAX_PLAYERS];
new MatDeliver2[MAX_PLAYERS];
new NewbieTimer[MAX_PLAYERS];
new HelperTimer[MAX_PLAYERS];
new HlKickTimer[MAX_PLAYERS];
new VIPTimer[MAX_PLAYERS];
new JustReported[MAX_PLAYERS];
new UsedWeed[MAX_PLAYERS];
new UsedCrack[MAX_PLAYERS];
new Backup[MAX_PLAYERS];
new Security = 0;
new CreatedCars[100];
new StockIkan = 500, EquipmentStock = 1000, stockcomp = 500, stockplant = 500, StockDPU = 100, stockpot = 100, stockcrack = 100, IDPlate = 0, cutt = 500;
new Tax = 0;
new TaxValue = 0;
new Jackpot = 0;
new Float:Positions[14][3];
new Medics = 0;
new MedicCall = 999;
new MedicCallTime[MAX_PLAYERS];
new MedicAccepted[MAX_PLAYERS];
new Mechanics = 0;
new shutdown = 0;
new MechanicCall = 999;
new MechanicCallTime[MAX_PLAYERS];
new EMSCallTime[MAX_PLAYERS];
new EMSAccepted[MAX_PLAYERS];
new Text3D:Camera3D[MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new playerConnectedS[MAX_PLAYERS];
new playerSeconds[MAX_PLAYERS];
new playerTabbed[MAX_PLAYERS];
new playerTabbedTime[MAX_PLAYERS];
new playerLastTyped[MAX_PLAYERS];
new SchoolSpawn[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new Spectating[MAX_PLAYERS];
new DivorceOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
new SpawnChange[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new PlayerTazeTime[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindingPlayer[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
new CalledCops[MAX_PLAYERS];
new CopsCallTime[MAX_PLAYERS];
new CalledMedics[MAX_PLAYERS];
new MedicsCallTime[MAX_PLAYERS];
new OrderReady[MAX_PLAYERS];
new ConnectedToPC[MAX_PLAYERS];
new MedicTime[MAX_PLAYERS];
new NeedMedicTime[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new PlacedNews[MAX_PLAYERS];
new broadcasting = 0;
new cameraangle = 0;
new Text3D:camera;
new viewers = 0;
new WatchingTV[MAX_PLAYERS];
new ChosenSkin[MAX_PLAYERS];
new GettingJob[MAX_PLAYERS];
new GettingJob2[MAX_PLAYERS];
new GettingIllegalJob[MAX_PLAYERS];
new CurrentMoney[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new STDPlayer[MAX_PLAYERS];
new SprayOffer[MAX_PLAYERS];
new SprayPrice[MAX_PLAYERS];
new SprayPaint[MAX_PLAYERS];
new NeonOffer[MAX_PLAYERS];
new NeonID[MAX_PLAYERS];
new GunOffer[MAX_PLAYERS];
new GunId[MAX_PLAYERS];
new GunMats[MAX_PLAYERS];
new GunAmmoAmount[MAX_PLAYERS];
new GunPrice[MAX_PLAYERS];
new hInviteOffer[MAX_PLAYERS];
new hInviteHouse[MAX_PLAYERS];
new hInviteSlot[MAX_PLAYERS];
new InviteOffer[MAX_PLAYERS];
new InviteFaction[MAX_PLAYERS];
new InviteMech[MAX_PLAYERS];
new InviteFarm[MAX_PLAYERS];
new InviteFamily[MAX_PLAYERS];
new MatsOffer[MAX_PLAYERS];
new MatsPrice[MAX_PLAYERS];
new MatsAmount[MAX_PLAYERS];
new PotOffer[MAX_PLAYERS];
new PotPrice[MAX_PLAYERS];
new PotGram[MAX_PLAYERS];
new CrackOffer[MAX_PLAYERS];
new CrackPrice[MAX_PLAYERS];
new CrackGram[MAX_PLAYERS];
new DrinkOffer[MAX_PLAYERS];
new VehicleOffer[MAX_PLAYERS];
new VehicleId[MAX_PLAYERS];
new VehiclePrice[MAX_PLAYERS];
new HouseOffer[MAX_PLAYERS];
new WsOffer[MAX_PLAYERS];
new GSOffer[MAX_PLAYERS];
new FarmOffer[MAX_PLAYERS];
new FriskOffer[MAX_PLAYERS];
new InspectOffer[MAX_PLAYERS];
new House[MAX_PLAYERS];
new HousePrice[MAX_PLAYERS];
new WsPrice[MAX_PLAYERS];
new farmPrice[MAX_PLAYERS];
new gsPrice[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new WantedPoints[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new gPlayerCheckpointStatus[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS char];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gActivePlayers[MAX_PLAYERS];
new gLastCar[MAX_PLAYERS];
new gOoc[MAX_PLAYERS];
/* Spray system*/
new warna2[MAX_PLAYERS], warna1[MAX_PLAYERS];

new idveh[MAX_PLAYERS]; //Var for vehicle for mechanic service
new idveh2[MAX_PLAYERS];
/*new Stretcher[MAX_PLAYERS] = 0;
new UsingStretcher[MAX_PLAYERS] = 0;*/
new gNews[MAX_PLAYERS];
new gNewbie[MAX_PLAYERS];
new gHelp[MAX_PLAYERS];
new gFam[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new GettingSpectated[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new StartTime[MAX_PLAYERS];
new HireCar[MAX_PLAYERS];
new SafeTime[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new advisorchat[MAX_PLAYERS];
new JetPack[MAX_PLAYERS];
new Fixr[MAX_PLAYERS];
new MatsWarn[MAX_PLAYERS][MAX_PLAYERS];
//new TaxiWarn[MAX_PLAYERS][MAX_PLAYERS];
new CrackWarn[MAX_PLAYERS][MAX_PLAYERS];
new PotWarn[MAX_PLAYERS][MAX_PLAYERS];
new slotselection[MAX_PLAYERS];
new vslotselection[MAX_PLAYERS];
new SFPDVehicles[53];
//new Rentbike[5];
new SASDVehicles[95];
new SanNewsVehicles[5];
new EPVehicles[4];
new WPVehicles[11];
new GovVehicles[25];

new Locator[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new RingTone[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new gPlayerAccount[MAX_PLAYERS];
new gLastDriver[MAX_VEHICLES];
new LockStatus[MAX_VEHICLES];
new arr_Engine[MAX_VEHICLES char];
new arr_Towing[MAX_PLAYERS];

new noooc = 1;
new norefund = 1;
new objstore[128];
new cbjstore[128];
new GlobalMOTD[128];
new AdminMOTD[128];
new CAMOTD[128];
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new numplayers = 0;
new realtime = 1;
new wtime = 15;
new deathcost = 1000;
new callcost[MAX_PLAYERS];
//new timeshift = -1;
new shifthour;
new bool:swimming[MAX_PLAYERS];
new MPSVehicles[ 15 ];
new LSPDVehicles[ 69 ];
new BUS[3], BusPlate[3];
new SWEEPER[3], SWEEPERPlate[3];
new Cruiser[10], Lincoln[10], Kopassus[10], LSMDVehicles[ 39 ];
new blastdoor[4];
new cage;
new entrancedoor;
new levelexp = 3;

new cchargetime = 1;
new CIV[] = {7,19,20,23,73,101,122};
new Float:TelePos[MAX_PLAYERS][6];
new lspddoor1;
new lspddoor2;
new Seatbelt[MAX_PLAYERS];
new bool:AdminReadPm[MAX_PLAYERS];

new OneSeatVehicles[38] =
{
    425, 430, 432, 441, 446, 448, 452, 453,
	454, 464, 465, 472, 473, 476, 481, 484,
	485, 486, 493, 501, 509, 510, 519, 520,
	530, 531, 532, 539, 553, 564, 568, 571,
	572, 574, 583, 592, 594, 595
};

stock PreloadAnims(playerid) {
	ApplyAnimation(playerid, "AIRPORT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Attractors", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BASEBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BD_FIRE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BEACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "benchpress", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BF_injection", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKELEAP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEV", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKE_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BMX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BSKTBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUDDY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAMERA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR_CHAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CASINO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHAINSAW", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHOPPA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CLOTHES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COLT45", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_DVBYZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRIB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DAM_JUMP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DANCING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DEALER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DILDO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DODGE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DOZER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DRIVEBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_B", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_C", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_D", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_E", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FLAME", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Flowers", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Freeweights", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GANGS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHANDS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHETTO_DB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "goggles", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAFFITI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAVEYARD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRENADE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GYMNASIUM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HAIRCUTS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HEIST9", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_OFFICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "JST_BUISNESS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KART", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KISSING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KNIFE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN1", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN3", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LOWRIDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_CHASE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_END", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MISC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MUSCULAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "NEVADA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ON_LOOKERS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "OTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARACHUTE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PAULNMAC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ped", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYER_DVBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYIDLES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POLICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PYTHON", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RAPPING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIFLE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIOT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ROB_BANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RUSTLER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RYDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SCRATCHING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHAMAL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOTGUN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SILENCED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SKATE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SMOKING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SNIPER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SPRAYCAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "STRIP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SUNBATHE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWIM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWORD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TATTOOS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TEC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRAIN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRUCK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "UZI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VENDING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VORTEX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WAYFARER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WEAPONS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WUZI", "null", 0.0, 0, 0, 0, 0, 0);
	return 1;
}

stock RemoveUnderScore(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if(name[i] == '_') name[i] = ' ';
    }
    return name;
}

stock UpdateSANewsBroadcast()
{
    new String[42];
	if(broadcasting == 0)
	{
	    format(String, sizeof(String), "Currently: Not Broadcasting\nViewers: %d", viewers);
	}
	else
	{
	    format(String, sizeof(String), "Currently: LIVE\nViewers: %d", viewers);
	}
	UpdateDynamic3DTextLabelText(SANews3DText, COLOR_LIGHTBLUE, String);
}

stock SetPlayerHigh(playerid, toggle) // 0 = Not high, 1 = High
{
	SetPVarInt(playerid, "IsHigh", toggle);
	if(toggle)
	{
		SetPlayerWeather(playerid, -66);
		SetPlayerTime(playerid, 12, 0);
		SetPlayerDrunkLevel(playerid, 50000);
	}
	else
	{
	    new index = random(sizeof(gWeather));
	    SetPlayerWeather(playerid, gWeather[index]);
		SetPlayerTime(playerid, gTime, 0);

		SetPlayerDrunkLevel(playerid, 0);
	}
	return 1;
}
stock FindFreeAttachedObjectSlot(playerid)
{
	new index;
 	while (index < MAX_PLAYER_ATTACHED_OBJECTS && IsPlayerAttachedObjectSlotUsed(playerid, index))
	{
		index++;
	}
	if (index == MAX_PLAYER_ATTACHED_OBJECTS) return -1;
	return index;
}

enum Spikes
{
	Float:sX,
	Float:sY,
	Float:sZ,
	sObjectID,
	sDeployedBy[MAX_PLAYER_NAME],
	sDeployedAt[MAX_ZONE_NAME]
}

new SpikeStrips[10][Spikes];

enum reportinfo
{
	HasBeenUsed,
	Report[128],
	ReportFrom,
	CheckingReport,
 	TimeToExpire,
	BeingUsed,
	ReportExpireTimer,
	ReplyTimerr
}

new Reports[MAX_REPORTS][reportinfo];
new ListItemReportId[MAX_PLAYERS][40];
new CancelReport[MAX_PLAYERS];

Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

new Music[MAX_PLAYERS];
new Float:LSPDJail[3][3] = {
{1827.80004883,-1729.60,5202.79980469},
{1831.00000000,-1729.60,5202.79980469},
{1834.19995117,-1729.60,5202.79980469}
};

new Float:OOCPrisonSpawns[4][4] = {
{-27.5685,2321.0818,24.3034},
{-18.2713,2322.5923,24.3034},
{-10.9105,2328.4629,24.3034},
{-9.7925,2337.4878,24.3034}
};

enum EventKernelEnum
{
    EventType,
	EventStatus,
	EventInfo[128],
	Float: EventHealth,
	Float: EventArmor,
	Float: EventPositionX,
	Float: EventPositionY,
	Float: EventPositionZ,
	EventInterior,
	EventWorld,
	EventWeapons[ 5 ],
	EventTeamColor[2],
    EventTeamSkin[2],
    EventLimit,
    EventPlayers,
    EventRequest,
    EventStartRequest,
    EventCreator,
    VipOnly,
    Float: EventTeamPosX1,
    Float: EventTeamPosY1,
    Float: EventTeamPosZ1,
    Float: EventTeamPosX2,
    Float: EventTeamPosY2,
    Float: EventTeamPosZ2
}

new EventKernel[ EventKernelEnum ];

enum MainZone
{
	Zone_Name[28],
	Float:Zone_Area[6]
};

static const SanAndreasZones[][MainZone] = {

	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial",         {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"Four Dragons Casino",         {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Citys Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

enum dData
{
    DropGunAmmount[2],
    Float:DropGunPosX,
    Float:DropGunPosY,
    Float:DropGunPosZ,
    DropGunVWorld,
    DropGunInterior,
};
new DropInfo[MAX_DROP_ITEMS][dData];
new DropObject[MAX_DROP_ITEMS];
new GunObjectIDs[200] ={

   1575,  331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325, 326, 342, 343, 344, -1,  -1 , -1 ,
   346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
   368, 369, 1575
};

enum fInfo
{
	FamilyTaken,
	FamilyName[42],
	FamilyMOTD[65],
	FamilyColor,
	FamilyTurfTokens,
	FamilyLeader[MAX_PLAYER_NAME],
	FamilyMembers,
	Float:FamilySpawn[4],
	FamilyInterior,
	FamilyCash,
	FamilyBank,
	FamilyMats,
	FamilyPot,
	FamilyCrack,
	Float:FamilySafe[3],
	FamilyUSafe,
	FamilyRank1[20],
	FamilyRank2[20],
	FamilyRank3[20],
	FamilyRank4[20],
	FamilyRank5[20],
	FamilyRank6[20],
	FamilyPickup,
	FamilyMaxSkins,
	FamilySkins[8],
	Float: FamilyEntrance[4],
	Float: FamilyExit[4],
	FamilyEntrancePickup,
	FamilyExitPickup,
	Text3D:FamilyEntranceText,
	Text3D:FamilyExitText,
	FamilyCustomMap,
	FamilyVirtualWorld,
	FamilyResetSpawns,
	FamilyGuns[10],
	FamilyGunsAmmo[10],
};
new FamilyInfo[MAX_FAMILY][fInfo];

enum fvInfo
{
    fvId,
	fvModelId,
	Float: fvSpawnx,
	Float: fvSpawny,
	Float: fvSpawnz,
	Float: fvSpawna,
	Float: fvSpawnxtmp,
	Float: fvSpawnytmp,
	Float: fvSpawnztmp,
	Float: fvSpawnatmp,
	fvLock,
	fvLocked,
	fvPaintJob,
	fvColor1,
	fvColor2,
	fvMods[MAX_MODS],
	fvPrice,
	fvImpounded,
	Float: fvFuel,
};

new FamilyVehicleInfo[MAX_FAMILY][MAX_GANG_VEHICLES][fvInfo];

enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sVW,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

enum eCars
{
	model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle,
};

enum hNews
{
	hTaken1,
	hTaken2,
	hTaken3,
	hTaken4,
	hTaken5,
	hTaken6,
	hTaken7,
	hTaken8,
	hTaken9,
	hTaken10,
	hTaken11,
	hTaken12,
	hTaken13,
	hTaken14,
	hTaken15,
	hTaken16,
	hTaken17,
	hTaken18,
	hTaken19,
	hTaken20,
	hTaken21,
	hAdd1[128],
	hAdd2[128],
	hAdd3[128],
	hAdd4[128],
	hAdd5[128],
	hAdd6[128],
	hAdd7[128],
	hAdd8[128],
	hAdd9[128],
	hAdd10[128],
	hAdd11[128],
	hAdd12[128],
	hAdd13[128],
	hAdd14[128],
	hAdd15[128],
	hAdd16[128],
	hAdd17[128],
	hAdd18[128],
	hAdd19[128],
	hAdd20[128],
	hAdd21[128],
	hContact1[128],
	hContact2[128],
	hContact3[128],
	hContact4[128],
	hContact5[128],
	hContact6[128],
	hContact7[128],
	hContact8[128],
	hContact9[128],
	hContact10[128],
	hContact11[128],
	hContact12[128],
	hContact13[128],
	hContact14[128],
	hContact15[128],
	hContact16[128],
	hContact17[128],
	hContact18[128],
	hContact19[128],
	hContact20[128],
	hContact21[128],
};
new News[hNews];

enum mInfo
{
	Float:mPosX,
	Float:mPosY,
	Float:mPosZ,
	Text3D:mText,
	mPickup
};
new Mod[MAX_MOD][mInfo];

enum bbInfo
{
	Float:bbPos[3],
	Text3D:bbText,
	bbPickup
};
new BuyPoint[MAX_BUYPOINT][bbInfo];

/////////////////////////FARM OWNERSHIP Coded by AriWiwin14////////////////////////////
enum farmInfo
{
	Text3D:FarmFixText,
	Text3D:FarmFixRep,
	FarmSafeMoney,
	Text3D:FarmRepText,
	FarmRepPickup,
	FarmName[32],
	FarmPapanMT,
	Float:FarmPosX,
	Float:FarmPosY,
	Float:FarmPosZ,
	FarmStatus,
	FarmOwner[32],
	FarmPrice,
	FarmPlant,
	Text3D:FarmText,
	Float:FarmRepX,
	Float:FarmRepY,
	Float:FarmRepZ,
	FarmPickup
};
new FarmInfo[MAX_FARM][farmInfo];

//WORKSHOP BY ArWin14
enum wsInfo
{
	wsPapan,
	wsPapanMT,
	Float:wsPapanX,
	Float:wsPapanY,
	Float:wsPapanZ,
	Float:wsPapanRotX,
	Float:wsPapanRotY,
	Float:wsPapanRotZ,
	wsPapanText[255],
	wsGateID,
	wsGate,
	Float:wsGateOX,
	Float:wsGateOY,
	Float:wsGateOZ,
	Float:wsGateCX,
	Float:wsGateCY,
	Float:wsGateCZ,
	Float:wsGateORX,
	Float:wsGateORY,
	Float:wsGateORZ,
	Float:wsGateCRX,
	Float:wsGateCRY,
	Float:wsGateCRZ,
	wsGateID2,
	wsGate2,
	Float:wsGateOX2,
	Float:wsGateOY2,
	Float:wsGateOZ2,
	Float:wsGateCX2,
	Float:wsGateCY2,
	Float:wsGateCZ2,
	Float:wsGateORX2,
	Float:wsGateORY2,
	Float:wsGateORZ2,
	Float:wsGateCRX2,
	Float:wsGateCRY2,
	Float:wsGateCRZ2,
	wsComponent,
	wsSafeMoney,
	wsName[255],
	Float:wsPosX,
	Float:wsPosY,
	Float:wsPosZ,
	wsStatus,
	wsOwner[255],
	wsPrice,
	Text3D:wsText,
	wsOwned,
	wsPickup
};
new WsInfo[MAX_WORKSHOP][wsInfo];
new wsEdit[MAX_PLAYERS]; //1=postext,2-3=gate,4-5=gate2
new wsEditID[MAX_PLAYERS];
new Float:wsPos[MAX_PLAYERS][3];
new Float:wsRot[MAX_PLAYERS][3];
new Float:wsGatePos[MAX_PLAYERS][3];
new Float:wsGateRot[MAX_PLAYERS][3];
new Float:wsGatePos2[MAX_PLAYERS][3];
new Float:wsGateRot2[MAX_PLAYERS][3];
//

enum bInfo
{
	bSegel,
	bSegelReason[255],
    bOwned,
	bOwner[255],
	bMessage[255],
	bPickupID,
	bVirWorld,
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevelNeeded,
	bBuyPrice,
 	bTill,
	bLocked,
	bInteriorID,
	bExteriorID,
	bInterior,
	bProducts,
	bType,
	BusinessPrice,
	BusinessPickup,
	Text3D:BusinessLabel,
	bProductPrice[12],
	bProductName1[255],
	bProductName2[255],
	bProductName3[255],
	bProductName4[255],
	bProductName5[255],
	bProductName6[255],
	bProductName7[255],
	bProductName8[255],
	bProductName9[255],
	bProductName10[255],
	bProductName11[255],
	bAlamat[255],
	Float:bPetrolX,
	Float:bPetrolY,
	Float:bPetrolZ,
	bFuelStock,
};


new BizzInfo[MAX_BUSINESSES][bInfo];

 new rotY=0;

 new wheel;//MAINWHEEL
 new gondel1,gondel2,gondel3,gondel4,gondel5,gondel6,gondel7,gondel8;//gondels

enum pInfo
{
	pTanamanAnggur,
	pTanamanBlueberry,
	pTanamanStrawberry,
	pTanamanGandum,
	pTanamanTomat,
	pBibitAnggur,
	pBibitBlueberry,
	pBibitStrawberry,
	pBibitGandum,
	pBibitTomat,
	pKartuPerdana,
	pGate,
	pPainkiller,
	pUsePainkiller,
	pSQLID,
	pAccent[80],
	pAdminOnDutyTime,
	pWS,
	pWSid,
	pFarm,
	pFarmid,
	pTruckerLic,
	pMissionsTime,
	pKTP,
	pKTime,
	pLumberLic,
	pPBiskey,
	pInBizz,
	pMask,
	pMaskID,
	pMaskUse,
	pPBiskey2,
	pPDTime,
	pHunger,
	pBladder,
	pEnergi,
	pCondition,
	pLumber,
    pCacing,
	pPancingan,
	pJerigen,
	pBensin,
	pAdminDuty,
	pKey[129],
	pSweeperT,
	pAdminban[MAX_PLAYER_NAME],
	pNormalName[MAX_PLAYER_NAME],
	pAdminName[MAX_PLAYER_NAME],
	pVIPName[MAX_PLAYER_NAME],
	pDate[7],
	pWSBos,
	pFarmBos,
	pDutyTime,
	pBanReason[128],
	pBanExpired[128],//waktu
	pBanExpired2[128],//tanggal
	pLevel,
	pAdmin,
	pDonateRank,
	pBandage,
	pConnectTime,
	pReg,
	pSex,
	pAge[128],
	pParacetamol,
	pCash,
	pHospital,
	pMuted,
	pPrisonReason[128],
	pJailedBy[MAX_PLAYER_NAME],
	pRMuted,
	pRMutedTotal,
	pRMutedTime,
	pGYMTime,
	pExp,
	pAccount,
	pCrimes,
	pPaintTeam,
	pKills,
	pDeaths,
	pArrested,
	pFitnessTimer,
	pFitnessType,
	pToggedVIPChat,
	pJob,
	pWSJob,
	pFarmJob,
	//kuli bangunan
	pUseSorry,
	pKuli,
	pAutoTextReply[64],
	pPhonePrivacy,
	pJob2,
	pIllegalJob,
	pSnack,
	pMineralWater,
	pADMute,
	pADMuteTotal,
	pHelpMute,
	pPayCheck,
	pJailed,
	pJailTime,
	pWRestricted,
	pMats,
	pPulsa2,
	pPackages,
	pLeader,
	pMember,
	pDivision,
	pFMember,
	pSpeakerPhone,
	pRank,
	pChar,
	pAmoxicilin,
	pMechSkill,
 	pWantedLevel,
	pSMats,
	pPot,
	pCrack,
	pMeth,
	pSDrugs,
	pBadgeNumber,
	pRoadblock,
	pUltrafluenza,
	pTruckingSkill,
	pArmsSkill,
	pSmugSkill,
	Float:pHealth,
	Float:pArmor,
	Float:pSArmor,
	Float:pSHealth,
	Float:pBodyCondition[6],
	pInt,
	pLocal,
	pTeam,
	pModel,
	pPnumber,
	pPhone,
	pFMax,
	pJTime,
	pLumberTime,
	pFTime,
	pHaulingTime,
	pBusTime,
	pBeratIkan,
 	pPhousekey,
	pPhousekey2,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	Float:pPos_r,
	pCarLic,
	pCTime,
	pCarLicID,
	pFlyLic,
	pBoatLic,
	pGunLic,
	pHackWarnTime,
	pHackWarnings,
	pGuns[13],
	pGunsAmmo[13],
	pSilincedSkill,
	pDesertEagleSkill,
	pRifleSkill,
	pShotgunSkill,
	pSpassSkill,
	pMP5Skill,
	pAK47Skill,
	pM4Skill,
	pSniperSkill,
	pTrainingTime,
	pAGuns[13],
	pAGunsAmmo[13],
	pPayDay,
	pCDPlayer,
	pWins,
	pLoses,
	pTut,
	pTutorial,
	pWarns,
	pWarn1[64],
	pWarn2[64],
	pWarn3[64],
	pWarn4[64],
	pWarn5[64],
	pWarn6[64],
	pWarn7[64],
	pWarn8[64],
	pWarn9[64],
	pWarn10[64],
	pWarn11[64],
	pWarn12[64],
	pWarn13[64],
	pWarn14[64],
	pWarn15[64],
	pWarn16[64],
	pWarn17[64],
	pWarn18[64],
	pWarn19[64],
	pWarn20[64],
	pAdjustable,
	pMarried,
	pMarriedTo[128],
	pLock,
	pLockCar,
	pSprunk,
	pCigar,
	pPole,
	pSpraycan,
	pRope,
	pDice,
	pCangkul,
	pDuty,
	pFightStyle,
	pIP[32],
	pBanned,
	pPermaBanned,
	pDisabled,
	pCrates,
	pVW,
	pHouseInvite,
	pRenting,
	pTempVIP,
	pBuddyInvited,
	pVIPInviteDay,
	pVIPLeft,
	pTokens,
	pPaintTokens,
	pDrugsTime,
	pGangWarn,
	pFactionBanned,
	pCSFBanned,
	pMechTime,
	pGiftTime,
	pDutyTimeTotal,
	pTogReports,
	pRadio,
	pRadioFreq,
	pDutyHours,
	pAcceptedHelp,
	pAcceptReport,
	pTrashReport,
	pInsurance,
	pTriageTime,
	pVehicleKeys,
	pVehicleKeysFrom,
	pTicketTime,
	pScrewdriver,
	pTire,
	pFirstaid,
	pRccam,
	pReceiver,
	pGPS,
	pSweep,
	pSweepLeft,
	pBugged,
	pCheckCash,
	pChecks,
	pWarrant[128],
	pJudgeJailTime,
	pJudgeJailType,
	pBeingSentenced,
	pProbationTime,
	pCallsAccepted,
	pPatientsDelivered,
	pLiveBanned,
	pFreezeBank,
	pServiceTime,
 	BeingDraggedBy,
	pVIPJoinDate,
	pVIPExpDate[32],
	pVIPExpTime[32],
	pComponent,
	pBoomBox,
};
new PlayerInfo[MAX_PLAYERS+1][pInfo];
new gh[MAX_PLAYERS];
new musicinternet[MAX_PLAYERS];
new Float:flyPos[MAX_PLAYERS][3];
new pMancing[MAX_PLAYERS];
//new pass[MAX_PLAYERS];
new TakeBox[MAX_PLAYERS];
//new useinternet[MAX_PLAYERS]=0;

//Stock
forward usepainkillerT();
public usepainkillerT()
{
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pUsePainkiller] == 1)
	    {
			PlayerInfo[i][pUsePainkiller] = 0;
			SendClientMessage(i, COLOR_ARWIN, "PAINKILLER: {FFFF00}Painkiller timer was done, you can use Painkiller again with '/usepainkiller'");
		}
	}
	return 1;

}
CarmodDialog(playerid)
{
	ShowPlayerDialog(playerid,1111,DIALOG_STYLE_LIST,"Select things to put in your car","Car Components","Select","Cancel");
	return 1;
}
Lowrider(playerid)
{
    ShowPlayerDialog(playerid,1001,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\n{FF0000}Back","Select","Cancel");
    return 1;
}
RegularCarDialog(playerid)
{
    new closestcar = GetClosestCar(playerid);
    new vehmd = GetVehicleModel(closestcar);
 	new String[1024];
	if(vehmd == 401 || vehmd == 496 || vehmd == 518 || vehmd == 540 || vehmd == 546 || vehmd == 589)
	{String = "Spoiler\nHood\nRoof\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 549)
	{String = "Spoiler\nHood\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 550)
	{String = "Spoiler\nHood\nRoof\nVents\nLights\n{FF0000}Back";}
	else if(vehmd == 585 || vehmd == 603)
	{String = "Spoiler\nRoof\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 410 || vehmd == 436)
	{String = "Spoiler\nRoof\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 439 || vehmd == 458)
	{String = "Spoiler\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 551 || vehmd == 492 || vehmd == 529)
	{String = "Spoiler\nHood\nRoof\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 489 || vehmd == 505)
	{String = "Spoiler\nHood\nRoof\nLights\n{FF0000}Back";}
	else if(vehmd == 516)
	{String = "Spoiler\nHood\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 491 || vehmd == 517)
	{String = "Spoiler\nVents\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 418 || vehmd == 527 || vehmd == 580)
	{String = "Spoiler\nRoof\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 420 || vehmd == 587)
	{String = "Spoiler\nHood\n{FF0000}Back";}
	else if(vehmd == 547)
	{String = "Spoiler\nVents\n{FF0000}Back";}
	else if(vehmd == 415)
	{String = "Spoiler\nSideskirt\n{FF0000}Back";}

    ShowPlayerDialog(playerid,1004,DIALOG_STYLE_LIST,"Choose one",String,"Select","Cancel");
    return 1;
}
Mod0(playerid)//Alien
{
    ShowPlayerDialog(playerid,1511,DIALOG_STYLE_LIST,"Choose one","Right Sideskirt\nLeft Sideskirt\nExhaust\nRoof\nSpoiler\nFront Bumper\nRear Bumper\n{FF0000}Back","Select","Cancle");
    return 1;
}
Mod1(playerid)//X-Flow
{
	ShowPlayerDialog(playerid,1512,DIALOG_STYLE_LIST,"Choose one","Right Sideskirt\nLeft Sideskirt\nExhaust\nRoof\nSpoiler\nFront Bumper\nRear Bumper\n{FF0000}Back","Select","Cancle");
	return 1;
}
Mod2(playerid)//Chrome
{
    new closestcar = GetClosestCar(playerid);
    new vehmd = GetVehicleModel(closestcar);
    new String[1024];
	if(vehmd == 576 || vehmd == 575)
	{String = "Right Sideskirt\nLeft Sideskirt\nExhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}
	else if(vehmd == 535)
	{String = "Front Bullbars\nRear Bullbars\nExhaust\nFront Bumper\nRight Sideskirt\nLeft Sideskirt\n{FF0000}Back";}
	else if(vehmd == 567 || vehmd == 536)
	{String = "Exhaust\nRight Sideskirt\nLeft Sideskirt\nRear Bumper\nFront Bumper\n{FF0000}Back";}
	else if(vehmd == 534)
	{String = "Grill\nBars\nLights\nExhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}

    ShowPlayerDialog(playerid,1513,DIALOG_STYLE_LIST,"Choose one",String,"Select","Cancle");
	return 1;
}
Mod3(playerid)//Slamin
{
    new closestcar = GetClosestCar(playerid);
    new vehmd = GetVehicleModel(closestcar);
    new String[1024];
    if(vehmd == 575 || vehmd == 576)
	{String = "Exhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}
	else if(vehmd == 535)
	{String = "Rear Bullbars\nFront Bullbars\nExhaust\nRight Sideskirt\nLeft Sidedkirt\n{FF0000}Back";}
	else if(vehmd == 567 || vehmd == 536 || vehmd == 534)
	{String = "Front Bumper\nRear Bumper\nExhaust\n{FF0000}Back";}
    ShowPlayerDialog(playerid,1514,DIALOG_STYLE_LIST,"Choose one",String,"Select","Cancle");
    return 1;
}
stock FormatMoney(Float:amount, delimiter[2]=".", comma[2]=",")
{
	#define MAX_MONEY_String 16
	new txt[MAX_MONEY_String];
	format(txt, MAX_MONEY_String, "%d", floatround(amount));
	new l = strlen(txt);
	if (amount < 0) // -
	{
		if (l > 2) strins(txt,delimiter,l-2);
		if (l > 5) strins(txt,comma,l-5);
		if (l > 8) strins(txt,comma,l-8);
	}
	else
	{//1000000
		if (l > 2) strins(txt,delimiter,l-2);
		if (l > 5) strins(txt,comma,l-5);
		if (l > 9) strins(txt,comma,l-8);
	}
//	if (l <= 2) format(txt,sizeof( szStr ),"00,%s",txt);
	return txt;
}
stock IsPlayerInRangeOfVehicle(playerid, Float: radius) {

	new
		Float:Floats[3];

	for( new i = 0; i < MAX_VEHICLES; i++ ) {
	    GetVehiclePos(i, Floats[0], Floats[1], Floats[2]);
	    if( IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]) ) {
		    return i;
		}
	}

	return false;
}
static GetElapsedTime(time, &hours, &minutes, &seconds)
{
    hours = 0;
    minutes = 0;
    seconds = 0;

    if (time >= 3600) //jika lebih dari 1 jam (3600 = 1 jam)
    {
        hours = (time / 3600); //pembagian waktu per jam di bagi time/3600
        time -= (hours * 3600); //pengurangan di time , ex 2 jam terpakai maka di kalikan 2 * 3600 = time-7200
    }
    while (time >= 60) //hitungan menit.
    {
        minutes++; //hitungan menit bertambah selama time masih bervalue 60.
        time -= 60; // waktu berkurang per menit hitungan 60 sec dari time.
    }
    return (seconds = time);
}
ReplaceText(string[], const search[], const replacement[], bool:ignorecase = false, pos = 0, limit = -1, maxlength = 256)
{
    if(!limit)return 0;

    new sublen = strlen(search),
        replen = strlen(replacement),
        bool:packed = ispacked(string),
        maxlen = maxlength,
        len = strlen(string),
        count = 0;

    if(packed)maxlen *= 4;
    if(!sublen)return 0;

    while(-1 != (pos = strfind(string, search, ignorecase, pos)))
    {
        strdel(string, pos, pos + sublen);

        len -= sublen;

        if(replen && len + replen < maxlen)
        {
            strins(string, replacement, pos, maxlength);

            pos += replen;
            len += replen;
       }

        if(limit != -1 && ++count >= limit)break;
   }

    return count;
}

FormatText(text[])
{
	new len = strlen(text);
	if(len > 1)
	{
		for(new i = 0; i < len; i++)
		{
			if(text[i] == 92)
			{
				// New line
			    if(text[i+1] == 'e')
			    {
					text[i] = '\n';
					for(new j = i+1; j < len; j++) text[j] = text[j+1], text[j+1] = 0;
					continue;
			    }

				// Tab
			    if(text[i+1] == 't')
			    {
					text[i] = '\t';
					for(new j = i+1; j < len-1; j++) text[j] = text[j+1], text[j+1] = 0;
					continue;
			    }

				// Literal
			    if(text[i+1] == 92)
			    {
					text[i] = 92;
					for(new j = i+1; j < len-1; j++) text[j] = text[j+1], text[j+1] = 0;
			    }
			}
		}
	}
	return 1;
}
ColouredText(text[])
{
	//Credits to RyDeR`
	new
	    pos = -1,
	    string[(128 + 16)]
	;
	strmid(string, text, 0, 128, (sizeof(string) - 16));

	while((pos = strfind(string, "#", true, (pos + 1))) != -1)
	{
	    new
	        i = (pos + 1),
	        hexCount
		;
		for( ; ((string[i] != 0) && (hexCount < 6)); ++i, ++hexCount)
		{
		    if (!(('a' <= string[i] <= 'f') || ('A' <= string[i] <= 'F') || ('0' <= string[i] <= '9')))
		    {
		        break;
		    }
		}
		if ((hexCount == 6) && !(hexCount < 6))
		{
			string[pos] = '{';
			strins(string, "}", i);
		}
	}
	return string;
}
stock Float:frandom(Float:max, Float:m2 = 0.0, dp = 3)
{
    new Float:mn = m2;
    if(m2 > max) {
        mn = max,
        max = m2;
    }
    m2 = floatpower(10.0, dp);

    return floatadd(floatdiv(float(random(floatround(floatmul(floatsub(max, mn), m2)))), m2), mn);
}
stock IsPlayerInRangeOfPlayer(playerid, playerid2, Float: radius)
{

	new
		Float:Floats[3];

	GetPlayerPos(playerid2, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}
stock doesVehicleExist(vehicleid) {

    if(GetVehicleModel(vehicleid) >= 400) {
		return 1;
	}
	return 0;
}
stock GetDistancePlayerVeh(playerid, veh) {

	new
	    Float:Floats[7];

	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetVehiclePos(veh, Floats[3], Floats[4], Floats[5]);
	Floats[6] = floatsqroot((Floats[3]-Floats[0])*(Floats[3]-Floats[0])+(Floats[4]-Floats[1])*(Floats[4]-Floats[1])+(Floats[5]-Floats[2])*(Floats[5]-Floats[2]));

	return floatround(Floats[6]);
}
stock GetClosestVehicle(playerid, exception = INVALID_VEHICLE_ID) {
    new
		Float:Distance,
		target = -1;

    for(new v; v < MAX_VEHICLES; v++) if(doesVehicleExist(v)) {
        if(v != GetPlayerVehicleID(playerid) && v != exception && (target < 0 || Distance > GetDistancePlayerVeh(playerid, v))) {
            target = v;
            Distance = GetDistancePlayerVeh(playerid, v);
        }
    }
    return target;
}
stock isMelee(weapon){
    switch(weapon){
        case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 41, 42, 43, 44, 45, 46: {
			return 1;
	    }
	}
	return 0;
}
stock givePlayerWeapons(playerid) {
	ResetPlayerWeapons(playerid);
	for(new x; x < 13; x++){
		if (PlayerInfo[playerid][pGunsAmmo][x] <= 1 && !isMelee(PlayerInfo[playerid][pGuns][x])) { //Ammo
			//PlayerInfo[playerid][pGuns][x] = 0;
			PlayerInfo[playerid][pGunsAmmo][x] = 0;
		}
		else if(isMelee(PlayerInfo[playerid][pGuns][x]) && PlayerInfo[playerid][pGunsAmmo][x] < 1){
            givePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][x], AMMO_MELEE);
		}
		else
		{
			givePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][x], PlayerInfo[playerid][pGunsAmmo][x]);
		}
	}

	return 1;
}
stock GetNameWithUnderscore(playerid)
{
    new name[MAX_PLAYER_NAME];

    if(IsPlayerConnected(playerid))
    {
		GetPlayerName(playerid, name, sizeof(name));
	}
	else
	{
	    name = "Disconnected/Nothing";
	}

	return name;
}
stock GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
 	GetPlayerName(playerid,name,sizeof(name));
	return name;
}
stock Text3D:CreateStreamed3DTextLabel(const String[], color, Float:posx, Float:posy, Float:posz, Float:draw_distance, virtualworld, testlos = 0)
{
	return CreateDynamic3DTextLabel(String, color, posx, posy, posz, draw_distance, INVALID_PLAYER_ID, INVALID_PLAYER_ID, testlos, virtualworld, -1, -1, 100.0);
}

//MONEYBAGS
stock CreateMoney(Float:x,Float:y,Float:z, amount) // Money
{
    for(new i = 0; i < sizeof(MoneyInfo); i++)
  	{
  	    if(MoneyInfo[i][mCreated] == 0)
  	    {
            MoneyInfo[i][mCreated]=1;
            MoneyInfo[i][mbX]=x;
            MoneyInfo[i][mbY]=y;
            MoneyInfo[i][mbZ]=z;
            MoneyInfo[i][mPickup] = CreateDynamicPickup(1550, 23, x, y, z);
			MoneyInfo[i][mAmount] = amount;
			MoneyInfo[i][mMoneybag] = 1;
			return 1;
  	    }
  	}
  	return 0;
}

stock DeleteClosestBag(playerid)
{
    for(new i = 0; i < sizeof(MoneyInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 4.0, MoneyInfo[i][mbX], MoneyInfo[i][mbY], MoneyInfo[i][mbZ]))
        {
  	        if(MoneyInfo[i][mCreated] == 1)
            {
                new sendername[MAX_PLAYER_NAME];
                new String[10000];
                new location[MAX_ZONE_NAME];
                GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
                format(String, sizeof(String), "WARNING: %s has destroyed a money bag in %s.", sendername, location);
                SendAdminMessage(COLOR_RED, String);
                MoneyInfo[i][mCreated]=0;
            	MoneyInfo[i][mbX]=0.0;
            	MoneyInfo[i][mbY]=0.0;
            	MoneyInfo[i][mbZ]=0.0;
            	MoneyInfo[i][mAmount] = 0;
            	MoneyInfo[i][mMoneybag] = 0;
            	DestroyDynamicPickup(MoneyInfo[i][mPickup]);
                return 1;
  	        }
  	    }
  	}
    return 0;
}

stock DeleteAllBags()
{
    for(new i = 0; i < sizeof(MoneyInfo); i++)
  	{
  	    if(MoneyInfo[i][mCreated] == 1)
  	    {
  	        MoneyInfo[i][mCreated]=0;
            MoneyInfo[i][mbX]=0.0;
            MoneyInfo[i][mbY]=0.0;
            MoneyInfo[i][mbZ]=0.0;
            MoneyInfo[i][mAmount] = 0;
            MoneyInfo[i][mMoneybag] = 0;
            DestroyDynamicPickup(MoneyInfo[i][mPickup]);
  	    }
	}
    return 0;
}
//ATM Enum Coded by AriWiwin14
enum dInfo
{
    ATMFee,
    ATMObjectID,
	Float:ATMY,
	Float:ATMX,
	Float:ATMZ,
	Float:ATMAngle,
};
new ATMInfo[MAX_ATM][dInfo];
//

enum objInfo
{
	oMT,
	objText[256],
	objCol1,
	objCol2,
	objMSize,
	objFSize,
	objBold,
	objAlig,
	obj,
	Text3D:oText,
	oModel,
	Float:oX,
	Float:oY,
	Float:oZ,
	Float:oRX,
	Float:oRY,
	Float:oRZ,
}
new ObjectInfo[MAX_COBJECTS][objInfo];

stock LoadObjects()
{
	new dinfo[11][128];
	new String[256];
	new File:file = fopen("cobjects.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_COBJECTS)
		{
		    fread(file, String);
		    split(String, dinfo, '|');
			format(ObjectInfo[idx][objText], 256, "%s", dinfo[0]);
			ObjectInfo[idx][oModel] = strval(dinfo[1]);
			ObjectInfo[idx][oMT] = strval(dinfo[2]);
			ObjectInfo[idx][oX] = floatstr(dinfo[3]);
			ObjectInfo[idx][oY] = floatstr(dinfo[4]);
			ObjectInfo[idx][oZ] = floatstr(dinfo[5]);
			ObjectInfo[idx][oRX] = floatstr(dinfo[6]);
			ObjectInfo[idx][oRY] = floatstr(dinfo[7]);
			ObjectInfo[idx][oRZ] = floatstr(dinfo[8]);
			ObjectInfo[idx][objFSize] = strval(dinfo[9]);
			ObjectInfo[idx][objMSize] = strval(dinfo[10]);
			if(ObjectInfo[idx][oModel]) // If gate exists
			{
			    if(ObjectInfo[idx][oMT] == 0)
			    {
					ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
					//O-bjectInfo[idx][oText] = CreateDynamic3DTextLabel(String, COLOR_WHITE, ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], 10);
				}
				else if(ObjectInfo[idx][oMT] == 1)
				{
					ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
					format(String, 128, "%s", ObjectInfo[idx][objText]);
					SetDynamicObjectMaterialText(ObjectInfo[idx][obj], 0, ObjectInfo[idx][objText], ObjectInfo[idx][objMSize], "Arial", ObjectInfo[idx][objFSize], 1, 0xFFFFFFFF, -16777216, 1);
					//O-bjectInfo[idx][oText] = CreateDynamic3DTextLabel(String, COLOR_WHITE, ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], 10);
				}
			}
			idx++;
	    }
	}
	print("Objects loaded successfully.");
	return 1;
}

stock SaveObj()
{
	new idx = 1, File:file;
	new String[256];
	while(idx < MAX_COBJECTS)
	{
	    format(String, sizeof(String), "%s|%d|%d|%f|%f|%f|%f|%f|%f|%i|%i\r\n",
        ObjectInfo[idx][objText],
        ObjectInfo[idx][oModel],
        ObjectInfo[idx][oMT],
        ObjectInfo[idx][oX],
        ObjectInfo[idx][oY],
        ObjectInfo[idx][oZ],
        ObjectInfo[idx][oRX],
        ObjectInfo[idx][oRY],
        ObjectInfo[idx][oRZ],
        ObjectInfo[idx][objFSize],
        ObjectInfo[idx][objMSize]);
        if(idx == 1)
	    {
	        file = fopen("cobjects.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("cobjects.cfg", io_append);
	    }
		fwrite(file, String);
		fclose(file);
		idx++;
	}
	print("Objects saved successfully.");
	return 1;
}
main()
{
}
stock CheckFiles()
{
	if(!dini_Exists("dealerships.cfg")) dini_Create("dealerships.cfg");
	if(!dini_Exists("cobjects.cfg")) dini_Create("cobjects.cfg");
	if(!dini_Exists("gates.cfg")) dini_Create("gates.cfg");
	if(!dini_Exists("rent.cfg")) dini_Create("rent.cfg");
	if(!dini_Exists("modshop.cfg")) dini_Create("modshop.cfg");
	if(!dini_Exists("ban.cfg")) dini_Create("ban.cfg");
	if(!dini_Exists("plants.cfg")) dini_Create("plants.cfg");
	if(!dini_Exists("machine.cfg")) dini_Create("machine.cfg");
	if(!dini_Exists("buypoint.cfg")) dini_Create("buypoint.cfg");
	return 1;
}

enum prInfo
{
 	prTax,
	prRentTime,
	prVehicleRent,
	prId,
	prModelId,
	prLock,
	prLocked,
	prColor1,
	prColor2,
	Float:prPosX,
	Float:prPosY,
	Float:prPosZ,
	Float:prPosAngle,
	prPark,
	prTicket,
	prFuel,
	Float: prHealth,
	prStatus[4]
};
new PlayerRentInfo[MAX_PLAYERS+1][prInfo];

new pRent[MAX_PLAYERS];
new RentFaggio[MAX_PLAYERS];
new prSpawn[MAX_PLAYERS];
new prSpawnID[MAX_PLAYERS];

enum pvInfo
{
	pvNeon,
	pvNeonObj,
	pvNeonObj2,
	pvNeonObj3,
	pvNeonObj4,
	pvToy[MAX_OBJECTS_PER_PLAYER],
	pvToyID[MAX_OBJECTS_PER_PLAYER],
	Float:pvToyPosX[MAX_OBJECTS_PER_PLAYER],
	Float:pvToyPosY[MAX_OBJECTS_PER_PLAYER],
	Float:pvToyPosZ[MAX_OBJECTS_PER_PLAYER],
	Float:pvToyRotX[MAX_OBJECTS_PER_PLAYER],
	Float:pvToyRotY[MAX_OBJECTS_PER_PLAYER],
	Float:pvToyRotZ[MAX_OBJECTS_PER_PLAYER],
	pvToyColor[MAX_OBJECTS_PER_PLAYER],
	pvToyIndex[MAX_OBJECTS_PER_PLAYER],
	pvToyTexture1[MAX_OBJECTS_PER_PLAYER],
	pvToyTexture2[MAX_OBJECTS_PER_PLAYER],
	pvToyTextureID[MAX_OBJECTS_PER_PLAYER],
	pvToyTextID1,
	pvToyTextID2,
	pvToyTextID3,
	pvToyTextID4,
	pvToyTextID5,
	pvToyTextID6,
	pvToyTextID7,
	pvToyTextID8,
	pvToyTextID9,
	pvToyTextID10,
	pvToyText1[128],
	pvToyText2[128],
	pvToyText3[128],
	pvToyText4[128],
	pvToyText5[128],
	pvToyText6[128],
	pvToyText7[128],
	pvToyText8[128],
	pvToyText9[128],
	pvToyText10[128],
	pvToyTextCol1,
	pvToyTextCol2,
	pvToyTextCol3,
	pvToyTextCol4,
	pvToyTextCol5,
	pvToyTextCol6,
	pvToyTextCol7,
	pvToyTextCol8,
	pvToyTextCol9,
	pvToyTextCol10,
	pvToyTextSize1,
	pvToyTextSize2,
	pvToyTextSize3,
	pvToyTextSize4,
	pvToyTextSize5,
	pvToyTextSize6,
	pvToyTextSize7,
	pvToyTextSize8,
	pvToyTextSize9,
	pvToyTextSize10,
    Float:pvPosX,
	Float:pvPosY,
	Float:pvPosZ,
 	Float:pvPosAngle,
	pvId,
	pvModelId,
	pvLock,
	pvLocked,
	pvPaintJob,
	pvColor1,
	pvColor2,
	pvMods[MAX_MODS],
	pvAllowPlayer[MAX_PLAYER_NAME],
	pvAllowedPlayerId,
	pvPark,
	pvNumberPlate[32], // sz //Plate
	pvPrice,
	pvTicket,
	pvWeapons[3],
	pvWeaponsAmmo[3],
	pvWepUpgrade,
	pvImpounded,
	pvStored,
	pvDestroyed,
	Float: pvFuel,
	Float: pvHealth,
	pvStatus[4],
	pvLicense,
	pvLicenseTime,
	pvLicenseExpired[32],
	pvMesinUpgrade,
	pvBodyUpgrade,
	pvInsurances
};
new PlayerVehicleInfo[MAX_PLAYERS+1][MAX_PLAYERVEHICLES][pvInfo];

new pvEdit[MAX_PLAYERS];
new pvEditID[MAX_PLAYERS];
new pvehEditID[MAX_PLAYERS];
new Float:pvPos[MAX_PLAYERS][3];
new Float:pvRot[MAX_PLAYERS][3];

enum ObjMat
{
	textureid,
	texturename1[32],
	texturename2[32]
};

new ObjMats[11][ObjMat] = {
{1171, "Jester", "wall6"},
{18955, "matclothes", "bandanazigzag"},
{18955, "matclothes", "bandanacloth1"},
{18955, "matclothes", "bandanacloth2"},
{18955, "matclothes", "bandanacloth3"},
{18955, "matclothes", "bandanacloth4"},
{19056, "xmasboxes", "wrappingpaper1"},
{19056, "xmasboxes", "wrappingpaper16"},
{19056, "xmasboxes", "wrappingpaper20"},
{18955, "matclothes", "bandanaredish"},
{18955, "matclothes", "mp_bobbie_pompom2"}
};

enum VehText
{
	textname[32]
};

new VehicleText[153][VehText] = {
{"Gabriola"},
{"Algerian"},
{"Arial"},
{"Arial Black"},
{"Arial Narrow"},
{"Arial Rounded MT Bold"},
{"Arial Unicode MS"},
{"Baskerville Old Face"},
{"Batang"},
{"BatangChe"},
{"Bauhaus 93"},
{"Bell MT"},
{"Berlin Sans FB"},
{"Berlin Sans FB Demi"},
{"Bernard MT Condensed"},
{"Blackadder ITC"},
{"Bodoni MT"},
{"Bodoni MT Black"},
{"Bodoni MT Condensed"},
{"Bodoni MT Poster Compressed"},
{"Book Antiqua"},
{"Bookman Old Style"},
{"Britannic Bold"},
{"Broadway"},
{"Brush Script MT"},
{"Calibri"},
{"Californian FB"},
{"Calisto MT"},
{"Cambria"},
{"Candara"},
{"Castellar"},
{"Centaur"},
{"Century"},
{"Century Gothic"},
{"Century Schoolbook"},
{"Chiller"},
{"Comic Sans MS"},
{"Consolas"},
{"Constantia"},
{"Cooper Black"},
{"Copperplate Gothic Bold"},
{"Copperplate Gothic Light"},
{"Corbel"},
{"Courier"},
{"Courier New"},
{"Curlz MT"},
{"DigifaceWide"},
{"Dotum"},
{"DotumChe"},
{"Edwardian Script ITC"},
{"Elephant"},
{"Engravers MT"},
{"Eras Bold ITC"},
{"Eras Demi ITC"},
{"Eras Light ITC"},
{"Eras Medium ITC"},
{"Estrangelo Edessa"},
{"Felix Titling"},
{"Fixedsys"},
{"Footlight MT Light"},
{"Forte"},
{"Franklin Gothic Book"},
{"Franklin Gothic Demi"},
{"Franklin Gothic Demi Cond"},
{"Franklin Gothic Heavy"},
{"Franklin Gothic Medium"},
{"Franklin Gothic Medium Cond"},
{"Freestyle Script"},
{"French Script MT"},
{"Agency FB"},
{"Garamond"},
{"Georgia"},
{"Gigi"},
{"Gill Sans MT"},
{"Gill Sans MT Condensed"},
{"Gill Sans Ultra Bold"},
{"Gill Sans Ultra Bold Condensed"},
{"Goudy Old Style"},
{"Gulim"},
{"GulimChe"},
{"Gungsuh"},
{"GungsuhChe"},
{"Haettenschweiler"},
{"Harlow Solid Italic"},
{"Harrington"},
{"High Tower Text"},
{"Impact"},
{"Imprint MT Shadow"},
{"Informal Roman"},
{"Jokerman"},
{"Kristen ITC"},
{"Kunstler Script"},
{"Lucida Bright"},
{"Lucida Calligraphy"},
{"Lucida Console"},
{"Lucida Fax"},
{"Lucida Handwriting"},
{"Lucida Sans"},
{"Lucida Sans Typewriter"},
{"Lucida Sans Unicode"},
{"Magneto"},
{"Maiandra GD"},
{"Matura MT Script Capitals"},
{"Meiryo"},
{"Microsoft Sans Serif"},
{"MingLiU"},
{"Mistral"},
{"Modern No. 20"},
{"Monotype Corsiva"},
{"MS Gothic"},
{"MS Mincho"},
{"MS PGothic"},
{"MS PMincho"},
{"MS Reference Sans Serif"},
{"MS Sans Serif"},
{"MS Serif"},
{"MS UI Gothic"},
{"MV Boli"},
{"Niagara Engraved"},
{"Niagara Solid"},
{"NSimSun"},
{"OCR A Extended"},
{"Old English Text MT"},
{"Onyx"},
{"Palace Script MT"},
{"Palatino Linotype"},
{"Papyrus"},
{"Perpetua"},
{"Perpetua Titling MT"},
{"PMingLiU"},
{"Poor Richard"},
{"Pristina"},
{"Ravie"},
{"Rockwell"},
{"Rockwell Condensed"},
{"Rockwell Extra Bold"},
{"Script MT Bold"},
{"Segoe UI"},
{"Showcard Gothic"},
{"Snap ITC"},
{"Stencil"},
{"Sylfaen"},
{"System"},
{"Tahoma"},
{"Tempus Sans ITC"},
{"Times New Roman"},
{"Trebuchet MS"},
{"Tw Cen MT Condensed Extra Bold"},
{"Verdana"},
{"Viner Hand ITC"},
{"Vivaldi"},
{"Vladimir Script"},
{"Wide Latin"}
};

new VehicleColors[256] = {
// The existing colours from San Andreas
0xFF000000, 0xFFF5F5F5, 0xFF2A77A1, 0xFF840410, 0xFF263739, 0xFF86446E, 0xFFD78E10, 0xFF4C75B7, 0xFFBDBEC6, 0xFF5E7072,
0xFF46597A, 0xFF656A79, 0xFF5D7E8D, 0xFF58595A, 0xFFD6DAD6, 0xFF9CA1A3, 0xFF335F3F, 0xFF730E1A, 0xFF7B0A2A, 0xFF9F9D94,
0xFF3B4E78, 0xFF732E3E, 0xFF691E3B, 0xFF96918C, 0xFF515459, 0xFF3F3E45, 0xFFA5A9A7, 0xFF635C5A, 0xFF3D4A68, 0xFF979592,
0xFF421F21, 0xFF5F272B, 0xFF8494AB, 0xFF767B7C, 0xFF646464, 0xFF5A5752, 0xFF252527, 0xFF2D3A35, 0xFF93A396, 0xFF6D7A88,
0xFF221918, 0xFF6F675F, 0xFF7C1C2A, 0xFF5F0A15, 0xFF193826, 0xFF5D1B20, 0xFF9D9872, 0xFF7A7560, 0xFF989586, 0xFFADB0B0,
0xFF848988, 0xFF304F45, 0xFF4D6268, 0xFF162248, 0xFF272F4B, 0xFF7D6256, 0xFF9EA4AB, 0xFF9C8D71, 0xFF6D1822, 0xFF4E6881,
0xFF9C9C98, 0xFF917347, 0xFF661C26, 0xFF949D9F, 0xFFA4A7A5, 0xFF8E8C46, 0xFF341A1E, 0xFF6A7A8C, 0xFFAAAD8E, 0xFFAB988F,
0xFF851F2E, 0xFF6F8297, 0xFF585853, 0xFF9AA790, 0xFF601A23, 0xFF20202C, 0xFFA4A096, 0xFFAA9D84, 0xFF78222B, 0xFF0E316D,
0xFF722A3F, 0xFF7B715E, 0xFF741D28, 0xFF1E2E32, 0xFF4D322F, 0xFF7C1B44, 0xFF2E5B20, 0xFF395A83, 0xFF6D2837, 0xFFA7A28F,
0xFFAFB1B1, 0xFF364155, 0xFF6D6C6E, 0xFF0F6A89, 0xFF204B6B, 0xFF2B3E57, 0xFF9B9F9D, 0xFF6C8495, 0xFF4D8495, 0xFFAE9B7F,
0xFF406C8F, 0xFF1F253B, 0xFFAB9276, 0xFF134573, 0xFF96816C, 0xFF64686A, 0xFF105082, 0xFFA19983, 0xFF385694, 0xFF525661,
0xFF7F6956, 0xFF8C929A, 0xFF596E87, 0xFF473532, 0xFF44624F, 0xFF730A27, 0xFF223457, 0xFF640D1B, 0xFFA3ADC6, 0xFF695853,
0xFF9B8B80, 0xFF620B1C, 0xFF5B5D5E, 0xFF624428, 0xFF731827, 0xFF1B376D, 0xFFEC6AAE, 0xFF000000,
// SA-MP extended colours (0.3x)
0xFF177517, 0xFF210606, 0xFF125478, 0xFF452A0D, 0xFF571E1E, 0xFF010701, 0xFF25225A, 0xFF2C89AA, 0xFF8A4DBD, 0xFF35963A,
0xFFB7B7B7, 0xFF464C8D, 0xFF84888C, 0xFF817867, 0xFF817A26, 0xFF6A506F, 0xFF583E6F, 0xFF8CB972, 0xFF824F78, 0xFF6D276A,
0xFF1E1D13, 0xFF1E1306, 0xFF1F2518, 0xFF2C4531, 0xFF1E4C99, 0xFF2E5F43, 0xFF1E9948, 0xFF1E9999, 0xFF999976, 0xFF7C8499,
0xFF992E1E, 0xFF2C1E08, 0xFF142407, 0xFF993E4D, 0xFF1E4C99, 0xFF198181, 0xFF1A292A, 0xFF16616F, 0xFF1B6687, 0xFF6C3F99,
0xFF481A0E, 0xFF7A7399, 0xFF746D99, 0xFF53387E, 0xFF222407, 0xFF3E190C, 0xFF46210E, 0xFF991E1E, 0xFF8D4C8D, 0xFF805B80,
0xFF7B3E7E, 0xFF3C1737, 0xFF733517, 0xFF781818, 0xFF83341A, 0xFF8E2F1C, 0xFF7E3E53, 0xFF7C6D7C, 0xFF020C02, 0xFF072407,
0xFF163012, 0xFF16301B, 0xFF642B4F, 0xFF368452, 0xFF999590, 0xFF818D96, 0xFF99991E, 0xFF7F994C, 0xFF839292, 0xFF788222,
0xFF2B3C99, 0xFF3A3A0B, 0xFF8A794E, 0xFF0E1F49, 0xFF15371C, 0xFF15273A, 0xFF375775, 0xFF060820, 0xFF071326, 0xFF20394B,
0xFF2C5089, 0xFF15426C, 0xFF103250, 0xFF241663, 0xFF692015, 0xFF8C8D94, 0xFF516013, 0xFF090F02, 0xFF8C573A, 0xFF52888E,
0xFF995C52, 0xFF99581E, 0xFF993A63, 0xFF998F4E, 0xFF99311E, 0xFF0D1842, 0xFF521E1E, 0xFF42420D, 0xFF4C991E, 0xFF082A1D,
0xFF96821D, 0xFF197F19, 0xFF3B141F, 0xFF745217, 0xFF893F8D, 0xFF7E1A6C, 0xFF0B370B, 0xFF27450D, 0xFF071F24, 0xFF784573,
0xFF8A653A, 0xFF732617, 0xFF319490, 0xFF56941D, 0xFF59163D, 0xFF1B8A2F, 0xFF38160B, 0xFF041804, 0xFF355D8E, 0xFF2E3F5B,
0xFF561A28, 0xFF4E0E27, 0xFF706C67, 0xFF3B3E42, 0xFF2E2D33, 0xFF7B7E7D, 0xFF4A4442, 0xFF28344E
};

enum ptInfo
{
    ptModelID,
	ptBone,
    Float:ptPosX,
	Float:ptPosY,
	Float:ptPosZ,
	Float:ptRotX,
	Float:ptRotY,
	Float:ptRotZ,
	Float:ptScaX,
	Float:ptScaY,
	Float:ptScaZ,
};
new PlayerToyInfo[MAX_PLAYERS+1][MAX_PLAYERTOYS][ptInfo];
enum cdInfo
{
	cdOwned,
	cdOwner[MAX_PLAYER_NAME],
	Float: cdEntranceX,
	Float: cdEntranceY,
	Float: cdEntranceZ,
	Float: cdExitX,
	Float: cdExitY,
	Float: cdExitZ,
	cdMessage[128],
	cdTill,
	cdInterior,
	Float: cdRadius,
	cdPrice,
	cdPickupID,
	Text3D:cdTextLabel,
	Text3D:cdVehicleLabel[MAX_DEALERSHIPVEHICLES],
	cdVehicleModel[MAX_DEALERSHIPVEHICLES],
	cdVehicleCost[MAX_DEALERSHIPVEHICLES],
	cdVehicleId[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnX[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnY[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnZ[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnAngle[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawn[4],
};
new CarDealershipInfo[MAX_CARDEALERSHIPS][cdInfo];
enum hInfo
{
	hOwned,
	hLevel,
	hHInteriorWorld,
	hCustomInterior,
	hDescription[128],
	hOwner[ MAX_PLAYER_NAME ],
	Float: hExteriorX,
	Float: hExteriorY,
	Float: hExteriorZ,
	Float: hExteriorR,
	Float: hExteriorA,
	Float: hInteriorX,
	Float: hInteriorY,
	Float: hInteriorZ,
	Float: hInteriorR,
	Float: hInteriorA,
	Float: hGaragePos[3],
	hLock,
	hValue,
	hSafeMoney,
	hPot,
	hCrack,
	hMaterials,
	hWeapons[ 5 ],
	hWeaponsAmmo[ 5 ],
	hGLUpgrade,
	hPickupID,
	Text3D: hTextID,
	hCustomExterior,
	hAlamat[128]
};
new HouseInfo[MAX_HOUSES][hInfo];

enum dmpInfo
{
	dmpMapIconID,
	Float: dmpPosX,
	Float: dmpPosY,
	Float: dmpPosZ,
	dmpMarkerType,
	dmpColor,
	dmpVW,
	dmpInt,
}
new DMPInfo[MAX_DMAPICONS][dmpInfo];

enum ddInfo
{
	ddDescription[128],
	ddPickupID,
	Text3D: ddTextID,
	ddCustomInterior,
	ddExteriorVW,
	ddExteriorInt,
	ddInteriorVW,
	ddInteriorInt,
	Float: ddExteriorX,
	Float: ddExteriorY,
	Float: ddExteriorZ,
	Float: ddExteriorA,
	Float: ddInteriorX,
	Float: ddInteriorY,
	Float: ddInteriorZ,
	Float: ddInteriorA,
	ddCustomExterior,
	ddVIP,
	ddFamily,
	ddFaction,
	ddAdmin,
	ddWanted,
	ddVehicleAble,
	ddColor,
	ddPickupModel,
	dPass[24],
	dLocked,
};
new DDoorsInfo[MAX_DDOORS][ddInfo];

new gEdit[MAX_PLAYERS]; // 1 = closed | 2 = opened
new gEditID[MAX_PLAYERS]; // Object's ID
new Float:gPos[MAX_PLAYERS][3];
new Float:gRot[MAX_PLAYERS][3];
enum gateInfo
{
    gMT,
	gText[256],
	gCol1,
	gCol2,
	gMSize,
	gFSize,
	gBold,
	gAlig,
	gGate,
	gModel,
	Float:gCX,
	Float:gCY,
	Float:gCZ,
	Float:gCRX,
	Float:gCRY,
	Float:gCRZ,
	Float:gOX,
	Float:gOY,
	Float:gOZ,
	Float:gORX,
	Float:gORY,
	Float:gORZ,
	gPassword[256],
	Float:gSpeed,
	Float:gRange,
	gFaction,
	gWorkshop,
	gHID,
	gVW,
	gInt,
	gStatus,
	gOwner
}
new GateInfo[MAX_GATES][gateInfo];

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];

static const VehicleName[212][] = {
	"Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster","Stretch",
	"Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi",
	"Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator",
	"Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion","Rumpo","RC Bandit", "Romero",
	"Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed",
	"Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler",
	"ZR-350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper",
	"Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring Racer","Sandking","Blista Compact","Police Maverick",
	"Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT",
	"Elegant","Journey","Bike","Mountain Bike","Beagle","Cropduster","Stuntplane","Tanker","Road Train","Nebula","Majestic",
	"Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV-1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent",
	"Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility",
	"Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger",
	"Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway",
	"Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer",
	"Euros","Hotdog","Club","Trailer","Trailer","Andromada","Dodo","RCCam","Launch","Police Car (LSPD)","Police Car (SFPD)",
	"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A",
	"Luggage Trailer B","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

new Peds[217][1] = {
{299},
{288},//TEAM_ADMIN
{286},{287},{228},{113},{120},{147},{294},{227},{61},{171},
{247},//CIVILIANS DOWN HERE
{248},{100},{256},{263},{262},{261},{260},{259},{258},{257},{256},{255},
{253},{252},{251},{249},{246},{245},{244},{243},{242},{241},{240},{239},
{238},{237},{236},{235},{234},{233},{232},{231},{230},{229},
{226},{225},{173},{174},{175},{224},{223},{222},{221},{220},{219},{218},
{217},{216},{215},{214},{213},{212},{211},{210},{209},
{207},{206},{205},{204},{203},{202},{201},{200},{199},{198},{197},{196},
{195},{194},{193},{192},{191},{190},{189},{185},{184},{183},
{182},{181},{180},{179},{178},{176},{172},{170},{168},{167},{162},
{161},{160},{159},{158},{157},{156},{155},{154},{153},{152},{151},
{146},{145},{144},{143},{142},{141},{140},{139},{138},{137},{136},{135},
{134},{133},{132},{131},{130},{129},{128},{254},{99},{97},{96},{95},{94},
{92},{90},{89},{88},{87},{85},{84},{83},{82},{81},{80},{79},{78},{77},{76},
{75},{73},{72},{69},{68},{67},{66},{64},{63},{62},{58},{57},{56},{55},
{54},{53},{52},{51},{50},{49},{45},{44},{43},{41},{39},{38},{37},{36},{35},
{34},{33},{32},{31},{30},{29},{28},{27},{26},{25},{24},{23},{22},{21},{20},
{19},{18},{17},{16},{15},{14},{13},{12},{11},{10},{1},{2},
{290},//ROSE
{291},//PAUL
{292},//CESAR
{293},//OGLOC
{187},
{296},//JIZZY
{297},//MADDOGG
{298},//CAT
{299}//ZERO
};

enum HoldingVToysEnumAll
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[45]
}

new HoldingVToysAll[128][HoldingVToysEnumAll] = {
{19314,50000,"BullHorns"},
{1100,50000,"Tengkorak"},
{1013,50000,"Lamp Round"},
{1024,50000,"Lamp Square"},
{1028,50000,"Exhaust Alien-1"},
{1032,50000,"Vent Alien-1"},
{1033,50000,"Vent X-Flow-1"},
{1034,50000,"Exhaust Alien-2"},
{1035,50000,"Vent Alien-2"},
{1038,50000,"Vent X-Flow-2"},
{1099,50000,"BullBars-1 Left"},
{1042,50000,"BullBars-1 Right"},
{1046,50000,"Exhaust Alien-2"},
{1053,50000,"Vent Alien-3"},
{1054,50000,"Vent X-Flow-3"},
{1055,50000,"Vent Alien-4"},
{1061,50000,"Vent X-Flow-4"},
{1067,50000,"Vent Alien-5"},
{1068,50000,"Vent X-Flow-5"},
{1088,50000,"Vent Alien-6"},
{1091,50000,"Vent X-Flow-6"},
{1101,50000,"BullBars Fire 1 Left"},
{1106,50000,"BullBars Stripes 1 Left"},
{1109,50000,"BullBars Lamp"},
{1110,50000,"BullBars Lamp Small"},
{1111,50000,"Accessories Metal 1"},
{1112,50000,"Accessories Metal 2"},
{1121,50000,"Accessories 3"},
{1122,50000,"BullBars Fire 2 Left"},
{1123,50000,"Accessories 4"},
{1124,50000,"BullBars Stripes 2 Left"},
{1125,50000,"BullBars Lamp 2"},
{1128,50000,"Hard Top"},
{1130,50000,"Medium Top"},
{1131,50000,"Soft Top"},
{18659,100000,"Vehicle Text"},
{1025,7500,"Wheels Offroad"},
{1066,7500,"Exhaust X-Flow"},
{1065,7500,"Exhaust Alien"},
{1142,7500,"Vets Left Oval"},
{1143,7500,"Vents Right Oval"},
{1144,7500,"Vents Left Square"},
{1145,7500,"Vents Right Square"},
{1171,15000,"Alien Front Bumper-1"},
{1149,15000,"Alien Rear Bumper-1"},
{1023,10000,"Spoiler Fury"},
{1172,15000,"X-Flow Front Bumper-1"},
{1148,15000,"X-Flow Rear Bumper-1"},
{1000,12500,"Pro Spoiler"},
{1001,12500,"Win Spoiler"},
{1002,12500,"Drag Spoiler"},
{1003,12500,"Alpha Spoiler"},
{1004,10000,"Champ Scoop Hood"},
{1005,10000,"Fury Scoop Hood"},
{1006,10000,"Roof Scoop"},
{1007,15000,"R-Sideskirt-TF"},
{1011,10000,"Race Scoop Hood"},
{1012,10000,"Worx Scoop Hood"},
{1014,12500,"Champ Spoiler"},
{1015,12500,"Race Spoiler"},
{1016,12500,"Worx Spoiler"},
{1017,15000,"L-Sideskirt-TF"},
{1030,15000,"L-Sideskirt-WAA-1"},
{1031,15000,"R-Sideskirt-WAA-1"},
{1036,15000,"R-Sideskirt-WAA-2"},
{1039,15000,"L-Sideskirt-WAA-3"},
{1040,15000,"L-Sideskirt-WAA-2"},
{1041,15000,"R-Sideskirt-WAA-3"},
{1047,15000,"R-Sideskirt-WAA-4"},
{1048,15000,"R-Sideskirt-WAA-5"},
{1049,13000,"Alien Spoiler-1"},
{1050,13000,"X-Flow Spoiler-1"},
{1051,15000,"L-Sideskirt-WAA-4"},
{1052,15000,"L-Sideskirt-WAA-5"},
{1056,15000,"R-Sideskirt-WAA-6"},
{1057,15000,"R-Sideskirt-WAA-7"},
{1058,13000,"Alien Spoiler-2"},
{1060,13000,"X-Flow Spoiler-2"},
{1062,15000,"L-Sideskirt-WAA-6"},
{1063,15000,"L-Sideskirt-WAA-7"},
{1116,17500,"F-Bullbars Slamin-1"},
{1115,17500,"F-Bullbars Chrome-1"},
{1138,13000,"Alien Spoiler-3"},
{1139,13000,"X-Flow Spoiler-3"},
{1140,15000,"X-Flow Rear Bumper-2"},
{1141,15000,"Alien Rear Bumper-2"},
{1146,13000,"X-Flow Spoiler-4"},
{1147,13000,"Alien Spoiler-4"},
{1148,15000,"X-Flow Rear Bumper-3"},
{1149,15000,"Alien Rear Bumper-3"},
{1150,15000,"Alien Rear Bumper-4"},
{1151,15000,"X-Flow Rear Bumper-4"},
{1152,15000,"X-Flow Front Bumper-4"},
{1153,15000,"Alien Front Bumper-4"},
{1154,15000,"Alien Rear Bumper-5"},
{1155,15000,"Alien Front Bumper-5"},
{1156,15000,"X-Flow Rear Bumper-5"},
{1157,15000,"X-Flow Front Bumper-5"},
{1158,13000,"X-Flow Spoiler-5"},
{1159,15000,"Alien Rear Bumper-6"},
{1160,15000,"Alien Front Bumper-6"},
{1161,15000,"X-Flow Rear Bumper-6"},
{1162,13000,"Alien Spoiler-5"},
{1163,13000,"X-Flow Spoiler-6"},
{1164,13000,"Alien Spoiler-6"},
{1165,15000,"X-Flow Front Bumper-7"},
{1166,15000,"Alien Front Bumper-7"},
{1167,15000,"X-Flow Rear Bumper-7"},
{1168,15000,"Alien Rear Bumper-7"},
{1169,15000,"Alien Front Bumper-2"},
{1170,15000,"X-Flow Front Bumper-2"},
{1171,15000,"Alien Front Bumper-3"},
{1172,15000,"X-Flow Front Bumper-3"},
{1173,15000,"X-Flow Front Bumper-6"},
{1174,17500,"Chrome Front Bumper-1"},
{1175,17500,"Slamin Front Bumper-1"},
{1176,17500,"Chrome Rear Bumper-1"},
{1177,17500,"Slamin Rear Bumper-1"},
{1178,17500,"Slamin Rear Bumper-2"},
{1179,17500,"Chrome Front Bumper-2"},
{1185,17500,"Slamin Front Bumper-3"},
{1188,17500,"Slamin Front Bumper-4"},
{18648,15000,"Blue Neon"},
{18647,15000,"Red Neon"},
{18649,15000,"Green Neon"},
{18652,15000,"White Neon"},
{18651,15000,"Pink Neon"},
{18650,15000,"Yellow Neon"}
};

enum HoldingEnumAll
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}
new HoldingObjectsCop[13][HoldingEnumAll] = {
{18642,1000,"Taser1"},
{19141,2500,"SWATHelmet1"},
{19142,2500,"SWATArmour1"},
{18636,1000,"PoliceCap1"},
{19099,1000,"PoliceCap2"},
{19100,1000,"PoliceCap3"},
{18637,1000,"PoliceShield1"},
{19161,1000,"PoliceHat1"},
{19162,1000,"PoliceHat2"},
{19200,1000,"PoliceHelmet1"},
{19138,1000,"PoliceGlasses1"},
{19139,1000,"PoliceGlasses2"},
{19140,1000,"PoliceGlasses3"}
};

new HoldingObjectsAll[226][HoldingEnumAll] = {
{18642,1000,"Taser1"},
{18643,10000,"LaserPointer1"},
{19080,10000,"LaserPointer2"},
{19081,10000,"LaserPointer3"},
{19082,10000,"LaserPointer4"},
{19083,10000,"LaserPointer5"},
{19084,10000,"LaserPointer6"},
{19086,5000,"ChainsawDildo1"},
{18675,10000,"SmokePuff"},
{19701,10000,"SmallFlame"},
{18693,10000,"LargeFlame"},
{18698,10000,"Insects"},
{18708,10000,"Bubbles"},
{19141,2500,"SWATHelmet1"},
{19142,2500,"SWATArmour1"},
{18636,1000,"PoliceCap1"},
{19099,1000,"PoliceCap2"},
{19100,1000,"PoliceCap3"},
{18637,1000,"PoliceShield1"},
{19161,1000,"PoliceHat1"},
{19162,1000,"PoliceHat2"},
{19200,1000,"PoliceHelmet1"},
{19138,1000,"PoliceGlasses1"},
{19139,1000,"PoliceGlasses2"},
{19140,1000,"PoliceGlasses3"},
{18632,1000,"FishingRod"},
{18633,1500,"Wrench"},
{18634,1000,"Crowbar"},
{18635,1000,"Hammer"},
{18638,500,"HardHat"},
{19093,500,"HardHat2"},
{19160,500,"HardHat3"},
{18639,500,"BlackHat"},
{18640,700,"Hair"},
{18975,700,"Hair2"},
{19136,700,"Hair3"},
{19274,700,"Hair4"},
{18641,1000,"Flashlight"},
{18644,5000,"Screwdriver"},
{18865,500,"MobilePhone1"},
{18866,500,"MobilePhone2"},
{18867,500,"MobilePhone3"},
{18868,500,"MobilePhone4"},
{18869,500,"MobilePhone5"},
{18870,1000,"MobilePhone6"},
{18871,1000,"MobilePhone7"},
{18872,1000,"MobilePhone8"},
{18873,1000,"MobilePhone9"},
{18874,1000,"MobilePhone10"},
{18875,750,"Pager"},
{18890,500,"Rake"},
{18891,500,"Bandana1"},
{18892,500,"Bandana2"},
{18893,500,"Bandana3"},
{18894,500,"Bandana4"},
{18895,500,"Bandana5"},
{18896,500,"Bandana6"},
{18897,500,"Bandana7"},
{18898,500,"Bandana8"},
{18899,500,"Bandana9"},
{18900,500,"Bandana10"},
{18901,750,"Bandana11"},
{18902,750,"Bandana12"},
{18903,750,"Bandana13"},
{18904,750,"Bandana14"},
{18905,750,"Bandana15"},
{18906,750,"Bandana16"},
{18907,750,"Bandana17"},
{18908,750,"Bandana18"},
{18909,750,"Bandana19"},
{18910,750,"Bandana20"},
{18911,1000,"Mask1"},
{18912,1000,"Mask2"},
{18913,1000,"Mask3"},
{18914,1000,"Mask4"},
{18915,1000,"Mask5"},
{18916,1000,"Mask6"},
{18917,1000,"Mask7"},
{18918,1000,"Mask8"},
{18919,1000,"Mask9"},
{18920,1000,"Mask10"},
{18921,500,"Beret1"},
{18922,500,"Beret2"},
{18923,750,"Beret3"},
{18924,1000,"Beret4"},
{18925,1000,"Beret5"},
{18926,500,"Hat1"},
{18927,500,"Hat2"},
{18928,500,"Hat3"},
{18929,500,"Hat4"},
{18930,500,"Hat5"},
{18931,1000,"Hat6"},
{18932,1000,"Hat7"},
{18933,1000,"Hat8"},
{18934,1000,"Hat9"},
{18935,1000,"Hat10"},
{18936,500,"Helmet1"},
{18937,750,"Helmet2"},
{18938,1000,"Helmet3"},
{18939,750,"CapBack1"},
{18940,750,"CapBack2"},
{18941,750,"CapBack3"},
{18942,1000,"CapBack4"},
{18943,1000,"CapBack5"},
{18944,1000,"HatBoater1"},
{18945,1250,"HatBoater2"},
{18946,1500,"HatBoater3"},
{18947,1000,"HatBowler1"},
{18948,1000,"HatBowler2"},
{18949,1000,"HatBowler3"},
{18950,1000,"HatBowler4"},
{18951,1000,"HatBowler5"},
{18952,1500,"BoxingHelmet"},
{18953,500,"CapKnit1"},
{18954,750,"CapKnit2"},
{18955,750,"CapOverEye1"},
{18956,750,"CapOverEye2"},
{18957,750,"CapOverEye3"},
{18958,750,"CapOverEye4"},
{18959,750,"CapOverEye5"},
{18960,1000,"CapRimUp1"},
{18961,750,"CapTrucker1"},
{18962,750,"CowboyHat2"},
{18964,1000,"SkullyCap1"},
{18965,1250,"SkullyCap2"},
{18966,1500,"SkullyCap3"},
{18967,1000,"HatMan1"},
{18968,1000,"HatMan2"},
{18969,1000,"HatMan3"},
{18970,2000,"HatTiger"},
{18971,1000,"HatCool1"},
{18972,1250,"HatCool2"},
{18973,1500,"HatCool3"},
{18974,10000,"MaskZorro1"},
{18645,1500,"MotorcycleHelmet"},
{18976,1000,"MotorcycleHelmet2"},
{18977,1000,"MotorcycleHelmet3"},
{18978,1250,"MotorcycleHelmet4"},
{18979,1500,"MotorcycleHelmet5"},
{19006,500,"GlassesType1"},
{19007,500,"GlassesType2"},
{19008,500,"GlassesType3"},
{19009,500,"GlassesType4"},
{19010,500,"GlassesType5"},
{19011,500,"GlassesType6"},
{19012,500,"GlassesType7"},
{19013,500,"GlassesType8"},
{19014,500,"GlassesType9"},
{19015,500,"GlassesType10"},
{19016,1000,"GlassesType11"},
{19017,1000,"GlassesType12"},
{19018,1000,"GlassesType13"},
{19019,1000,"GlassesType14"},
{19020,1000,"GlassesType15"},
{19021,1000,"GlassesType16"},
{19022,1000,"GlassesType17"},
{19023,1000,"GlassesType18"},
{19024,1000,"GlassesType19"},
{19025,1000,"GlassesType20"},
{19026,1500,"GlassesType21"},
{19027,1500,"GlassesType22"},
{19028,1500,"GlassesType23"},
{19029,1500,"GlassesType24"},
{19030,1500,"GlassesType25"},
{19031,1500,"GlassesType26"},
{19032,1500,"GlassesType27"},
{19033,1500,"GlassesType28"},
{19034,1500,"GlassesType29"},
{19035,1500,"GlassesType30"},
{19036,2000,"HockeyMask1"},
{19037,2000,"HockeyMask2"},
{19038,2000,"HockeyMask3"},
{19039,500,"WatchType1"},
{19040,500,"WatchType2"},
{19041,500,"WatchType3"},
{19042,500,"WatchType4"},
{19043,500,"WatchType5"},
{19044,500,"WatchType6"},
{19045,500,"WatchType7"},
{19046,1000,"WatchType8"},
{19047,1000,"WatchType9"},
{19048,1000,"WatchType10"},
{19049,1000,"WatchType11"},
{19050,1000,"WatchType12"},
{19051,1000,"WatchType13"},
{19052,1000,"WatchType14"},
{19053,1000,"WatchType15"},
{19064,10000, "SantaHat1"},
{19065,20000, "SantaHat2"},
{19066,30000, "SantaHat3"},
{19067,1000, "HoodyHat1"},
{19068,1000, "HoodyHat2"},
{19069,1000, "HoodyHat3"},
{19078,7500, "TheParrot1"},
{19079,7500, "TheParrot2"},
{19085,5000, "EyePatch"},
{19090,1500, "PomPomBlue"},
{19091,1500, "PomPomRed"},
{19092,1500, "PomPomGreen"},
{19094,2000, "BurgerShotHat"},
{19095,500, "CowboyHat1"},
{19096,500, "CowboyHat3"},
{19097,1000, "CowboyHat4"},
{19098,1000, "CowboyHat5"},
{19101,2000, "ArmyHelmet1"},
{19102,2000, "ArmyHelmet2"},
{19103,2000, "ArmyHelmet3"},
{19104,2000, "ArmyHelmet4"},
{19105,2000, "ArmyHelmet5"},
{19106,2000, "ArmyHelmet6"},
{19107,4000, "ArmyHelmet7"},
{19108,4000, "ArmyHelmet8"},
{19109,4000, "ArmyHelmet9"},
{19110,4000, "ArmyHelmet10"},
{19111,4000, "ArmyHelmet11"},
{19112,4000, "ArmyHelmet12"},
{19113,1000, "SillyHelmet1"},
{19114,2000, "SillyHelmet2"},
{19115,3000, "SillyHelmet3"},
{19116,500, "PlainHelmet1"},
{19117,500, "PlainHelmet2"},
{19118,750, "PlainHelmet3"},
{19119,1000, "PlainHelmet4"},
{19120,1000, "PlainHelmet5"},
{19137,5000, "CluckinBellHat"},
{19163,1000, "GimpMask"}
};

enum HoldingEnum
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}

new HoldingObjects[201][HoldingEnum] = {
{18632,1000,"FishingRod"},
{18633,1500,"Wrench"},
{18634,1000,"Crowbar"},
{18635,1000,"Hammer"},
{18638,1500,"HardHat"},
{19093,1500,"HardHat2"},
{19160,1500,"HardHat3"},
{18639,1500,"BlackHat"},
{18640,1000,"Hair"},
{18975,1000,"Hair2"},
{19136,1000,"Hair3"},
{19274,1000,"Hair4"},
{18641,1500,"Flashlight"},
{18644,2000,"Screwdriver"},
{18865,3000,"MobilePhone1"},
{18866,3000,"MobilePhone2"},
{18867,3000,"MobilePhone3"},
{18868,3000,"MobilePhone4"},
{18869,3000,"MobilePhone5"},
{18870,5000,"MobilePhone6"},
{18871,5000,"MobilePhone7"},
{18872,5000,"MobilePhone8"},
{18873,5000,"MobilePhone9"},
{18874,5000,"MobilePhone10"},
{18875,1500,"Pager"},
{18890,1000,"Rake"},
{18891,1000,"Bandana1"},
{18892,1000,"Bandana2"},
{18893,1000,"Bandana3"},
{18894,1000,"Bandana4"},
{18895,1000,"Bandana5"},
{18896,1000,"Bandana6"},
{18897,1000,"Bandana7"},
{18898,1000,"Bandana8"},
{18899,1000,"Bandana9"},
{18900,1000,"Bandana10"},
{18901,2000,"Bandana11"},
{18902,2000,"Bandana12"},
{18903,2000,"Bandana13"},
{18904,2000,"Bandana14"},
{18905,2000,"Bandana15"},
{18906,2000,"Bandana16"},
{18907,2000,"Bandana17"},
{18908,2000,"Bandana18"},
{18909,2000,"Bandana19"},
{18910,2000,"Bandana20"},
{18911,1000,"Mask1"},
{18912,1000,"Mask2"},
{18913,1000,"Mask3"},
{18914,1000,"Mask4"},
{18915,1000,"Mask5"},
{18916,1000,"Mask6"},
{18917,1000,"Mask7"},
{18918,1000,"Mask8"},
{18919,1000,"Mask9"},
{18920,1000,"Mask10"},
{18921,1000,"Beret1"},
{18922,1000,"Beret2"},
{18923,2000,"Beret3"},
{18924,2000,"Beret4"},
{18925,2000,"Beret5"},
{18926,1000,"Hat1"},
{18927,1000,"Hat2"},
{18928,1000,"Hat3"},
{18929,1000,"Hat4"},
{18930,1000,"Hat5"},
{18931,2000,"Hat6"},
{18932,2000,"Hat7"},
{18933,2000,"Hat8"},
{18934,2000,"Hat9"},
{18935,2000,"Hat10"},
{18936,3000,"Helmet1"},
{18937,4000,"Helmet2"},
{18938,4000,"Helmet3"},
{18939,1500,"CapBack1"},
{18940,1500,"CapBack2"},
{18941,1500,"CapBack3"},
{18942,2000,"CapBack4"},
{18943,2000,"CapBack5"},
{18944,3000,"HatBoater1"},
{18945,3000,"HatBoater2"},
{18946,3000,"HatBoater3"},
{18947,1000,"HatBowler1"},
{18948,1000,"HatBowler2"},
{18949,1000,"HatBowler3"},
{18950,1000,"HatBowler4"},
{18951,1000,"HatBowler5"},
{18952,1500,"BoxingHelmet"},
{18953,1000,"CapKnit1"},
{18954,1500,"CapKnit2"},
{18955,1500,"CapOverEye1"},
{18956,1500,"CapOverEye2"},
{18957,1500,"CapOverEye3"},
{18958,1500,"CapOverEye4"},
{18959,1500,"CapOverEye5"},
{18960,1500,"CapRimUp1"},
{18961,1500,"CapTrucker1"},
{18962,1500,"CowboyHat2"},
{18964,2000,"SkullyCap1"},
{18965,3000,"SkullyCap2"},
{18966,3000,"SkullyCap3"},
{18967,2000,"HatMan1"},
{18968,2000,"HatMan2"},
{18969,2000,"HatMan3"},
{18970,4000,"HatTiger"},
{18971,2000,"HatCool1"},
{18972,3000,"HatCool2"},
{18973,3000,"HatCool3"},
{18974,5000,"MaskZorro1"},
{18645,3000,"MotorcycleHelmet"},
{18976,4000,"MotorcycleHelmet2"},
{18977,4000,"MotorcycleHelmet3"},
{18978,5000,"MotorcycleHelmet4"},
{18979,5000,"MotorcycleHelmet5"},
{19006,1000,"GlassesType1"},
{19007,1000,"GlassesType2"},
{19008,1000,"GlassesType3"},
{19009,1000,"GlassesType4"},
{19010,1000,"GlassesType5"},
{19011,1000,"GlassesType6"},
{19012,1000,"GlassesType7"},
{19013,1000,"GlassesType8"},
{19014,1000,"GlassesType9"},
{19015,1000,"GlassesType10"},
{19016,2000,"GlassesType11"},
{19017,2000,"GlassesType12"},
{19018,2000,"GlassesType13"},
{19019,2000,"GlassesType14"},
{19020,2000,"GlassesType15"},
{19021,2000,"GlassesType16"},
{19022,2000,"GlassesType17"},
{19023,2000,"GlassesType18"},
{19024,2000,"GlassesType19"},
{19025,2000,"GlassesType20"},
{19026,2000,"GlassesType21"},
{19027,2000,"GlassesType22"},
{19028,2000,"GlassesType23"},
{19029,2000,"GlassesType24"},
{19030,2000,"GlassesType25"},
{19031,2000,"GlassesType26"},
{19032,2000,"GlassesType27"},
{19033,2000,"GlassesType28"},
{19034,2000,"GlassesType29"},
{19035,2000,"GlassesType30"},
{19036,4000,"HockeyMask1"},
{19037,4000,"HockeyMask2"},
{19038,4000,"HockeyMask3"},
{19039,1000,"WatchType1"},
{19040,100,"WatchType2"},
{19041,1000,"WatchType3"},
{19042,1000,"WatchType4"},
{19043,1000,"WatchType5"},
{19044,1000,"WatchType6"},
{19045,1000,"WatchType7"},
{19046,2000,"WatchType8"},
{19047,2000,"WatchType9"},
{19048,2000,"WatchType10"},
{19049,2000,"WatchType11"},
{19050,2000,"WatchType12"},
{19051,2000,"WatchType13"},
{19052,2000,"WatchType14"},
{19053,2000,"WatchType15"},
{19064,5000, "SantaHat1"},
{19065,5000, "SantaHat2"},
{19066,5000, "SantaHat3"},
{19067,2000, "HoodyHat1"},
{19068,2000, "HoodyHat2"},
{19069,2000, "HoodyHat3"},
{19078,5000, "TheParrot1"},
{19079,5000, "TheParrot2"},
{19085,5000, "EyePatch"},
{19090,1500, "PomPomBlue"},
{19091,1500, "PomPomRed"},
{19092,1500, "PomPomGreen"},
{19094,2000, "BurgerShotHat"},
{19095,1500, "CowboyHat1"},
{19096,1500, "CowboyHat3"},
{19097,3000, "CowboyHat4"},
{19098,3000, "CowboyHat5"},
{19101,2000, "ArmyHelmet1"},
{19102,2000, "ArmyHelmet2"},
{19103,2000, "ArmyHelmet3"},
{19104,2000, "ArmyHelmet4"},
{19105,2000, "ArmyHelmet5"},
{19106,2000, "ArmyHelmet6"},
{19107,4000, "ArmyHelmet7"},
{19108,4000, "ArmyHelmet8"},
{19109,4000, "ArmyHelmet9"},
{19110,4000, "ArmyHelmet10"},
{19111,4000, "ArmyHelmet11"},
{19112,4000, "ArmyHelmet12"},
{19113,1000, "SillyHelmet1"},
{19114,2000, "SillyHelmet2"},
{19115,3000, "SillyHelmet3"},
{19116,1500, "PlainHelmet1"},
{19117,1500, "PlainHelmet2"},
{19118,1500, "PlainHelmet3"},
{19119,1000, "PlainHelmet4"},
{19120,1000, "PlainHelmet5"},
{19137,5000, "CluckinBellHat"},
{19163,1000, "GimpMask"}
};


new HoldingBones[][] = {
	"None",
	"Spine",
	"Head",
	"Left upper arm",
	"Right upper arm",
	"Left hand",
	"Right hand",
	"Left thigh",
	"Right thigh",
	"Left foot",
	"Right foot",
	"Right calf",
	"Left calf",
	"Left forearm",
	"Right forearm",
	"Left clavicle",
	"Right clavicle",
	"Neck",
	"Jaw"
};

stock GiftPlayer(playerid, giveplayerid) // playerid = Gifter.  giveplayerid = gift receiver
{
	new String[10000];
	if(PlayerInfo[playerid][pAdmin] >= 2 || playerid == MAX_PLAYERS)
	{
		new randgift = Random(1, 100);
		if(randgift >= 1 && randgift <= 83)
		{
		    new gift = Random(1, 8);
		    if(gift == 1)
		    {
		        if(PlayerInfo[giveplayerid][pConnectTime] < 2 || PlayerInfo[giveplayerid][pWRestricted] > 0) return GiftPlayer(playerid, giveplayerid);
		        givePlayerValidWeapon(giveplayerid, 25, AMMO_SHOTGUN);
		        givePlayerValidWeapon(giveplayerid, 25, AMMO_DEAGLE);
		        givePlayerValidWeapon(giveplayerid, 25, AMMO_MINIGUN);
		        givePlayerValidWeapon(giveplayerid, 25, AMMO_SNIPER);
		        givePlayerValidWeapon(giveplayerid, 25, AMMO_MINIGUN);
		        SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won a full weapon set!");
		    }
		    else if(gift == 2)
		    {
		        PlayerInfo[giveplayerid][pFirstaid]++;
		        SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won a first aid kit!");
		    }
		    else if(gift == 3)
		    {
		        PlayerInfo[giveplayerid][pMats] += 2000;
		        SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 2,000 materials!");
		    }
		    else if(gift == 4)
		    {
		        if(PlayerInfo[giveplayerid][pWarns] != 0)
		        {
		        	PlayerInfo[giveplayerid][pWarns]--;
		        	SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won a single warning removal!");
				}
				else
				{
        			SendClientMessageEx(playerid, COLOR_GRAD2, "Random gift ended up in a removal of one warning - let's try again!");
        			GiftPlayer(playerid, giveplayerid);
				    return 1;
				}
		    }
		    else if(gift == 5)
		    {
				PlayerInfo[giveplayerid][pPot] += 50;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 50 grams of pot!");
		    }
		    else if(gift == 6)
		    {
		        PlayerInfo[giveplayerid][pCrack] += 25;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 25 grams of crack!");
		    }
		    else if(gift == 7)
		    {
		        GivePlayerCash(giveplayerid, 20000);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won $200.00!");
		    }
			else if(gift == 8)
			{
				new year,month,day,log[128];
				getdate(year, month, day);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won a free car!");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Note: ScreenShot sebagai bukti reward, lalu hubungi Admin, Reward akan hangus dalam 1x24 jam.");
                format(String, sizeof(String), "Free Car (Gift), (%d/%d/%d)", day, month, year);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, String);
				format(String, sizeof(String), "{FF6347}AdmCmd: %s has just gifted %s and he won a free car.", PlayerInfo[playerid][pAdminName], GetName(giveplayerid));
				ABroadCast(COLOR_YELLOW, String, 1);
				format(log, sizeof(log), "{FF6347}AdmCmd: %s has just gifted %s and he won a free car(%d-%d-%d)", PlayerInfo[playerid][pAdminName], GetName(giveplayerid), day, month, year);
				Log("logs/gifts.log", log);
			}
		}
		PlayerInfo[giveplayerid][pGiftTime] = 300;
	}
	return 1;
}

Float:GetDistance( Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2 )
{
	new Float:d;
	d += floatpower(x1-x2, 2.0 );
	d += floatpower(y1-y2, 2.0 );
	d += floatpower(z1-z2, 2.0 );
	d = floatsqroot(d);
	return d;
}
SurfingCheck(vehicleid)
{
	foreach(Player, p)
	{
		if(GetPlayerSurfingVehicleID(p) == vehicleid)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(p, x, y, z);
		    SetPVarFloat(p, "tempPosX", x);
			SetPVarFloat(p, "tempPosY", x);
			SetPVarFloat(p, "tempPosZ", x);

			SetTimerEx("SurfingFix", 2000, 0, "i", p);
		}
	}
}
forward PressJump(playerid);
public PressJump(playerid)
{
    PlayerPressedJump[playerid] = 0;
    ClearAnimations(playerid);
    return 1;
}
forward PressJumpReset(playerid);
public PressJumpReset(playerid)
{
    PlayerPressedJump[playerid] = 0;
    return 1;
}
public ModCar(playerid) { // changed to switch method to reduce processor load on server
//	new modelid = GetVehicleModel(GetPlayerVehicleID(playerid)); // this executes a fair amt of stuff, so running it once to populate variable (modelid),THEN checking variable, makes more sense
	switch(pmodelid[playerid]) {
        case 562,565,559,561,560,575,534,567,536,535,576,411,579,602,496,518,527,589,597,419,
		533,526,474,545,517,410,600,436,580,439,549,491,445,604,507,585,587,466,492,546,551,516,
		426, 547, 405, 409, 550, 566, 540, 421,	529,431,438,437,420,525,552,416,433,427,490,528,
		407,544,470,598,596,599,601,428,499,609,524,578,486,406,573,455,588,403,514,423,
		414,443,515,456,422,482,530,418,572,413,440,543,583,478,554,402,542,603,475,568,504,457,
        483,508,429,541,415,480,434,506,451,555,477,400,404,489,479,442,458,467,558,444: {
		    TogglePlayerControllable(playerid,1);
 			return SendClientMessage(playerid, COLOR_WHITE, "[INFO] Select an item and push the SPACEBAR to approve.");
		}
		default: return SendClientMessage(playerid,COLOR_RED,"[WARNING] You are not allowed to modify/tune this vehicle");
	}
	return 1;
}
public settime(playerid)
{
	new String[256],year,month,day,hours,minutes,seconds;
	getdate(year, month, day), gettime(hours, minutes, seconds);
	format(String, sizeof String, "%d/%s%d/%s%d", day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year);
	TextDrawSetString(Date, String);
	format(String, sizeof String, "%s%d:%s%d:%s%d", (hours < 10) ? ("0") : (""), hours, (minutes < 10) ? ("0") : (""), minutes, (seconds < 10) ? ("0") : (""), seconds);
	TextDrawSetString(Time, String);
}

forward MessageToAdmins(color,const String[]);
public MessageToAdmins(color,const String[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
    if(IsPlayerConnected(i))
    if(PlayerInfo[i][pAdmin] >= 1) // replace the variable and the value by your variable by default
    SendClientMessage(i, color, String);
    }
    return 1;
}

forward SurfingFix(playerid);
public SurfingFix(playerid)
{
	AC_BS_SetPlayerPos(playerid, GetPVarFloat(playerid, "tmpPosX"), GetPVarFloat(playerid, "tmpPosY"), GetPVarFloat(playerid, "tmpPosZ"));
	DeletePVar(playerid, "tmpPosX");
	DeletePVar(playerid, "tmpPosY");
	DeletePVar(playerid, "tmpPosZ");

	return 1;
}
InvalidModCheck(model, partid) {
    switch(model) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595, 573, 556, 557, 539, 471, 432, 406, 444,
		448, 461, 462, 463, 468, 481, 509, 510, 521, 522, 581, 586, 417, 425, 447, 460, 469, 476, 487,
		488, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: return 0;
		default: switch(GetVehicleComponentType(partid)) {
			case 5: switch(partid) {
				case 1008, 1009, 1010: return 1;
				default: return 0;
			}
			case 7: switch(partid) {
				case 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1097, 1098, 1025: return 1;
				default: return 0;
			}
			case 8: switch(partid) {
				case 1086: return 1;
				default: return 0;
			}
			case 9: switch(partid) {
				case 1087: return 1;
				default: return 0;
			}
			default: for(new i; i < 4; i++) if(partid == vehicleMods[model - 400][GetVehicleComponentType(partid)][i]) {
				return 1;
			}
		}
	}
	return 0;
}
IsAtPohon(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,10.0,-1119.7800000,-1196.2800000,128.1300000))
		{
			return 1;
		}
        else if(IsPlayerInRangeOfPoint(playerid,10.0,-1124.1900000,-1207.5900000,128.0300000))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,10.0,-1107.9000000,-1196.0600000,128.2300000))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,10.0,-1100.8500000,-1208.7000000,127.9200000))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,10.0,-1111.8400000,-1213.1600000,128.0200000))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,-983.6861,-1080.9033,129.2188))
		{
			return 1;
        }
	}
	return 0;
}

//=======================Pom Bensin =============================
stock StopRefueling(playerid)
{
 	for(new idx = 1; idx < sizeof(BizzInfo); idx++)
	{
		CounterRefuel[playerid]=0;
		LimitFuel[playerid]=0;
		RefuelingVehicle[playerid] = 0; RefuelingVehiclePrice[playerid] = 0; KillTimer(RefuelingVehicleTimer[playerid]);
		return 1;
	}
	return 1;
}
forward ReFill(playerid);
public ReFill(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid) || VehicleFuel[GetPlayerVehicleID(playerid)] >= 100.0 || GetPlayerCash(playerid) < 1 || CounterRefuel[playerid] >= LimitFuel[playerid] )
	{
		StopRefueling(playerid);
	}
	else
	{
	    new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON) return StopRefueling(playerid);
		VehicleFuel[GetPlayerVehicleID(playerid)] += 1.0;
		if(VehicleFuel[GetPlayerVehicleID(playerid)] >= 100.0){
			VehicleFuel[GetPlayerVehicleID(playerid)] = 100.0;
		}
		CounterRefuel[playerid]++;
	}
	return 1;
}


public Audio_OnClientConnect(playerid)
{
	new String[10000];
	format(String,sizeof(String),"(Audio Plugin) %s(%d) has connected to the audio server.",PlayerInfo[playerid][pNormalName],playerid);
	SendClientMessageEx(playerid, 0xA9C4E4FF, String);
	SendClientMessageEx(playerid, 0xA9C4E4FF, "(Audio Plugin) Checking and downloading audio files, Please wait...");
	Audio_TransferPack(playerid);
	return 1;
}

public Audio_OnPlay(playerid, handleid)
{
	new String[10000];
	format(String, sizeof(String), "(Audio Plugin) Debug: Audio playback started for handle ID %d.", handleid);
	SendClientMessage(playerid, 0xA9C4E4FF, String);
}

public Audio_OnStop(playerid, handleid)
{
	new String[10000];
	format(String, sizeof(String), "(Audio Plugin) Debug: Audio playback stopped for handle ID %d.", handleid);
	SendClientMessage(playerid, 0xA9C4E4FF, String);
}

public Audio_OnTransferFile(playerid, file[], current, total, result)
{
	if (current == total)
	{
		SendClientMessageEx(playerid, 0xA9C4E4FF, "(Audio Plugin) All audio files have been downloaded and processed, Thank you!");
		SendAudioToPlayer(playerid, 1183, 100, 0);
	}
	return 1;
}


public Audio_OnClientDisconnect(playerid)
{
	new String[10000];
	format(String,sizeof(String),"(Audio Plugin) %s(%d) has disconnected from the audio server.",PlayerInfo[playerid][pNormalName],playerid);
	SendClientMessageEx(playerid, 0xA9C4E4FF, String);
	return 1;
}

public Audio_OnTrackChange(playerid, handleid, track[])
{
	new String[10000];
	format(String, sizeof(String), "(Audio Plugin) Debug: Now playing \"%s\" for handle ID %d.", track, handleid);
	SendClientMessage(playerid, 0xA9C4E4FF, String);
	format(String, sizeof(String), "* Now Playing: %s.",track);
	SendClientMessageEx(playerid, COLOR_PURPLE, String);
 	return 1;
}

SendBlankAudioTick(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(Audio_IsClientConnected(playerid))
	    {
			new handleid = Audio_Play(playerid, 1, false, false, false);
			Audio_SetVolume(playerid, handleid, 0);
	    }
	    else
	    {
			return 0;
	    }
	}
	return 1;
}

forward SendAudioToPlayer(playerid, audioid, volume, seek);
public SendAudioToPlayer(playerid, audioid, volume, seek)
{
	if(IsPlayerConnected(playerid))
	{
		if(Audio_IsClientConnected(playerid))
		{
			new localhandle = Audio_Play(playerid,audioid,false,false,false);
			Audio_SetVolume(playerid, localhandle, volume);
			Audio_SetPosition(playerid, localhandle, seek);
		}
		else
		{
		    return 0;
		}
	}
	return 1;
}

SendAudioToRange(audioid, volume, seek, Float:x, Float:y, Float:z, Float:range)
{
	if(audiohandleglobal >= 99)
	{
	    audiohandleglobal = 0;
	}
	else
	{
	    audiohandleglobal++;
	}

	foreach(Player, i)
	{
	    if(IsPlayerConnected(i))
	    {
			if(Audio_IsClientConnected(i))
			{
                if(IsPlayerInRangeOfPoint(i,range,x,y,z))
                {
                    new localhandle = Audio_Play(i,audioid,false,false,false);
					Audio_Set3DPosition(i, localhandle, x, y, z, range);
					Audio_SetVolume(i, localhandle, volume);
					Audio_SetPosition(i, localhandle, seek);
     				audiohandle[i][audiohandleglobal] = localhandle;
                }
			}
	    }
	}
	return audiohandleglobal;
}

stock nearByMessage(playerid, color, String[], Float: Distance = 12.0) {

	new
	    Float: nbCoords[3];

	GetPlayerPos(playerid, nbCoords[0], nbCoords[1], nbCoords[2]);

	foreach(Player, i) {
	    if(IsPlayerConnected(i)){
	        if(IsPlayerInRangeOfPoint(i, Distance, nbCoords[0], nbCoords[1], nbCoords[2]) && (GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))) {
				SendClientMessage(i, color, String);
			}
	    }
	}

	return 1;
}

stock SendAudioURLToRange(url[], volume, seek, Float:x, Float:y, Float:z, Float:range)
{
    if(audiohandleglobal >= 99)
	{
	    audiohandleglobal = 0;
	}
	else
	{
	    audiohandleglobal++;
	}
	foreach(Player, i)
	{
	    if(IsPlayerConnected(i))
	    {
			if(Audio_IsClientConnected(i))
			{
                if(IsPlayerInRangeOfPoint(i,range,x,y,z))
                {
                    new localhandle = Audio_PlayStreamed(i,url,false,false,false);
					Audio_Set3DPosition(i, localhandle, x, y, z, range);
					Audio_SetVolume(i, localhandle, volume);
					Audio_SetPosition(i, localhandle, seek);
     				audiohandle[i][audiohandleglobal] = localhandle;
                }
			}
	    }
	}
	return audiohandleglobal;
}
AntiDeAMX()
{
    new a[][] = {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}
forward SetVehicleEngine(vehicleid, playerid);
public SetVehicleEngine(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(engine == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,0,alarm,doors,bonnet,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "ENGINE: Mesin telah berhasil mati.");
		DeletePVar(playerid, "fuelonoff");
		DestroyProgressBar(FuelBar[playerid]);
		textdrawscount--;
		FuelBar[playerid] = INVALID_BAR_ID;
		arr_Engine{vehicleid} = 0;
		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			if(GetPVarInt(playerid, "togneon") == 1)
			{
				DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvNeonObj]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvNeonObj2]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvNeonObj3]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvNeonObj4]);
				SetPVarInt(playerid, "togneon", 0);
				return 1;
			}
		}
	}
    else if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)
	{
		new
			Float: f_vHealth;

		GetVehicleHealth(vehicleid, f_vHealth);
		if(f_vHealth < 350.0) return SendClientMessageEx(playerid, COLOR_RED, "ENGINE: Mesin tidak dapat menyala karena mengalami kerusakan.");
	    if(VehicleFuel[vehicleid] <= 0.0) return SendClientMessageEx(playerid, COLOR_RED, "ENGINE: Mesin tidak dapat menyala karena tangki kosong.");
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		arr_Engine{vehicleid} = 1;
		SendClientMessageEx(playerid, COLOR_ARWIN, "ENGINE: Anda telah menghidupkan mesin kendaraan.");
		SetPVarInt(playerid, "fuelonoff", 1);
	}
	return 1;
}

SetVehicleLights(vehicleid, playerid)
{
 	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(lights == VEHICLE_PARAMS_OFF)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "VEHICLEINFO: Lights {00D900}ON.");
	}
    else
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "VEHICLEINFO: Lights {FF0000}OFF.");
	}
	return 1;
}

SetVehicleHood(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(bonnet == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "VEHICLEINFO: Hood {FF0000}CLOSED.");
	}
    else if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "VEHICLEINFO: Hood {00D900}OPENED.");
	}
	return 1;
}

SetVehicleTrunk(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(boot == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "VEHICLEINFO: Trunk {FF0000}CLOSED.");
	}
    else if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "VEHICLEINFO: Trunk {00D900}OPENED.");
	}
	return 1;
}
stock SendBugMessage(member, color, String[])
{
	foreach(Player, i)
	{
 		if(PlayerInfo[i][pMember] == member && gBug[i] == 1)
		{
			SendClientMessageEx(i, color, String);
		}
	}
}
stock SendSIUBugMessage(member, color, String[])
{
	foreach(Player, i)
	{
 		if(PlayerInfo[i][pMember] == member && PlayerInfo[i][pDivision] == 4 && gBugSIU[i] == 1)
   		{
			SendClientMessageEx(i, color, String);
		}
	}
}

CheckVPH(newph)
{
        new PHList[256];
        new number;
        new String[512];
        new File: file = fopen("PHList.cfg", io_read);
        if (file)
		{
            while(fread(file, String))
			{
            	strmid(PHList, String, 0, strlen(String)-2, 255);
                number = strval(PHList);
                if (number == newph)
				{
                	fclose(file);
                    return 1;
    			}
			}
            fclose(file);
            return 0;
        }
        return 1;
}

CheckPH(playerid)
{
        if(PlayerInfo[playerid][pPnumber] == 0) {return 0;}
        new PHList[256];
        new number;
        new String[512];
        if(!fexist("PHList.cfg")) fcreate("PHList.cfg");
        new File: file = fopen("PHList.cfg", io_read);
        if (file)
		{
            while(fread(file, String))
			{
            	strmid(PHList, String, 0, strlen(String)-2, 255);
                number = strval(PHList);
                if (number == PlayerInfo[playerid][pPnumber])
				{
                	fclose(file);
                    return 1;
    			}
			}
            fclose(file);
            new File: file2 = fopen("PHList.cfg", io_append);
            format(String, sizeof(String), "%d\r\n", PlayerInfo[playerid][pPnumber]);
            fwrite(file2, String);
            fclose(file2);
            printf("New number added to PHList.cfg, ph:%d player:%s", PlayerInfo[playerid][pPnumber], PlayerInfo[playerid][pNormalName]);
            return 0;
        }
        return 1;
}

ReplacePH(oldph, newph)
{
    new File: file2 = fopen("tmpPHList.cfg", io_write);
    new number;
    new String[512];
    new PHList[256];
    format(String, sizeof(String), "%d\r\n", newph);
    fwrite(file2, String);
    fclose(file2);
    file2 = fopen("tmpPHList.cfg", io_append);
    new File: file = fopen("PHList.cfg", io_read);
    while(fread(file, String))
	{
        strmid(PHList, String, 0, strlen(String)-1, 255);
        number = strval(PHList);
    	if (number != oldph)
		{
            format(String, sizeof(String), "%d\r\n", number);
        	fwrite(file2, String);
    	}
    }
    fclose(file);
    fclose(file2);
    file2 = fopen("PHList.cfg", io_write);
    file = fopen("tmpPHList.cfg", io_read);
	while(fread(file, String))
	{
        strmid(PHList, String, 0, strlen(String)-1, 255);
        number = strval(PHList);
        if (number != oldph)
		{
            format(String, sizeof(String), "%d\r\n", number);
        	fwrite(file2, String);
    	}
    }
    fclose(file);
    fclose(file2);
	fremove("tmpPHList.cfg");
	printf("ph %d replaced with ph %d in PHList.cfg", oldph, newph);
	return 1;
}


stock givePlayerValidWeapon(playerid, weapon, ammo) { //Ammo
	new senjata, peluru, i;
	if((PlayerInfo[playerid][pConnectTime] < 1 || PlayerInfo[playerid][pWRestricted] > 0) && weapon != 46 && weapon != 43) return 1;
	switch(weapon) {
		case 0, 1: {
			if (ammo == 88998899) ammo = AMMO_MELEE;
	        PlayerInfo[playerid][pGuns][0] = weapon;
	        GivePlayerWeapon(playerid, weapon, ammo);
	    }
	    case 2, 3, 4, 5, 6, 7, 8, 9: {
			if (ammo == 88998899) ammo = AMMO_MELEE;
	        PlayerInfo[playerid][pGuns][1] = weapon;
	        GivePlayerWeapon(playerid, weapon, ammo);
	    }
	    case 22, 23, 24: {
			if (ammo == 88998899) {
				if (weapon == 24) ammo = AMMO_DEAGLE;
				else ammo = AMMO_9MM;
			}
	        PlayerInfo[playerid][pGuns][2] = weapon;
	        GivePlayerWeapon(playerid, weapon, ammo);
			i = 2;
			GetPlayerWeaponData(playerid, i, senjata, peluru);
			if (senjata == weapon) PlayerInfo[playerid][pGuns][i] = senjata;
			else PlayerInfo[playerid][pGunsAmmo][i] = ammo;
	    }
	    case 25, 26, 27: {
			if (ammo == 88998899) ammo = AMMO_SHOTGUN;
	        PlayerInfo[playerid][pGuns][3] = weapon;
	        GivePlayerWeapon(playerid, weapon, ammo);
			i = 3;
			GetPlayerWeaponData(playerid, i, senjata, peluru);
			if (senjata == weapon) PlayerInfo[playerid][pGuns][i] = senjata;
			else PlayerInfo[playerid][pGunsAmmo][i] = ammo;
	    }
	    case 28, 29, 32: {
			if (ammo == 88998899) ammo = AMMO_MINIGUN;
	        PlayerInfo[playerid][pGuns][4] = weapon;
	        GivePlayerWeapon(playerid, weapon, ammo);
			i = 4;
			GetPlayerWeaponData(playerid, i, senjata, peluru);
			if (senjata == weapon) PlayerInfo[playerid][pGuns][i] = senjata;
			else PlayerInfo[playerid][pGunsAmmo][i] = ammo;
	    }
	    case 30, 31: {
			if (ammo == 88998899) ammo = AMMO_M4AK;
	        PlayerInfo[playerid][pGuns][5] = weapon;
	        GivePlayerWeapon(playerid, weapon, ammo);
			i = 5;
			GetPlayerWeaponData(playerid, i, senjata, peluru);
			if (senjata == weapon) PlayerInfo[playerid][pGuns][i] = senjata;
			else PlayerInfo[playerid][pGunsAmmo][i] = ammo;
	    }
	    case 33, 34: {
			if (ammo == 88998899) ammo = AMMO_SNIPER;
	        PlayerInfo[playerid][pGuns][6] = weapon;
	        GivePlayerWeapon(playerid, weapon, ammo);
			i = 6;
			GetPlayerWeaponData(playerid, i, senjata, peluru);
			if (senjata == weapon) PlayerInfo[playerid][pGuns][i] = senjata;
			else PlayerInfo[playerid][pGunsAmmo][i] = ammo;
	    }
	    case 35, 36, 37, 38: {
			if (ammo == 88998899) {
				if (weapon == 37) ammo = AMMO_FT;
				else if (weapon == 38) ammo = AMMO_GG;
				else ammo = AMMO_RPG;
			}
	        PlayerInfo[playerid][pGuns][7] = weapon;
	        GivePlayerWeapon(playerid, weapon, ammo);
			i = 7;
			GetPlayerWeaponData(playerid, i, senjata, peluru);
			if (senjata == weapon) PlayerInfo[playerid][pGuns][i] = senjata;
			else PlayerInfo[playerid][pGunsAmmo][i] = ammo;
	    }
	    case 16, 17, 18, 39, 40: {
			if (ammo == 88998899) ammo = AMMO_GRANADE;
	        PlayerInfo[playerid][pGuns][8] = weapon;
	        GivePlayerWeapon(playerid, weapon, ammo);
			i = 8;
			GetPlayerWeaponData(playerid, i, senjata, peluru);
			if (senjata == weapon) PlayerInfo[playerid][pGuns][i] = senjata;
			else PlayerInfo[playerid][pGunsAmmo][i] = ammo;
	    }
	    case 41, 42, 43: {
			if (ammo == 88998899) ammo = AMMO_MELEE;
	        PlayerInfo[playerid][pGuns][9] = weapon;
	        GivePlayerWeapon(playerid, weapon, ammo);
	    }
	    case 10, 11, 12, 13, 14, 15: {
			if (ammo == 88998899) ammo = AMMO_MELEE;
	        PlayerInfo[playerid][pGuns][10] = weapon;
	        GivePlayerWeapon(playerid, weapon, ammo);
	    }
	    case 44, 45, 46: {
			if (ammo == 88998899) ammo = AMMO_MELEE;
	        PlayerInfo[playerid][pGuns][11] = weapon;
	        GivePlayerWeapon(playerid, weapon, ammo);
	    }
	}
	return 1;
}

GetWeaponSlot(weaponid)
{
	switch( weaponid )
	{
		case 0, 1:
		{
			return 0;
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			return 1;
		}
		case 22, 23, 24:
		{
			return 2;
		}
		case 25, 26, 27:
		{
			return 3;
		}
		case 28, 29, 32:
		{
			return 4;
		}
		case 30, 31:
		{
			return 5;
		}
		case 33, 34:
		{
			return 6;
		}
		case 35, 36, 37, 38:
		{
			return 7;
		}
		case 16, 17, 18, 39, 40:
		{
			return 8;
		}
		case 41, 42, 43:
		{
			return 9;
		}
		case 10, 11, 12, 13, 14, 15:
		{
			return 10;
		}
		case 44, 45, 46:
		{
			return 11;
		}
	}
	return -1;
}
//GUN HOLDING
GetWeaponObjectSlot(weaponid)
{
	new objectslot;

	switch (weaponid)
	{
    	case 22..24: objectslot = 0;
    	case 25..27: objectslot = 1;
		case 28, 29, 32: objectslot = 2;
		case 30, 31: objectslot = 3;
		case 33, 34: objectslot = 4;
		case 35..38: objectslot = 5;
	}
	return objectslot;
}

GetWeaponModel(weaponid)
{
    new const WeaponModels[] =
	{
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
	};
  	return WeaponModels[weaponid];
}

PlayerHasWeapon(playerid, weaponid)
{
	new weapon, ammo;

	for (new i; i < 13; i++)
	{
		GetPlayerWeaponData(playerid, i, weapon, ammo);
		if (weapon == weaponid && ammo) return 1;
	}
	return 0;
}

IsWeaponWearable(weaponid)
{
	switch (weaponid) {
		case 22..38: return 1;
	}
	return 0;
}

IsWeaponHideable(weaponid)
{
	switch (weaponid) {
		case 22..24, 28, 32: return 1;
	}
	return 0;
}

WeaponInfoFile(playerid)
{
	new name[MAX_PLAYER_NAME], file[40];

	GetPlayerName(playerid, name, sizeof(name));
	format(file, sizeof(file), "Weapons/%s.ini", name);

	return file;
}

ResetWeaponInfo(playerid)
{
	for (new i = 22; i <= 38; i++)
	{
		WeaponInfo[playerid][i][Position][0] = -0.115999;
		WeaponInfo[playerid][i][Position][1] = 0.189000;
		WeaponInfo[playerid][i][Position][2] = 0.087999;
		WeaponInfo[playerid][i][Position][3] = 0.000000;
		WeaponInfo[playerid][i][Position][4] = 44.500007;
		WeaponInfo[playerid][i][Position][5] = 0.000000;
		WeaponInfo[playerid][i][Bone] = 1;
		WeaponInfo[playerid][i][Hidden] = false;
	}
}

FormatWeaponInfo(playerid, weaponid)
{
	new string[68];

	format(string, sizeof(string), "%.5f | %.5f | %.5f | %.5f | %.5f | %.5f | %d | %d", WeaponInfo[playerid][weaponid][Position][0], WeaponInfo[playerid][weaponid][Position][1], WeaponInfo[playerid][weaponid][Position][2], WeaponInfo[playerid][weaponid][Position][3], WeaponInfo[playerid][weaponid][Position][4],  WeaponInfo[playerid][weaponid][Position][5], WeaponInfo[playerid][weaponid][Bone], WeaponInfo[playerid][weaponid][Hidden]);
	return string;
}

SaveWeaponInfo(playerid)
{
	new INI:File = INI_Open(WeaponInfoFile(playerid)), weapon[2];

	for (new i = 22; i <= 38; i++)
	{
		valstr(weapon, i);
		INI_WriteString(File, weapon, FormatWeaponInfo(playerid, i));
	}
	INI_Close(File);
	return 1;
}

forward LoadWeaponInfo_data(playerid, name[], value[]);
public LoadWeaponInfo_data(playerid, name[], value[])
{
	new string[68], weapon[2];

	for (new i = 22; i <= 38; i++)
	{
		valstr(weapon, i);
		INI_String(weapon, string, sizeof(string));
		sscanf(string, "ffffffdd", WeaponInfo[playerid][i][Position][0], WeaponInfo[playerid][i][Position][1], WeaponInfo[playerid][i][Position][2], WeaponInfo[playerid][i][Position][3], WeaponInfo[playerid][i][Position][4], WeaponInfo[playerid][i][Position][5], WeaponInfo[playerid][i][Bone], WeaponInfo[playerid][i][Hidden]);
	}
	return 1;
}

forward WeaponCheck(playerid);
public WeaponCheck(playerid)
{
	new weapon[13], ammo[13], objectslot, weaponcount;

	for (new i; i <= 12; i++)
	{
	    GetPlayerWeaponData(playerid, i, weapon[i], ammo[i]);

		if (weapon[i] && ammo[i] && !WeaponInfo[playerid][weapon[i]][Hidden] && IsWeaponWearable(weapon[i]) && EditingWeapon[playerid] != weapon[i])
		{
			objectslot = GetWeaponObjectSlot(weapon[i]);

		    if (GetPlayerWeapon(playerid) != weapon[i]) SetPlayerAttachedObject(playerid, objectslot, GetWeaponModel(weapon[i]), WeaponInfo[playerid][weapon[i]][Bone], WeaponInfo[playerid][weapon[i]][Position][0], WeaponInfo[playerid][weapon[i]][Position][1], WeaponInfo[playerid][weapon[i]][Position][2], WeaponInfo[playerid][weapon[i]][Position][3], WeaponInfo[playerid][weapon[i]][Position][4], WeaponInfo[playerid][weapon[i]][Position][5], 1.000000, 1.000000, 1.000000);
		    else if (IsPlayerAttachedObjectSlotUsed(playerid, objectslot)) RemovePlayerAttachedObject(playerid, objectslot);
		}
	}
	for (new i; i <= 5; i++) if (IsPlayerAttachedObjectSlotUsed(playerid, i))
	{
		weaponcount = 0;

		for (new j = 22; j <= 38; j++)
			if (PlayerHasWeapon(playerid, j) && GetWeaponObjectSlot(j) == i) weaponcount++;

		if (!weaponcount) RemovePlayerAttachedObject(playerid, i);
	}
	return 1;
}

stock ExecuterHackerAction(playerid) {
    PlayerInfo[playerid][pHackWarnings]++;
    PlayerInfo[playerid][pHackWarnTime] = 1;
    if(PlayerInfo[playerid][pHackWarnings] >= 1) {
		new
			wep = GetPlayerWeapon(playerid),
	        reason[94],
			wname[32];

		GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);
		GetWeaponName(wep, wname, sizeof(wname));
		printf("Hack Warning! %s[id:%d] Weapon %s[id:%d]", szPlayerName, playerid, wname, GetPlayerWeapon(playerid));
		format(reason, sizeof(reason), "Warning: {FFFFFF}%s may possibly be weapon [%s] hacking.", szPlayerName, wname);
		ABroadCast(0xFFFFFFAA, reason, 1);

	    if(PlayerInfo[playerid][pHackWarnings] >= MAX_WEAPON_HACK_WARNINGS) {
	        format(reason, sizeof(reason), "Weapon [%s] Hacking.", wname);
	        scriptBan(playerid, reason);
	    }
    }
	return 1;
}
stock scriptBan(playerid, reason[])
{
	new aString[240];
	GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);
	new year, month,day;
	getdate(year, month, day);
	new hour,minuite,second;
	gettime(hour,minuite,second);
	hour = shifthour;
	PlayerInfo[playerid][pBanned] = 1;
	strcpy(PlayerInfo[playerid][pAdminban], "BOT", MAX_PLAYER_NAME);
	format(PlayerInfo[playerid][pBanReason], 128, "%s",reason);
	format(PlayerInfo[playerid][pBanExpired],150, "%d:%d:%d",hour,minuite,second);
	format(PlayerInfo[playerid][pBanExpired2],150, "%d-%d-%d",day,month,year);
	new ip[32];
	GetPlayerIp(playerid,ip,sizeof(ip));
	AddBan(ip);
	new String2[500];
	format(String2, sizeof(String2), "Akun atau IP anda telah di banned!\n\n{FFFFFF}Account: {FF0000}%s\n{FFFFFF}IP: {FF0000}%s\n{FFFFFF}Di banned oleh: {FF0000}BOT \n{FFFFFF}Alasan: {FF0000}%s \n{FFFFFF}Pada Waktu: {FF0000}%s | {FFFFFF}Tanggal: {FF0000}%s\n\n{FFFFFF}Sihlakan Post forum bagian unban request",PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pIP],PlayerInfo[playerid][pBanReason],PlayerInfo[playerid][pBanExpired],PlayerInfo[playerid][pBanExpired2]);
	ShowPlayerDialog(playerid,BAN_DIALOG,DIALOG_STYLE_MSGBOX,"BANNED",String2,":(","");
	FixedKick(playerid);
   	format(aString, sizeof(aString), "BotCmd: %s telah di ban oleh Bot", szPlayerName);
   	SendClientMessageToAll(COLOR_LIGHTRED, aString);
   	format(aString, sizeof(aString), "BotCmd: Reason: %s", reason);
   	SendClientMessageToAll(COLOR_LIGHTRED, aString);
	return 1;
}
stock ConvertTime(cts, &ctm=-1,&cth=-1,&ctd=-1,&ctw=-1,&ctmo=-1,&cty=-1){
    //Defines to drastically reduce the code..

    #define PLUR(%0,%1,%2) (%0),((%0) == 1)?((#%1)):((#%2))

    #define CTM_cty 31536000
    #define CTM_ctmo 2628000
    #define CTM_ctw 604800
    #define CTM_ctd 86400
    #define CTM_cth 3600
    #define CTM_ctm 60

    #define CT(%0) %0 = cts / CTM_%0; cts %= CTM_%0


    new strii[128];

    if(cty != -1)
    {
        CT(cty); CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(cty,"year","years"),PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctmo != -1)
    {
        CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctw != -1)
    {
        CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctd != -1)
    {
        CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, and %d %s",PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(cth != -1)
    {
        CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, and %d %s",PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctm != -1)
    {
        CT(ctm);
        format(strii, sizeof(strii), "%d %s, and %d %s",PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    format(strii, sizeof(strii), "%d %s", PLUR(cts,"second","seconds"));
    return strii;
}
stock AddDay(d1,m1,y1,d2)
{
	new td, tm, ty, fix=0, sdate[32];
	td = d1+d2; tm=m1; ty=y1;
	while (fix != 1) {
		switch(tm) {
			case 1, 3, 5, 7, 8, 10:{
				if (td > 31) {
					td = td-31;
					tm = tm+1;
				}
				else fix = 1;
			}
			case 2: {
				if(ty%4==0 && ty%100!=0 || ty%400==0) {
					if (td > 29) {
						td = td-29;
						tm = tm+1;
					}
					else fix = 1;
				}
				else {
					if (td > 28) {
						td = td-28;
						tm = tm+1;
					}
					else fix = 1;
				}
			}
			case 4, 6, 9, 11: {
				if (td > 30) {
					td = td-30;
					tm = tm+1;
				}
				else fix = 1;
			}
			case 12: {
				if (td > 31) {
					td = td-31;
					tm = 1;
					ty = ty+1;
				}
				else fix = 1;
			}
		}
	}//End while
	format(sdate, sizeof(sdate), "%02d-%02d-%d", td, tm, ty);
	return sdate;
}

stock dateFromTimestamp( timestamp, _form=0 )
{
    /*
        ~ convert a Timestamp to a Date.
        ~ 10.07.2009

        date( 1247182451 )  will print >> 09.07.2009-23:34:11
        date( 1247182451, 1) will print >> 09/07/2009, 23:34:11
        date( 1247182451, 2) will print >> July 09, 2009, 23:34:11
        date( 1247182451, 3) will print >> 9 Jul 2009, 23:34
    */
    new year=1970, day=0, month=0, hour=0, mins=0, sec=0;

    new days_of_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    new names_of_month[12][10] = {"January","February","March","April","May","June","July","August","September","October","November","December"};
    new returnString[32];

    while(timestamp>31622400){
        timestamp -= 31536000;
        if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) timestamp -= 86400;
        year++;
    }

    if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )
        days_of_month[1] = 29;
    else
        days_of_month[1] = 28;


    while(timestamp>86400){
        timestamp -= 86400, day++;
        if(day==days_of_month[month]) day=0, month++;
    }

    while(timestamp>60){
        timestamp -= 60, mins++;
        if( mins == 60) mins=0, hour++;
    }

    sec=timestamp;

    switch( _form ){
        case 1: format(returnString, 31, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);
        case 2: format(returnString, 31, "%s %02d, %d, %02d:%02d:%02d", names_of_month[month],day+1,year, hour, mins, sec);
        case 3: format(returnString, 31, "%d %c%c%c %d, %02d:%02d", day+1,names_of_month[month][0],names_of_month[month][1],names_of_month[month][2], year,hour,mins);

        default: format(returnString, 31, "%02d.%02d.%d-%02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);
    }

    return returnString;
}

stock unixTimeConvert(timestamp, compare = -1) {
    if(compare == -1)
		compare = gettime();

    new
        n,
        Float:d = (timestamp > compare) ? timestamp - compare : compare - timestamp,
        returnstr[32];

    if (d < 60) {
        format(returnstr, sizeof(returnstr), "< 1 minute");
        return returnstr;
    } else if (d < 3600) { // 3600 = 1 hour
        n = floatround(floatdiv(d, 60.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "minute");
    } else if (d < 86400) { // 86400 = 1 day
        n = floatround(floatdiv(d, 3600.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "hour");
    } else if (d < 2592000) { // 2592000 = 1 month
        n = floatround(floatdiv(d, 86400.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "day");
    } else if (d < 31536000) { // 31536000 = 1 year
        n = floatround(floatdiv(d, 2592000.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "month");
    } else {
        n = floatround(floatdiv(d, 31536000.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "year");
    }

    if (n == 1) {
        format(returnstr, sizeof(returnstr), "1 %s", returnstr);
    } else {
        format(returnstr, sizeof(returnstr), "%d %ss", n, returnstr);
    }
    return returnstr;
}

IsValidIP(ip[])
{
    new a;
	for (new i = 0; i < strlen(ip); i++)
	{
		if (ip[i] == '.')
		{
		    a++;
		}
	}
	if (a != 3)
	{
	    return 1;
	}
	return 0;
}

CheckBan(ip[])
{
	new String[20];
    new File: file = fopen("ban.cfg", io_read);
	while(fread(file, String))
	{
	    if (strcmp(ip, String, true, strlen(ip)) == 0)
	    {
	        fclose(file);
	        return 1;
	    }
	}
	fclose(file);
	return 0;
}

AddBan(ip[])
{
	if (CheckBan(ip) == 0)
	{
		new File: file = fopen("ban.cfg", io_append);
		new String[20];
		format(String, sizeof(String), "%s\r\n", ip);
	 	fwrite(file, String);
	 	fclose(file);
	 	foreach(Player, playerid)
		{
		    new playerIP[16];
			GetPlayerIp(playerid, playerIP, sizeof(playerIP));
			if (strcmp(playerIP, ip) == 0)
			{
			    new String2[500];
    			format(String2, sizeof(String2), "Akun atau IP anda telah di banned!\n\n{FFFFFF}Account: {FF0000}%s\n{FFFFFF}IP: {FF0000}%s\n{FFFFFF}Di banned oleh: {FF0000}%s\n{FFFFFF}Alasan: %s\n{FFFFFF}Pada Waktu: {FF0000}%s | {FFFFFF}Tanggal: {FF0000}%s\n\n{FFFFFF}Sihlakan Post forum bagian unban request",PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pIP],PlayerInfo[playerid][pAdminban],PlayerInfo[playerid][pBanReason],PlayerInfo[playerid][pBanExpired],PlayerInfo[playerid][pBanExpired2]);
				ShowPlayerDialog(playerid,BAN_DIALOG,DIALOG_STYLE_MSGBOX,"BANNED",String2,":(","");
	            SendClientMessage(playerid, COLOR_WHITE, "SERVER: You are banned from this server.");
				//Kick(playerid);
			}
		}
		return 1;
	}
	return 0;
}

RemoveBan(ip[])
{
    if (CheckBan(ip) == 1)
	{
	    new String[20];
		new File: file = fopen("ban.cfg", io_read);
		fcreate("tempBan.cfg");
		new File: file2 = fopen("tempBan.cfg", io_append);
		while(fread(file, String))
		{
			if (strcmp(ip, String, true, strlen(ip)) != 0 && strcmp("\n", String) != 0)
		    {
				fwrite(file2, String);
			}
		}
		fclose(file);
		fclose(file2);
		file = fopen("ban.cfg", io_write);
		file2 = fopen("tempBan.cfg", io_read);
		while(fread(file2, String))
		{
			fwrite(file, String);
		}
		fclose(file);
		fclose(file2);
		fremove("tempBan.cfg");
		return 1;
    }
	return 0;
}

stock GetPlayersName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}
stock IsValidSkin(skinid)
{
	if (skinid < 0 || skinid > 311)
	    return 0;

	switch (skinid)
	{
	    case
		0, 105, 106, 107, 102, 103, 69, 123,
		104, 114, 115, 116, 174, 175, 100, 247, 173,
		248, 117, 118, 147, 163, 21, 24, 143, 71,
		156, 176, 177, 108, 109, 110, 165, 166,
		265, 266, 267, 269, 270, 271, 274, 276,
		277, 278, 279, 280, 281, 282, 283, 284,
		285, 286, 287, 288, 294, 296, 297: return 0;
	}

	return 1;
}

stock GetVehicleSpeed(vehicleid, get3d)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock strfindcount(subString[], String[], bool:ignorecase = false, startpos = 0)
{
	new ncount, start = strfind(String, subString, ignorecase, startpos);
	while(start >- 1)
	{
		start = strfind(String, subString, ignorecase, start + strlen(subString));
		ncount++;
	}
	return ncount;
}

stock IsValidVehicleID(vehicleid)
{
   if(GetVehicleModel(vehicleid)) return 1;
   return 0;
}

public CloseCourtGate1()
{
	MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934,7698.23632812,4);
	return 1;
}
public CloseCourtGate2()
{
	MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719,7698.24169922,4);
	return 1;
}
public CloseWestLobby()
{
	MoveDynamicObject(westlobby1,239.71582031,116.09179688,1002.21502686,4);
	MoveDynamicObject(westlobby2,239.67968750,119.09960938,1002.21502686,4);
	return 1;
}
public CloseEastLobby()
{
	MoveDynamicObject(eastlobby1,253.14941406,110.59960938,1002.21502686,4);
	MoveDynamicObject(eastlobby2,253.18457031,107.59960938,1002.21502686,4);
	return 1;
}
public CloseBlastDoor()
{
	MoveDynamicObject(blastdoor[0],-764.11816406,2568.81445312,10021.5,2);
	return 1;
}
public CloseBlastDoor2()
{
    MoveDynamicObject(blastdoor[1],-746.02636719,2535.19433594,10021.5,2);
	return 1;
}
public CloseBlastDoor3()
{
	MoveDynamicObject(blastdoor[2],-765.26171875,2552.31347656,10021.5,2);
	return 1;
}
public CloseCage()
{
   	MoveDynamicObject(cage,-773.52050781,2545.62109375,10022.29492188,2);
	return 1;
}
public CloseLocker()
{
	MoveDynamicObject(locker1,267.29980469,112.56640625,1003.61718750,4);
	MoveDynamicObject(locker2,264.29980469,112.52929688,1003.61718750,4);
	return 1;
}
public CloseEntranceDoor()
{
    MoveDynamicObject(entrancedoor,-766.27539062,2536.58691406,10019.5,2);
	return 1;
}
public CloseCCTV()
{
	MoveDynamicObject(cctv1,264.44921875,115.79980469,1003.61718750,4);
	MoveDynamicObject(cctv2,267.46875000,115.83691406,1003.61718750,4);
	return 1;
}
public CloseChief()
{
	MoveDynamicObject(chief1,229.59960938,119.50000000,1009.21875000,4);
	MoveDynamicObject(chief2,232.59960938,119.53515625,1009.21875000,4);
	return 1;
}
public CloseChiefFbi()
{
	MoveDynamicObject(fbichief1,232.9210, 107.6005, 1009.2137,4);
	MoveDynamicObject(fbichief2,232.8668, 110.5419, 1009.2137,4);
	return 1;
}
public CloseSASD1()
{
	MoveDynamicObject(sasd1A,2511.65332031,-1697.00976562,561.79223633,4);
	MoveDynamicObject(sasd1B,2514.67211914,-1696.97485352,561.79223633,4);
	return 1;
}
public CloseSASD2()
{
	MoveDynamicObject(sasd2A,2516.87548828,-1697.01525879,561.79223633,4);
	MoveDynamicObject(sasd2B,2519.89257812,-1696.97509766,561.79223633,4);
	return 1;
}
public CloseSASD3()
{
	MoveDynamicObject(sasd3A,2522.15600586,-1697.01550293,561.79223633,4);
	MoveDynamicObject(sasd3B,2525.15893555,-1696.98010254,561.79223633,4);
	return 1;
}
public CloseSASD4()
{
	MoveDynamicObject(sasd4A,2511.84130859,-1660.08081055,561.79528809,4);
	MoveDynamicObject(sasd4B,2514.81982422,-1660.04650879,561.80004883,4);
	return 1;
}
public CloseSASD5()
{
	MoveDynamicObject(sasd5A,2522.86059570,-1660.07177734,561.80206299,4);
	MoveDynamicObject(sasd5B,2519.84228516,-1660.10888672,561.80004883,4);
	return 1;
}
public CloseSANewsStudio()
{
	MoveDynamicObject(SANewsStudioA,625.60937500,-10.80000019,1106.96081543,4);
	MoveDynamicObject(SANewsStudioB,625.64941406,-13.77000046,1106.96081543,4);
	return 1;
}
public CloseSANewsPrivate()
{
	MoveDynamicObject(SANewsPrivateA,625.61999512,-0.55000001,1106.96081543,4);
	MoveDynamicObject(SANewsPrivateB,625.65002441,-3.54999995,1106.96081543,4);
	return 1;
}
public CloseSANewsOffice()
{
	MoveDynamicObject(SANewsOfficeA,614.66998291,17.82812500,1106.98425293,4);
	MoveDynamicObject(SANewsOfficeB,617.69000244,17.86899948,1106.98425293,4);
	return 1;
}

ExecuteNOPAction(playerid)
{
	new String[10000];
	new newcar = GetPlayerVehicleID(playerid);
	if(NOPTrigger[playerid] >= MAX_NOP_WARNINGS) { return 1; }
	NOPTrigger[playerid]++;
	RemovePlayerFromVehicle(playerid);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	AC_BS_SetPlayerPos(playerid, X, Y, Z+2);
	NOPCheck(playerid);
	if(NOPTrigger[playerid] > 1)
	{
		new sec = (NOPTrigger[playerid] * 5000)/1000-1;
		format(String, sizeof(String), "{FF6347}AdmCmd: %s (ID %d) may be NOP hacking - restricted vehicle (model %d) for %d seconds.", PlayerInfo[playerid][pNormalName], playerid, GetVehicleModel(newcar),sec);
		ABroadCast(COLOR_YELLOW, String, 1);
	}
	return 1;
}

Random(min, max)
{
    new a = random(max - min) + min;
    return a;
}

stock SendReportToQue(reportfrom, report[])
{
    new bool:breakingloop = false, newid = INVALID_REPORT_ID;

	for(new i=0;i<MAX_REPORTS;i++)
	{
		if(!breakingloop)
		{
			if(Reports[i][HasBeenUsed] == 0)
			{
				breakingloop = true;
				newid = i;
			}
		}
    }
    if(newid != INVALID_REPORT_ID)
    {
        strmid(Reports[newid][Report], report, 0, strlen(report), 128);
        Reports[newid][ReportFrom] = reportfrom;
        Reports[newid][TimeToExpire] = 5;
        Reports[newid][HasBeenUsed] = 1;
        Reports[newid][BeingUsed] = 1;
        Reports[newid][ReportExpireTimer] = SetTimerEx("ReportTimer", 60000, 0, "d", newid);
        new String[10000];
        format(String, sizeof(String), "[REPORT:%d]%s[id%d]: %s", newid, GetPlayerNameEx(reportfrom), reportfrom, (report));
        ABroadCast(COLOR_REPORT,String,1);
    }
    else
    {
        ClearReports();
        SendReportToQue(reportfrom, report);
    }
}

public ClearReports()
{
	for(new i=0;i<MAX_REPORTS;i++)
	{
		strmid(Reports[i][Report], "None", 0, 4, 4);
		Reports[i][CheckingReport] = 999;
        Reports[i][ReportFrom] = 999;
        Reports[i][TimeToExpire] = 5;
        Reports[i][HasBeenUsed] = 0;
        Reports[i][BeingUsed] = 0;
	}
	return 1;
}

stock GetDistanceToCar(playerid, veh, Float: posX = 0.0, Float: posY = 0.0, Float: posZ = 0.0) {

	new
	    Float: Floats[2][3];

	if(posX == 0.0 && posY == 0.0 && posZ == 0.0) {
		if(!IsPlayerInAnyVehicle(playerid)) GetPlayerPos(playerid, Floats[0][0], Floats[0][1], Floats[0][2]);
		else GetVehiclePos(GetPlayerVehicleID(playerid), Floats[0][0], Floats[0][1], Floats[0][2]);
	}
	else {
		Floats[0][0] = posX;
		Floats[0][1] = posY;
		Floats[0][2] = posZ;
	}
	GetVehiclePos(veh, Floats[1][0], Floats[1][1], Floats[1][2]);
	return floatround(floatsqroot((Floats[1][0] - Floats[0][0]) * (Floats[1][0] - Floats[0][0]) + (Floats[1][1] - Floats[0][1]) * (Floats[1][1] - Floats[0][1]) + (Floats[1][2] - Floats[0][2]) * (Floats[1][2] - Floats[0][2])));
}

stock GetClosestCar(playerid, exception = INVALID_VEHICLE_ID) {

    new
		Float: Distance,
		target = -1,
		Float: vPos[3];

	if(!IsPlayerInAnyVehicle(playerid)) GetPlayerPos(playerid, vPos[0], vPos[1], vPos[2]);
	else GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);

    for(new v; v < MAX_VEHICLES; v++) if(GetVehicleModel(v) >= 400) {
        if(v != exception && (target < 0 || Distance > GetDistanceToCar(playerid, v, vPos[0], vPos[1], vPos[2]))) {
            target = v;
            Distance = GetDistanceToCar(playerid, v, vPos[0], vPos[1], vPos[2]); // Before the rewrite, we'd be running GetPlayerPos 2000 times...
        }
    }
    return target;
}

forward Three();
public Three()
{
 	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "3");
	return 1;
}

forward Two();
public Two()
{
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "2");
	return 1;
}

forward One();
public One()
{
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "1");
 	return 1;
}

forward BackupClear(playerid, calledbytimer);
public BackupClear(playerid, calledbytimer)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 12 || gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5)
		{
			if (Backup[playerid] == 1)
			{
			    foreach(Player, i)
				{
					if(gTeam[i] == 2 || IsACop(i))
					{
						SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
					}
				}
				SetPlayerToTeamColor(playerid);
				if (calledbytimer != 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "Your backup request has been cleared.");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "Your backup request has been cleared automatically.");
				}
				Backup[playerid] = 0;
			}
			else
			{
				if (calledbytimer != 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have an active backup request!");
				}
			}
		}
		else
		{
			if (calledbytimer != 1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Cop / FBI!");
			}
		}
	}
	return 1;
}

forward ClearDrugs(playerid);
public ClearDrugs(playerid)
{
	UsedWeed[playerid] = 0;
	UsedCrack[playerid] = 0;
	return 1;
}

stock PlayerFacePlayer( playerid, targetplayerid )
{
	new Float: Angle;
	GetPlayerFacingAngle( playerid, Angle );
	SetPlayerFacingAngle( targetplayerid, Angle+180 );
	return true;
}

stock GivePlayerEventWeapons( playerid )
{
	if( GetPVarInt( playerid, "EventToken" ) == 1 )
	{
		GivePlayerWeapon( playerid, EventKernel[ EventWeapons ][ 0 ], 60000 );
		GivePlayerWeapon( playerid, EventKernel[ EventWeapons ][ 1 ], 60000 );
		GivePlayerWeapon( playerid, EventKernel[ EventWeapons ][ 2 ], 60000 );
		GivePlayerWeapon( playerid, EventKernel[ EventWeapons ][ 3 ], 60000 );
		GivePlayerWeapon( playerid, EventKernel[ EventWeapons ][ 4 ], 60000 );
	}

	return 1;
}

DollahScoreUpdate()
{
	new LevScore;
	foreach(Player, i)
	{
   		LevScore = PlayerInfo[i][pLevel];
		SetPlayerScore(i, LevScore);
	}
	return 1;
}

stock GetMonth(month)
{
	new monthname[24];
	switch(month)
	{
	    case 1: monthname = "Januari";
	    case 2: monthname = "Februari";
	    case 3: monthname = "Maret";
	    case 4: monthname = "April";
	    case 5: monthname = "May";
	    case 6: monthname = "Juni";
	    case 7: monthname = "Juli";
	    case 8: monthname = "Agustus";
	    case 9: monthname = "September";
	    case 10: monthname = "Oktober";
	    case 11: monthname = "November";
	    case 12: monthname = "Desember";
		default: monthname = "Unknown";
	}
	return monthname;
}

stock crc32(String[])
{
	new crc_table[256] = {
			0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535,
			0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD,
			0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D,
			0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
			0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,
			0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C,
			0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC,
			0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
			0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB,
			0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,
			0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB,
			0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
			0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA,
			0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE,
			0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,
			0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
			0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409,
			0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81,
			0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739,
			0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
			0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268,
			0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0,
			0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8,
			0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
			0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,
			0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703,
			0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7,
			0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
			0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE,
			0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,
			0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6,
			0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
			0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D,
			0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5,
			0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,
			0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
			0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
	};
	new crc = -1;
	for(new i = 0; i < strlen(String); i++)
	{
 		crc = ( crc >>> 8 ) ^ crc_table[(crc ^ String[i]) & 0xFF];
  	}
  	return crc ^ -1;
}
stock right(source[], len)
{
	new retval[MAX_STRING], srclen;
	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, MAX_STRING);
	return retval;
}
GetPlayerNameEx(playerid) {

	new
		sz_playerName[MAX_PLAYER_NAME],
		i_pos;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	while ((i_pos = strfind(sz_playerName, "_", false, i_pos)) != -1) sz_playerName[i_pos] = ' ';
	return sz_playerName;
}
stock fcopy(oldname[],newname[])
{
	new File:ohnd,File:nhnd;
	if (!fexist(oldname))
	{
		return 0;
	}
	ohnd=fopen(oldname,io_read);
	nhnd=fopen(newname,io_write);
	new buf2[1];
	for (new i=flength(ohnd);i>0;i--)
	{
		fputchar(nhnd, fgetchar(ohnd, buf2[0],false),false);
	}
	fclose(ohnd);
	fclose(nhnd);
	return 1;
}
stock StripNewLine(String[])
{
  new len = strlen(String);
  if (String[0]==0) return ;
  if ((String[len - 1] == '\n') || (String[len - 1] == '\r'))
    {
      String[len - 1] = 0;
      if (String[0]==0) return ;
      if ((String[len - 2] == '\n') || (String[len - 2] == '\r')) String[len - 2] = 0;
    }
}
stock frename(oldname[],newname[])
{
	if(!fexist(oldname)) return false;
	new String[255], File:old, File:neww;
	old = fopen(oldname, io_read);
	neww = fopen(newname, io_write);
	while(fread(old, String)){
		StripNewLine(String);
		format(String,sizeof(String),"%s\r\n",String);
		fwrite(neww, String);
	}
	fclose(old);
	fclose(neww);
	fremove(oldname);
	return true;
}

//------------------------------------------------------------------------------------------------------

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
 	Seatbelt[playerid] = 0;
	IsPlayerSteppingInVehicle[playerid] = vehicleid;
	if(PlayerCuffed[playerid] != 0) SetPVarInt( playerid, "ToBeEjected", 1 );
	if(GetPVarInt(playerid, "Injured") == 1) SetPVarInt(playerid, "ToBeEjected", 1);
	SetPVarInt(playerid, "LastWeapon", GetPlayerWeapon(playerid));
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(engine == VEHICLE_PARAMS_UNSET) switch(GetVehicleModel(vehicleid)) {
		case 509, 481, 510: VehicleFuel[vehicleid] = 100, arr_Engine{vehicleid} = 1, SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		default: SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective), arr_Engine{vehicleid} = 0;
	}
    if(GetVehicleModel(vehicleid) == 519 && ispassenger == 1)
    {
    	PutPlayerInVehicle(playerid, vehicleid, 1);
    	TogglePlayerControllable(playerid, 1);
    	InsideShamal[playerid] = vehicleid;
    }
	else if(!IsPlayerInRangeOfVehicle(playerid, 7.5) || LockStatus[vehicleid] >= 1) { // G-ging fix
		ClearAnimations(playerid);
	}
	return 1;
}

IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member==1 || member==2 || member== 3 || member==5 || member==3 || member==6 || member==7 || member==11 || member==13)
		{
			return 1;
		}
		else if(leader==1 || leader==2 || leader == 3 || leader==5 || leader==3 || leader==6 || leader==7 || leader==11 || leader==13)
		{
			return 1;
		}
 	}
	return 0;
}

stock IsMDCPermitted(playerid)
{
	if(	PlayerInfo[playerid][pMember] == 3|| PlayerInfo[playerid][pLeader] == 3 ||
		PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1||
		PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 ||
		PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 ||
		PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 7 ||
		PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pMember] == 11 ||
		PlayerInfo[playerid][pLeader] == 11 || PlayerInfo[playerid][pMember] == 13 ||
		PlayerInfo[playerid][pLeader] == 13)
	{
		return 1;
	}
	return 0;
}

stock GetFactionNameEx(amount)
{
	new String[56];
	if(amount == 1)
	{
	    String = "San Andreas Police Department";
	}
	if(amount == 2)
	{
	    String = "FBI";
	}
	if(amount == 3)
	{
	    String = "SFPD";
	}
	if(amount == 4)
	{
	    String = "San Andreas Medic Department";
	}
	if(amount == 5)
	{
	    String = "";
	}
	if(amount == 6)
	{
	    String = "San Andreas Goverment Service";
	}
	if(amount == 7)
	{
	    String = "SASD";
	}
	if(amount == 9)
	{
	    String = "San Andreas Network";
	}
	if(amount == 10)
	{
	    String = "Transport Company";
	}
	return String;
}

stock GetPlayerFactionInfo(targetid, rank[64], division[64], employer[64])
{
	switch (PlayerInfo[targetid][pMember]) // employer/rank/division data is pulled from here
	{
	    case 1:
		{
            employer = "San Andreas Police Department";
			switch(PlayerInfo[targetid][pRank])
			{
			    case 1: rank = "PD Officer I";
			    case 2: rank = "PD Officer II";
			    case 3: rank = "PD Officer III";
			    case 4: rank = "Sergeant I";
			    case 5: rank = "Sergeant II";
			    case 6: rank = "Lieutenant";
			    case 7: rank = "Captain";
			    case 8: rank = "Commander";
			    case 9: rank = "Deputy Of Chief";
			    case 10: rank = "Chief Of Police";
			    default: rank = "Cadet";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "General Duties";
			    case 2: division = "II";
			    case 3: division = "FTO";
			    case 4: division = "IA";
			    case 5: division = "SWAT";
			    default: division = "General Duties";
			}
		}
  		case 2:
		{
            employer = "FBI";
			switch(PlayerInfo[targetid][pRank])
			{
			    case 1: rank = "Staff";
			    case 2: rank = "Agent";
			    case 3: rank = "Senior Agent";
			    case 4: rank = "Special Agent";
			    case 5: rank = "Assistant Director";
			    case 6: rank = "Director";
			    default: rank = "Intern";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "General Duties";
			    case 2: division = "GU";
			    case 3: division = "FAN";
			    case 4: division = "CID";
			    case 5: division = "IA";
				case 6: division = "NSB";
			    default: division = "General Duties";
			}
		}
  		case 3:
		{
            employer = "SFPD";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "Officer";
				case 2: rank = "Corporal";
				case 3: rank = "Sergeant";
				case 4: rank = "Lieutenant";
				case 5: rank = "Captain";
				case 6: rank = "Chief";
				default: rank = "Cadet";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "HR";
				case 2: division = "ERT";
			    case 3: division = "IA";
			    case 4: division = "SO";
			    default: division = "General Duties";
			}
		}
  		case 4:
		{
            employer = "San Andreas Medical Department";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "EMT Paramedic I";
				case 2: rank = "EMT Paramedic II";
				case 3: rank = "Senior Paramedic";
				case 4: rank = "Doctor Medic I";
				case 5: rank = "Doctor Medic II";
				case 6: rank = "Head Of Paramedic";
				case 7: rank = "Supervisor I";
				case 8: rank = "Supervisor II";
				case 9: rank = "Deputy of Chief";
				case 10: rank = "Chief of Medic";
				default: rank = "Volunteer";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "FD";
			    case 2: division = "Life Flight";
			    case 3: division = "T&R";
			    default: division = "General Duties";
			}
		}
		case 5:
		{
	        employer = "";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "Clerk of Court";
				case 2: rank = "District Attorney";
				case 3: rank = "District Judge";
				case 4: rank = "Appellate Judge";
				case 5: rank = "Associate Justice of the Supreme Court";
				case 6: rank = "Chief Justice of the Supreme Court";
				default: rank = "Clerk of Court";
			}
			division = "None";
		}
  		case 6:
		{
            employer = "San Andreas Goverment Service";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "Officer";
				case 2: rank = "Officer I";
                case 3: rank = "Officer II";
                case 4: rank = "Sergeant";
                case 5: rank = "Sergeant I";
				case 6: rank = "Sergeant II";
				case 7: rank = "Captain";
				case 8: rank = "Major";
				case 9: rank = "Deputy Warden";
				case 10: rank = "Warden";
				default: rank = "Intern";
			}
			division = "None";
		}
  		case 7:
		{
	        employer = "SASD";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "Deputy Sheriff Generalist I";
				case 2: rank = "Deputy Sheriff";
				case 3: rank = "Senior Of Deputy Sheriff";
				case 4: rank = "Corporal Of Sheriff";
				case 5: rank = "Lieutenant Sheriff";
				case 6: rank = "Commander Of Sheriff I";
				case 7: rank = "Commander Of Sheriff II";
				case 8: rank = "Assistant Chief Of Sheriff";
				case 9: rank = "Senior Of Assistant Sheriff";
				case 10: rank = "Chief Of Sheriff";
				default: rank = "Deputy";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 2: division = "TET";
			    case 3: division = "SCU";
			    case 4: division = "SORT";
			    case 5: division = "FTO";
			    default: division = "General Duties";
			}
		}
		case 9:
		{
			employer = "San Andreas Network";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "Reporter";
				case 2: rank = "Reporter I";
				case 3: rank = "Reporter II";
				case 4: rank = "Editor";
				case 5: rank = "Editor I";
				case 6: rank = "Editor II";
				case 7: rank = "Supervisor";
				case 8: rank = "HRD";
                case 9: rank = "Manager";
                case 10: rank = "CEO";
                default: rank = "Intern";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "Security";
			    case 2: division = "IA";
			    case 3: division = "Tech Support";
			    case 4: division = "TnR";
			    default: division = "General";
			}
		}
   		case 10:
		{
            employer = "Transport Company";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "Trainee";
				case 2: rank = "Driver";
				case 3: rank = "Dispatcher";
				case 4: rank = "Pilot";
				case 5: rank = "Assistant Director";
				case 6: rank = "Director";
				default: rank = "Trainee";
			}
			division = "None";
		}
	    default: { employer = "None"; division = "None"; rank = "N/A"; }
	}
	return 1;
}

IsInLSMD(playerid)
{
 	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member==4)
		{
			return 1;
		}
		else if(leader==4)
		{
			return 1;
		}
 	}
	return 0;
}

stock fcreate(filename[])
{
	if (fexist(filename)) return false;
	new File:fhnd;
	fhnd=fopen(filename,io_write);
	if (fhnd) {
		fclose(fhnd);
		return true;
	}
	return false;
}

IsAtArrestPoint(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0,-1606.307861, 673.740539, -5.242187) || IsPlayerInRangeOfPoint(playerid, 3.0,1528.3882,-1677.7719,5.8906) ||IsPlayerInRangeOfPoint(playerid, 3.0,295.6430,-1540.8610,24.5938) || IsPlayerInRangeOfPoint(playerid, 3.0,611.96, -587.25, 17.22) || IsPlayerInRangeOfPoint(playerid, 8.0,1379.0077,-274.9919,1.9850) || IsPlayerInRangeOfPoint(playerid, 8.0,-228.4971,985.1687,19.6088)
		|| IsPlayerInRangeOfPoint(playerid, 8.0,598.5661,-607.9127,-14.9744) || IsPlayerInRangeOfPoint(playerid, 4.0, 680.2208,-1546.9856,14.8516) || IsPlayerInRangeOfPoint(playerid, 3.0, 612.6097, -624.7800, -4.1500) || IsPlayerInRangeOfPoint(playerid, 3.0, 1772.0134,-1548.0470,9.90700))
		{//Tierra Robada + SFPD + LSPD
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0,-1394.333007, 2625.446533, 55.913421) || IsPlayerInRangeOfPoint(playerid, 4.0, 1566.4901,-1653.9076,28.3956) || IsPlayerInRangeOfPoint(playerid, 3.0,2182.20, 530.32, 1.19) || IsPlayerInRangeOfPoint(playerid, 3.0,292.7859,-1530.6685,76.5391) || IsPlayerInRangeOfPoint(playerid, 3.0,2334.65, 566.84, 7.78) || PlayerInfo[playerid][pVW] == 133337 || PlayerInfo[playerid][pVW] == 4 || PlayerInfo[playerid][pVW] == 1324123)
		{//LSPD int and FBI
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2226.8472,2458.2598,-7.4531))
		{
		    //SASD LV
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, -800.397094, -1877.925903, 11.668975))
		{
		    //PMC
		    return 1;
		}
 }
	return 0;
}
IsAtDeliverPatientPoint(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0,1142.4733,-1326.3633,13.6259) || IsPlayerInRangeOfPoint(playerid, 5.0, 1165.1564,-1368.8240,26.6502) || IsPlayerInRangeOfPoint(playerid, 3.0,2027.0599,-1410.6870,16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2024.5742,-1382.7844,48.3359))
		{//ALLSAINTS, ALL SAINTS ROOF, COUNTY GENERAL, COUNTY ROOF
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1227.2339,306.4730,19.7028) || IsPlayerInRangeOfPoint(playerid, 5.0, 1233.3384,316.4022,24.7578) || IsPlayerInRangeOfPoint(playerid, 3.0,-339.2989,1055.8138,19.7392) || IsPlayerInRangeOfPoint(playerid, 5.0, -334.1560,1051.4434,26.0125))
		{//RED COUNTY, RED COUNTY ROOF, FORT CARSON, Fortcarson ROOF
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, -2695.5725,639.4147,14.4531) || IsPlayerInRangeOfPoint(playerid, 5.0, -2656.0339,615.2567,66.0938))
		{//SF, SF ROOF
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, -1528.814331, 2540.706054, 55.835937))
		{//Tierra Robada
			return 1;
		}
 }
	return 0;
}

IsARC(carid) // RC Vehicles
{
	new RCs[] = { 441, 464, 465, 501, 564 };
	for(new i = 0; i < sizeof(RCs); i++)
	{
	    if(GetVehicleModel(carid) == RCs[i]) return 1;
	}
	return 0;
}

IsABike(fahrzeug)
{
    new Motorads[] = { 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471 };
    for(new i = 0; i < sizeof(Motorads); i++) {
        if(GetVehicleModel(fahrzeug) == Motorads[i]) return 1;
    }
    return 0;
}

IsAnSFPDCar(carid)
{
	for(new v = 0; v < sizeof(SFPDVehicles); v++)
	{
	    if(carid == SFPDVehicles[v]) return 1;
	}
	return 0;
}

IsAnSanNewsCar(carid)
{
	for(new v = 0; v < sizeof(SanNewsVehicles); v++)
	{
	    if(carid == SanNewsVehicles[v]) return 1;
	}
	return 0;
}
IsDMVCar(carid)
{
	for(new v = 0; v < sizeof(DMVCar); v++)
	{
		if(carid == DMVCar[v]) return 1;
	}
	return 0;
}
IsBUSCAR(carid)
{
	for(new v = 0; v < sizeof(BUS); v++)
	{
		if(carid == BUS[v]) return 1;
	}
	return 0;
}
IsSWEEPERCar(carid)
{
	for(new v = 0; v < sizeof(SWEEPER); v++)
	{
		if(carid == SWEEPER[v]) return 1;
	}
	return 0;
}
IsAnSASDCar(carid)
{
	for(new v = 0; v < sizeof(SASDVehicles); v++)
	{
	    if(carid == SASDVehicles[v]) return 1;
	}
	return 0;
}

IsAnEPCar(carid)
{
	for(new v = 0; v < sizeof(EPVehicles); v++)
	{
	    if(carid == EPVehicles[v]) return 1;
	}
	return 0;
}

IsAnWPCar(carid)
{
	for(new v = 0; v < sizeof(WPVehicles); v++)
	{
	    if(carid == WPVehicles[v]) return 1;
	}
	return 0;
}

IsAGovCar(carid)
{
	for(new v = 0; v < sizeof(GovVehicles); v++)
	{
	    if(carid == GovVehicles[v]) return 1;
	}
	return 0;
}

IsACopCar(carid)
{
	for(new v = 0; v < sizeof(LSPDVehicles); v++)
	{
	    if(carid == LSPDVehicles[v]) return 1;
	}
	return 0;
}


IsATowTruck(carid)
{
	if(GetVehicleModel(carid) == 485 || GetVehicleModel(carid) == 525 || GetVehicleModel(carid) == 583 || GetVehicleModel(carid) == 574)
	{
		return 1;
	}
	return 0;
}

IsAHelicopter(carid)
{
	if(GetVehicleModel(carid) == 548 || GetVehicleModel(carid) == 425 || GetVehicleModel(carid) == 417 || GetVehicleModel(carid) == 487 || GetVehicleModel(carid) == 488 || GetVehicleModel(carid) == 497 || GetVehicleModel(carid) == 563 || GetVehicleModel(carid) == 447 || GetVehicleModel(carid) == 469 || GetVehicleModel(carid) == 593)
	{
		return 1;
	}
	return 0;
}

IsANewsCar(carid)
{
	if(GetVehicleModel(carid)== 582 || GetVehicleModel(carid)== 488)
	{
		return 1;
	}
	return 0;
}

IsAnMPSCar(carid)
{
	for(new i = 0; i < sizeof(MPSVehicles); i++)
	{
		if(MPSVehicles[ i ] == carid) return 1;
	}
	return 0;
}

IsAnAmbulance(carid)
{
	for(new v = 0; v < sizeof(LSMDVehicles); v++)
	{
	    if(carid == LSMDVehicles[v]) return 1;
	}
	return 0;
}

partType(type)
{
	new name[256];
	switch(type)
	{
	    case 0: { name = "Spoiler"; }
        case 1: { name = "Hood"; }
        case 2: { name = "Roof"; }
        case 3: { name = "Sideskirt"; }
        case 4: { name = "Lamps"; }
        case 5:	{ name = "Nitro"; }
        case 6: { name = "Exhaust"; }
        case 7: { name = "Wheels"; }
        case 8: { name = "Stereo"; }
        case 9: { name = "Hydraulics"; }
        case 10: { name = "Front Bumper"; }
        case 11: { name = "Rear Bumper"; }
        case 12: { name = "Left Vent"; }
        case 13: { name = "Right Vent"; }
        default: { name = "Unknown"; }
	}
	return name;
}

partName(part)
{
	new name[256];
	switch(part - 1000)
	{
		case 0: { name = "Pro"; }
		case 1: { name = "Win"; }
		case 2: { name = "Drag"; }
		case 3: { name = "Alpha"; }
		case 4: { name = "Champ Scoop"; }
		case 5: { name = "Fury Scoop"; }
		case 6: { name = "Roof Scoop"; }
		case 7: { name = "Sideskirt"; }
        case 8: { name = "2x"; }
        case 9: { name = "5x"; }
        case 10: { name = "10x"; }
		case 11: { name = "Race Scoop"; }
		case 12: { name = "Worx Scoop"; }
		case 13: { name = "Round Fog"; }
		case 14: { name = "Champ"; }
		case 15: { name = "Race"; }
     	case 16: { name = "Worx"; }
		case 17: { name = "Sideskirt"; }
		case 18: { name = "Upswept"; }
		case 19: { name = "Twin"; }
		case 20: { name = "Large"; }
		case 21: { name = "Medium"; }
		case 22: { name = "Small"; }
		case 23: { name = "Fury"; }
		case 24: { name = "Square Fog"; }
		case 26: { name = "Alien"; }
		case 27: { name = "Alien"; }
		case 28: { name = "Alien"; }
		case 29: { name = "X-Flow"; }
		case 30: { name = "X-Flow"; }
		case 31: { name = "X-Flow"; }
		case 32: { name = "Alien Roof Vent"; }
		case 33: { name = "X-Flow Roof Vent"; }
		case 34: { name = "Alien"; }
		case 35: { name = "X-Flow Roof Vent"; }
    	case 36: { name = "Alien"; }
		case 37: { name = "X-Flow"; }
		case 38: { name = "Alien Roof Vent"; }
		case 39: { name = "X-Flow"; }
		case 40: { name = "Alien"; }
		case 41: { name = "X-Flow"; }
		case 42: { name = "Chrome"; }
		case 43: { name = "Slamin"; }
		case 44: { name = "Chrome"; }
		case 45: { name = "X-Flow"; }
		case 46: { name = "Alien"; }
		case 47: { name = "Alien"; }
		case 48: { name = "X-Flow"; }
		case 49: { name = "Alien"; }
		case 50: { name = "X-Flow"; }
		case 51: { name = "Alien"; }
		case 52: { name = "X-Flow"; }
		case 53: { name = "X-Flow"; }
		case 54: { name = "Alien"; }
		case 55: { name = "Alien"; }
		case 56: { name = "Alien"; }
		case 57: { name = "X-Flow"; }
		case 58: { name = "Alien"; }
		case 59: { name = "X-Flow"; }
		case 60: { name = "X-Flow"; }
		case 61: { name = "X-Flow"; }
		case 62: { name = "Alien"; }
		case 63: { name = "X-Flow"; }
		case 64: { name = "Alien"; }
		case 65: { name = "Alien"; }
		case 66: { name = "X-Flow"; }
		case 67: { name = "Alien"; }
		case 68: { name = "X-Flow"; }
		case 69: { name = "Alien"; }
		case 70: { name = "X-Flow"; }
		case 71: { name = "Alien"; }
		case 72: { name = "X-Flow"; }
		case 88: { name = "Alien"; }
		case 89: { name = "X-Flow"; }
		case 90: { name = "Alien"; }
		case 91: { name = "X-Flow"; }
		case 92: { name = "Alien"; }
		case 93: { name = "X-Flow"; }
		case 94: { name = "Alien"; }
		case 95: { name = "X-Flow"; }
		case 99: { name = "Chrome"; }
		case 100: { name = "Chrome Grill"; }
        case 101: { name = "Chrome Flames"; }
		case 102: { name = "Chrome Strip"; }
		case 103: { name = "Covertible"; }
		case 104: { name = "Chrome"; }
		case 105: { name = "Slamin"; }
		case 106: { name = "Chrome Arches"; }
		case 107: { name = "Chrome Strip"; }
		case 108: { name = "Chrome Strip"; }
		case 109: { name = "Chrome"; }
		case 110: { name = "Slamin"; }
		case 113: { name = "Chrome"; }
		case 114: { name = "Slamin"; }
		case 115: { name = "Chrome"; }
		case 116: { name = "Slamin"; }
		case 117: { name = "Chrome"; }
		case 118: { name = "Chrome Trim"; }
		case 119: { name = "Wheelcovers"; }
		case 120: { name = "Chrome Trim"; }
		case 121: { name = "Wheelcovers"; }
		case 122: { name = "Chrome Flames"; }
		case 123: { name = "Bullbar Chrome Bars"; }
		case 124: { name = "Chrome Arches"; }
		case 125: { name = "Bullbar Chrome Lights"; }
		case 126: { name = "Chrome"; }
		case 127: { name = "Slamin"; }
		case 128: { name = "Vinyl Hardtop"; }
		case 129: { name = "Chrome"; }
		case 130: { name = "Hardtop"; }
		case 131: { name = "Softtop"; }
		case 132: { name = "Slamin"; }
		case 133: { name = "Chrome Strip"; }
		case 134: { name = "Chrome Strip"; }
		case 135: { name = "Slamin"; }
		case 136: { name = "Chrome"; }
		case 137: { name = "Chrome Strip"; }
		case 138: { name = "Alien"; }
		case 139: { name = "X-Flow"; }
		case 140: { name = "X-Flow"; }
		case 141: { name = "Alien"; }
		case 142: { name = "Left Oval Vents"; }
		case 143: { name = "Right Oval Vents"; }
		case 144: { name = "Left Square Vents"; }
		case 145: { name = "Right Square Vents"; }
		case 146: { name = "X-Flow"; }
		case 147: { name = "Alien"; }
		case 148: { name = "X-Flow"; }
		case 149: { name = "Alien"; }
		case 150: { name = "Alien"; }
		case 151: { name = "X-Flow"; }
		case 152: { name = "X-Flow"; }
		case 153: { name = "Alien"; }
		case 154: { name = "Alien"; }
		case 155: { name = "Alien"; }
		case 156: { name = "X-Flow"; }
		case 157: { name = "X-Flow"; }
		case 158: { name = "X-Flow"; }
		case 159: { name = "Alien"; }
		case 160: { name = "Alien"; }
		case 161: { name = "X-Flow"; }
		case 162: { name = "Alien"; }
		case 163: { name = "X-Flow"; }
		case 164: { name = "Alien"; }
		case 165: { name = "X-Flow"; }
		case 166: { name = "Alien"; }
		case 167: { name = "X-Flow"; }
		case 168: { name = "Alien"; }
		case 169: { name = "Alien"; }
		case 170: { name = "X-Flow"; }
		case 171: { name = "Alien"; }
		case 172: { name = "X-Flow"; }
		case 173: { name = "X-Flow"; }
		case 174: { name = "Chrome"; }
		case 175: { name = "Slamin"; }
		case 176: { name = "Chrome"; }
		case 177: { name = "Slamin"; }
		case 178: { name = "Slamin"; }
		case 179: { name = "Chrome"; }
		case 180: { name = "Chrome"; }
		case 181: { name = "Slamin"; }
		case 182: { name = "Chrome"; }
		case 183: { name = "Slamin"; }
		case 184: { name = "Chrome"; }
		case 185: { name = "Slamin"; }
		case 186: { name = "Slamin"; }
		case 187: { name = "Chrome"; }
		case 188: { name = "Slamin"; }
		case 189: { name = "Chrome"; }
		case 190: { name = "Slamin"; }
		case 191: { name = "Chrome"; }
		case 192: { name = "Chrome"; }
		case 193: { name = "Slamin"; }
   	}
	return name;
}

//------------------------------------------------------------------------------------------------------
stock RemoveSempak(playerid)
{
	//MAPPING BASE SANDI
	RemoveBuildingForPlayer(playerid, 1412, 2186.7344, -1503.0859, 24.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2199.2734, -1523.7109, 21.9609, 0.25);
    // Sprunk machines
 	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);
	//Mechanic Center Remove
	RemoveBuildingForPlayer(playerid, 3686, 2169.1172, -2276.5859, 15.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 3686, 2195.0859, -2216.8438, 15.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 3686, 2220.7813, -2261.0547, 15.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2179.9219, -2334.8516, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2165.2969, -2317.5000, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2193.2578, -2286.2891, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2183.1719, -2237.2734, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2174.6406, -2215.6563, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2193.0625, -2196.6406, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 5305, 2198.8516, -2213.9219, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2234.3906, -2244.8281, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2226.9688, -2252.1406, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2219.4219, -2259.5234, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2212.0938, -2267.0703, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2204.6328, -2274.4141, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2179.9219, -2334.8516, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2165.2969, -2317.5000, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2165.0703, -2288.9688, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2193.2578, -2286.2891, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3627, 2169.1172, -2276.5859, 15.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2204.6328, -2274.4141, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2212.0938, -2267.0703, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3627, 2220.7813, -2261.0547, 15.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2219.4219, -2259.5234, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2194.4766, -2242.8750, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2217.2188, -2250.3594, 16.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2226.9688, -2252.1406, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2234.3906, -2244.8281, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2183.1719, -2237.2734, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2235.1641, -2231.8516, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2174.6406, -2215.6563, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 3627, 2195.0859, -2216.8438, 15.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 5244, 2198.8516, -2213.9219, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2193.0625, -2196.6406, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2215.8047, -2199.2188, 16.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2207.8750, -2191.2500, 16.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2223.7422, -2207.1875, 16.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2240.7813, -2240.8984, 16.3672, 0.25);
	//Vehicle Dealership Toys
	RemoveBuildingForPlayer(playerid, 1388, 1238.3750, -1258.2813, 57.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 5318, 2267.9609, -1997.8906, 18.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 2236.5625, -1988.0469, 26.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 5293, 2282.8203, -2033.5000, 20.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 5372, 2282.8203, -2033.5000, 20.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 2255.8438, -2013.5859, 15.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 1687, 2236.1406, -2010.2344, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2271.7344, -2013.6172, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 5310, 2267.9609, -1997.8906, 18.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2227.4688, -1987.5781, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 2236.5625, -1988.0469, 26.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 2235.8281, -1982.2031, 17.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1687, 2300.1797, -1997.0547, 25.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 2296.6719, -1982.2031, 17.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 5266, 2278.0000, -1942.8672, 20.0781, 0.25);

	//Tempat Untuk WorkShop
	RemoveBuildingForPlayer(playerid, 4051, 1371.8203, -1754.8203, 19.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 4226, 1359.2813, -1796.4688, 24.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1342.2734, -1806.2031, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 1342.6328, -1807.0391, 12.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 1342.5156, -1805.0703, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1338.9531, -1796.4297, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 4023, 1359.2813, -1796.4688, 24.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 1338.9609, -1796.0000, 13.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1338.9375, -1795.4609, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 1338.9688, -1793.7266, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1337.6953, -1774.7344, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1338.7891, -1775.3203, 12.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1337.0078, -1773.8672, 13.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 4021, 1371.8203, -1754.8203, 19.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1388.3594, -1745.4453, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 4606, 1825.0000, -1413.9297, 12.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 4594, 1825.0000, -1413.9297, 12.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 2346.5156, -1350.7813, 24.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 17964, 2337.3359, -1330.8516, 25.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 17966, 2347.9219, -1364.2891, 27.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 2344.9219, -1379.5234, 26.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2364.0859, -1378.8125, 26.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 17544, 2337.3359, -1330.8516, 25.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 17542, 2347.9219, -1364.2891, 27.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 2352.1797, -1357.1563, 23.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2361.7656, -1347.1094, 23.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 2366.3125, -1356.2813, 26.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -107.0859, -1196.0859, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -112.1719, -1194.7500, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -101.2891, -1215.5859, 2.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -100.1797, -1210.0781, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -102.1328, -1197.1641, 2.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -98.9219, -1204.9141, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -98.8750, -1199.9297, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -98.9297, -1218.7266, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -88.6172, -1220.3828, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -93.9453, -1219.5391, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 17066, -86.8750, -1207.2422, 1.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -83.3984, -1221.2969, 2.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -78.4297, -1208.9453, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -79.4922, -1214.1016, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -80.2969, -1219.0781, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -73.5703, -1193.9375, 2.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -77.3516, -1203.7422, 2.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -75.6719, -1198.8125, 2.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -77.2188, -1188.3672, 0.8359, 0.25);
	//LSPD, Tempat Mekanik 2
	RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2282.0703, -2312.0469, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2285.8281, -2315.7578, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1341.8516, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1328.0938, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1356.2109, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1300.9219, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1300.9219, 12.2969, 0.25);
	// Impound Remove
	RemoveBuildingForPlayer(playerid, 714, 2217.0234, -1320.8047, 22.5078, 0.25);
	// SMB Remove
	RemoveBuildingForPlayer(playerid, 1297, 345.3125, -1775.9453, 7.4531, 0.25);
}
stock pName(playerid)
{
	new name[64];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}
//Speedo
public LuX_SpeedoMeterUp()
{
    new Float:x,Float:y,Float:z;

	for(new i=0; i<PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
 			GetVehicleVelocity(GetPlayerVehicleID(i),x,y,z);
			GetPlayerVehicleID(i);
			new LuxZone[MAX_ZONE_NAME];
			GetPlayer2DZone(i, LuxZone, MAX_ZONE_NAME);
			if(LuX_SpeedoMeter[i] == 0)
			{
				TextDrawShowForPlayer(i, LBox[i]);
			    TextDrawShowForPlayer(i, LLine1[i]);
				TextDrawShowForPlayer(i, LLine2[i]);
				TextDrawShowForPlayer(i, LLine3[i]);
				TextDrawShowForPlayer(i, GPS[i]);
				LuX_SpeedoMeter[i] = 1;
			}
			format(lString,sizeof(lString),"~w~%s",LVehiclesName[GetVehicleModel(GetPlayerVehicleID(i))-400]);
			TextDrawSetString(LLine1[i], lString);
			format(lString,sizeof(lString),"~g~Speed: ~y~%dmph",floatround(floatsqroot(((x*x)+(y*y))+(z*z))*156.666667));
			TextDrawSetString(LLine2[i],lString);
			format(lString,sizeof(lString),"~g~Fuel: ~y~%.1f/100.0",VehicleFuel[(GetPlayerVehicleID(i))]);
			TextDrawSetString(LLine3[i],lString);
			TextDrawSetString(GPS[i], LuxZone);
		}
	}
	for(new i=0; i<PLAYERS; i++)
	{
		if(!IsPlayerInAnyVehicle(i))
		{
			TextDrawHideForPlayer(i, LBox[i]);
			TextDrawHideForPlayer(i, LLine1[i]);
			TextDrawHideForPlayer(i, LLine2[i]);
			TextDrawHideForPlayer(i, LLine3[i]);
			TextDrawHideForPlayer(i, GPS[i]);
			LuX_SpeedoMeter[i] = 0;
		}
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	if (fexist(WeaponInfoFile(playerid))) INI_ParseFile(WeaponInfoFile(playerid), "LoadWeaponInfo_%s", .bExtra = true, .extra = playerid);
	else ResetWeaponInfo(playerid);
	SetTimerEx("WeaponCheck", 150, true, "i", playerid);
	GetPlayerName(playerid, PlayerInfo[playerid][pNormalName], MAX_PLAYER_NAME);
    Cammode[playerid] = 0;
    RemoveSempak(playerid);
    infect[playerid] = 0;
    SedangKuli[playerid] = 0;
    KerjaSweeper[playerid] = 0;
    KerjaBus[playerid] = 0;
	PlayerInfo[playerid][pSweeperT] = 0;
	SetPlayerArmedWeapon(playerid, 0);
	PreloadAnims(playerid);
	AntiFlood_InitPlayer( playerid );
	//==========================//
	//Desc Text - AriWiwin14
 	DescriptionText[playerid] = TextDrawCreate(320.0, 380.0, " ");
	TextDrawAlignment(DescriptionText[playerid], 2);
	TextDrawFont(DescriptionText[playerid], 1);
	TextDrawLetterSize(DescriptionText[playerid], 0.320000, 1.700000);
	TextDrawSetOutline(DescriptionText[playerid], 1);
    //========strobe============
	new VID = GetPlayerVehicleID(playerid);
	RemoveVehSS(VID);
	//ANTI CHEAT
	AC_BS_SetPlayerArmour(playerid, 0);
	PlayerInfo[playerid][pArmor] = 0;
	AC_BS_SetPlayerHealth(playerid, 100.0);
	PlayerInfo[playerid][pHealth] = 100.0;
	//flymode
	noclipdata[playerid][cameramode] 	= CAMERA_MODE_NONE;
	noclipdata[playerid][lrold]	   	 	= 0;
	noclipdata[playerid][udold]   		= 0;
	noclipdata[playerid][mode]   		= 0;
	noclipdata[playerid][lastmove]   	= 0;
	noclipdata[playerid][accelmul]   	= 0.0;
	//
  	pvehicleid[playerid] = GetPlayerVehicleID(playerid);
	pvehicleid[playerid] = 0;
    pmodelid[playerid] = 0;
    PlayerPressedJump[playerid] = 0;
    SetPlayerJoinCamera(playerid);
	DeletePVar(playerid, "BoomboxObject"); DeletePVar(playerid, "BoomboxURL");
    DeletePVar(playerid, "bposX"); DeletePVar(playerid, "bposY"); DeletePVar(playerid, "bposZ"); DeletePVar(playerid, "bboxareaid");
    if(IsValidDynamicObject(GetPVarInt(playerid, "BoomboxObject"))) DestroyDynamicObject(GetPVarInt(playerid, "BoomboxObject"));
	SedangTrucking[playerid] = 0;
	SedangHauling[playerid] = 0;
	TakeTrucking[playerid] = 0;
	CarTrucking[playerid] = 0;
	togbh[playerid] = 1;
	AimbotWarnings[playerid] = 0;
	CPD[playerid] = 0;
	togneon[playerid] = 0;
	neontog[playerid] = 0;
	Neon1[playerid] = 0;
	Neon2[playerid] = 0;
	gPlayerUsingLoopingAnim[playerid] = 0;
	gPlayerAnimLibsPreloaded[playerid] = 0;
	CheckDoorPoint[playerid] = 0;
	CheckBizPoint[playerid] = 0;
	SedangMancing[playerid] = 0;
	FishHolding[playerid] = 0;
	CompHolding[playerid] = 0;
	// ----------------------------
	if(IsPlayerNPC(playerid)) return 1;
	new playerIP[16], String[10000];
	GetPlayerIp(playerid, playerIP, sizeof(playerIP));
	format(PlayerInfo[playerid][pIP], 32, "%s", playerIP);
	if (CheckBan(playerIP) == 1)
	{
    	format(String, sizeof(String), "{FFFFFF}Account: {FF0000}%s{FFFFFF}\nIP: {FF0000}%s{FFFFFF}\nDi banned oleh: {FF0000}%s{FFFFFF} \nAlasan: {FF0000}%s{FFFFFF} \nPada: {FF0000}Waktu: %s | Tanggal: %s\n\n{FFFFFF}Silahkan Ambil Screenshoot dengan cara menekan F8/Prt scrn{FFFFFF}\nDan Post di Forum Kami.{FFFFFF}",PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pIP],PlayerInfo[playerid][pAdminban],PlayerInfo[playerid][pBanReason],PlayerInfo[playerid][pBanExpired],PlayerInfo[playerid][pBanExpired2]);
		ShowPlayerDialog(playerid,BAN_DIALOG,DIALOG_STYLE_MSGBOX,"BANNED",String,"Ok :(","");
		FixedKick(playerid);
		return 1;
	}
	//=====================================Remove Building=======================================================//
	// Crash Fix - GhoulSlayeR
	if(IsPlayerNPC(playerid)) return 1;
	TotalConnect++;
	PlayersConnected++;
	if(PlayersConnected > MaxPlayersConnected)
	{
		MaxPlayersConnected = PlayersConnected;
		gettime(MPHour,MPMinute);
		getdate(MPYear,MPMonth,MPDay);
	}

	if(MaxPlayersConnected > 500) MaxPlayersConnected = 500; // Temp goof fix
	scoreMusic[playerid] = -1;
	SetPVarInt(playerid, "RespawnAllCar", 0);
	SetPVarInt(playerid, "kesehatan", 0);
	SetPVarInt(playerid, "FirstSpawn", 1);
	SetPVarInt(playerid, "IsInArena", -1);
	SetPVarInt(playerid, "ArenaNumber", -1);
	SetPVarInt(playerid, "ArenaEnterPass", -1);
	SetPVarInt(playerid, "ArenaEnterTeam", -1);
	SetPVarInt(playerid, "EditingTurfs", -1);
	SetPVarInt(playerid, "EditingTurfsStage", -1);
	SetPVarInt(playerid, "EditingHillStage", -1);
	SetPVarInt(playerid, "EditingFamC", -1);
	SetPVarInt(playerid, "editingcd", -1);
	SetPVarInt(playerid, "editingcdveh", -1);
	SetPVarInt(playerid, "editingfamhq", 255);
	SetPVarInt(playerid, "UsingSurfAttachedObject", -1);
	SetPVarInt(playerid, "UsingBriefAttachedObject", -1);
	SetPVarInt(playerid, "MovingStretcher", -1);
	for(new i = 0; i < 3; i++)
	{
		SweeperSteps[playerid][i] = 0;
	}
	for(new i = 0; i < 3; i++)
	{
		BusSteps[playerid][i] = 0;
	}
	for(new i = 0; i < 3; i++)
	{
		StopaniFloats[playerid][i] = 0;
	}
	for(new i = 0; i < 6; i++)
	{
	    EventFloats[playerid][i] = 0.0;
	}
	EventLastInt[playerid] = 0; EventLastVW[playerid] = 0;
	for(new i = 0; i < 6; i++)
	{
		HHcheckFloats[playerid][i] = 0;
	}
	FriskOffer[playerid] = 999; InspectOffer[playerid] = 999; OnKTP[playerid] = 0; TakeBox[playerid] = 0;
	HHcheckVW[playerid] = 0; HHcheckInt[playerid] = 0; OrderAssignedTo[playerid] = INVALID_PLAYER_ID;
	RefuelingVehicle[playerid] = 0; FuelBar[playerid] = INVALID_BAR_ID; pRent[playerid] = 0; RentFaggio[playerid] = 0;prSpawnID[playerid] = 0; prSpawn[playerid] = 0; pMancing[playerid] = 0;
	RefuelingVehiclePrice[playerid] = 0; HouseOffer[playerid] = 999; GSOffer[playerid] = 999; WsOffer[playerid] = 999; FarmOffer[playerid] = 999; House[playerid] = 0; HousePrice[playerid] = 0; gsPrice[playerid] = 0; WsPrice[playerid] = 0; farmPrice[playerid] = 0;
	SetPVarInt( playerid, "InHouse", INVALID_HOUSE_ID );
	SetPVarInt(playerid, "shrequest", INVALID_PLAYER_ID); PlayerInfo[playerid][pTogReports] = 0;
 	format(PlayerInfo[playerid][pAutoTextReply], 64, "Nothing"); playerTabbedTime[playerid] = 0; playerTabbed[playerid] = 0;
	gActivePlayers[playerid]++; WantedPoints[playerid] = 0; gBug[playerid] = 1; gBugSIU[playerid] = 1; TazerTimeout[playerid] = 0; gRadio[playerid] = 1; playerLastTyped[playerid] = 0; SetPlayerWantedLevel(playerid, 0); pTazer[playerid] = 0; pTazerReplace[playerid] = 0; pCurrentWeapon[playerid] = 0;
	MedicAccepted[playerid] = 999; PlayerInfo[playerid][pWantedLevel] = 0;
	Spectating[playerid] = 0; GettingSpectated[playerid] = 999; PlayerInfo[playerid][pPhonePrivacy] = 0; pcRadio[playerid] = 0;
	NewbieTimer[playerid] = 0; HlKickTimer[playerid] = 0; HelperTimer[playerid] = 0; VIPTimer[playerid] = 0; PlayerInfo[playerid][pLock] = 0; PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
	numplayers++; VehicleOffer[playerid] = 999; pTerluka[playerid] = 0;//Frozen[playerid] = 0;
	VehiclePrice[playerid] = 0; VehicleId[playerid] = -1; NOPTrigger[playerid] = 0;
	JustReported[playerid] = -1; adTick[playerid] = -1; askTick[playerid] = -1; UsedCrack[playerid] = 0; UsedWeed[playerid] = 0; DrinkOffer[playerid] =  INVALID_PLAYER_ID;
	PotOffer[playerid] = 999; CrackOffer[playerid] = 999; GunOffer[playerid] = 999;
	LiveOffer[playerid] = 999; NeonOffer[playerid] = 999; NeonOffer[playerid] = 999;
	SprayOffer[playerid] = 999; SprayPrice[playerid] = 0; SprayPaint[playerid] = 999;
	MatsOffer[playerid] = 999; MatsPrice[playerid] = 0; MatsAmount[playerid] = 0;
	MarryWitnessOffer[playerid] = 999; ProposeOffer[playerid] = 999; DivorceOffer[playerid] = 999;
	HidePM[playerid] = 0; PhoneOnline[playerid] = 0;
    advisorchat[playerid] = 1; PlayerInfo[playerid][pVIPLeft] = -1; PlayerInfo[playerid][pVIPInviteDay] = 0; PlayerInfo[playerid][pTempVIP] = 0; PlayerInfo[playerid][pBuddyInvited] = 0;
	ChosenSkin[playerid] = 0;
	MatsHolding[playerid] = 0; MatDeliver[playerid] = 0; MatDeliver2[playerid] = 0;
	PlayerInfo[playerid][pTokens] = 0;
	GettingJob[playerid] = 0; GettingJob2[playerid] = 0; GettingIllegalJob[playerid] = 0; PlayerInfo[playerid][pCSFBanned] = 0;
 	PlayerInfo[playerid][pFactionBanned] = 0; warna2[playerid] = 999; warna1[playerid] = 999; idveh[playerid] = INVALID_VEHICLE_ID; idveh2[playerid] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pGangWarn] = 0; CurrentMoney[playerid] = 0; UsedFind[playerid] = 0; PlayerInfo[playerid][pTriageTime] = 0;
	PlayerInfo[playerid][pCigar] = 0; PlayerInfo[playerid][pSprunk] = 0; PlayerInfo[playerid][pSpraycan] = 0;
	CP[playerid] = 0; SpawnChange[playerid] = 1; PlayerInfo[playerid][pPot] = 0;
	MoneyMessage[playerid] = 0; Condom[playerid] = 0; PlayerInfo[playerid][pCrack] = 0;
	STDPlayer[playerid] = 0; PlayerInfo[playerid][pAdmin] = 0;
	TalkingLive[playerid] = INVALID_PLAYER_ID; LiveOffer[playerid] = 999; TakingLesson[playerid] = 0;
	InsideShamal[playerid] = INVALID_VEHICLE_ID; InsideMainMenu[playerid] = 0; InsideTut[playerid] = 0;
	PlayerInfo[playerid][pToggedVIPChat] = 0; NeonOffer[playerid] = 999; NeonID[playerid] = 999;
	PotOffer[playerid] = 999; CrackOffer[playerid] = 999; PlayerCuffed[playerid] = 0; PlayerCuffedTime[playerid] = 0;
	PotPrice[playerid] = 0; CrackPrice[playerid] = 0; gh[playerid] = 0;
	PotGram[playerid] = 0; CrackGram[playerid] = 0; PlayerInfo[playerid][pBanned] = 0; ConnectedToPC[playerid] = 0; OrderReady[playerid] = 0;
	GunId[playerid] = 0; GunMats[playerid] = 0; GunAmmoAmount[playerid] = 0; GunPrice[playerid] = 0;
	PlayerInfo[playerid][pCrack] = 0; PlayerInfo[playerid][pKills] = 0;
 	InviteOffer[playerid] = 999; InviteFaction[playerid] = 0; InviteMech[playerid] = 0; InviteFarm[playerid] = 0; InviteFamily[playerid] = 255; PlayerInfo[playerid][pSpeakerPhone] = 0;
	hInviteHouse[playerid] = INVALID_HOUSE_ID; hInviteOffer[playerid] = 999; hInviteSlot[playerid] = 0;	PlayerInfo[playerid][pDeaths] = 0;
	JailPrice[playerid] = 0; MedicTime[playerid] = 0; NeedMedicTime[playerid] = 0;
	WantedPoints[playerid] = 0; PlacedNews[playerid] = 0;
	OnDuty[playerid] = 0; CalledCops[playerid] = 0; CopsCallTime[playerid] = 0;
 	SchoolSpawn[playerid] = 0; CalledMedics[playerid] = 0;
	SafeTime[playerid] = 60; PlayerTied[playerid] = 0; MedicsCallTime[playerid] = 0;
	EMSCallTime[playerid] = 0; MedicCallTime[playerid] = 0; MechanicCallTime[playerid] = 0;
	FindTimePoints[playerid] = 0; FindingPlayer[playerid]=-1; FindTime[playerid] = 0; JobDuty[playerid] = 0;
	Mobile[playerid] = INVALID_PLAYER_ID; Music[playerid] = 0;
	Spectate[playerid] = 999; PlayerDrunk[playerid] = 0; PlayerDrunkTime[playerid] = 0; format(PlayerInfo[playerid][pPrisonReason], 128, "None");
	Unspec[playerid][sLocal] = INVALID_PLAYER_ID; format(PlayerInfo[playerid][pJailedBy], 24, "None");
    courtjail[playerid] = 0;
	gLastCar[playerid] = 0; FirstSpawn[playerid] = 0; JetPack[playerid] = 0; PlayerInfo[playerid][pKills] = 0; PlayerInfo[playerid][pPaintTeam] = 0;
	TextSpamTimes[playerid] = 0; BusID[playerid] = 0; PlayerSitting[playerid] = 0;
	TextSpamUnmute[playerid] = 0;
 	CommandSpamTimes[playerid] = 0;
	CommandSpamUnmute[playerid] = 0;
	gOoc[playerid] = 0; musicinternet[playerid] = 0;
	arr_Towing[playerid] = INVALID_VEHICLE_ID;
	gNews[playerid] = 0;
	togglepm[playerid] = 1;//tog pm
	togaccent[playerid] = 0;
	format(advertise[playerid], 128, "None");
	gNewbie[playerid] = 1;
	gHelp[playerid] = 1;
	gFam[playerid] = 0;
	gPlayerLogged{playerid} = 0;
	gPlayerLogTries[playerid] = 0;
	gPlayerAccount[playerid] = 0;
	gPlayerSpawned[playerid] = 0;


	//=============================//
	PlayerTazeTime[playerid] = 0;
	PlayerStoned[playerid] = 0;
	PlayerInfo[playerid][pPot] = 0;
	StartTime[playerid] = 0;
	TicketOffer[playerid] = 999;
	TicketMoney[playerid] = 0;
	PlayerInfo[playerid][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pPermaBanned] = 0;
	PlayerInfo[playerid][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	EMSAccepted[playerid] = 999;
	PlayerInfo[playerid][pCrack] = 0;
	HireCar[playerid] = 299;
	Locator[playerid] = 0;
	Spectating[playerid] = 0;
	ReleasingMenu[playerid] = INVALID_PLAYER_ID;
	ProposeOffer[playerid] = 999;
	MarryWitness[playerid] = 999;
	MarryWitnessOffer[playerid] = 999;
	MarriageCeremoney[playerid] = 0;
	ProposedTo[playerid] = 999;
	GotProposedBy[playerid] = 999;
	DivorceOffer[playerid] = 999;
	stationidp[playerid] = 0;
	Fixr[playerid] = 0;
	slotselection[playerid] = 999;
	vslotselection[playerid] = 999;
	pvehEditID[playerid] = 999;
	pvEditID[playerid] = 999;
	format(PlayerInfo[playerid][pAdminban], 128, "None");
	format(PlayerInfo[playerid][pBanReason], 128, "None");
	format(PlayerInfo[playerid][pAccent], 80, "None");
	PlayerInfo[playerid][pWSBos] = -1;
	PlayerInfo[playerid][pDutyTime] = 0;
	PlayerInfo[playerid][pDutyTimeTotal] = 0;
	PlayerInfo[playerid][pFarmBos] = -1;
	format(PlayerInfo[playerid][pBanExpired], 128, "");
	format(PlayerInfo[playerid][pBanExpired2], 128, "");
	PlayerInfo[playerid][pLevel] = 1;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pAdminDuty] = 0;
 	PlayerInfo[playerid][pBanned] = 0;
 	PlayerInfo[playerid][pDisabled] = 0;
 	PlayerInfo[playerid][pMuted] = 0;
 	PlayerInfo[playerid][pRMuted] = 0;
 	PlayerInfo[playerid][pRMutedTotal] = 0;
 	PlayerInfo[playerid][pRMutedTime] = 0;
 	PlayerInfo[playerid][pSnack] = 0;
 	PlayerInfo[playerid][pMineralWater] = 0;
 	PlayerInfo[playerid][pADMute] = 0;
 	PlayerInfo[playerid][pADMuteTotal] = 0;
 	PlayerInfo[playerid][pHelpMute] = 0;
 	PlayerInfo[playerid][pGYMTime] = 0;
 	PlayerInfo[playerid][pUsePainkiller] = 0;
 	PlayerInfo[playerid][pRadio] = 0;
 	PlayerInfo[playerid][pRadioFreq] = 0;
 	PlayerInfo[playerid][pPermaBanned] = 0;
	PlayerInfo[playerid][pDonateRank] = 0;
	PlayerInfo[playerid][pBandage] = 0;
	PlayerInfo[playerid][pConnectTime] = 0;
	PlayerInfo[playerid][pReg] = 0;
	PlayerInfo[playerid][pSex] = 0;
	PlayerInfo[playerid][pCacing] = 0;
	PlayerInfo[playerid][pLumber] = 0;
	PlayerInfo[playerid][pAdminOnDutyTime] = 0;
	PlayerInfo[playerid][pPBiskey2] = 0;
	PlayerInfo[playerid][pHunger] = 0;
	PlayerInfo[playerid][pBladder] = 0;
	PlayerInfo[playerid][pEnergi] = 0;
	PlayerInfo[playerid][pCondition] = 0;
	PlayerInfo[playerid][pSilincedSkill] = 1;
	PlayerInfo[playerid][pDesertEagleSkill] = 1;
	PlayerInfo[playerid][pRifleSkill] = 1;
	PlayerInfo[playerid][pShotgunSkill] = 1;
	PlayerInfo[playerid][pSpassSkill] = 1;
	PlayerInfo[playerid][pMP5Skill] = 1;
	PlayerInfo[playerid][pAK47Skill] = 1;
	PlayerInfo[playerid][pM4Skill] = 1;
	PlayerInfo[playerid][pSniperSkill] = 1;
	PlayerInfo[playerid][pTrainingTime] = 0;
	PlayerInfo[playerid][pPDTime] = 0;
	PlayerInfo[playerid][pPBiskey] = 0;
	PlayerInfo[playerid][pInBizz] = 0;
	PlayerInfo[playerid][pPancingan] = 0;
	PlayerInfo[playerid][pMask] = 0;
	PlayerInfo[playerid][pMaskUse] = 0;
	PlayerInfo[playerid][pMaskID] = 0;
	PlayerInfo[playerid][pParacetamol] = 0;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][pAccount] = 0;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pDeaths] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pFitnessTimer] = 0;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pWSJob] = 0;
	PlayerInfo[playerid][pFarmJob] = 0;
	PlayerInfo[playerid][pJerigen] = 0;
	PlayerInfo[playerid][pBensin] = 0;
	PlayerInfo[playerid][pUseSorry] = 0;
	PlayerInfo[playerid][pKuli] = 0;
	PlayerInfo[playerid][pJob2] = 0;
	PlayerInfo[playerid][pIllegalJob] = 0;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pWRestricted] = 0;
	PlayerInfo[playerid][pMats] = 0;
	PlayerInfo[playerid][pPulsa2] = 0;
	PlayerInfo[playerid][pLeader] = 0;
	PlayerInfo[playerid][pMember] = 0;
	PlayerInfo[playerid][pDivision] = 0;
	PlayerInfo[playerid][pFMember] = 255;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pChar] = 0;
	PlayerInfo[playerid][pRenting] = INVALID_HOUSE_ID;
	PlayerInfo[playerid][pAmoxicilin] = 0;
	PlayerInfo[playerid][pMechSkill] = 0;
	PlayerInfo[playerid][pUltrafluenza] = 0;
	PlayerInfo[playerid][pTruckingSkill] = 0;
	PlayerInfo[playerid][pArmsSkill] = 0;
	PlayerInfo[playerid][pSmugSkill] = 0;
	PlayerInfo[playerid][pSHealth] = 0.0;
	PlayerInfo[playerid][pSArmor] = 0.0;
	PlayerInfo[playerid][pBodyCondition][0] = 100.0;
	PlayerInfo[playerid][pBodyCondition][1] = 100.0;
	PlayerInfo[playerid][pBodyCondition][2] = 100.0;
	PlayerInfo[playerid][pBodyCondition][3] = 100.0;
	PlayerInfo[playerid][pBodyCondition][4] = 100.0;
	PlayerInfo[playerid][pBodyCondition][5] = 100.0;
	PlayerInfo[playerid][pHealth] = 50.0;
	PlayerInfo[playerid][pLocal] = 255;
	PlayerInfo[playerid][pTeam] = 3;
	PlayerInfo[playerid][pCheckCash] = 0;
	PlayerInfo[playerid][pChecks] = 0;
	PlayerInfo[playerid][pTanamanAnggur] = 0;
	PlayerInfo[playerid][pTanamanBlueberry] = 0;
	PlayerInfo[playerid][pTanamanStrawberry] = 0;
	PlayerInfo[playerid][pTanamanGandum] = 0;
	PlayerInfo[playerid][pTanamanTomat] = 0;
	PlayerInfo[playerid][pBibitAnggur] = 0;
	PlayerInfo[playerid][pBibitBlueberry] = 0;
	PlayerInfo[playerid][pBibitStrawberry] = 0;
	PlayerInfo[playerid][pBibitGandum] = 0;
	PlayerInfo[playerid][pBibitTomat] = 0;
	format(PlayerInfo[playerid][pWarrant], 128, "");
	PlayerInfo[playerid][pJudgeJailTime] = 0;
	PlayerInfo[playerid][pJudgeJailType] = 0;
	PlayerInfo[playerid][pBeingSentenced] = 0;
	PlayerInfo[playerid][pProbationTime] = 0;
	PlayerInfo[playerid][pModel] = 299;
	PlayerInfo[playerid][pPnumber] = 0;
	PlayerInfo[playerid][pFMax] = 0;
	PlayerInfo[playerid][pJTime] = 0;
	PlayerInfo[playerid][pFTime] = 0;
	PlayerInfo[playerid][pLumberTime] = 0;
	PlayerInfo[playerid][pHaulingTime] = 0;
	PlayerInfo[playerid][pPhone] = 0;
	PlayerInfo[playerid][pKartuPerdana] = 0;
	PlayerInfo[playerid][pPainkiller] = 0;
	PlayerInfo[playerid][pBusTime] = 0;
	PlayerInfo[playerid][pBeratIkan] = 0;
	PlayerInfo[playerid][pPhousekey] = INVALID_HOUSE_ID;
	PlayerInfo[playerid][pPhousekey2] = INVALID_HOUSE_ID;
	PlayerInfo[playerid][pWSid] = -1;
	PlayerInfo[playerid][pFarmid] = -1;
	PlayerInfo[playerid][pFarmBos] = -1;
	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pCTime] = 0;
	PlayerInfo[playerid][pCarLicID] = 0;
	PlayerInfo[playerid][pKTP] = 0;
	PlayerInfo[playerid][pWS] = 0;
	PlayerInfo[playerid][pWSid] = 0;
	PlayerInfo[playerid][pFarm] = 0;
	PlayerInfo[playerid][pFarmid] = 0;
	PlayerInfo[playerid][pTruckerLic] = 0;
	PlayerInfo[playerid][pMissionsTime] = 0;
	PlayerInfo[playerid][pFitnessType] = 0;
	PlayerInfo[playerid][pKTime] = 0;
	PlayerInfo[playerid][pLumberLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pBoatLic] = 0;
	PlayerInfo[playerid][pGunLic] = 0;
	PlayerInfo[playerid][pBugged] = 0;
	PlayerInfo[playerid][pCallsAccepted] = 0;
	PlayerInfo[playerid][pPatientsDelivered] = 0;
	PlayerInfo[playerid][pLiveBanned] = 0;
	PlayerInfo[playerid][pFreezeBank] = 0;
	PlayerInfo[playerid][pComponent] = 0;
	PlayerInfo[playerid][pBoomBox] = 0;
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
	{
        PlayerVehicleInfo[playerid][v][pvModelId] = 0;
        PlayerVehicleInfo[playerid][v][pvPosX] = 0.0;
        PlayerVehicleInfo[playerid][v][pvPosY] = 0.0;
        PlayerVehicleInfo[playerid][v][pvPosZ] = 0.0;
        PlayerVehicleInfo[playerid][v][pvPosAngle] = 0.0;
        PlayerVehicleInfo[playerid][v][pvLock] = 3;
        PlayerVehicleInfo[playerid][v][pvLocked] = 0;
        PlayerVehicleInfo[playerid][v][pvPaintJob] = -1;
        PlayerVehicleInfo[playerid][v][pvColor1] = 0;
        PlayerVehicleInfo[playerid][v][pvNeon] = 0;
		PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
		PlayerVehicleInfo[playerid][v][pvStored] = 0;
		PlayerVehicleInfo[playerid][v][pvDestroyed] = 0;
        PlayerVehicleInfo[playerid][v][pvColor2] = 0;
        PlayerVehicleInfo[playerid][v][pvPrice] = 0;
        PlayerVehicleInfo[playerid][v][pvTicket] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][0] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][1] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][2] = 0;
        PlayerVehicleInfo[playerid][v][pvWeaponsAmmo][0] = 0;
        PlayerVehicleInfo[playerid][v][pvWeaponsAmmo][1] = 0;
        PlayerVehicleInfo[playerid][v][pvWeaponsAmmo][2] = 0;
		PlayerVehicleInfo[playerid][v][pvWepUpgrade] = 0;
		PlayerVehicleInfo[playerid][v][pvFuel] = 100.0;
		if(PlayerVehicleInfo[playerid][v][pvMesinUpgrade] == 1)
		{
			PlayerVehicleInfo[playerid][v][pvHealth] = 2000.0;
		}
		else
		{
			PlayerVehicleInfo[playerid][v][pvHealth] = 1000.0;
		}
		PlayerVehicleInfo[playerid][v][pvInsurances] = 0;
		PlayerVehicleInfo[playerid][v][pvMesinUpgrade] = 0;
		PlayerVehicleInfo[playerid][v][pvBodyUpgrade] = 0;
		PlayerVehicleInfo[playerid][v][pvStatus][0] = 0;
		PlayerVehicleInfo[playerid][v][pvStatus][1] = 0;
		PlayerVehicleInfo[playerid][v][pvStatus][2] = 0;
		PlayerVehicleInfo[playerid][v][pvStatus][3] = 0;
		PlayerVehicleInfo[playerid][v][pvLicense] = 0;
		PlayerVehicleInfo[playerid][v][pvLicenseTime] = 0;
		format(PlayerVehicleInfo[playerid][v][pvLicenseExpired], 128, "None");
		format(PlayerVehicleInfo[playerid][v][pvToyText1], 128, "None");
		format(PlayerVehicleInfo[playerid][v][pvToyText2], 128, "None");
		format(PlayerVehicleInfo[playerid][v][pvToyText3], 128, "None");
		format(PlayerVehicleInfo[playerid][v][pvToyText4], 128, "None");
		format(PlayerVehicleInfo[playerid][v][pvToyText5], 128, "None");
		format(PlayerVehicleInfo[playerid][v][pvToyText6], 128, "None");
		format(PlayerVehicleInfo[playerid][v][pvToyText7], 128, "None");
		format(PlayerVehicleInfo[playerid][v][pvToyText8], 128, "None");
		format(PlayerVehicleInfo[playerid][v][pvToyText9], 128, "None");
		format(PlayerVehicleInfo[playerid][v][pvToyText10], 128, "None");
		format(PlayerVehicleInfo[playerid][v][pvNumberPlate], 32, "NO_HAVE");
		PlayerVehicleInfo[playerid][v][pvToyTextCol1] = 1;
		PlayerVehicleInfo[playerid][v][pvToyTextCol2] = 1;
		PlayerVehicleInfo[playerid][v][pvToyTextCol3] = 1;
		PlayerVehicleInfo[playerid][v][pvToyTextCol4] = 1;
		PlayerVehicleInfo[playerid][v][pvToyTextCol5] = 1;
		PlayerVehicleInfo[playerid][v][pvToyTextCol6] = 1;
		PlayerVehicleInfo[playerid][v][pvToyTextCol7] = 1;
		PlayerVehicleInfo[playerid][v][pvToyTextCol8] = 1;
		PlayerVehicleInfo[playerid][v][pvToyTextCol9] = 1;
		PlayerVehicleInfo[playerid][v][pvToyTextCol10] = 1;
		PlayerVehicleInfo[playerid][v][pvToyTextID1] = 0;
		PlayerVehicleInfo[playerid][v][pvToyTextID2] = 0;
		PlayerVehicleInfo[playerid][v][pvToyTextID3] = 0;
		PlayerVehicleInfo[playerid][v][pvToyTextID4] = 0;
		PlayerVehicleInfo[playerid][v][pvToyTextID5] = 0;
		PlayerVehicleInfo[playerid][v][pvToyTextID6] = 0;
		PlayerVehicleInfo[playerid][v][pvToyTextID7] = 0;
		PlayerVehicleInfo[playerid][v][pvToyTextID8] = 0;
		PlayerVehicleInfo[playerid][v][pvToyTextID9] = 0;
		PlayerVehicleInfo[playerid][v][pvToyTextID10] = 0;
		PlayerVehicleInfo[playerid][v][pvToyTextSize1] = 20;
		PlayerVehicleInfo[playerid][v][pvToyTextSize2] = 20;
		PlayerVehicleInfo[playerid][v][pvToyTextSize3] = 20;
		PlayerVehicleInfo[playerid][v][pvToyTextSize4] = 20;
		PlayerVehicleInfo[playerid][v][pvToyTextSize5] = 20;
		PlayerVehicleInfo[playerid][v][pvToyTextSize6] = 20;
		PlayerVehicleInfo[playerid][v][pvToyTextSize7] = 20;
		PlayerVehicleInfo[playerid][v][pvToyTextSize8] = 20;
		PlayerVehicleInfo[playerid][v][pvToyTextSize9] = 20;
		PlayerVehicleInfo[playerid][v][pvToyTextSize10] = 20;
		strcpy(PlayerVehicleInfo[playerid][v][pvAllowPlayer], "No-ne", MAX_PLAYER_NAME);
        PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
        PlayerVehicleInfo[playerid][v][pvPark] = 0;
        ListItemReleaseId[playerid][v] = -1;
		ListItemTrackId[playerid][v] = -1;
       	for(new m = 0; m < MAX_MODS; m++)
	    {
            PlayerVehicleInfo[playerid][v][pvMods][m] = 0;
		}
		for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++)
		{
		    PlayerVehicleInfo[playerid][v][pvToyID][vt] = 0;
		    PlayerVehicleInfo[playerid][v][pvToyPosX][vt] = 0.00000;
		    PlayerVehicleInfo[playerid][v][pvToyPosY][vt] = 0.00000;
		    PlayerVehicleInfo[playerid][v][pvToyPosZ][vt] = 0.00000;
		    PlayerVehicleInfo[playerid][v][pvToyRotX][vt] = 0.000000;
		    PlayerVehicleInfo[playerid][v][pvToyRotY][vt] = 0.00000;
		    PlayerVehicleInfo[playerid][v][pvToyRotZ][vt] = 0.00000;
		    PlayerVehicleInfo[playerid][v][pvToyColor][vt] = 1;
		    PlayerVehicleInfo[playerid][v][pvToyIndex][vt] = 0;
		    PlayerVehicleInfo[playerid][v][pvToyTexture1][vt] = 0;
		    PlayerVehicleInfo[playerid][v][pvToyTexture2][vt] = 0;
		    PlayerVehicleInfo[playerid][v][pvToyTextureID][vt] = 0;
		}
	}
	PlayerRentInfo[playerid][prRentTime] = 0;
	PlayerRentInfo[playerid][prTax] = 0;
	PlayerRentInfo[playerid][prVehicleRent] = 0;
	PlayerRentInfo[playerid][prModelId] = 0;
	PlayerRentInfo[playerid][prPosX] = 0.0;
	PlayerRentInfo[playerid][prPosY] = 0.0;
	PlayerRentInfo[playerid][prPosZ] = 0.0;
	PlayerRentInfo[playerid][prPosAngle] = 0.0;
	PlayerRentInfo[playerid][prLock] = 3;
	PlayerRentInfo[playerid][prLocked] = 0;
	PlayerRentInfo[playerid][prColor1] = 0;
	PlayerRentInfo[playerid][prColor2] = 0;
	PlayerRentInfo[playerid][prFuel] = 100;
	PlayerRentInfo[playerid][prHealth] = 100.0;
	PlayerRentInfo[playerid][prStatus][0] = 0;
	PlayerRentInfo[playerid][prStatus][1] = 0;
	PlayerRentInfo[playerid][prStatus][2] = 0;
	PlayerRentInfo[playerid][prStatus][3] = 0;
	PlayerRentInfo[playerid][prPark] = 0;
	PlayerRentInfo[playerid][prTicket] = 0;
	for(new v = 0; v < MAX_PLAYERTOYS; v++)
	{
        PlayerToyInfo[playerid][v][ptModelID] = 0;
        PlayerToyInfo[playerid][v][ptBone] = 0;
        PlayerToyInfo[playerid][v][ptPosX] = 0.0;
        PlayerToyInfo[playerid][v][ptPosY] = 0.0;
        PlayerToyInfo[playerid][v][ptPosZ] = 0.0;
        PlayerToyInfo[playerid][v][ptRotX] = 0.0;
        PlayerToyInfo[playerid][v][ptRotY] = 0.0;
        PlayerToyInfo[playerid][v][ptRotZ] = 0.0;
        PlayerToyInfo[playerid][v][ptScaX] = 0.0;
        PlayerToyInfo[playerid][v][ptScaY] = 0.0;
        PlayerToyInfo[playerid][v][ptScaZ] = 0.0;
	}
	for(new s = 0; s < 12; s++)
	{
		PlayerInfo[playerid][pAGuns][s] = 0;
		PlayerInfo[playerid][pGuns][s] = 0;
		PlayerInfo[playerid][pGunsAmmo][s] = 0;
		PlayerInfo[playerid][pAGunsAmmo][s] = 0;
	}
	for(new s = 0; s < 40; s++)
	{
		ListItemReportId[playerid][s] = -1;
	}
	CancelReport[playerid] = -1;
	GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pPayDay] = 0;
	PlayerInfo[playerid][pCDPlayer] = 0;
	PlayerInfo[playerid][pWins] = 0;
	PlayerInfo[playerid][pLoses] = 0;
	PlayerInfo[playerid][pTut] = 0;
	PlayerInfo[playerid][pTutorial] = 0;
	PlayerInfo[playerid][pWarns] = 0;
	PlayerInfo[playerid][pRope] = 0;
	PlayerInfo[playerid][pDice] = 0;
	PlayerInfo[playerid][pCangkul] = 0;
	PlayerInfo[playerid][pScrewdriver] = 0;
	PlayerInfo[playerid][pAdjustable] = 0;
	PlayerInfo[playerid][pWantedLevel] = 0;
	PlayerInfo[playerid][pInsurance] = 0;
	PlayerInfo[playerid][pDutyHours] = 0;
	PlayerInfo[playerid][pAcceptedHelp] = 0;
	PlayerInfo[playerid][pAcceptReport] = 0;
	PlayerInfo[playerid][pTrashReport] = 0;
	PlayerInfo[playerid][pGiftTime] = 0;
	PlayerInfo[playerid][pTicketTime] = 0;
	PlayerInfo[playerid][pServiceTime] = 0; // lel*/
	strcpy(PlayerInfo[playerid][pAdminName], "None", MAX_PLAYER_NAME);
	strcpy(PlayerInfo[playerid][pNormalName], "None", MAX_PLAYER_NAME);
	strcpy(PlayerInfo[playerid][pVIPName], "None", MAX_PLAYER_NAME);
	format(PlayerInfo[playerid][pAge],32,"None");
	format(PlayerInfo[playerid][pVIPExpDate],32,"null");
	ClearCrime(playerid);
	ClearMarriage(playerid);
	SetPlayerColor(playerid,TEAM_HIT_COLOR);
 	SetTimerEx("SafeLogin", 1000, 0, "d", playerid);
 	SyncPlayerTime(playerid);
	return 1;
}

//-----------------[Get color code by name]----------------------
public GetColorCode(clr[]) {
	new color = -1;
	if (IsNumeric(clr))
	{
		color = strval(clr);
		return color;
	}
	if(strcmp(clr, "black", true)==0) color=0;
	if(strcmp(clr, "white", true)==0) color=1;
	if(strcmp(clr, "blue", true)==0) color=2;
	if(strcmp(clr, "red", true)==0) color=3;
	if(strcmp(clr, "green", true)==0) color=16;
	if(strcmp(clr, "purple", true)==0) color=5;
	if(strcmp(clr, "yellow", true)==0) color=6;
	if(strcmp(clr, "lightblue", true)==0) color=7;
	if(strcmp(clr, "navy", true)==0) color=94;
	if(strcmp(clr, "beige", true)==0) color=102;
	if(strcmp(clr, "darkgreen", true)==0) color=51;
	if(strcmp(clr, "darkblue", true)==0) color=103;
	if(strcmp(clr, "darkgrey", true)==0) color=13;
	if(strcmp(clr, "gold", true)==0) color=99;
	if(strcmp(clr, "brown", true)==0 || strcmp(clr, "dennell", true)==0) color=55;
	if(strcmp(clr, "darkbrown", true)==0) color=84;
	if(strcmp(clr, "darkred", true)==0) color=74;
	if(strcmp(clr, "maroon", true)==0) color=115;
	if(strcmp(clr, "pink", true)==0) color=126;
	return color;
}

doesAccountExist(account_name[]) {

	new
		sz_accStr[MAX_PLAYER_NAME + 12];

	format(sz_accStr, sizeof(sz_accStr), "users/%s.ini", account_name);
	if(fexist(sz_accStr)) {

		new
			File: f_Handle = fopen(sz_accStr, io_read);

		if(flength(f_Handle) > 0) {
			fclose(f_Handle);
			return 1;
		}
		fclose(f_Handle);
	}
	return 0;
}

SendClientMessageEx(playerid, color, String[])
{
	if(InsideMainMenu[playerid] == 1 || InsideTut[playerid] == 1)
		return 0;

	else SendClientMessage(playerid, color, String);
	return 1;
}

SendClientMessageToAllEx(color, String[])
{
	foreach(Player, i)
	{
		if(InsideMainMenu[i] == 1 || InsideTut[i] == 1) {}
		else SendClientMessage(i, color, String);
	}
	return 1;
}

public SetupPlayerForClassSelection(playerid) //default class selection screen
{
	SetPlayerJoinCamera(playerid);
	return 1;
}

SetPlayerJoinCamera(playerid)
{
	new randcamera = Random(1,8);
	switch(randcamera)
	{
		case 1: // Gym
		{
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			AC_BS_SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,2229.4968,-1722.0701,13.5625);
			AC_BS_SetPlayerPos(playerid,2211.1460,-1748.3909,-10.0);
			SetPlayerCameraPos(playerid,2211.1460,-1748.3909,29.3744);
			SetPlayerCameraLookAt(playerid,2229.4968,-1722.0701,13.5625);
		}
		case 2: // LSPD
		{
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			AC_BS_SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1554.3381,-1675.5692,16.1953);
			AC_BS_SetPlayerPos(playerid,1514.7783,-1700.2913,-10.0);
			SetPlayerCameraPos(playerid,1514.7783,-1700.2913,36.7506);
			SetPlayerCameraLookAt(playerid,1554.3381,-1675.5692,16.1953);
		}
		case 3: // SaC HQ (Gang HQ)
		{
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			AC_BS_SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,655.5394,-1867.2231,5.4609);
			AC_BS_SetPlayerPos(playerid,655.5394,-1867.2231,-10.0);
			SetPlayerCameraPos(playerid,699.7435,-1936.7568,24.8646);
			SetPlayerCameraLookAt(playerid,655.5394,-1867.2231,5.4609);

		}
		case 4: // Fishing Pier
		{
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			AC_BS_SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,370.0804,-2087.8767,7.8359);
			AC_BS_SetPlayerPos(playerid,370.0804,-2087.8767,-10.0);
			SetPlayerCameraPos(playerid,423.3802,-2067.7915,29.8605);
			SetPlayerCameraLookAt(playerid,370.0804,-2087.8767,7.8359);
		}
		case 5: // VIP
		{
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			AC_BS_SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1797.3397,-1578.3440,14.0798);
			AC_BS_SetPlayerPos(playerid,1797.3397,-1578.3440,-10.0);
			SetPlayerCameraPos(playerid,1832.1698,-1600.1538,32.2877);
			SetPlayerCameraLookAt(playerid,1797.3397,-1578.3440,14.0798);
		}
		case 6: // All Saints
		{
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			AC_BS_SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1175.5581,-1324.7922,18.1610);
			AC_BS_SetPlayerPos(playerid, 1188.4574,-1309.2242,-10.0);
			SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
			SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
		}
		case 7: // Unity
		{
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			AC_BS_SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1716.1129,-1880.0715,22.0264);
			AC_BS_SetPlayerPos(playerid,1716.1129,-1880.0715,-10.0);
			SetPlayerCameraPos(playerid,1755.0413,-1824.8710,20.2100);
			SetPlayerCameraLookAt(playerid,1716.1129,-1880.0715,22.0264);
		}
	}
	return 1;
}

ShowMainMenuDialog(playerid, frame)
{
	new titleString[10000];
	new String[10000];

	switch(frame)
	{
		case 1:
		{
			format(titleString, sizeof(titleString), "Login ke Enterplay RP");
			format(String, sizeof(String), "Selamat datang di Server Roleplay Enterplay Gaming.\n\nAccount:{FF0000}%s\n\n{FFFF00}Tolong masukan password di kotak bawah ini:", GetName(playerid));
			ShowPlayerDialog(playerid,MAINMENU,DIALOG_STYLE_PASSWORD,titleString,String,"Login","Exit");
		}
		case 2:
		{
			format(titleString, sizeof(titleString), "Register ke Enterplay RP");
			format(String, sizeof(String), "Selamat datang di Server Roleplay Enterplay Gaming.\n\nAccount:{FF0000}%s\n\n{FFFF00}Tolong masukan password di kotak bawah ini:", GetName(playerid));
			ShowPlayerDialog(playerid,MAINMENU2,DIALOG_STYLE_PASSWORD,titleString,String,"Register","Exit");
		}
		case 3:
		{
			format(titleString, sizeof(titleString), "Login ke Enterplay RP");
			format(String, sizeof(String), "Selamat datang di Server Roleplay Enterplay Gaming.\n\nAccount:{FF0000}%s\n\n{FFFF00}Tolong masukan password di kotak bawah ini:", GetName(playerid));
			ShowPlayerDialog(playerid,MAINMENU,DIALOG_STYLE_PASSWORD,titleString,String,"Login","Exit");
		}
	}
}


public SafeLogin(playerid)
{

	// Main Menu Features.
	SetupPlayerForClassSelection(playerid);

	GetPlayerName(playerid, PlayerInfo[playerid][pNormalName], MAX_PLAYER_NAME);

	new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
	if(doesAccountExist(playername))
	{
		gPlayerAccount[playerid] = 1;
		ShowMainMenuDialog(playerid, 1);
		return 1;
	}
	else
	{
		gPlayerAccount[playerid] = 0;
		ShowMainMenuDialog(playerid, 2);
		return 1;
	}
}

public SafeLoadObjects(playerid)
{
	Streamer_Update(playerid);
	if(GetPVarType(playerid, "LoadingObjects"))
	{
		DeletePVar(playerid, "LoadingObjects");
		TogglePlayerControllable(playerid, 1);
	}
	if(GetPVarType(playerid, "MedicCall"))
	{
	    ClearAnimations(playerid);
		ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
		TogglePlayerControllable(playerid, 0);
	}
}

public ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new String[MAX_PLAYER_NAME];
		format(String, sizeof(String), "Nothing");
		strmid(PlayerInfo[playerid][pMarriedTo], String, 0, strlen(String), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return 1;
}

public ClearWS(wsid)
{
	format(WsInfo[wsid][wsOwner], 32, "Nothing");
	WsInfo[wsid][wsSafeMoney] = 0;
	WsInfo[wsid][wsPapanMT] = 0;
}
////////////////////////FARM OWNERSHIP Coded by AriWiwin14/////////////////////////
public ClearFarm(farmid)
{
	format(FarmInfo[farmid][FarmOwner], 32, "Tidak Ada");
	FarmInfo[farmid][FarmSafeMoney] = 0;
	FarmInfo[farmid][FarmPapanMT] = 0;
}

public ClearHouse(houseid)
{
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hSafeMoney] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hWeapons][0] = 0;
	HouseInfo[houseid][hWeapons][1] = 0;
	HouseInfo[houseid][hWeapons][2] = 0;
	HouseInfo[houseid][hWeapons][3] = 0;
	HouseInfo[houseid][hWeapons][4] = 0;
	HouseInfo[houseid][hWeaponsAmmo][0] = 0;
	HouseInfo[houseid][hWeaponsAmmo][1] = 0;
	HouseInfo[houseid][hWeaponsAmmo][2] = 0;
	HouseInfo[houseid][hWeaponsAmmo][3] = 0;
	HouseInfo[houseid][hWeaponsAmmo][4] = 0;
	HouseInfo[houseid][hGLUpgrade] = 1;
}

public ClearFamily(family)
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pFMember] == family)
		{
			SendClientMessageEx(i, COLOR_LIGHTBLUE, "* The Family you are in has just been deleted by an Admin, you have been kicked out automatically.");
			PlayerInfo[i][pFMember] = 255;
		}
	}
	new String[MAX_PLAYER_NAME];
	format(String, sizeof(String), "None");
	FamilyInfo[family][FamilyTaken] = 0;
	strmid(FamilyInfo[family][FamilyName], String, 0, strlen(String), 255);
	strmid(FamilyInfo[family][FamilyMOTD], String, 0, strlen(String), 255);
	strmid(FamilyInfo[family][FamilyLeader], String, 0, strlen(String), 255);
	format(String, sizeof(String), "Outsider");
	strmid(FamilyInfo[family][FamilyRank1], String, 0, strlen(String), 255);
	format(String, sizeof(String), "Associate");
	strmid(FamilyInfo[family][FamilyRank2], String, 0, strlen(String), 255);
	format(String, sizeof(String), "Soldier");
	strmid(FamilyInfo[family][FamilyRank3], String, 0, strlen(String), 255);
	format(String, sizeof(String), "Capo");
	strmid(FamilyInfo[family][FamilyRank4], String, 0, strlen(String), 255);
	format(String, sizeof(String), "Underboss");
	strmid(FamilyInfo[family][FamilyRank5], String, 0, strlen(String), 255);
	format(String, sizeof(String), "Godfather");
	strmid(FamilyInfo[family][FamilyRank6], String, 0, strlen(String), 255);
	FamilyInfo[family][FamilyColor] = 0;
	FamilyInfo[family][FamilyTurfTokens] = 24;
	FamilyInfo[family][FamilyMembers] = 0;
	FamilyInfo[family][FamilySpawn][0] = 0.0;
	FamilyInfo[family][FamilySpawn][1] = 0.0;
	FamilyInfo[family][FamilySpawn][2] = 0.0;
	FamilyInfo[family][FamilySpawn][3] = 0.0;
	FamilyInfo[family][FamilyGuns][0] = 0;
	FamilyInfo[family][FamilyGuns][1] = 0;
    FamilyInfo[family][FamilyGuns][2] = 0;
    FamilyInfo[family][FamilyGuns][3] = 0;
    FamilyInfo[family][FamilyGuns][4] = 0;
    FamilyInfo[family][FamilyGuns][5] = 0;
    FamilyInfo[family][FamilyGuns][6] = 0;
    FamilyInfo[family][FamilyGuns][7] = 0;
	FamilyInfo[family][FamilyGuns][8] = 0;
	FamilyInfo[family][FamilyGuns][9] = 0;
	FamilyInfo[family][FamilyGunsAmmo][0] = 0;
	FamilyInfo[family][FamilyGunsAmmo][1] = 0;
    FamilyInfo[family][FamilyGunsAmmo][2] = 0;
    FamilyInfo[family][FamilyGunsAmmo][3] = 0;
    FamilyInfo[family][FamilyGunsAmmo][4] = 0;
    FamilyInfo[family][FamilyGunsAmmo][5] = 0;
    FamilyInfo[family][FamilyGunsAmmo][6] = 0;
    FamilyInfo[family][FamilyGunsAmmo][7] = 0;
	FamilyInfo[family][FamilyGunsAmmo][8] = 0;
	FamilyInfo[family][FamilyGunsAmmo][9] = 0;
	FamilyInfo[family][FamilyCash] = 0;
	FamilyInfo[family][FamilyMats] = 0;
	FamilyInfo[family][FamilyPot] = 0;
	FamilyInfo[family][FamilyCrack] = 0;
	FamilyInfo[family][FamilySafe][0] = 0.0;
	FamilyInfo[family][FamilySafe][1] = 0.0;
	FamilyInfo[family][FamilySafe][2] = 0.0;
	FamilyInfo[family][FamilyUSafe] = 0;
	if(IsValidDynamicPickup(FamilyInfo[family][FamilyEntrancePickup])) DestroyDynamicPickup( FamilyInfo[family][FamilyEntrancePickup] );
	if(IsValidDynamicPickup(FamilyInfo[family][FamilyExitPickup])) DestroyDynamicPickup( FamilyInfo[family][FamilyExitPickup] );
	DestroyDynamic3DTextLabel( Text3D:FamilyInfo[family][FamilyEntranceText] );
	DestroyDynamic3DTextLabel( Text3D:FamilyInfo[family][FamilyExitText] );
	DestroyDynamicPickup( FamilyInfo[family][FamilyPickup] );
	SaveFamilies();
	return 1;
}

public ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new String[MAX_PLAYER_NAME];
		format(String, sizeof(String), "Nothing");
		strmid(PlayerCrime[playerid][pBplayer], String, 0, strlen(String), 255);
		strmid(PlayerCrime[playerid][pVictim], String, 0, strlen(String), 255);
		strmid(PlayerCrime[playerid][pAccusing], String, 0, strlen(String), 255);
		strmid(PlayerCrime[playerid][pAccusedof], String, 0, strlen(String), 255);
	}
	return 1;
}
//------------------------------------------------------------------------------------------------------
public OnPlayerDisconnect(playerid, reason)
{
    GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
    TextDrawHideForPlayer(playerid, LBox[playerid]);
	TextDrawHideForPlayer(playerid, LLine1[playerid]);
	TextDrawHideForPlayer(playerid, LLine2[playerid]);
	TextDrawHideForPlayer(playerid, LLine3[playerid]);
	TextDrawHideForPlayer(playerid, LCredits[playerid]);
	LuX_SpeedoMeter[playerid] = 0;
 	SaveWeaponInfo(playerid);
	KillTimer(WeaponCheckTimer[playerid]);
	for(new v; v < MAX_PLAYERVEHICLES; ++v)
	{
	    for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++)
     	{
	         	new Float:x, Float:y, Float:z, Float:angle, Float:health, Float:fuel;
         	 	DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvToy][vt]);
	            DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvNeonObj]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvNeonObj2]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvNeonObj3]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvNeonObj4]);
			 	GetVehicleDamageStatus(PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvStatus][0], PlayerVehicleInfo[playerid][v][pvStatus][1], PlayerVehicleInfo[playerid][v][pvStatus][2], PlayerVehicleInfo[playerid][v][pvStatus][3]);
				GetVehicleHealth(PlayerVehicleInfo[playerid][v][pvId], health);
				if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
				GetVehiclePos(PlayerVehicleInfo[playerid][v][pvId], x, y, z);
				GetVehicleZAngle(PlayerVehicleInfo[playerid][v][pvId], angle);
				PlayerVehicleInfo[playerid][v][pvPosX] = x;
				PlayerVehicleInfo[playerid][v][pvPosY] = y;
				PlayerVehicleInfo[playerid][v][pvPosZ] = z;
				PlayerVehicleInfo[playerid][v][pvPosAngle] = angle;
				PlayerVehicleInfo[playerid][v][pvFuel] = fuel;
				PlayerVehicleInfo[playerid][v][pvHealth] = health;
		}
	}
	if(GetPVarInt(playerid, "HaveADO") == 1) RemovePlayerADO(playerid);
	new Float:x,Float:y,Float:z,Float:a, Float:health;
 	GetVehicleDamageStatus(PlayerRentInfo[playerid][prId], PlayerRentInfo[playerid][prStatus][0], PlayerRentInfo[playerid][prStatus][1], PlayerRentInfo[playerid][prStatus][2], PlayerRentInfo[playerid][prStatus][3]);
	GetVehicleHealth(PlayerRentInfo[playerid][prId], health);
	GetVehiclePos(PlayerRentInfo[playerid][prId], x, y, z);
	GetVehicleZAngle(PlayerRentInfo[playerid][prId], a);
	PlayerRentInfo[playerid][prPosX] = x;
	PlayerRentInfo[playerid][prPosY] = y;
	PlayerRentInfo[playerid][prPosZ] = z;
	PlayerRentInfo[playerid][prPosAngle] = a;
	PlayerRentInfo[playerid][prHealth] = health;
	new weapons[13][2];
	for(new s = 0; s < 12; s++)
	{
	    GetPlayerWeaponData(playerid, s, weapons[s][0], weapons[s][1]);
	    PlayerInfo[playerid][pGuns][s] = weapons[s][0];
	    PlayerInfo[playerid][pGunsAmmo][s] = weapons[s][1];
	}
	for(new i; i <= 9; i++) // 9 = Total Dialog , Jadi kita mau tau kalau Player Ini Apakah Ambil Dialog dari 3 tersebut apa ga !
	{
		if(DialogSaya[playerid][i] == true) // Cari apakah dia punya salah satu diantara 10 dialog tersebut
		{
		    DialogSaya[playerid][i] = false; // Ubah Jadi Dia ga punya dialog lagi Kalau Udah Disconnect (Bukan dia lagi pemilik)
		    DialogHauling[i] = false; // Jadi ga ada yang punya nih dialog
		    DialogSweeper[i] = false; // Jadi ga ada yang punya nih dialog
		    DialogBus[i] = false; // Jadi ga ada yang punya nih dialog
		    DestroyVehicle(TrailerHauling[playerid]);
		}
	}
	//FlyMode
    PlayerPressedJump[playerid] = 0;
    TextDrawHideForPlayer(playerid, Time), TextDrawHideForPlayer(playerid, Date);
	if(GetPVarType(playerid, "BoomboxObject"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "BoomboxObject"));
        if(GetPVarType(playerid, "bboxareaid"))
        {
            foreach(Player,i)
            {
                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "bboxareaid")))
                {
                    StopAudioStreamForPlayer(i);
                     SendClientMessage(i, COLOR_GREY, " The boombox creator has disconnected from the server.");
                }
            }
        }
    }
 	new VID = GetPlayerVehicleID(playerid);
    DestroyDynamicObject(SirenObject[VID]);
 	{
	 	DestroyDynamicObject(GetPVarInt(playerid, "neon")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon1")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon2")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon3"));
	  	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon4")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon5")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon6")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon7"));
	  	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon8")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon9")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon10")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon11"));
	  	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon12")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon13")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon14")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon15"));
	  	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon16")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon17")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon18")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon19"));
	  	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon20")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon21")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon22")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon23"));
	  	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon24")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon25")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon26")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon27"));
	  	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon28")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon29")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon30")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon31"));
	  	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon32")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon33")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon34")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon35"));
	}
	// Crash Fix - GhoulSlayeR
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	if(!strcmp(name, "InvalidNick", true)) return 1;
	if(!strcmp(name, "BannedPlayer", true)) return 1;

	TextDrawDestroy(DescriptionText[playerid]);
	TextDrawHideForPlayer(playerid, Kotak);
	TextDrawHideForPlayer(playerid, Rp);
	TextDrawHideForPlayer(playerid, forum);
	TextDrawHideForPlayer(playerid, sen);
	TextDrawHideForPlayer(playerid, koma2);

	if(playerid == MAX_PLAYERS) return 1;
	PlayersConnected--;
	if (GetPVarInt(playerid, "HungerBar") == 1)
		{
			DeletePVar(playerid, "HungerBar");
			DeletePVar(playerid, "hTimerOn");
		}
		if (GetPVarInt(playerid, "EnergyBar") == 1)
		{
			DeletePVar(playerid, "EnergyBar");
			DeletePVar(playerid, "eTimerOn");
		}
		if (GetPVarInt(playerid, "BladderBar") == 1)
		{
			DeletePVar(playerid, "BladderBar");
			DeletePVar(playerid, "bTimerOn");
		}
		if (GetPVarInt(playerid, "ConditionBar") == 1)
		{
			DeletePVar(playerid, "ConditionBar");
			DeletePVar(playerid, "cTimerOn");
		}
		FirstSpawn[playerid] = 0;
		KillTimer(PBHTimer[playerid]);
		KillTimer(PBETimer[playerid]);
		KillTimer(PBBTimer[playerid]);
		KillTimer(PBCTimer[playerid]);
	if(pTazer[playerid] == 1) givePlayerValidWeapon(playerid,pTazerReplace[playerid], AMMO_MELEE);
	if(GetPVarInt(playerid, "SpeedRadar") == 1) givePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"), 250);
	if(GetPVarInt(playerid, "MovingStretcher") != -1)
	{
	    KillTimer(GetPVarInt(playerid, "TickEMSMove"));
	    DeletePVar(GetPVarInt(playerid, "MovingStretcher"), "OnStretcher");
	    SetPVarInt(playerid, "MovingStretcher", -1);
	}
	if(PlayerInfo[playerid][pLockCar] != INVALID_VEHICLE_ID)
	{
		vehicle_unlock_doors(PlayerInfo[playerid][pLockCar]);
	}
	if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
        PlayerVehicleInfo[PlayerInfo[playerid][pVehicleKeysFrom]][PlayerInfo[playerid][pVehicleKeys]][pvAllowedPlayerId] = INVALID_PLAYER_ID;
	}
	new String[10000];
	switch (reason)
	{
 	   	case 0:
	   	{
		   	format(String, sizeof(String), "%s telah meninggalkan server (timeout).", GetName(playerid));
		   	ProxDetector(30.0, playerid, String, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	   	}
	   	case 1:
 	  	{
		   	format(String, sizeof(String), "%s telah meninggalkan server (pergi).", GetName(playerid));
		   	ProxDetector(30.0, playerid, String, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}
		case 2:
	    {
			format(String, sizeof(String), "%s telah meninggalkan server (kicked/banned).", GetName(playerid));
			ProxDetector(30.0, playerid, String, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	   	}
	}
	if(EventKernel[EventCreator] == playerid)
	{
	    EventKernel[EventCreator] = 999;
		ABroadCast( COLOR_YELLOW, "AdmWarning: The player that was creating an event has disconnected/crashed.", 4 );
	}
	else if(GetPVarInt(playerid, "EventToken") == 0)
	{
		new Float: xx, Float: yy, Float: zz;
		PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		PlayerInfo[playerid][pChar] = PlayerInfo[playerid][pModel];
		GetPlayerPos(playerid, xx, yy, zz);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
		PlayerInfo[playerid][pPos_x] = xx;
		PlayerInfo[playerid][pPos_y] = yy;
		PlayerInfo[playerid][pPos_z] = zz;
	}
	else if(GetPVarInt(playerid, "EventToken") == 1)
	{
	    PlayerInfo[playerid][pInt] = EventLastInt[playerid];
		PlayerInfo[playerid][pVW] = EventLastVW[playerid];
		PlayerInfo[playerid][pChar] = PlayerInfo[playerid][pModel];
		PlayerInfo[playerid][pPos_r] = EventFloats[playerid][0];
		PlayerInfo[playerid][pPos_x] = EventFloats[playerid][1];
		PlayerInfo[playerid][pPos_y] = EventFloats[playerid][2];
		PlayerInfo[playerid][pPos_z] = EventFloats[playerid][3];
	}
	if(WatchingTV[playerid] == 1)
	{
	    PlayerInfo[playerid][pInt] = BroadcastLastInt[playerid];
		PlayerInfo[playerid][pVW] = BroadcastLastVW[playerid];
		PlayerInfo[playerid][pPos_r] = BroadcastFloats[playerid][0];
		PlayerInfo[playerid][pPos_x] = BroadcastFloats[playerid][1];
		PlayerInfo[playerid][pPos_y] = BroadcastFloats[playerid][2];
		PlayerInfo[playerid][pPos_z] = BroadcastFloats[playerid][3];
		WatchingTV[playerid] = 0;
		viewers--;
		UpdateSANewsBroadcast();
	}
	if(Spectate[playerid] < 553)
	{
        PlayerInfo[playerid][pInt] = GetPVarInt(playerid, "SpecInt");
		PlayerInfo[playerid][pVW] = GetPVarInt(playerid, "SpecVW");
		PlayerInfo[playerid][pChar] = PlayerInfo[playerid][pModel];
		PlayerInfo[playerid][pPos_x] = GetPVarFloat(playerid, "SpecPosX");
		PlayerInfo[playerid][pPos_y] = GetPVarFloat(playerid, "SpecPosY");
		PlayerInfo[playerid][pPos_z] = GetPVarFloat(playerid, "SpecPosZ");
	    GettingSpectated[Spectate[playerid]] = 999;
	    Spectate[playerid] = 999;
	}

	if(GetPVarInt(playerid, "fuelonoff") == 1)
 	{
  		DestroyProgressBar(FuelBar[playerid]);
    	textdrawscount--;
	    FuelBar[playerid] = INVALID_BAR_ID;
	}
	gActivePlayers[playerid]--;
	numplayers--;
	PlayerInfo[playerid][pAdjustable] = 1;
	OnPlayerStatsUpdate(playerid);
	UnloadPlayerVehicles(playerid);
	UnloadPlayerRent(playerid);
	infect[playerid] = 0;

	for(new i = 0; i < MAX_REPORTS; i++)
	{
	    if(Reports[i][ReportFrom] == playerid)
	    {
	        Reports[i][ReportFrom] = 999;
			Reports[i][BeingUsed] = 0;
			Reports[i][TimeToExpire] = 0;
		}
	}
	foreach(Player, i)
	{
		if(EMSAccepted[i] == playerid)
		{
			EMSAccepted[i] = 999;
			GameTextForPlayer(i, "~w~EMS Caller~n~~r~Left the game", 5000, 1);
			EMSCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(MedicAccepted[i] == playerid)
		{
			MedicAccepted[playerid] = 999;
			GameTextForPlayer(i, "~w~Medic Caller~n~~r~Left the game", 5000, 1);
			MedicCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(OrderAssignedTo[i] == playerid)
		{
		   OrderAssignedTo[i] = INVALID_PLAYER_ID;
		}
	}
	if(HireCar[playerid] != 299)
	{
		gLastDriver[HireCar[playerid]] = 300;
		vehicle_unlock_doors(HireCar[playerid]);
	}
	if (gLastCar[playerid] > 0)
	{
		gLastDriver[gLastCar[playerid]] = 300;
		if(PlayerInfo[playerid][pPhousekey] != gLastCar[playerid]-1)
		{
			vehicle_unlock_doors(gLastCar[playerid]);
		}
	}
	if(PlayerInfo[playerid][pMaskUse] == 1)
 	{
  		PlayerInfo[playerid][pMaskUse] = 0;
    	DestroyDynamic3DTextLabel(MaskLabel[playerid]);
    }
    if(PlayerInfo[playerid][pAdminDuty] == 1)
    {
        PlayerInfo[playerid][pAdminDuty] = 0;
        SetPlayerName(playerid, PlayerInfo[playerid][pNormalName]);
	}
	if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
		if(JobDuty[playerid] == 1) { Mechanics -= 1; }
	}
	GetPlayerName(playerid, PlayerInfo[playerid][pNormalName], MAX_PLAYER_NAME);
	return 1;
}

HospitalSpawn(playerid)
{
	if(GetPVarInt(playerid, "MedicBill") == 1 && PlayerInfo[playerid][pJailed] == 0)
	{
		if(GetPVarInt(playerid, "Hospital") == 1)
		{
			AC_BS_SetPlayerArmour(playerid, PlayerInfo[playerid][pSHealth]);
			AC_BS_SetPlayerHealth(playerid, 50.0);
			PlayerInfo[playerid][pHealth] = 50.0;
			if(PlayerInfo[playerid][pHunger] < 50 || PlayerInfo[playerid][pBladder] < 50 || PlayerInfo[playerid][pEnergi] < 50)
			{
			    PlayerInfo[playerid][pHunger] = 50;
			    PlayerInfo[playerid][pBladder] = 50;
			    PlayerInfo[playerid][pEnergi] = 50;
			}
			pTerluka[playerid] = 0;
            DeletePVar(playerid, "Hospital");
			DeletePVar(playerid, "MedicBill");
			if(PlayerInfo[playerid][pInsurance] == 3)
			{
			    //GivePlayerCash(playerid, -1250);
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "DOC: Karena anda memiliki Asuransi Kesehatan. Biaya perawatan ditanggung oleh {FF8000}Asuransi {FFFF00}");
			}
			else if(PlayerInfo[playerid][pInsurance] == 1)
			{
			    GivePlayerCash(playerid, -1000);
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "DOC: Karena anda memiliki Asuransi Kesehatan. Biaya perawatan dipotong 50%");
			}
			else if(PlayerInfo[playerid][pInsurance] == 0)
			{
				GivePlayerCash(playerid, -2000);
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "DOC: Biaya perawatan sebesar $20.00");
			}
		    AC_BS_SetPlayerPos(playerid, -198.3055,-1762.1797,675.7687);
		    SetPlayerFacingAngle(playerid, 67.077407);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
		}
	}
}

SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pChar] > 0)
		{
			SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
		}
		else
		{
			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		}
		new rand;
  		if(PlayerInfo[playerid][pTut] == 0)
		{
			gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
			TogglePlayerControllable(playerid,0);
			SetPlayerColor(playerid,TEAM_HIT_COLOR);
			AC_BS_SetPlayerPos(playerid, 1679.4342, -963.5275, 62.1913);
			SetPlayerCameraPos(playerid, 1682.7605, -832.4698, 95.1256);
			SetPlayerCameraLookAt(playerid, 1682.6489, -833.4603, 95.2104);
			ShowPlayerDialog(playerid,DTUT,DIALOG_STYLE_LIST,"Choose Gender:","Male Character\nFemale Character","Select", "");
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 1000)
		{
		    PhoneOnline[playerid] = 1;
			AC_BS_SetPlayerInterior(playerid, 0);
		 	rand = random(sizeof(OOCPrisonSpawns));
			SetPlayerFacingAngle(playerid, 0);
			AC_BS_SetPlayerPos(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			PlayerInfo[playerid][pVW] = 1;
			AC_BS_SetPlayerVirtualWorld(playerid, 1);
			//ApprovedLawyer[playerid] = 1;
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 4)
		{
		    PhoneOnline[playerid] = 1;
		    TogglePlayerControllable(playerid, 1);
			AC_BS_SetPlayerInterior(playerid, 0);
			PlayerInfo[playerid][pInt] = 0;
			rand = random(sizeof(LSPDJail));
			PlayerInfo[playerid][pVW] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			AC_BS_SetPlayerPos(playerid, LSPDJail[rand][0], LSPDJail[rand][1], LSPDJail[rand][2]);
			return 1;
		}
		if( GetPVarInt(playerid, "SpecOff" ) == 1 )
		{
			AC_BS_SetPlayerPos(playerid, GetPVarFloat(playerid, "SpecPosX"), GetPVarFloat(playerid, "SpecPosY"), GetPVarFloat(playerid, "SpecPosZ"));
			AC_BS_SetPlayerInterior(playerid, GetPVarInt(playerid, "SpecInt"));
			AC_BS_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SpecVW"));
			SetPVarInt(playerid, "SpecOff", 0 );
			SetPVarInt(playerid, "SpecState", -1 );
			for(new j=0; j<11; j++) GetPlayerWeaponData(playerid, j, PlayerInfo[playerid][pGuns][j], PlayerInfo[playerid][pGunsAmmo][j]);
			return 1;
		}
		if(GetPVarInt(playerid, "EventToken") == 1)
		{
		    DeletePVar(playerid, "EventToken");
		    SetPlayerWeapons(playerid);
		    AC_BS_SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
			//PlayerInfo[playerid][pInterior] = PlayerInfo[playerid][pInt];
			AC_BS_SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
			SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
			AC_BS_SetPlayerInterior(playerid,EventLastInt[playerid]);
			SetPlayerHealth(playerid, EventFloats[playerid][4]);
			PlayerInfo[playerid][pHealth] = EventFloats[playerid][4];
			SetPlayerArmour(playerid, EventFloats[playerid][5]);
			PlayerInfo[playerid][pArmor] = EventFloats[playerid][5];
			for(new i = 0; i < 6; i++)
			{
			    EventFloats[playerid][i] = 0.0;
			}
			EventLastVW[playerid] = 0;
			EventLastInt[playerid] = 0;
			return 1;
		}
		if(GetPVarInt(playerid, "Injured") == 1)
		{
		    SendEMSQueue(playerid,1);
		    TogglePlayerControllable(playerid,0);
		    return 1;
		}
		if(GetPVarInt(playerid, "MedicBill") == 1 && PlayerInfo[playerid][pJailed] == 0)
		{
			SendClientMessageEx( playerid, TEAM_CYAN_COLOR, "Hospital: Jika Anda masih ada yang terluka . datang ke kami saja !." );
			TogglePlayerControllable(playerid, 0);
			PlayerInfo[playerid][pDuty] = 0;
			PlayerInfo[playerid][pVW] = 0;
			PlayerInfo[playerid][pInt] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			TogglePlayerControllable(playerid,0);
            if(PlayerInfo[playerid][pInsurance] == 0)
            {
				//ResetPlayerWeapons(playerid);
				SendClientMessageEx( playerid, COLOR_WHITE, "Hospital : Sebelum anda pergi, Rumah Sakit Menyita semua senjata anda" );
				TogglePlayerControllable(playerid,0);
			}
			if( GetPVarInt( playerid, "EventToken" ) == 1 )
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "Hospital : Anda membayar dana dana perawatan rumah sakit." );
				TogglePlayerControllable(playerid,0);
			}
			else
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "Hospital : Anda membayar dana dana perawatan rumah sakit." );
				TogglePlayerControllable(playerid,0);
			}

			SetPVarInt(playerid, "MedicBill", 1);
			AC_BS_SetPlayerInterior(playerid, 0);
			TogglePlayerControllable(playerid,0);
			new String[70+MAX_PLAYER_NAME];
			if(PlayerInfo[playerid][pInsurance] == 2)
			{
			    if(PlayerInfo[playerid][pWantedLevel] >= 1)
				{
				    SendClientMessageEx(playerid, COLOR_YELLOW, " Polisi telah memperingatkan bahwa Anda inginkan dan mereka sedang dalam perjalanan mereka.");
				    format(String, sizeof(String), " Semua Rumah Sakit Saints telah dilaporkan %s sebagai orang yang diinginkan.", GetPlayerNameEx(playerid));
				    SendRadioMessage(1, DEPTRADIO, String);
					SendRadioMessage(2, DEPTRADIO, String);
					SendRadioMessage(3, DEPTRADIO, String);
					SendRadioMessage(5, DEPTRADIO, String);
					SendRadioMessage(7, DEPTRADIO, String);
					SendRadioMessage(11, DEPTRADIO, String);
					SendRadioMessage(13, DEPTRADIO, String);
				}
				SetPlayerFacingAngle(playerid, 335.606689);
				ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
				SetPlayerCameraPos(playerid, -198.3055,-1762.1797,675.7687);
				SetPlayerCameraLookAt(playerid, -198.3055,-1762.1797,675.7687);
				AC_BS_SetPlayerPos(playerid, -198.3055,-1762.1797,675.7687+1.5);
				TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "Hospital", 1);
			}
   			if(PlayerInfo[playerid][pInsurance] == 0)
			{
    					if(PlayerInfo[playerid][pWantedLevel] >= 1)
						{
				    		SendClientMessageEx(playerid, COLOR_YELLOW, " The police has been warned that you are wanted and they are on their way.");
				    		format(String, sizeof(String), " All Saints Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    		SendRadioMessage(1, DEPTRADIO, String);
							SendRadioMessage(2, DEPTRADIO, String);
							SendRadioMessage(3, DEPTRADIO, String);
							SendRadioMessage(5, DEPTRADIO, String);
							SendRadioMessage(7, DEPTRADIO, String);
							SendRadioMessage(11, DEPTRADIO, String);
							SendRadioMessage(13, DEPTRADIO, String);
						}
						SetPlayerFacingAngle(playerid, 335.606689);
						ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
						SetPlayerCameraPos(playerid, -198.3055,-1762.1797,675.7687);
						SetPlayerCameraLookAt(playerid, -198.3055,-1762.1797,675.7687);
						AC_BS_SetPlayerPos(playerid, -198.3055,-1762.1797,675.7687+1.5);
						SetPVarInt(playerid, "Hospital", 1);
						TogglePlayerControllable(playerid, 0);
			}
			TogglePlayerControllable(playerid, 0);
			AC_BS_SetPlayerHealth(playerid, 0.5);
			PlayerInfo[playerid][pHealth] = 0.5;
			SetPVarInt(playerid, "HospitalTimer", 25);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HOSPITALTIMER);
			return 1;
		}
		if(GetPVarInt(playerid, "FirstSpawn") == 1)
		{
			AC_BS_SetPlayerPos(playerid,PlayerInfo[playerid][pPos_x],PlayerInfo[playerid][pPos_y],PlayerInfo[playerid][pPos_z]);
			AC_BS_SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
			SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
			AC_BS_SetPlayerInterior(playerid,PlayerInfo[playerid][pInt]);
			AC_BS_SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
			AC_BS_SetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
			SetCameraBehindPlayer(playerid);
			if(PlayerInfo[playerid][pInt] > 0)
			{
			    TogglePlayerControllable(playerid, 1);
			    GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
			    SetPVarInt(playerid, "LoadingObjects", 1);
			    SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
		    }
		}
		else if(GetPVarInt(playerid, "FirstSpawn") == 1 && GetPVarInt(playerid, "Hospital") != 0)
		{
		    PlayerInfo[playerid][pDuty] = 0;
			PlayerInfo[playerid][pVW] = 0;
			PlayerInfo[playerid][pInt] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			if( GetPVarInt( playerid, "EventToken" ) == 1 )
			{
				//SendClientMessageEx( playerid, COLOR_WHITE, "As you've just come from an event, your weapons have been refunded." );
			}
			else
			{
				//ResetPlayerWeapons(playerid);
			}

			SetPVarInt(playerid, "MedicBill", 1);
			new String[70+MAX_PLAYER_NAME];
			if(PlayerInfo[playerid][pInsurance] == 2)
			{
			    if(PlayerInfo[playerid][pWantedLevel] >= 1)
				{
				    SendClientMessageEx(playerid, COLOR_YELLOW, "The police have been informed of your current location and are on their way.");
				    format(String, sizeof(String), " All Saints Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    SendRadioMessage(1, DEPTRADIO, String);
					SendRadioMessage(2, DEPTRADIO, String);
					SendRadioMessage(3, DEPTRADIO, String);
					SendRadioMessage(5, DEPTRADIO, String);
					SendRadioMessage(7, DEPTRADIO, String);
					SendRadioMessage(11, DEPTRADIO, String);
					SendRadioMessage(13, DEPTRADIO, String);
				}
				SetPlayerFacingAngle(playerid, 335.606689);
        		ApplyAnimation(playerid, "SWAT","gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 0);
				SetPlayerCameraPos(playerid, -198.3055,-1762.1797,675.7687);
				SetPlayerCameraLookAt(playerid, -198.3055,-1762.1797,675.7687);
				AC_BS_SetPlayerPos(playerid, -198.3055,-1762.1797,675.7687+1.5);
				SetPVarInt(playerid, "Hospital", 1);
			}
   			if(PlayerInfo[playerid][pInsurance] == 0)
			{
    					if(PlayerInfo[playerid][pWantedLevel] >= 1)
						{
				    		SendClientMessageEx(playerid, COLOR_YELLOW, " The police has been warned that you are wanted and they are on their way.");
				    		format(String, sizeof(String), " All Saints Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    		SendRadioMessage(1, DEPTRADIO, String);
							SendRadioMessage(2, DEPTRADIO, String);
							SendRadioMessage(3, DEPTRADIO, String);
							SendRadioMessage(5, DEPTRADIO, String);
							SendRadioMessage(7, DEPTRADIO, String);
							SendRadioMessage(11, DEPTRADIO, String);
							SendRadioMessage(13, DEPTRADIO, String);
						}
						SetPlayerFacingAngle(playerid, 335.606689);
		        		ApplyAnimation(playerid, "SWAT","gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 0);
						SetPlayerCameraPos(playerid, -198.3055,-1762.1797,675.7687);
						SetPlayerCameraLookAt(playerid, -198.3055,-1762.1797,675.7687);
						AC_BS_SetPlayerPos(playerid, -198.3055,-1762.1797,675.7687+1.5);
						SetPVarInt(playerid, "Hospital", 1);
			}
			TogglePlayerControllable(playerid, 0);
			AC_BS_SetPlayerHealth(playerid, 0.5);
			PlayerInfo[playerid][pHealth] = 0.5;
			SetPVarInt(playerid, "HospitalTimer", 25);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HOSPITALTIMER);
		}
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		if(x == 0.0 && y == 0.0)
		{
  			AC_BS_SetPlayerInterior(playerid,0);
			AC_BS_SetPlayerPos(playerid, 1715.1201,-1903.1711,13.5665);
			SetPlayerFacingAngle(playerid, 359.4621);
			SetCameraBehindPlayer(playerid);
		}
		SetPlayerToTeamColor(playerid);
		return 1;
	}
	return 1;
}//------------------------------------------------------------------------------------------------------

public OnPlayerDeath(playerid, killerid, reason)
{
	new String[10000];
	assert( AntiFlood_Check( playerid ) );
	pTazer[playerid] = 0;
	InsideShamal[playerid] = INVALID_VEHICLE_ID;
	DeletePVar(playerid, "SpeedRadar");
    DeletePVar(playerid, "UsingSprunk");
    KillTimer(GetPVarInt(playerid, "firstaid5"));
  	DeletePVar(playerid, "usingfirstaid");
	if(GetPVarInt(playerid, "MovingStretcher") != -1)
	{
	    KillTimer(GetPVarInt(playerid, "TickEMSMove"));
	    DeletePVar(GetPVarInt(playerid, "MovingStretcher"), "OnStretcher");
	    SetPVarInt(playerid, "MovingStretcher", -1);
	}

	new caller = Mobile[playerid];
	if(IsPlayerConnected(Mobile[playerid]))
	{
		SendClientMessageEx(caller,  COLOR_GRAD2, "The line went dead.");
		CellTime[caller] = 0;
		Mobile[caller] = INVALID_PLAYER_ID;
	}
	Mobile[playerid] = INVALID_PLAYER_ID;
	CellTime[playerid] = 0;
	RingTone[playerid] = 0;

	foreach(Player, i)
	{
		if(PlayerInfo[i][pAdmin] >= 1)
	    {
	    	SendDeathMessageToPlayer(i, killerid, playerid, reason);
	    }
		if(EMSAccepted[i] < 999)
		{
 			if(EMSAccepted[i] == playerid)
   			{
     			EMSAccepted[i] = 999;
       			GameTextForPlayer(i, "~w~EMS Caller~n~~r~Has Died", 5000, 1);
	        	EMSCallTime[i] = 0;
	        	DisablePlayerCheckpoint(i);
			}
		}
	}

	if(PlayerInfo[playerid][pMaskUse] == 1)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		   	ShowPlayerNameTagForPlayer(i, playerid, false);
		}
	}
	if(GetPVarInt(playerid, "Injured") == 1)
	{
     	SendClientMessageEx(playerid, COLOR_WHITE, "You appear to be stuck in limbo, medics are trying to revive you.");
	    KillEMSQueue(playerid);
	    TogglePlayerControllable(playerid,0);
	    return 1;
	}
	new Float:px,Float:py,Float:pz;
	if(GetPVarInt(playerid, "EventToken") == 0)
	{
	    if(GetPVarInt(playerid, "IsInArena") == -1)
		{
			SetPVarInt(playerid, "Injured", 1);
			pTerluka[playerid] += 1;
			new Float:mX, Float:mY, Float:mZ;
			GetPlayerPos(playerid, mX, mY, mZ);

			SetPVarFloat(playerid, "MedicX", mX);
			SetPVarFloat(playerid, "MedicY", mY);
			SetPVarFloat(playerid, "MedicZ", mZ);
			SetPVarInt(playerid, "MedicVW", GetPlayerVirtualWorld(playerid));
			SetPVarInt(playerid, "MedicInt", GetPlayerInterior(playerid));
		}
	}
	gPlayerSpawned[playerid] = 0;
	PlayerInfo[playerid][pLocal] = 255;
	GetPlayerPos(playerid, px, py, pz);

	if(PlayerInfo[killerid][pAdmin] < 1)
	{
	    if(reason == 49)
	    {
	    	format(String, sizeof(String), "AdmCmd: %s[id:%d] has possibly just car-rammed %s[id:%d] to death.", GetName(killerid), killerid, GetName(playerid), playerid);
	    	ABroadCast(COLOR_LIGHTRED, String, 1);
	    	print(String);
	    }
	    if(reason == 50)
	    {
	        if(IsAHelicopter(GetPlayerVehicleID(killerid)))
	        {
	    		format(String, sizeof(String), "AdmCmd: %s[id:%d] has possibly just blade-killed %s[id:%d].", GetName(killerid), killerid, GetName(playerid), playerid);
	    		ABroadCast(COLOR_LIGHTRED, String, 1);
	    		print(String);
	    	}
	    	else
	    	{
	    	    if(GetPlayerWeapon(killerid) != 32 || GetPlayerWeapon(killerid) != 28 || GetPlayerWeapon(killerid) != 29)
	    	    {
	    			format(String, sizeof(String), "AdmCmd: %s[id:%d] has possibly just car-parked %s[id:%d] to death.", GetName(killerid), killerid, GetName(playerid), playerid);
	    			ABroadCast(COLOR_LIGHTRED, String, 1);
	    			print(String);
	    		}
	    		else
	    		{
	    			format(String, sizeof(String), "AdmCmd: %s[id:%d] has possibly just driver-shot %s[id:%d] to death.", GetName(killerid), killerid, GetName(playerid), playerid);
	    			ABroadCast(COLOR_LIGHTRED, String, 1);
	    			print(String);
	    		}
	    	}
	    }
	}
	if (gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}
	killerid = INVALID_PLAYER_ID;
	return 1;
}
AntiFlood_Check( playerid, bool:inc=true )
{
	AntiFlood_Data[playerid][floodRate] += inc ? RATE_INC : 0;
	AntiFlood_Data[playerid][floodRate] = AntiFlood_Data[playerid][floodRate] - ( GetTickCount() - AntiFlood_Data[playerid][lastCheck] );
	AntiFlood_Data[playerid][lastCheck] = GetTickCount();
	AntiFlood_Data[playerid][floodRate] = AntiFlood_Data[playerid][floodRate] < 0 ? 0 : AntiFlood_Data[playerid][floodRate];

	if ( AntiFlood_Data[playerid][floodRate] >= RATE_MAX )
	{
		SendClientMessage( playerid, 0xC00000FF, "Stop flooding." );
		return false;
	}
	return true;
}

AntiFlood_InitPlayer( playerid )
{
	AntiFlood_Data[playerid][lastCheck] = GetTickCount();
	AntiFlood_Data[playerid][floodRate] = 0;
}
public OnVehicleDeath(vehicleid, killerid)
{
    new S3MP4K[10000];
    VehicleStatus{vehicleid} = 1;
	arr_Engine{vehicleid} = 0;
	foreach(Player, i)
	{
		for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++)
		{
		    for(new v; v < MAX_PLAYERVEHICLES; v++)
			{
		        if(PlayerVehicleInfo[i][v][pvId] == vehicleid)
		        {
					if(PlayerVehicleInfo[i][v][pvInsurances] > 0)
					{
					    format(S3MP4K, sizeof(S3MP4K), "VEHICLEINFO: Your %s has been destroyed and will be respawned at Insurance Agency with '/claiminsurance'", GetVehicleName(vehicleid));
						SendClientMessageEx(i, COLOR_WHITE, S3MP4K);
					    DestroyDynamicObject(PlayerVehicleInfo[i][v][pvToy][vt]);
			      		DestroyDynamicObject(PlayerVehicleInfo[i][v][pvNeonObj]);
						DestroyDynamicObject(PlayerVehicleInfo[i][v][pvNeonObj2]);
						DestroyDynamicObject(PlayerVehicleInfo[i][v][pvNeonObj3]);
						DestroyDynamicObject(PlayerVehicleInfo[i][v][pvNeonObj4]);
						PlayerVehicleInfo[i][v][pvDestroyed] = 1;
						PlayerVehicleInfo[i][v][pvId] = INVALID_PLAYER_VEHICLE_ID;
						SetVehiclePos(vehicleid, 0, 0, 0); // Attempted desync fix
						LinkVehicleToInterior(vehicleid, 99);
						SetVehicleVirtualWorld(vehicleid, 99);
						DestroyVehicle(vehicleid);
						PlayerCars--;
					}
					else
					{
						SendClientMessageEx(i, COLOR_WHITE,"VEHICLEINFO: Your vehicle has been destroyed and not available to respawn on Insurance Agency");
			 			DestroyPlayerVehicle(i, v);
				  	}
				}
		  	}
		}
	}
	return 1;
}
//ANTI AIMBOT ARWIN14
Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ)
{
        new Float:TGTDistance;

        TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

        new Float:tmpX, Float:tmpY, Float:tmpZ;

        tmpX = FrX * TGTDistance + CamX;
        tmpY = FrY * TGTDistance + CamY;
        tmpZ = FrZ * TGTDistance + CamZ;

        return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y)
{

  new Float:DX, Float:DY;
  new Float:angle;

  DX = floatabs(floatsub(x2,X));
  DY = floatabs(floatsub(y2,Y));

  if (DY == 0.0 || DX == 0.0)
  {
    if(DY == 0 && DX > 0) angle = 0.0;
    else if(DY == 0 && DX < 0) angle = 180.0;
    else if(DY > 0 && DX == 0) angle = 90.0;
    else if(DY < 0 && DX == 0) angle = 270.0;
    else if(DY == 0 && DX == 0) angle = 0.0;
  }
  else
  {
    angle = atan(DX/DY);

    if(X > x2 && Y <= y2) angle += 90.0;
    else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    else if(X < x2 && Y >= y2) angle -= 90.0;
    else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  }
  return floatadd(angle, 90.0);
}

GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance)
{
        x += (distance * floatsin(-angle, degrees));
        y += (distance * floatcos(-angle, degrees));
}

IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
        new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
        GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
        GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);

        new Float:vertical, Float:horizontal;

        switch (GetPlayerWeapon(playerid))
        {
                        case 34,35,36: {
                        if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
                        return false;
                        }
                        case 30,31: {vertical = 4.0; horizontal = -1.6;}
                        case 33: {vertical = 2.7; horizontal = -1.0;}
                        default: {vertical = 6.0; horizontal = -2.2;}
        }

        new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
        new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
        GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));

        if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
        return false;
}

bool:IsPlayerAimingAtPlayer(playerid, target)
{
        new Float:x, Float:y, Float:z;
        GetPlayerPos(target, x, y, z);
        if (IsPlayerAimingAt(playerid, x, y, z-0.75, 0.25)) return true;
        if (IsPlayerAimingAt(playerid, x, y, z-0.25, 0.25)) return true;
        if (IsPlayerAimingAt(playerid, x, y, z+0.25, 0.25)) return true;
        if (IsPlayerAimingAt(playerid, x, y, z+0.75, 0.25)) return true;
        return false;
}


public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
        switch(weaponid){ case 0..18, 39..54: return 1;}//invalid weapons

        if(hittype == BULLET_HIT_TYPE_PLAYER && IsPlayerConnected(hitid) && !IsPlayerNPC(hitid))
        {
                new Float:Shot[3], Float:Hit[3];
                GetPlayerLastShotVectors(playerid, Shot[0], Shot[1], Shot[2], Hit[0], Hit[1], Hit[2]);

                new playersurf = GetPlayerSurfingVehicleID(playerid);
                new hitsurf = GetPlayerSurfingVehicleID(hitid);
                new Float:targetpackets = NetStats_PacketLossPercent(hitid);
                new Float:playerpackets = NetStats_PacketLossPercent(playerid);

                if(~(playersurf) && ~(hitsurf) && !IsPlayerInAnyVehicle(playerid) && !IsPlayerInAnyVehicle(hitid))
                {
                        if(!IsPlayerAimingAtPlayer(playerid, hitid) && !IsPlayerInRangeOfPoint(hitid, 5.0, Hit[0], Hit[1], Hit[2]))
                        {
                                new String[10000], issuer[24];
                                GetPlayerName(playerid, issuer, 24);
                                AimbotWarnings[playerid] ++;

                                format(String, sizeof(String), "{FFFFFF}Player %s warning of aimbot or lag [Target PL: %f | Shooter PL:%f]!", issuer, targetpackets, playerpackets);

                                for(new p; p < MAX_PLAYERS;p++)
                                    if(IsPlayerConnected(p) && IsPlayerAdmin(p))
                                         SendClientMessage(p, -1, String);

                                if(AimbotWarnings[playerid] > 10)
                                {
                                        if(targetpackets < 1.2 && playerpackets < 1.2) return Kick(playerid);
                                        else
                                        {
                                                format(String, sizeof(String), "{FFFFFF}Player %s is probably using aimbot [Target PL: %f | Shooter PL:%f]!", issuer, targetpackets, playerpackets);
                                                for(new p; p < MAX_PLAYERS;p++) if(IsPlayerConnected(p) && IsPlayerAdmin(p)) SendClientMessage(p, -1, String);
                                        }
                                }
                                return 0;
                        }
                        else return 1;
                }
                else return 1;
        }
        return 1;
}

public OnPlayerSpawn(playerid)
{
	/*/NPC Bus
	if(IsPlayerNPC(playerid))
    {
    	new npcname[MAX_PLAYER_NAME];
        GetPlayerName(playerid, npcname, sizeof(npcname));
        if(!strcmp(npcname, "Bedjo", true))
        {
            SetPlayerColor(playerid, 0xFFFFFF00);
			PutPlayerInVehicle(playerid, NPCBedjo, 0);
        	SetPlayerSkin(playerid, 253);
        	ResetPlayerWeapons(playerid);
        	BusText = CreateDynamic3DTextLabel("[NPC]Bedjo_Wijoyo", COLOR_WHITE, 0, 0, -20, 25, playerid);
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BusText , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
        }
        if(!strcmp(npcname, "Sanusi", true))
        {
            SetPlayerColor(playerid, 0xFFFFFF00);
			PutPlayerInVehicle(playerid, NPCSanusi, 0);
        	SetPlayerSkin(playerid, 7);
        	ResetPlayerWeapons(playerid);
        	BusText1 = CreateDynamic3DTextLabel("[NPC]Sanusi_Wicaksono", COLOR_WHITE, 0, 0, -20, 25, playerid);
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BusText1 , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
        }
        return 1;
    }*/
    if(!gPlayerLogged{playerid})
    {
        SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: You are not logged in!");
        Kick(playerid);
        return 1;
	}
	//hunger system
	ShowProgressBarForPlayer(playerid, hungry[playerid]);
	ShowProgressBarForPlayer(playerid, tired[playerid]);
	ShowProgressBarForPlayer(playerid, clean[playerid]);
	SetProgressBarColor(hungry[playerid], 0x00FF0033);
	SetProgressBarColor(tired[playerid], 0x00FF0033);
	SetProgressBarColor(clean[playerid], 0x00FF0033);
	TextDrawShowForPlayer(playerid, BSText[0]);
	TextDrawShowForPlayer(playerid, BSText[1]);
	TextDrawShowForPlayer(playerid, BSText[2]);
	TextDrawShowForPlayer(playerid, BSText[3]);
	TextDrawShowForPlayer(playerid, BSText[4]);
	TextDrawShowForPlayer(playerid, BSText[5]);
	TextDrawShowForPlayer(playerid, BSText[6]);
	TextDrawShowForPlayer(playerid, BSText[7]);
	TextDrawShowForPlayer(playerid, BSText[8]);
	TextDrawShowForPlayer(playerid, BSText[9]);
	FirstSpawn[playerid]+=1;
	if(FirstSpawn[playerid] == 1)
	{
		PBHTimer[playerid] = SetTimerEx("ProgressBarHunger", 200000, true, "i", playerid);
		SetPVarInt(playerid, "HungerBar", 1);
		SetPVarInt(playerid, "hTimerOn", 0);

		PBBTimer[playerid] = SetTimerEx("ProgressBarEnergy", 210000, true, "i", playerid);
		SetPVarInt(playerid, "EnergyBar", 1);
		SetPVarInt(playerid, "eTimerOn", 0);

		PBETimer[playerid] = SetTimerEx("ProgressBarBladder", 250000, true, "i", playerid);
		SetPVarInt(playerid, "BladderBar", 1);
		SetPVarInt(playerid, "bTimerOn", 0);

		PBCTimer[playerid] = SetTimerEx("ProgressBarCondition", 200000, true, "i", playerid);
		SetPVarInt(playerid, "ConditionBar", 1);
		SetPVarInt(playerid, "cTimerOn", 0);
	}
	Streamer_Update(playerid);
	//Lumberjack Job
	if(PlayerInfo[playerid][pLumber] == 5)
	{
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid,-1060.3816,-1195.4048,129.5461,5.0);
		SendClientMessage(playerid,COLOR_GREEN,"Antarkan Kayu yang sudah kamu tebang ke checkpoint");
	}
	if(GetPVarInt(playerid, "NGPassenger") == 1)
	{
	    new Float:X, Float:Y, Float:Z;
	    GetVehiclePos(GetPVarInt(playerid, "NGPassengerVeh"), X, Y, Z);
	    AC_BS_SetPlayerPos(playerid, (X-2.557), (Y-3.049), Z);
	    SetPlayerWeaponsEx(playerid);
        givePlayerValidWeapon(playerid, 46, AMMO_MELEE);
        SetPlayerSkin(playerid, GetPVarInt(playerid, "NGPassengerSkin"));
        AC_BS_SetPlayerHealth(playerid, GetPVarFloat(playerid, "NGPassengerHP"));
        PlayerInfo[playerid][pHealth] = GetPVarFloat(playerid, "NGPassengerHP");
        AC_BS_SetPlayerArmour(playerid, GetPVarFloat(playerid, "NGPassengerArmor"));
		PlayerInfo[playerid][pArmor] = GetPVarFloat(playerid, "NGPassengerArmor");
		DeletePVar(playerid, "NGPassenger");
	    DeletePVar(playerid, "NGPassengerVeh");
		DeletePVar(playerid, "NGPassengerArmor");
		DeletePVar(playerid, "NGPassengerHP");
		DeletePVar(playerid, "NGPassengerSkin");
	    return 1;
	}
	if(InsideShamal[playerid] != INVALID_VEHICLE_ID)
	{
		AC_BS_SetPlayerPos(playerid, GetPVarFloat(playerid, "air_Xpos"), GetPVarFloat(playerid, "air_Ypos"), GetPVarFloat(playerid, "air_Zpos"));
		SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "air_Rpos"));
		AC_BS_SetPlayerHealth(playerid, GetPVarFloat(playerid, "air_HP"));
		PlayerInfo[playerid][pHealth] = GetPVarFloat(playerid, "air_HP");
		AC_BS_SetPlayerArmour(playerid, GetPVarFloat(playerid, "air_Arm"));
		PlayerInfo[playerid][pArmor] = GetPVarFloat(playerid, "air_Arm");
		SetPlayerWeaponsEx(playerid);
		SetPlayerToTeamColor(playerid);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);

		DeletePVar(playerid, "air_Xpos");
		DeletePVar(playerid, "air_Ypos");
		DeletePVar(playerid, "air_Zpos");
		DeletePVar(playerid, "air_Rpos");
		DeletePVar(playerid, "air_HP");
		DeletePVar(playerid, "air_Arm");

		SetCameraBehindPlayer(playerid);
		AC_BS_SetPlayerVirtualWorld(playerid, InsideShamal[playerid]);
		return AC_BS_SetPlayerInterior(playerid, 1);
	}
	SyncPlayerTime(playerid);
	SetPVarInt(playerid, "AdminProtect", 0);
    //if(IsPlayerNPC(playerid)) return 1;
	STDPlayer[playerid] = 0;
	gTeam[playerid] = PlayerInfo[playerid][pTeam];

	if(!gPlayerLogged{playerid}) return Kick(playerid);
	SetPlayerSpawn(playerid);
	SetPlayerWeapons(playerid);
	SetPlayerToTeamColor(playerid);

	CheckPH(playerid);
    TogglePlayerControllable(playerid, 1);
	return 1;
}

stock RegisterVehicleNumberPlate(vehicleid, sz_NumPlate[]) {
	new
	    Float: a_CarPos[4], Float:fuel; // X, Y, Z, Z Angle, Fuel

	GetVehiclePos(vehicleid, a_CarPos[0], a_CarPos[1], a_CarPos[2]);
	GetVehicleZAngle(vehicleid, a_CarPos[3]);
	fuel = VehicleFuel[vehicleid];
	SetVehicleNumberPlate(vehicleid, sz_NumPlate);
	SetVehicleToRespawn(vehicleid);
	SetVehiclePos(vehicleid, a_CarPos[0], a_CarPos[1], a_CarPos[2]);
	SetVehicleZAngle(vehicleid, a_CarPos[3]);
	VehicleFuel[vehicleid] = fuel;
	return 1;
}

//vGPS STOCK
stock Float:PointAngle(playerid, Float:xa, Float:ya, Float:xb, Float:yb)
{
	new Float:carangle;
	new Float:xc, Float:yc;
	new Float:angle;
	xc = floatabs(floatsub(xa,xb));
	yc = floatabs(floatsub(ya,yb));
	if (yc == 0.0 || xc == 0.0)
	{
		if(yc == 0 && xc > 0) angle = 0.0;
		else if(yc == 0 && xc < 0) angle = 180.0;
		else if(yc > 0 && xc == 0) angle = 90.0;
		else if(yc < 0 && xc == 0) angle = 270.0;
		else if(yc == 0 && xc == 0) angle = 0.0;
	}
	else
	{
		angle = atan(xc/yc);
		if(xb > xa && yb <= ya) angle += 90.0;
		else if(xb <= xa && yb < ya) angle = floatsub(90.0, angle);
		else if(xb < xa && yb >= ya) angle -= 90.0;
		else if(xb >= xa && yb > ya) angle = floatsub(270.0, angle);
	}
	GetVehicleZAngle(GetPlayerVehicleID(playerid), carangle);
	return floatadd(angle, -carangle);
}

stock gpsfcreate(filename[])
{
    if (fexist(filename)){return false;}
    new File:fhandle = fopen(filename,io_write);
    fclose(fhandle);
    return true;
}

stock Float:GetDistanceBetweenPoints(Float:X, Float:Y, Float:Z, Float:PointX, Float:PointY, Float:PointZ)
{
	new Float:Distance;Distance = floatabs(floatsub(X, PointX)) + floatabs(floatsub(Y, PointY)) + floatabs(floatsub(Z, PointZ));
	return Distance;
}

stock split(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc))
    {
        if(strsrc[i] == delimiter || i == strlen(strsrc))
        {
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}

//=======End of vGPS Stock======

Log(sz_fileName[], sz_input[]) {

	new
		sz_logEntry[156],
		i_dateTime[2][3],
		File: fileHandle = fopen(sz_fileName, io_append);

	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);

	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    if(FishHolding[playerid] > 0)
	{
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 456 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 455 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 499)
	    {
			if(FishHolding[playerid] == 3) // pusat to OD
			{
				    SedangTrucking[playerid] = 0;
				    PlayerInfo[playerid][pMissionsTime] = 300;
			    	PlayerInfo[playerid][pPayCheck] += 5000;
			        SendClientMessageEx(playerid,COLOR_ARWIN,"TRUCKING: {ffffff}Kamu berhasil mengirimkan ikan ke Ocean Docks.");
			        SendClientMessageEx(playerid,COLOR_ARWIN,"TRUCKING: {ffffff}$50.00 telah dimasukkan kedalam PayCheck-mu.");
			        FishHolding[playerid] = 0;
			        DisablePlayerRaceCheckpoint(playerid);
			        PlayerInfo[playerid][pTruckingSkill] += 1;
			        return 1;
			}
			else if(FishHolding[playerid] == 5) // mats, comp, bait
			{
			        SedangTrucking[playerid] = 0;
				    PlayerInfo[playerid][pMissionsTime] = 300;
			    	PlayerInfo[playerid][pPayCheck] += 5000;
			    	SendClientMessageEx(playerid,COLOR_ARWIN,"TRUCKING: {ffffff}Kamu berhasil mengirimkan component ke Component Storage.");
			        SendClientMessageEx(playerid,COLOR_ARWIN,"TRUCKING: {ffffff}$50.00 telah dimasukkan kedalam PayCheck-mu.");
			        FishHolding[playerid] = 0;
			        DisablePlayerRaceCheckpoint(playerid);
			        PlayerInfo[playerid][pTruckingSkill] += 1;
			        stockcomp += 500;
			        return 1;
			}
			else if(FishHolding[playerid] == 6) // tanaman
			{
			        SedangTrucking[playerid] = 0;
				    PlayerInfo[playerid][pMissionsTime] = 300;
			    	PlayerInfo[playerid][pPayCheck] += 5000;
			    	SendClientMessageEx(playerid,COLOR_ARWIN,"TRUCKING: {ffffff}Kamu berhasil mengirimkan Tanaman ke gudang Ocean Dock.");
			        SendClientMessageEx(playerid,COLOR_ARWIN,"TRUCKING: {ffffff}$50.00 telah dimasukkan kedalam PayCheck-mu.");
			        FishHolding[playerid] = 0;
			        DisablePlayerRaceCheckpoint(playerid);
			        PlayerInfo[playerid][pTruckingSkill] += 1;
					return 1;
			}
			else if(FishHolding[playerid] == 7) // kayu
			{
			        SedangTrucking[playerid] = 0;
				    PlayerInfo[playerid][pMissionsTime] = 300;
			    	PlayerInfo[playerid][pPayCheck] += 5000;
			    	SendClientMessageEx(playerid,COLOR_ARWIN,"TRUCKING: {ffffff}Kamu berhasil mengirimkan Kayu ke gudang Ocean Dock.");
			        SendClientMessageEx(playerid,COLOR_ARWIN,"TRUCKING: {ffffff}$50.00 telah dimasukkan kedalam PayCheck-mu.");
			        FishHolding[playerid] = 0;
			        DisablePlayerRaceCheckpoint(playerid);
			        PlayerInfo[playerid][pTruckingSkill] += 1;
					return 1;
			}
			else if(FishHolding[playerid] == 14) // Equipment
			{
			        SedangTrucking[playerid] = 0;
			        SendClientMessageEx(playerid,COLOR_WHITE,"200 kotak Ammunisi berhasil tiba dengan selamat.");
			        FishHolding[playerid] = 0;
			        EquipmentStock += 200;
			        new equipmentt1[1024], equipmentt2[1024], equipmentt3[1024], String[1024];
					format(equipmentt1, sizeof(equipmentt1), "'/sags'\nTo open your locker\nEquipment Stock: %d", EquipmentStock);
					UpdateDynamic3DTextLabelText(equipment1, COLOR_WHITE, String);
					format(equipmentt2, sizeof(equipmentt2), "'/sapd'\nTo open your locker\nEquipment Stock: %d", EquipmentStock);
					UpdateDynamic3DTextLabelText(equipment2, COLOR_WHITE, String);
					format(equipmentt3, sizeof(equipmentt3), "'/samd'\nTo open your locker\n'/takemedicine'\nto take medicine\nEquipment Stock: %d", EquipmentStock);
					UpdateDynamic3DTextLabelText(equipment3, COLOR_WHITE, String);
			        DisablePlayerRaceCheckpoint(playerid);
			        PlayerInfo[playerid][pEnergi] -= 2;
					PlayerInfo[playerid][pHunger] -= 2;
					return 1;
			}
		}
		return 1;
	}
    if(SedangHauling[playerid] > 0)
	{
 		if(SedangHauling[playerid] == 1)
	    {
     		DisablePlayerRaceCheckpoint(playerid);
     		SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Attach the trailer to your vehicle to order");
  			SedangHauling[playerid] = 2;
     		SetPlayerRaceCheckpoint(playerid, 1, -2471.2942, 783.0248, 35.1719, -2471.2942, 783.0248, 35.1719, 10.0);
       		return 1;
		}
		else if(SedangHauling[playerid] == 2)
		{
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
			    DisablePlayerRaceCheckpoint(playerid);
                SedangHauling[playerid] = 0;
                PlayerInfo[playerid][pPayCheck] += 35000;
                PlayerInfo[playerid][pHaulingTime] += 30*60;
                DialogHauling[0] = false;
                DialogSaya[playerid][0] = false;
                DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
                SendClientMessage(playerid, COLOR_ARWIN, "TRUCKING: {FFFFFF}$350.00 have been issued to your paycheck");
                return 1;
			}
		}
		else if(SedangHauling[playerid] == 3)
	    {
     		DisablePlayerRaceCheckpoint(playerid);
     		SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Attach the trailer to your vehicle to order");
  			SedangHauling[playerid] = 4;
     		SetPlayerRaceCheckpoint(playerid, 1, -576.2687, 2569.0842, 53.5156, 576.2687, 2569.0842, 53.5156, 10.0);
       		return 1;
		}
		else if(SedangHauling[playerid] == 4)
		{
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
			    DisablePlayerRaceCheckpoint(playerid);
                SedangHauling[playerid] = 0;
                PlayerInfo[playerid][pPayCheck] += 30000;
                PlayerInfo[playerid][pHaulingTime] += 30*60;
                DialogHauling[1] = false;
                DialogSaya[playerid][1] = false;
                DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
                SendClientMessage(playerid, COLOR_ARWIN, "TRUCKING: {FFFFFF}$300.00 have been issued to your paycheck");
                return 1;
			}
		}
		else if(SedangHauling[playerid] == 5)
	    {
     		DisablePlayerRaceCheckpoint(playerid);
     		SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Attach the trailer to your vehicle to order");
  			SedangHauling[playerid] = 6;
     		SetPlayerRaceCheckpoint(playerid, 1, 1424.8624, 2333.4939, 10.8203, 1424.8624, 2333.4939, 10.8203, 10.0);
       		return 1;
		}
		else if(SedangHauling[playerid] == 6)
		{
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
			    DisablePlayerRaceCheckpoint(playerid);
                SedangHauling[playerid] = 0;
                PlayerInfo[playerid][pPayCheck] += 25000;
                PlayerInfo[playerid][pHaulingTime] += 30*60;
                DialogHauling[2] = false;
                DialogSaya[playerid][2] = false;
                DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
                SendClientMessage(playerid, COLOR_ARWIN, "TRUCKING: {FFFFFF}$250.00 have been issued to your paycheck");
                return 1;
			}
		}
		if(SedangHauling[playerid] == 7)
	    {
     		DisablePlayerRaceCheckpoint(playerid);
     		SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Attach the trailer to your vehicle to order");
  			SedangHauling[playerid] = 8;
     		SetPlayerRaceCheckpoint(playerid, 1, 1198.7153, 165.4331, 20.5056, 1198.7153, 165.4331, 20.5056, 10.0);
       		return 1;
		}
		else if(SedangHauling[playerid] == 8)
		{
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
			    DisablePlayerRaceCheckpoint(playerid);
                SedangHauling[playerid] = 0;
                PlayerInfo[playerid][pPayCheck] += 27000;
                PlayerInfo[playerid][pHaulingTime] += 30*60;
                DialogHauling[3] = false;
                DialogSaya[playerid][3] = false;
                DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
                SendClientMessage(playerid, COLOR_ARWIN, "TRUCKING: {FFFFFF}$270.00 have been issued to your paycheck");
                return 1;
			}
		}
		else if(SedangHauling[playerid] == 9)
	    {
     		DisablePlayerRaceCheckpoint(playerid);
     		SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Attach the trailer to your vehicle to order");
  			SedangHauling[playerid] = 10;
     		SetPlayerRaceCheckpoint(playerid, 1, 1201.5385, 171.6184, 20.5035, 1201.5385, 171.6184, 20.5035, 10.0);
       		return 1;
		}
		else if(SedangHauling[playerid] == 10)
		{
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
			    DisablePlayerRaceCheckpoint(playerid);
                SedangHauling[playerid] = 0;
                PlayerInfo[playerid][pPayCheck] += 39900;
                PlayerInfo[playerid][pHaulingTime] += 30*60;
                DialogHauling[4] = false;
                DialogSaya[playerid][4] = false;
                DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
                SendClientMessage(playerid, COLOR_ARWIN, "TRUCKING: {FFFFFF}$399.00 have been issued to your paycheck");
                return 1;
			}
		}
		else if(SedangHauling[playerid] == 11)
	    {
     		DisablePlayerRaceCheckpoint(playerid);
     		SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Attach the trailer to your vehicle to order");
  			SedangHauling[playerid] = 12;
     		SetPlayerRaceCheckpoint(playerid, 1, 2786.8313, -2417.9558, 13.6339, 2786.8313, -2417.9558, 13.6339, 10.0);
       		return 1;
		}
		else if(SedangHauling[playerid] == 12)
		{
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
			    DisablePlayerRaceCheckpoint(playerid);
                SedangHauling[playerid] = 0;
                PlayerInfo[playerid][pPayCheck] += 20000;
                PlayerInfo[playerid][pHaulingTime] += 30*60;
                DialogHauling[5] = false;
                DialogSaya[playerid][5] = false;
                DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
                SendClientMessage(playerid, COLOR_ARWIN, "TRUCKING: {FFFFFF}$200.00 have been issued to your paycheck");
                return 1;
			}
		}
		else if(SedangHauling[playerid] == 13)
	    {
     		DisablePlayerRaceCheckpoint(playerid);
     		SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Attach the trailer to your vehicle to order");
  			SedangHauling[playerid] = 14;
     		SetPlayerRaceCheckpoint(playerid, 1, 1613.7815, 2236.2046, 10.3787, 1613.7815, 2236.2046, 10.3787, 10.0);
       		return 1;
		}
		else if(SedangHauling[playerid] == 14)
		{
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
			    DisablePlayerRaceCheckpoint(playerid);
                SedangHauling[playerid] = 0;
                PlayerInfo[playerid][pPayCheck] += 31000;
                PlayerInfo[playerid][pHaulingTime] += 30*60;
                DialogHauling[6] = false;
                DialogSaya[playerid][6] = false;
                DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
                SendClientMessage(playerid, COLOR_ARWIN, "TRUCKING: {FFFFFF}$310.00 have been issued to your paycheck");
                return 1;
			}
		}
		else if(SedangHauling[playerid] == 15)
	    {
     		DisablePlayerRaceCheckpoint(playerid);
     		SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Attach the trailer to your vehicle to order");
  			SedangHauling[playerid] = 16;
     		SetPlayerRaceCheckpoint(playerid, 1, 2415.7803, -2470.1309, 13.6300, 2415.7803, -2470.1309, 13.6300, 10.0);
       		return 1;
		}
		else if(SedangHauling[playerid] == 16)
		{
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
			    DisablePlayerRaceCheckpoint(playerid);
                SedangHauling[playerid] = 0;
                PlayerInfo[playerid][pPayCheck] += 33300;
                PlayerInfo[playerid][pHaulingTime] += 30*60;
                DialogHauling[7] = false;
                DialogSaya[playerid][7] = false;
                DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
                SendClientMessage(playerid, COLOR_ARWIN, "TRUCKING: {FFFFFF}$333.00 have been issued to your paycheck");
                return 1;
			}
		}
		else if(SedangHauling[playerid] == 17)
	    {
     		DisablePlayerRaceCheckpoint(playerid);
     		SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Attach the trailer to your vehicle to order");
  			SedangHauling[playerid] = 18;
     		SetPlayerRaceCheckpoint(playerid, 1, -980.1684, -713.3505, 32.0078, -980.1684, -713.3505, 32.0078, 10.0);
       		return 1;
		}
		else if(SedangHauling[playerid] == 18)
		{
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
			    DisablePlayerRaceCheckpoint(playerid);
                SedangHauling[playerid] = 0;
                PlayerInfo[playerid][pPayCheck] += 29000;
                PlayerInfo[playerid][pHaulingTime] += 30*60;
                DialogHauling[8] = false;
                DialogSaya[playerid][8] = false;
                DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
                SendClientMessage(playerid, COLOR_ARWIN, "TRUCKING: {FFFFFF}$290.00 have been issued to your paycheck");
                return 1;
			}
		}
		else if(SedangHauling[playerid] == 19)
	    {
     		DisablePlayerRaceCheckpoint(playerid);
     		SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Attach the trailer to your vehicle to order");
  			SedangHauling[playerid] = 20;
     		SetPlayerRaceCheckpoint(playerid, 1, -2226.1292, -2315.1055, 30.6045, -2226.1292, -2315.1055, 30.6045, 10.0);
       		return 1;
		}
		else if(SedangHauling[playerid] == 20)
		{
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
			    DisablePlayerRaceCheckpoint(playerid);
                SedangHauling[playerid] = 0;
                PlayerInfo[playerid][pPayCheck] += 22500;
                PlayerInfo[playerid][pHaulingTime] += 30*60;
                DialogHauling[9] = false;
                DialogSaya[playerid][9] = false;
                DestroyVehicle(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
                SendClientMessage(playerid, COLOR_ARWIN, "TRUCKING: {FFFFFF}$225.00 have been issued to your paycheck");
                return 1;
			}
		}
		return 1;
	}
	new Float:Health;
    if(CPD[playerid] == 1)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CPD[playerid] = 2;
			SetPlayerRaceCheckpoint(playerid, 0, 1972.9482, -1929.8557, 12.5739,1948.1033,-1930.6860,13.4751,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 2)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CPD[playerid] = 3;
			SetPlayerRaceCheckpoint(playerid, 0, 1948.1033,-1930.6860,13.4751,1906.9967, -1930.0426, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 3)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 4;
			SetPlayerRaceCheckpoint(playerid, 0, 1906.9967, -1930.0426, 12.5739,1834.1765, -1929.9357, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 4)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health >= 950)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 5;
			SetPlayerRaceCheckpoint(playerid, 0, 1834.1765, -1929.9357, 12.5739,1823.9728, -1921.6290, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 5)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 6;
			SetPlayerRaceCheckpoint(playerid, 0, 1823.9728, -1921.6290, 12.5739,1823.7241, -1844.5658, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 6)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 7;
			SetPlayerRaceCheckpoint(playerid, 0, 1823.7241, -1844.5658, 12.5739,1809.9785, -1829.8235, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 7)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 9;
			SetPlayerRaceCheckpoint(playerid, 0, 1809.9785, -1829.8235, 12.5739,1766.6809, -1822.9556, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 9)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 10;
			SetPlayerRaceCheckpoint(playerid, 0, 1766.6809, -1822.9556, 12.5739,1700.6266, -1809.6973, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 10)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 11;
			SetPlayerRaceCheckpoint(playerid, 0, 1700.6266, -1809.6973, 12.5739,1691.8811, -1801.5286, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 11)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 12;
			SetPlayerRaceCheckpoint(playerid, 0, 1691.8811, -1801.5286, 12.5739,1691.7961, -1745.4752, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 12)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 13;
			SetPlayerRaceCheckpoint(playerid, 0, 1691.7961, -1745.4752, 12.5739,1691.8342, -1679.3737, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 13)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 15;
			SetPlayerRaceCheckpoint(playerid, 0, 1691.8342, -1679.3737, 12.5739,1691.7463, -1603.1737, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 15)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 16;
			SetPlayerRaceCheckpoint(playerid, 0, 1691.7463, -1603.1737, 12.5739,1699.5380, -1594.7327, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 16)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 17;
			SetPlayerRaceCheckpoint(playerid, 0, 1699.5380, -1594.7327, 12.5739,1738.8302, -1600.2924, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 17)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 18;
			SetPlayerRaceCheckpoint(playerid, 0, 1738.8302, -1600.2924, 12.5739,1809.6837, -1614.3446, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 18)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 19;
			SetPlayerRaceCheckpoint(playerid, 0, 1809.6837, -1614.3446, 12.5739,1929.3334, -1615.0773, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 19)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 20;
			SetPlayerRaceCheckpoint(playerid, 0, 1929.3334, -1615.0773, 12.5739,1939.0790, -1622.0118, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 20)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 21;
			SetPlayerRaceCheckpoint(playerid, 0, 1939.0790, -1622.0118, 12.5739,1939.3633, -1738.4812, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 21)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 22;
			SetPlayerRaceCheckpoint(playerid, 0, 1939.3633, -1738.4812, 12.5739,1952.4625, -1754.5654, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 22)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 23;
			SetPlayerRaceCheckpoint(playerid, 0, 1952.4625, -1754.5654, 12.5739,1988.9359, -1754.5220, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 23)
 	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 24;
			SetPlayerRaceCheckpoint(playerid, 0, 1988.9359, -1754.5220, 12.5739,2079.5874, -1754.7408, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 24)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 25;
			SetPlayerRaceCheckpoint(playerid, 0, 2079.5874, -1754.7408, 12.5739,2087.1904, -1762.3777, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 25)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 26;
			SetPlayerRaceCheckpoint(playerid, 0, 2087.1904, -1762.3777, 12.5739,2079.6643, -1797.5828, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 26)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 27;
			SetPlayerRaceCheckpoint(playerid, 0, 2079.6643, -1797.5828, 12.5739,2079.6372, -1886.3774, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 27)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 28;
			SetPlayerRaceCheckpoint(playerid, 0, 2079.6372, -1886.3774, 12.5739,2073.5535, -1909.7695, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 28)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 29;
			SetPlayerRaceCheckpoint(playerid, 0, 2073.5535, -1909.7695, 12.5739,2073.5535, -1909.7695, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 29)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 30;
			SetPlayerRaceCheckpoint(playerid, 0, 2073.5535, -1909.7695, 12.5739,2066.9595, -1914.0358, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 30)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 31;
			SetPlayerRaceCheckpoint(playerid, 0, 2066.9595, -1914.0358, 12.5739,2065.4746, -1919.7954, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 31)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
		    DisablePlayerRaceCheckpoint(playerid);
		    CPD[playerid] = 32;
			SetPlayerRaceCheckpoint(playerid, 1, 2065.4746, -1919.7954, 12.5739,2065.4746, -1919.7954, 12.5739,5);
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	else if(CPD[playerid] == 32)
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		if(Health > 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			PlayerInfo[playerid][pCarLic] = 1;
			PlayerInfo[playerid][pCTime] = 604800;
			PlayerInfo[playerid][pCarLicID] = 1;
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have successfully passed the test and received your license.");
		}
		if(Health < 900)
		{
			DisablePlayerRaceCheckpoint(playerid);
			LicenseTest[playerid] = 0;
			CPD[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
		}
		return 1;
	}
	for(new i; i <= 3; i++) // 3 = Total Dialog , Jadi kita mau tau kalau Player Ini Apakah Ambil Dialog dari 3 tersebut apa ga !
	{
		if(BusSteps[playerid][i] > 0)
		{
		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 431)
		    {
			 	if(IsPlayerInAnyVehicle(playerid))
				{
				    if(BusSteps[playerid][0] == 2)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 15);
				        BusSteps[playerid][0] = 3;
				        SetPlayerRaceCheckpoint(playerid, 0, 1655.8779,-1580.8289,13.4839, 1325.0560,-1569.7898,13.4628, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 3)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 20);
				        BusSteps[playerid][0] = 4;
				        SetPlayerRaceCheckpoint(playerid, 0, 1325.0560,-1569.7898,13.4628,1359.4424,-1422.9174,13.4767, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 4)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 5;
				        SetPlayerRaceCheckpoint(playerid, 0, 1359.4424,-1422.9174,13.4767,1338.3066,-1394.7805,13.4779, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 5)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 70);
				        BusSteps[playerid][0] = 6;
				        SetPlayerRaceCheckpoint(playerid, 0, 1338.3066,-1394.7805,13.4779,651.5914,-1393.6437,13.5422, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 6)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 5);
				        BusSteps[playerid][0] = 7;
				        SetPlayerRaceCheckpoint(playerid, 0, 651.5914,-1393.6437,13.5422,539.4284,-1405.4429,15.7669, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 7)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 300);
				        BusSteps[playerid][0] = 8;
				        SetPlayerRaceCheckpoint(playerid, 0, 539.4284,-1405.4429,15.7669,492.0627,-1309.9187,15.7158, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 8)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 129);
				        BusSteps[playerid][0] = 9;
				        SetPlayerRaceCheckpoint(playerid, 0, 492.0627,-1309.9187,15.7158,153.1991,-1545.3175,10.5614, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 9)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 90);
				        BusSteps[playerid][0] = 10;
				        SetPlayerRaceCheckpoint(playerid, 0, 153.1991,-1545.3175,10.5614,373.0657,-1720.0210,7.2636, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 10)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 250);
				        BusSteps[playerid][0] = 11;
				        SetPlayerRaceCheckpoint(playerid, 0, 373.0657,-1720.0210,7.2636,1001.7006,-1809.3325,14.1462, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 11)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 200);
				        BusSteps[playerid][0] = 12;
				        SetPlayerRaceCheckpoint(playerid, 0, 1001.7006,-1809.3325,14.1462, 1017.2707,-2218.5603,13.0459, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 12)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 20);
				        BusSteps[playerid][0] = 13;
				        SetPlayerRaceCheckpoint(playerid, 0, 1017.2707,-2218.5603,13.0459,1312.3700,-2467.7739,7.7606, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 13)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 14;
				        SetPlayerRaceCheckpoint(playerid, 0, 1312.3700,-2467.7739,7.7606,1443.5225,-2683.4890,13.4660, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 14)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 15;
				        SetPlayerRaceCheckpoint(playerid, 0, 1443.5225,-2683.4890,13.4660,2167.0093,-2614.6147,13.4766, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 15)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 16;
				        SetPlayerRaceCheckpoint(playerid, 1, 2167.0093,-2614.6147,13.4766,2297.5007,-2281.6836,13.4911, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 16)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 17;
				        SetPlayerRaceCheckpoint(playerid, 1, 2297.5007,-2281.6836,13.4911,2245.5674,-2207.3191,13.4066, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 17)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 18;
				        SetPlayerRaceCheckpoint(playerid, 1, 2245.5674,-2207.3191,13.4066,1978.5647,-2107.1409,13.4477, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 18)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 19;
				        SetPlayerRaceCheckpoint(playerid, 1, 1978.5647,-2107.1409,13.4477,1964.9993,-1764.2311,13.4818, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 19)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 20;
				        SetPlayerRaceCheckpoint(playerid, 1, 1964.9993,-1764.2311,13.4818,1835.2019,-1750.1224,13.4855, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 20)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 21;
				        SetPlayerRaceCheckpoint(playerid, 1, 1835.2019,-1750.1224,13.4855,1824.7201,-1625.2925,13.4876, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 21)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 22;
				        SetPlayerRaceCheckpoint(playerid, 1, 1824.7201,-1625.2925,13.4876,1668.9048,-1590.1837,13.4715, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 22)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 23;
				        SetPlayerRaceCheckpoint(playerid, 1, 1668.9048,-1590.1837,13.4715,1662.6278,-1552.6962,13.4833, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 23)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 24;
				        SetPlayerRaceCheckpoint(playerid, 1, 1662.6278,-1552.6962,13.4833,1686.7153,-1551.0281,13.4776, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 24)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][0] = 25;
				        SetPlayerRaceCheckpoint(playerid, 1, 1686.7153,-1551.0281,13.4776,1673.5162,-1477.9034,13.4807, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][0] == 25)
				    {
				        BusSteps[playerid][0] = 0;
				        DialogBus[0] = false; // Dialog 0 telah di pilih
			    		DialogSaya[playerid][0] = false;
						SendClientMessageEx(playerid, COLOR_ARWIN, "SIDEJOBINFO: {FFFFFF}$100.00 telah dimasukkan ke JobSalary mu.");
						PlayerInfo[playerid][pPayCheck] += 10000;
				        PlayerInfo[playerid][pBusTime] = 1800;
				        DisablePlayerRaceCheckpoint(playerid);
				        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				        return 1;
			   		}
				    else if(BusSteps[playerid][1] == 6)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 5);
				        BusSteps[playerid][1] = 7;
				        SetPlayerRaceCheckpoint(playerid, 0, 1655.4309,-1578.8663,13.4876,1675.6584,-1594.5546,13.4830, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 7)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 300);
				        BusSteps[playerid][1] = 8;
				        SetPlayerRaceCheckpoint(playerid, 0, 1675.6584,-1594.5546,13.4830,1808.3151,-1614.4534,13.4606, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 8)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 129);
				        BusSteps[playerid][1] = 9;
				        SetPlayerRaceCheckpoint(playerid, 0, 1808.3151,-1614.4534,13.4606,1822.1866,-1602.4225,13.4650, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 9)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 90);
				        BusSteps[playerid][1] = 10;
				        SetPlayerRaceCheckpoint(playerid, 0, 1822.1866,-1602.4225,13.4650,1852.0515,-1477.0760,13.4892, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 10)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 250);
				        BusSteps[playerid][1] = 11;
				        SetPlayerRaceCheckpoint(playerid, 0, 1852.0515,-1477.0760,13.4892,1976.1843,-1468.7709,13.4898, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 11)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 200);
				        BusSteps[playerid][1] = 12;
				        SetPlayerRaceCheckpoint(playerid, 0, 1976.1843,-1468.7709,13.4898, 1988.9058,-1453.9619,13.4881, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 12)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 20);
				        BusSteps[playerid][1] = 13;
				        SetPlayerRaceCheckpoint(playerid, 0, 1988.9058,-1453.9619,13.4881,1989.5841,-1354.7592,23.8970, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 13)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 14;
				        SetPlayerRaceCheckpoint(playerid, 0, 1989.5841,-1354.7592,23.8970,2055.3843,-1343.6346,23.9209, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 14)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 15;
				        SetPlayerRaceCheckpoint(playerid, 0, 2055.3843,-1343.6346,23.9209,2073.3601,-1237.0232,23.9111, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 15)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 16;
				        SetPlayerRaceCheckpoint(playerid, 0, 2073.3601,-1237.0232,23.9111,2074.4985,-1106.5936,24.7291, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 16)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 17;
				        SetPlayerRaceCheckpoint(playerid, 0, 2074.4985,-1106.5936,24.7291,1995.6899,-1054.9963,24.5139, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 17)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 18;
				        SetPlayerRaceCheckpoint(playerid, 0, 1995.6899,-1054.9963,24.5139,1867.9518,-1058.5884,23.7857, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 18)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 19;
				        SetPlayerRaceCheckpoint(playerid, 0, 1867.9518,-1058.5884,23.7857,1863.6049,-1169.5271,23.7625, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 19)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 20;
				        SetPlayerRaceCheckpoint(playerid, 0, 1863.6049,-1169.5271,23.7625,1657.9583,-1157.8536,23.8513, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 20)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 21;
				        SetPlayerRaceCheckpoint(playerid, 0, 1657.9583,-1157.8536,23.8513,1592.6194,-1159.1958,24.0051, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 21)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 22;
				        SetPlayerRaceCheckpoint(playerid, 0, 1592.6194,-1159.1958,24.0051,1549.6796,-1055.4402,23.7095, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 22)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 23;
				        SetPlayerRaceCheckpoint(playerid, 0, 1549.6796,-1055.4402,23.7095,1458.6635,-1030.3673,23.7568, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 23)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 24;
				        SetPlayerRaceCheckpoint(playerid, 0, 1458.6635,-1030.3673,23.7568,1383.3145,-1032.3024,26.1900, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 24)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 25;
				        SetPlayerRaceCheckpoint(playerid, 0, 1383.3145,-1032.3024,26.1900,1355.6470,-1045.0482,26.4642, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 25)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 26;
				        SetPlayerRaceCheckpoint(playerid, 0, 1355.6470,-1045.0482,26.4642,1340.4150,-1127.6436,23.7744, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 26)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 27;
				        SetPlayerRaceCheckpoint(playerid, 0, 1340.4150,-1127.6436,23.7744,1340.1676,-1379.0829,13.5948, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 27)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 28;
				        SetPlayerRaceCheckpoint(playerid, 0, 1340.1676,-1379.0829,13.5948,1363.4252,-1405.9730,13.4503, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 28)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 29;
				        SetPlayerRaceCheckpoint(playerid, 0, 1363.4252,-1405.9730,13.4503,1393.6683,-1430.9860,13.5163, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 29)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 30;
				        SetPlayerRaceCheckpoint(playerid, 0, 1393.6683,-1430.9860,13.5163,1640.2510,-1443.0830,13.4826, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 30)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 31;
				        SetPlayerRaceCheckpoint(playerid, 0, 1640.2510,-1443.0830,13.4826,1654.4456,-1539.0234,13.4815, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 31)
				    {
				        DisablePlayerRaceCheckpoint(playerid);
				        GivePlayerCash(playerid, 100);
				        BusSteps[playerid][1] = 32;
				        SetPlayerRaceCheckpoint(playerid, 1, 1654.4456,-1539.0234,13.4815,1685.5889,-1550.3016,13.4852, 5);
				        return 1;
				    }
				    else if(BusSteps[playerid][1] == 32)
				    {
				        BusSteps[playerid][1] = 0;
				        DialogBus[1] = false; // Dialog 0 telah di pilih
			    		DialogSaya[playerid][1] = false;
						SendClientMessageEx(playerid, COLOR_ARWIN, "SIDEJOBINFO: {FFFFFF}$100.00 telah dimasukkan ke JobSalary mu.");
						PlayerInfo[playerid][pPayCheck] += 10000;
				        PlayerInfo[playerid][pBusTime] = 1800;
				        DisablePlayerRaceCheckpoint(playerid);
				        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				        return 1;
			   		}
				}
			}
		}
	}
	for(new i; i <= 3; i++) // 3 = Total Dialog , Jadi kita mau tau kalau Player Ini Apakah Ambil Dialog dari 3 tersebut apa ga !
	{
		if(SweeperSteps[playerid][i] > 0)
		{
		 	if(IsPlayerInAnyVehicle(playerid))
			{
				if(SweeperSteps[playerid][0] == 1)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 144);
			        SweeperSteps[playerid][0] = 2;
			        SetPlayerRaceCheckpoint(playerid, 0, 1619.4293,-1881.6036,13.4845, 1816.1698,-1834.6884,13.4141, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][0] == 2)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 15);
			        SweeperSteps[playerid][0] = 3;
			        SetPlayerRaceCheckpoint(playerid, 0, 1816.1698,-1834.6884,13.4141, 1820.7505,-1929.6912,13.3750, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][0] == 3)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 20);
			        SweeperSteps[playerid][0] = 4;
			        SetPlayerRaceCheckpoint(playerid, 0, 1820.7505,-1929.6912,13.3750,1955.9108,-1934.7244,13.3828, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][0] == 4)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 100);
			        SweeperSteps[playerid][0] = 5;
			        SetPlayerRaceCheckpoint(playerid, 0, 1955.9108,-1934.7244,13.3828,1962.7469,-1759.2129,13.3828, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][0] == 5)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 70);
			        SweeperSteps[playerid][0] = 6;
			        SetPlayerRaceCheckpoint(playerid, 0, 1962.7469,-1759.2129,13.3828,1830.1188,-1750.1913,13.3828, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][0] == 6)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 5);
			        SweeperSteps[playerid][0] = 7;
			        SetPlayerRaceCheckpoint(playerid, 0, 1830.1188,-1750.1913,13.3828,1700.3102,-1729.7719,13.3828, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][0] == 7)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 300);
			        SweeperSteps[playerid][0] = 8;
			        SetPlayerRaceCheckpoint(playerid, 0, 1700.3102,-1729.7719,13.3828,1575.3949,-1729.9983,13.3828, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][0] == 8)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 129);
			        SweeperSteps[playerid][0] = 9;
			        SetPlayerRaceCheckpoint(playerid, 0, 1575.3949,-1729.9983,13.3828,1567.2383,-1862.6960,13.3828, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][0] == 9)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 90);
			        SweeperSteps[playerid][0] = 10;
			        SetPlayerRaceCheckpoint(playerid, 0, 1567.2383,-1862.6960,13.3828,1619.1874,-1877.3141,13.3828, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][0] == 10)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 250);
			        SweeperSteps[playerid][0] = 11;
			        SetPlayerRaceCheckpoint(playerid, 1, 1619.1874,-1877.3141,13.3828,1619.1874,-1877.3141,13.3828, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][0] == 11)
			    {
			        SweeperSteps[playerid][0] = 0;
			        DialogSweeper[0] = false; // Dialog 0 telah di pilih
		    		DialogSaya[playerid][0] = false;
			        SendClientMessageEx(playerid, COLOR_ARWIN, "SIDEJOBINFO: {FFFFFF}$25.00 telah dimasukkan ke JobSalary mu.");
					PlayerInfo[playerid][pPayCheck] += 3500;
			        PlayerInfo[playerid][pSweeperT] = 1800;
			        DisablePlayerRaceCheckpoint(playerid);
			        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			        return 1;
		   		}
			    else if(SweeperSteps[playerid][1] == 1)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 200);
			        SweeperSteps[playerid][1] = 2;
			        SetPlayerRaceCheckpoint(playerid, 0, 1574.9003,-1871.1334,12.9483, 1572.1841,-1746.2827,12.9516, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][1] == 2)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 20);
			        SweeperSteps[playerid][1] = 3;
			        SetPlayerRaceCheckpoint(playerid, 0, 1572.1841,-1746.2827,12.9516,1533.9382,-1729.6626,12.9601, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][1] == 3)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 100);
			        SweeperSteps[playerid][1] = 4;
			        SetPlayerRaceCheckpoint(playerid, 0, 1533.9382,-1729.6626,12.9601,1532.7323,-1606.6068,12.9475, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][1] == 4)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 70);
			        SweeperSteps[playerid][1] = 5;
			        SetPlayerRaceCheckpoint(playerid, 0, 1532.7323,-1606.6068,12.9475,1443.0881,-1593.6465,12.9596, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][1] == 5)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 5);
			        SweeperSteps[playerid][1] = 6;
			        SetPlayerRaceCheckpoint(playerid, 0, 1443.0881,-1593.6465,12.9596,1456.4535,-1453.5516,12.9308, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][1] == 6)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 129);
			        SweeperSteps[playerid][1] = 7;
			        SetPlayerRaceCheckpoint(playerid, 0, 1456.4535,-1453.5516,12.9308,1424.1686,-1432.9954,12.9524, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][1] == 7)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 90);
			        SweeperSteps[playerid][1] = 8;
			        SetPlayerRaceCheckpoint(playerid, 0, 1424.1686,-1432.9954,12.9524,1369.5051,-1392.7247,13.0346, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][1] == 8)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 250);
			        SweeperSteps[playerid][1] = 9;
			        SetPlayerRaceCheckpoint(playerid, 0, 1369.5051,-1392.7247,13.0346,1294.5410,-1565.4962,12.9621, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][1] == 9)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 250);
			        SweeperSteps[playerid][1] = 10;
			        SetPlayerRaceCheckpoint(playerid, 0, 1294.5410,-1565.4962,12.9621,1293.6605,-1837.6873,12.9545, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][1] == 10)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 250);
			        SweeperSteps[playerid][1] = 11;
			        SetPlayerRaceCheckpoint(playerid, 0, 1293.6605,-1837.6873,12.9545,1524.6145,-1875.7056,12.9340, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][1] == 11)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 144);
			        SweeperSteps[playerid][1] = 12;
			        SetPlayerRaceCheckpoint(playerid, 1, 1619.4293,-1881.6036,13.4845, 1619.4293, -1881.6036, 13.4845, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][1] == 12)
			    {
			        SweeperSteps[playerid][1] = 0;
			        DialogSweeper[1] = false; // Dialog 0 telah di pilih
		    		DialogSaya[playerid][1] = false;
			        SendClientMessageEx(playerid, COLOR_ARWIN, "SIDEJOBINFO: {FFFFFF}$40.00 telah dimasukkan ke JobSalary mu.");
					PlayerInfo[playerid][pPayCheck] += 4000;
			        PlayerInfo[playerid][pSweeperT] = 1800;
			        DisablePlayerRaceCheckpoint(playerid);
			        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			        return 1;
		   		}
		   		else if(SweeperSteps[playerid][2] == 1)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 144);
			        SweeperSteps[playerid][2] = 2;
			        SetPlayerRaceCheckpoint(playerid, 0, 1539.4319,-1869.4375,13.1080, 1323.6667,-1851.4268,13.1080, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 2)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 15);
			        SweeperSteps[playerid][2] = 3;
			        SetPlayerRaceCheckpoint(playerid, 0, 1323.6667,-1851.4268,13.1080, 1184.0767,-1849.0615,13.1313, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 3)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 15);
			        SweeperSteps[playerid][2] = 17;
			        SetPlayerRaceCheckpoint(playerid, 0, 1184.0767,-1849.0615,13.1313, 1181.9901,-1711.4929,13.2177, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 17)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 20);
			        SweeperSteps[playerid][2] = 4;
			        SetPlayerRaceCheckpoint(playerid, 0, 1181.9901,-1711.4929,13.2177,1045.3878,-1709.5790,13.1080, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 4)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 100);
			        SweeperSteps[playerid][2] = 5;
			        SetPlayerRaceCheckpoint(playerid, 0, 1045.3878,-1709.5790,13.1080,1039.8157,-1583.4841,13.1078, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 5)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 70);
			        SweeperSteps[playerid][2] = 6;
			        SetPlayerRaceCheckpoint(playerid, 0, 1039.8157,-1583.4841,13.1078,927.9300,-1568.9344,13.1080, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 6)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 5);
			        SweeperSteps[playerid][2] = 7;
			        SetPlayerRaceCheckpoint(playerid, 0, 927.9300,-1568.9344,13.1080,916.0417,-1583.1429,13.1079, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 7)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 300);
			        SweeperSteps[playerid][2] = 8;
			        SetPlayerRaceCheckpoint(playerid, 0, 916.0417,-1583.1429,13.1079,916.0583,-1760.4836,13.1076, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 8)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 129);
			        SweeperSteps[playerid][2] = 9;
			        SetPlayerRaceCheckpoint(playerid, 0, 916.0583,-1760.4836,13.1076,819.3672,-1766.9518,13.1248, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 9)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 90);
			        SweeperSteps[playerid][2] = 10;
			        SetPlayerRaceCheckpoint(playerid, 0, 819.3672,-1766.9518,13.1248,832.2370,-1623.7051,13.1080, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 10)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 250);
			        SweeperSteps[playerid][2] = 11;
			        SetPlayerRaceCheckpoint(playerid, 0, 832.2370,-1623.7051,13.1080,905.0103,-1576.2756,13.1081, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 11)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 200);
			        SweeperSteps[playerid][2] = 12;
			        SetPlayerRaceCheckpoint(playerid, 0, 905.0103,-1576.2756,13.1081, 1286.4901,-1574.9495,13.1080, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 12)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 20);
			        SweeperSteps[playerid][2] = 13;
			        SetPlayerRaceCheckpoint(playerid, 0, 1286.4901,-1574.9495,13.1080,1294.6498,-1852.5858,13.1080, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 13)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 100);
			        SweeperSteps[playerid][2] = 14;
			        SetPlayerRaceCheckpoint(playerid, 0, 1294.6498,-1852.5858,13.1080,1524.0383,-1875.6007,13.1080, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 14)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 100);
			        SweeperSteps[playerid][2] = 15;
			        SetPlayerRaceCheckpoint(playerid, 0, 1524.0383,-1875.6007,13.1080,1619.1874, -1877.3141, 13.3828, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 15)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
			        GivePlayerCash(playerid, 100);
			        SweeperSteps[playerid][2] = 16;
			        SetPlayerRaceCheckpoint(playerid, 1, 1619.1874, -1877.3141, 13.3828,1619.1874, -1877.3141, 13.3828, 5);
			        return 1;
			    }
			    else if(SweeperSteps[playerid][2] == 16)
			    {
			        SweeperSteps[playerid][2] = 0;
			        DialogSweeper[2] = false; // Dialog 0 telah di pilih
		    		DialogSaya[playerid][2] = false;
					SendClientMessageEx(playerid, COLOR_ARWIN, "SIDEJOBINFO: {FFFFFF}$75.00 telah dimasukkan ke JobSalary mu.");
					PlayerInfo[playerid][pPayCheck] += 7500;
			        PlayerInfo[playerid][pSweeperT] = 1800;
			        DisablePlayerRaceCheckpoint(playerid);
			        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			        return 1;
		   		}
			}
	   	}
    }
	return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
	//Lumberjack Job
 	if(PlayerInfo[playerid][pJob] == 8 || PlayerInfo[playerid][pJob2] == 8)
	{
 		new vehhh = GetPlayerVehicleID(playerid);
 		if(PlayerInfo[playerid][pLumber] > 0)
 		{
			if( GetVehicleModel( vehhh ) == 422 || GetVehicleModel( vehhh ) == 554 || GetVehicleModel( vehhh ) == 543 || GetVehicleModel( vehhh ) == 478 )
			{
				GameTextForPlayer(playerid, "~g~Unloading Lumber..", 3000, 3);
				TogglePlayerControllable(playerid,0);
				SetTimerEx("UnloadLumber", 10000, false, "i", playerid);
				DisablePlayerCheckpoint(playerid);
			}
		}
	}
	if(GetPVarInt(playerid,"TrackCar") != 0)
	{
	    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	    DisablePlayerCheckpoint(playerid);
		DeletePVar(playerid, "TrackCar");
		return 1;
	}
	if(GetPVarInt(playerid, "Finding")>=1)
	{
	    DeletePVar(playerid, "Finding");
	    DisablePlayerCheckpoint(playerid);
	    GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
	}
	else if(EMSCallTime[playerid] > 0 && EMSAccepted[playerid] < 999)
	{
	    if(GetPVarInt(EMSAccepted[playerid], "Injured") == 1)
	    {
	    	SendEMSQueue(EMSAccepted[playerid],2);
	    	EMSAccepted[playerid] = 999;
	    	GameTextForPlayer(playerid, "~w~mencapai tujuan", 5000, 1);
	    	EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
		else
		{
            EMSAccepted[playerid] = 999;
		    GameTextForPlayer(playerid, "~r~Pasien telah meninggal", 5000, 1);
		    EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
	}
	else if(MedicCallTime[playerid] > 0 && MedicAccepted[playerid] < 999)
	{
		MedicAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Pasien telah diantarkan", 5000, 1);
		MedicCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
			{
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				new i = hInviteHouse[playerid];
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
    			Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
				AC_BS_SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
				if(HouseInfo[i][hCustomInterior] == 1)
				{
				    TogglePlayerControllable(playerid, 1);
			        GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
				    SetPVarInt(playerid, "LoadingObjects", 1);
				    SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
		        }
				AC_BS_SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
				PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
				PlayerInfo[playerid][pLocal] = i+6000;
				PlayerInfo[playerid][pVW] = i+6000;
				AC_BS_SetPlayerVirtualWorld(playerid, i+6000);
				hInviteOffer[playerid] = 999;
				hInviteHouse[playerid] = INVALID_HOUSE_ID;
			}
		}
	}
	return 1;
}

public SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num)
{
	foreach(Player, i)
	{
		SetPlayerCheckpoint(i,allx,ally,allz, radi);
		if (num != 255)
		{
			gPlayerCheckpointStatus[i] = num;
		}
	}
}

public SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	foreach(Player, i)
	{
		if(gTeam[i] == 2)
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
		}
	}
	return 1;
}

public ShowPlayerBeaconForCops(playerid)
{
	foreach(Player, i)
	{
		if(gTeam[i] == 2 || IsACop(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, COP_GREEN_COLOR);
		}
	}
	return 1;
}

public HidePlayerBeaconForCops(playerid)
{
	foreach(Player, i)
	{
		if(gTeam[i] == 2 || IsACop(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
		}
	}
	SetPlayerToTeamColor(playerid);
	return 1;
}

public ShowPlayerBeaconForMedics(playerid)
{
	foreach(Player, i)
	{
		if(IsInLSMD(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, COP_GREEN_COLOR);
		}
	}
	return 1;
}

public HidePlayerBeaconForMedics(playerid)
{
	foreach(Player, i)
	{
		if(IsInLSMD(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
		}
	}
	SetPlayerToTeamColor(playerid);
	return 1;
}


// MoveEMS Function(playerid)
public MoveEMS(playerid)
{
    new Float:mX, Float:mY, Float:mZ;
    GetPlayerPos(playerid, mX, mY, mZ);

    SetPVarFloat(GetPVarInt(playerid, "MovingStretcher"), "MedicX", mX);
	SetPVarFloat(GetPVarInt(playerid, "MovingStretcher"), "MedicY", mY);
	SetPVarFloat(GetPVarInt(playerid, "MovingStretcher"), "MedicZ", mZ);
	SetPVarInt(GetPVarInt(playerid, "MovingStretcher"), "MedicVW", GetPlayerVirtualWorld(playerid));
	SetPVarInt(GetPVarInt(playerid, "MovingStretcher"), "MedicInt", GetPlayerInterior(playerid));

	Streamer_UpdateEx(GetPVarInt(playerid, "MovingStretcher"), mX, mY, mZ);
	AC_BS_SetPlayerPos(GetPVarInt(playerid, "MovingStretcher"), mX, mY, mZ);
	AC_BS_SetPlayerInterior(GetPVarInt(playerid, "MovingStretcher"), GetPlayerVirtualWorld(playerid));
	AC_BS_SetPlayerVirtualWorld(GetPVarInt(playerid, "MovingStretcher"), GetPlayerVirtualWorld(playerid));

	ClearAnimations(GetPVarInt(playerid, "MovingStretcher"));
	ApplyAnimation(GetPVarInt(playerid, "MovingStretcher"), "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);

	DeletePVar(GetPVarInt(playerid, "MovingStretcher"), "OnStretcher");
	SetPVarInt(playerid, "MovingStretcher", -1);
}

// KillEMSQueue Function(playerid)
public KillEMSQueue(playerid)
{
    DeletePVar(playerid, "Injured");
    DeletePVar(playerid, "EMSAttempt");
	SetPVarInt(playerid, "MedicBill", 1);
	DeletePVar(playerid, "MedicCall");

	return 1;
}

// SendEMSQueue Function(playerid)
public SendEMSQueue(playerid,type)
{
    switch (type)
	{
		case 1:
		{
		    if(GetPlayerAnimationIndex(playerid) != 746) ClearAnimations(playerid), ApplyAnimation(playerid, "PED","KO_skid_front", 4.0, 0, 1, 1, 1, 0, 1);
		    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			AC_BS_SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			AC_BS_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
	  		AC_BS_SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));

			SetPVarInt(playerid, "EMSAttempt", -1);

			if(GetPlayerInterior(playerid) > 0)
			{
				TogglePlayerControllable(playerid, 0);
			    SetPVarInt(playerid, "LoadingObjects", 1);
			    SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
			}

			SetPVarInt(playerid,"MedicCall",1);
		}
		case 2:
		{
		    if(GetPlayerAnimationIndex(playerid) != 746) ClearAnimations(playerid), ApplyAnimation(playerid, "PED","KO_skid_front", 4.0, 0, 1, 1, 1, 0, 1);
		    SetPVarInt(playerid,"EMSAttempt", 2);
		 	ApplyAnimation(playerid,"PED","KO_skid_front",4.1, 0, 0, 0, 0, 0);
		}
	}
	return 1;
}

// AddWarrant Function (playerid,judgeid,crime[])
public AddWarrant(playerid,judgeid,crime[])
{
    new String[10000];
    new day,month,year;
	getdate(year,month,day);
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    format(String,sizeof(String),"warrants/%s.ini",playername);
    new File: file = fopen(String, io_write);
	if(file)
	{
	    format(String,sizeof(String),"%s - %s (%d/%d/%d)",crime,GetPlayerNameEx(judgeid),day,month,year);
	    fwrite(file, String);
	    fclose(file);
	}
	return 1;
}

// RemoveWarrant Function (playerid)
public RemoveWarrant(playerid)
{
	new String[10000];
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	format(String,sizeof(String),"warrants/%s.ini",playername);
	if(fexist(String))
	{
		fremove(String);
		return 1;
	}
	else
	{
	    return 0;
	}
}

// OAddWarrant Function (name[],judgeid,crime[])
public OAddWarrant(name[],judgeid,crime[])
{
	new String[10000];
	new day,month,year;
	getdate(year,month,day);
	format(String,sizeof(String),"warrants/%s.ini",name);
	new File: file = fopen(String, io_write);
	if(file)
	{
	    format(String,sizeof(String),"%s - %s (%d/%d/%d)",crime,GetPlayerNameEx(judgeid),day,month,year);
	    fwrite(file, String);
	    fclose(file);
	}
}

// ORemoveWarrant Function (name[])
public ORemoveWarrant(name[])
{
	new String[10000];
	format(String,sizeof(String),"warrants/%s.ini",name);
	if(fexist(String))
	{
	    fremove(String);
	    return 1;
	}
	else
	{
	    return 0;
	}
}

stock IsInvalidSkin(skin)
{
    #define	MAX_BAD_SKINS   14
    new badSkins[MAX_BAD_SKINS] =
    {
        993, 994, 995, 996, 998, 9942, 965, 974, 986,
        919, 949, 908, 973, 989
    };

    for (new i = 0; i < MAX_BAD_SKINS; i++)
    {
        if (skin == badSkins[i] || skin < 0 || skin >= 311 ) return true;
    }

    return false;
}

stock IsInvalidSkinEx(skin) // Add the restricted skins that don't crash their client.
{
    #define	MAX_BAD_SKINSEX   15
    new badSkins[MAX_BAD_SKINSEX] =
    {
        993, 994, 995, 996, 998, 992, 965, 974, 986,
        919, 949, 908, 973, 989, 986
    };

    for (new i = 0; i < MAX_BAD_SKINSEX; i++)
    {
        if (skin == badSkins[i] || skin < 0 || skin >= 311 ) return true;
    }

    return false;
}

IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

forward DrinkCooldown(playerid);
public DrinkCooldown(playerid)
{
    SetPVarInt(playerid, "DrinkCooledDown", 1);
    return 1;
}

forward RadarCooldown(playerid);
public RadarCooldown(playerid)
{
   DeletePVar(playerid, "RadarTimeout");
   return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(gPlayerUsingLoopingAnim[playerid])
	{
		if(IsKeyJustDown(KEY_SPRINT,newkeys,oldkeys))
		{
		    TextDrawHideForPlayer(playerid,txtAnimHelper);
			StopLoopingAnim(playerid);
			animation[playerid] = 0;
			ClearAnimations(playerid);
			return 1;
		}
	}
	if(IsKeyJustDown(KEY_YES, newkeys, oldkeys))
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return -1;
			SetVehicleLights(vehicleid, playerid);
		}
	    if (IsPlayerInRangeOfPoint(playerid,5.0,649.3228, -608.1068, -3.9568)) {
	        if(IsACop(playerid)) {
	            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
	                SetVehiclePos(GetPlayerVehicleID(playerid), 624.5196,-596.8649,16.9396);
	            }
	            else {
	                AC_BS_SetPlayerPos(playerid,624.5196,-596.8649,16.9396);
	            }
	        }
	    }
	 	if (IsPlayerInRangeOfPoint(playerid,5.0,618.0125, -597.0211, 18.1502)) {
	        if(IsACop(playerid)) {
	            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
	                SetVehiclePos(GetPlayerVehicleID(playerid), 643.8234,-608.0292,-4.2479);
	            }
	            else {
	                AC_BS_SetPlayerPos(playerid,643.8234,-608.0292,-4.2479);
	            }
	        }
	    }
	}
 	if(IsKeyJustDown(KEY_CROUCH, newkeys, oldkeys))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			cmd_paytoll(playerid, "");
			cmd_gate(playerid, "");
			cmd_hgate(playerid, "");

		    for(new idx=1; idx<MAX_GATES; idx++)
			{
		    	if(GateInfo[idx][gModel] && IsPlayerInRangeOfPoint(playerid, GateInfo[idx][gRange], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]))
				{
					if(PlayerInfo[playerid][pGate] == idx)
					{
				    	if(!GateInfo[idx][gStatus])
					    {
					    	GateInfo[idx][gStatus] = 1;
					        MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
					        SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
					    }
				        else
				        {
				            GateInfo[idx][gStatus] = 0;
				            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
				            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
				        }
					}
				}
			}
		}
	}
	/*/DISABLE ANTI BUNNY HOPP
	if((newkeys & KEY_JUMP) && !IsPlayerInAnyVehicle(playerid))
    {
        PlayerPressedJump[playerid] ++;
        SetTimerEx("PressJumpReset", 11000, false, "i", playerid);
        if(PlayerPressedJump[playerid] == 8)
        {
            foreach(Player, p)
            {
	            new string[1024];
	            PlayerPressedJump[playerid] = 0;
	            format(string, sizeof(string), "AdmWarn: {FF0000}%s {FFFF00}possible Bunny Hopping.", GetName(playerid));
				if(PlayerInfo[p][pAdmin] >= 1)
				{
				    if(togbh[p] == 1)
				    {
				        SendClientMessageEx(p,COLOR_YELLOW,string);
					}
				}
			}
        }
    }*/
    if((newkeys & KEY_NO ))
	{
	    	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new engine,lights,alarm,doors,bonnet,boot,objective,vehicleid;
				vehicleid = GetPlayerVehicleID(playerid);
				if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
				GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
				if(engine == VEHICLE_PARAMS_ON)
				{
					SetVehicleEngine(vehicleid, playerid);
				}
				else if((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "ENGINE: Anda mencoba untuk menghidupkan Mesin.");
					SetTimerEx("SetVehicleEngine", 3000, 0, "dd",  vehicleid, playerid);
				}
			}
	}
	if((newkeys & KEY_SECONDARY_ATTACK ))
	{
		return cmd_enter(playerid, "");
	}

 	//============================
    if(IsPlayerNPC(playerid)) return 1;
	if((newkeys & KEY_FIRE) && GetPVarInt(playerid, "SpeedRadar") == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
 	{
	    if(GetPVarInt(playerid, "RadarTimeout") == 0)
	    {
			if(GetPlayerWeapon(playerid) == SPEEDGUN)
			{
			    new Float:x,Float:y,Float:z;
				for(new veh = 1; veh < MAX_VEHICLES; veh++)
				{
				    if(IsVehicleStreamedIn(veh, playerid))
				    {
					    GetVehiclePos(veh,x,y,z);
					    if(IsPlayerAimingAt(playerid,x,y,z,10))
					    {
							new Float: Speed = GetVehicleSpeed(veh, 0);
							new String[68];
							format(String, sizeof(String), "~n~~n~~n~~n~~n~~n~~b~License Plate: ~w~%d~n~~b~Speed: ~w~%d MPH", veh, floatround(Speed/1.609));
							GameTextForPlayer(playerid, String,3500, 3);
							format(String, sizeof(String), "License Plate: %d Speed: %d MPH", veh, floatround(Speed/1.609));
							SendClientMessageEx(playerid, COLOR_GRAD4, String);
							SetPVarInt(playerid, "RadarTimeout", 1);
							SetTimerEx("RadarCooldown", 3000, 0, "i", playerid);
							return 1;
						}
					}
			    }
			}
		}
	}
	if((newkeys & KEY_FIRE) && pTazer[playerid] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
 		if(TazerTimeout[playerid] > 0)
  		{
			return 1;
		}
		new Float:X, Float:Y, Float:Z;
		foreach(Player, i)
		{
		    if(IsPlayerStreamedIn(i, playerid))
		    {
			    GetPlayerPos(i, X, Y, Z);
				if(IsPlayerAimingAt(playerid,X,Y,Z,1) && PlayerCuffed[i] == 0 && GetPlayerState(i) == PLAYER_STATE_ONFOOT && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
				{
		    		TogglePlayerControllable(i, 0);
					PlayerPlaySound(i, 6003, 0,0,0);
					PlayerPlaySound(playerid, 6003, 0,0,0);
					PlayerCuffed[i] = 1;
					SetPVarInt(i, "PlayerCuffed", 1);
					PlayerCuffedTime[i] = 16;
					SetPVarInt(i, "IsFrozen", 1);
					//Frozen[i] = 1;
					TazerTimeout[playerid] = 4;
					SetTimerEx("TazerTimer",1000,false,"d",playerid);
					return 1;
				}
			}
		}
	}
	if((newkeys & 16) && GetPVarInt(playerid,"UsingAnim") == 1 && GetPVarInt(playerid, "IsFrozen") == 0 && GetPlayerState(playerid) == 1 && PlayerCuffed[playerid] == 0 && PlayerInfo[playerid][pBeingSentenced] == 0)
	{
		ClearAnimations(playerid);
		DeletePVar(playerid,"UsingAnim");
	}
	if((newkeys & KEY_SPRINT) && GetPVarInt(playerid,"UsingAnim") == 1 && GetPVarInt(playerid, "IsFrozen") == 0 && GetPlayerState(playerid) == 1 && PlayerCuffed[playerid] == 0 && PlayerInfo[playerid][pBeingSentenced] == 0)
	{
			ClearAnimations(playerid);
			SetPlayerSkin(playerid, GetPlayerSkin(playerid));
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			DeletePVar(playerid,"UsingAnim");
	}
	//Lumber Jack Job
	new vehhh = IsPlayerInRangeOfVehicle(playerid, 5.0);
	if (newkeys & KEY_YES && GetPVarInt(playerid, "HoldingWood") == 1)
	{
	    if( GetVehicleModel( vehhh ) == 422 || GetVehicleModel( vehhh ) == 554 || GetVehicleModel( vehhh ) == 543 || GetVehicleModel( vehhh ) == 478 )
		{
	    	if (GetPVarInt(playerid, "LoadingWood") == 0)
			{
				SetTimerEx("LoadLumber", 1000, false, "i", playerid);
				SetPVarInt(playerid, "LoadingWood", 1);
			}
		}
	}
	//,SPECIAL_ACTION_DRINK_BEER,SPECIAL_ACTION_DRINK_WINE,SPECIAL_ACTION_DRINK_SPRUNK
	if(newkeys & KEY_FIRE && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_SMOKE_CIGGY)
	{
            PlayerInfo[playerid][pCondition] --;
 	}
	if(newkeys & KEY_FIRE && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER)
	{
	    	SetPlayerDrunkLevel(playerid, 50000);
			SetTimerEx("StopCameraEffect", 60000, 0, "i", playerid);
		    PlayerInfo[playerid][pCondition] --;
	}
	if(newkeys & KEY_FIRE && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE)
	{
	    	SetPlayerDrunkLevel(playerid, 50000);
			SetTimerEx("StopCameraEffect", 60000, 0, "i", playerid);
		    PlayerInfo[playerid][pCondition] --;
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
		    if(cHealth < 100)
		    {
				AC_BS_SetPlayerHealth(playerid, cHealth+2);
				PlayerInfo[playerid][pHealth] += 2.0;
		    }
		    else
		    {
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
		    DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}
	if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys))
	{
	    if(GetPVarInt(playerid, "NGPassenger") == 1)
	    {
	        TogglePlayerSpectating(playerid, 0);
		}
		if(GetPVarInt(playerid, "UsingSprunk"))
		{
			DeletePVar(playerid, "UsingSprunk");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
	}
	if (IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
 	{
 	    if(prSpawn[playerid] == 1)
 	    {
			new String[50];
 	        new Float:x,Float:y,Float:z,Float:angle, idx = prSpawnID[playerid];
 	        GetPlayerPos(playerid, x, y, z);
 	        GetPlayerFacingAngle(playerid, angle);
			RentInfo[idx][rSpawnX] = x;
			RentInfo[idx][rSpawnY] = y;
			RentInfo[idx][rSpawnZ] = z;
			RentInfo[idx][rAngle] = angle;
			format(String, sizeof(String), "Anda telah men-set Lokasi Spawn kendaraan Rent ID: %d", idx);
			SendClientMessage(playerid, COLOR_WHITE, String);
			prSpawnID[playerid] = 0;
			prSpawn[playerid] = 0;
		}
 	    if(GetPVarInt(playerid, "MovingStretcher") != -1)
 	    {
 	        KillTimer(GetPVarInt(playerid, "TickEMSMove"));
		    MoveEMS(playerid);
			return 1;
 	    }
 	    if(GetPVarInt(playerid, "editingcdvehpos"))
		{
			TogglePlayerControllable(playerid, false);
		    ShowPlayerDialog(playerid,DIALOG_CDEDITPARK,DIALOG_STYLE_MSGBOX,"Warning:","Is this the new position you want?","Ok","Cancel");
		}
		if(GetPVarInt(playerid, "editingcdvehnew"))
		{
            TogglePlayerControllable(playerid, false);
	        ShowPlayerDialog(playerid,DIALOG_CDEDITPARK,DIALOG_STYLE_MSGBOX,"Warning:","Is this the new position you want?","Ok","Cancel");
		}
		if(GetPVarInt(playerid, "editingfamhq") != 255)
		{
		    if(GetPVarInt(playerid, "editingfamhqaction") == 1)
		    {
      			DeletePVar(playerid, "editingfamhqaction");
		        TogglePlayerControllable(playerid, false);
	        	ShowPlayerDialog(playerid,HQENTRANCE,DIALOG_STYLE_MSGBOX,"Warning:","Is this the entrance you want?","Ok","Cancel");
		    }
		    else if(GetPVarInt(playerid, "editingfamhqaction") == 2)
		    {
		        DeletePVar(playerid, "editingfamhqaction");
		        TogglePlayerControllable(playerid, false);
	        	ShowPlayerDialog(playerid,HQEXIT,DIALOG_STYLE_MSGBOX,"Warning:","Is this the exit you want?","Ok","Cancel");
		    }
		    else if(GetPVarInt(playerid, "editingfamhqaction") == 5)
		    {
		        TogglePlayerControllable(playerid, false);
	        	ShowPlayerDialog(playerid,HQENTRANCE,DIALOG_STYLE_MSGBOX,"Warning:","Is this the entrance you want?","Ok","Cancel");
		    }
		    else if(GetPVarInt(playerid, "editingfamhqaction") == 6)
		    {
		        TogglePlayerControllable(playerid, false);
	        	ShowPlayerDialog(playerid,HQEXIT,DIALOG_STYLE_MSGBOX,"Warning:","Is this the exit you want?","Ok","Cancel");
		    }

		}
		if(GetPVarInt(playerid, "UsingSprunk"))
		{
		    if(PlayerInfo[playerid][pEnergi] >= 100)
			{
			    DeletePVar(playerid, "UsingSprunk");
  				return 1;
	   		}
	   		else
	   		{
	   		    PlayerInfo[playerid][pBladder] -= 5;
		    	PlayerInfo[playerid][pEnergi] += 5;
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if (newstate == PLAYER_STATE_PASSENGER)
	{
	    switch (GetPlayerWeapon(playerid))
	    {
	        case 22, 25, 28..33:
	    		SetPlayerArmedWeapon(playerid, GetPlayerWeapon(playerid));

			default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}
	if(newstate != 2) NOPTrigger[playerid] = 0;
	if(GettingSpectated[playerid] != INVALID_PLAYER_ID)
	{
	    new spectator = GettingSpectated[playerid];
	    if(!IsPlayerConnected(spectator))
	    {
	        GettingSpectated[playerid] = INVALID_PLAYER_ID;
	        Spectate[spectator] = INVALID_PLAYER_ID;
		}

	    if(newstate == PLAYER_STATE_DRIVER && PlayerInfo[spectator][pAdmin] >= 2 || newstate == PLAYER_STATE_PASSENGER && PlayerInfo[spectator][pAdmin] >= 2)
	    {
	        TogglePlayerSpectating(spectator, true);
			new carid = GetPlayerVehicleID( playerid );
			PlayerSpectateVehicle( spectator, carid );
	    }
	    else if(newstate == PLAYER_STATE_ONFOOT && PlayerInfo[spectator][pAdmin] >= 2)
	    {
	        TogglePlayerSpectating(spectator, true);
		   	PlayerSpectatePlayer( spectator, playerid );
		   	AC_BS_SetPlayerInterior( spectator, GetPlayerInterior( playerid ) );
	    }
	}
	if(IsPlayerNPC(playerid))
	{
		if(newstate == PLAYER_STATE_SPECTATING)
		{
			TogglePlayerSpectating(playerid, false);
		}
		return 1;
	}
	if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
	{
	    if(LicenseTest[playerid] == 1)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "Anda telah keluar dari kendaraan");
	        SendClientMessageEx(playerid, COLOR_GREY, "Tes mengemudi gagal");
	        LicenseTest[playerid] = 0;
	        CPD[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		}
		SetPlayerDrunkLevel(playerid, 0);
	}
	if(newstate == PLAYER_STATE_DRIVER) {
		if(PlayerInfo[playerid][pEnergi] < 30)
		{
	    	if(IsPlayerInAnyVehicle(playerid))
			{
			    SetPlayerDrunkLevel(playerid, 4000);
			}
		}
	    pvehicleid[playerid] = GetPlayerVehicleID(playerid);
	    pmodelid[playerid] = GetVehicleModel(pvehicleid[playerid]);
	}
	else {
	    pvehicleid[playerid] = 0;
	    pmodelid[playerid] = 0;
	}
    if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUSSES
	{
 		if(stationidv[GetPlayerVehicleID(playerid)] != 0)
		{
		    new station[64];
			switch(stationidv[GetPlayerVehicleID(playerid)])
			{
				case 1: format(station, sizeof(station), "http://216.246.109.162:8000");
				case 2: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1415249");
				case 3: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1415249");
				case 4: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1628721");
				case 5: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1283687");
				case 6: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1628932");
				case 7: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1756658");
				case 8: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377200");
				case 9: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=2057197");
				case 10: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=18695");
				case 11: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=412093");
				case 12: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=181367");
				case 13: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1275071");
				case 14: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=412093");
				case 15: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1280356");
				case 16: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1279013");
				case 17: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1281016");
				case 18: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1280855");
				case 19: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1116397");
				case 20: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=2057543");
				case 21: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=616366");
				case 22: format(station, sizeof(station), "http://38.107.220.164:8014");
				case 23: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=847066");
			}
			if(Audio_IsClientConnected(playerid))
		 	{
		 	    Audio_Stop(playerid, stationidp[playerid]);
				stationidp[playerid] = Audio_PlayStreamed(playerid, station, false, true, false);
			}
		}
        if( GetPVarInt( playerid, "ToBeEjected" ) >= 1 )
    	{
	       	SetPVarInt( playerid, "ToBeEjected", 0 );
	       	RemovePlayerFromVehicle( playerid );
	       	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			AC_BS_SetPlayerPos(playerid, X, Y, Z+2);

			if(GetPVarInt(playerid, "Injured") == 1)
  			{
  			    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		   		AC_BS_SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
				AC_BS_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
				AC_BS_SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
   				ClearAnimations(playerid);
				ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
				TogglePlayerControllable(playerid, 0);
   			}
   		}
	}
	if(newstate == PLAYER_STATE_WASTED)
	{
		if(ConnectedToPC[playerid] == 1337)//mdc
	    {
	        ConnectedToPC[playerid] = 0;
		}
		Seatbelt[playerid] = 0;
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(stationidv[GetPlayerVehicleID(playerid)] != 0)
		{
		    new station[64];
			switch(stationidv[GetPlayerVehicleID(playerid)])
			{
				case 1: format(station, sizeof(station), "http://216.246.109.162:8000");
				case 2: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1415249");
				case 3: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1415249");
				case 4: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1628721");
				case 5: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1283687");
				case 6: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1628932");
				case 7: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1756658");
				case 8: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377200");
				case 9: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=2057197");
				case 10: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=18695");
				case 11: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=412093");
				case 12: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=181367");
				case 13: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1275071");
				case 14: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=412093");
				case 15: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1280356");
				case 16: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1279013");
				case 17: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1281016");
				case 18: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1280855");
				case 19: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1116397");
				case 20: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=2057543");
				case 21: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=616366");
				case 22: format(station, sizeof(station), "http://38.107.220.164:8014");
				case 23: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=847066");
			}
			if(Audio_IsClientConnected(playerid))
		 	{
		 	    Audio_Stop(playerid, stationidp[playerid]);
				stationidp[playerid] = Audio_PlayStreamed(playerid, station, false, true, false);
			}
		}

		new
			newcar = GetPlayerVehicleID(playerid),
			engine, lights, alarm, doors, bonnet, boot, objective, v;

		gLastCar[playerid] = newcar;

	 	foreach(Player, i) {
	   		v = GetPlayerVehicle(i, newcar);
		    if(v != -1) {
				if(i == playerid) {

					new
						String[96];
					if(PlayerVehicleInfo[i][v][pvTicket] != 0)
					{
						format(String, sizeof(String),"(%s) surat tilang ada di kendaraan anda. Anda harus membayarnya di tempat LSPD.", FormatMoney(PlayerVehicleInfo[i][v][pvTicket]));
						SendClientMessageEx(playerid, COLOR_GREY, String);
					}
					if(PlayerVehicleInfo[i][v][pvImpounded] == 2)
					{
					    SendClientMessageEx(playerid, COLOR_GREY, "Ban kendaraan anda telah digembok oleh Pihak Berwajib");
					    RemovePlayerFromVehicle(playerid);
					    return 1;
					}

				}
				return 1;
			}
		}

		for(new f = 0; f < MAX_FAMILY; f++) {
			v = GetGangVehicle(f, newcar);
			if(v != -1) {
				new String[49 + MAX_PLAYER_NAME];
				if(PlayerInfo[playerid][pFMember] == f)
				{
					format(String, sizeof(String), "You are in the family that owns this %s.", GetVehicleName(newcar));
	    			SendClientMessageEx(playerid, COLOR_GREY, String);
				}
				else if(FamilyVehicleInfo[f][v][fvLocked] == 1 && FamilyVehicleInfo[f][v][fvLock] == 1)
				{
					GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(newcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  newcar);
				}
				else if(FamilyVehicleInfo[f][v][fvLocked] == 1 && FamilyVehicleInfo[f][v][fvLock] == 2)
				{
		            new Float:X, Float:Y, Float:Z, Float:HP;
		            GetPlayerPos(playerid, X, Y, Z);
		            SendAudioToRange(10300, 100, 0, X, Y, Z, 20.0);
		            AC_BS_SetPlayerPos(playerid, X + 1, Y, Z);
		            RemovePlayerFromVehicle(playerid);
		            new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					AC_BS_SetPlayerPos(playerid, slx, sly, slz);
					SetPVarInt(playerid, "IsFrozen", 1);
		            TogglePlayerControllable(playerid,0);
		            SetTimerEx("ReleasePlayer", 10000, 0, "d", playerid);
		            GameTextForPlayer(playerid,"~r~STUNNED!",11000,3);
		            GetPlayerHealth(playerid,HP);
		            AC_BS_SetPlayerHealth(playerid,HP-15);
		            PlayerInfo[playerid][pHealth] -= 15.0;
				}
				return 1;
			}
		}
		if(PlayerInfo[playerid][pCarLic] == 0)
		{
			SendClientMessage(playerid, COLOR_ORANGE, "Berhati-hatilah karena anda tidak memiliki SIM");
		}
		new vehicleid = newcar;
		if(IsAnSASDCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GREY, "Anda bukan bagian dari SASD.");
			}
		}
		if(IsDMVCar(vehicleid))
		{
		    if(LicenseTest[playerid] < 1)
		    {
                RemovePlayerFromVehicle(playerid);
		        SendClientMessage(playerid, COLOR_ORANGE, "Anda belum mengambil tes mengemudi.");
		    }
		    if(LicenseTest[playerid] == 1)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* GPS: Selesaikan tes dengan mengikuti tanda di GPS anda.");
		        CPD[playerid] = 1;
		        SetPlayerRaceCheckpoint(playerid, 0, 2040.7101,-1930.1340,13.4667,1972.9482, -1929.8557, 12.5739,5);
		        SendClientMessage(playerid, COLOR_RED, "Jika anda keluar dari kendaraan Tes, Tes anda akan otomatis gagal.");
		    }
		}
		else if(IsAnSFPDCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GREY, "Anda bukan bagian dari SFPD.");
			}
		}
		else if(IsAnSanNewsCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GREY, "Anda bukan bagian dari 'San Andreas Network'.");
			}
		}
		else if(IsAGovCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 6)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GREY, "Anda bukan bagian dari 'San Andreas Goverment Service'.");
			}
		}
		else if(IsACopCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GREY, "Anda bukan bagian dari 'San Andreas Police Department'.");
			}
		}
		else if(IsAnAmbulance(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GREY, "Anda bukan bagian dari San Andreas Medical Department.");
			}
		}
	   	else if(IsAPlane(vehicleid))
		{
	  		if(PlayerInfo[playerid][pFlyLic] != 1)
	  		{
		  		RemovePlayerFromVehicle(playerid);
		  		NOPCheck(playerid);
		  		SendClientMessage(playerid, COLOR_GREY, "Kamu tidak memiliki izin terbang.");
	  		}
		}
		else if(IsAHelicopter(vehicleid))
		{
		    if(PlayerInfo[playerid][pFlyLic] != 1)
		    {
		    RemovePlayerFromVehicle(playerid);
			NOPCheck(playerid);
			SendClientMessage(playerid, COLOR_GREY, "Kamu tidak memiliki izin terbang.");
			}
		}
	    else if(IsSWEEPERCar(vehicleid))
		{
		    new String[10000], S3MP4K[10000];
		    if(PlayerInfo[playerid][pSweeperT] == 0)
			{
		    	strcat(S3MP4K, "Route\tPrice\n");
				format(String, sizeof(String), "Route A: Idlewood - Commerce\t%s\n", (DialogSweeper[0] == true) ? ("{FF0000}Cleaning") : ("{33AA33}$25.00"));
				strcat(S3MP4K, String);
				format(String, sizeof(String), "Route B: Pershing Square - Commerce\t%s\n", (DialogSweeper[1] == true) ? ("{FF0000}Cleaning") : ("{33AA33}$35.00"));
				strcat(S3MP4K, String);
				format(String, sizeof(String), "Route C: Commerce - Marina\t%s\n", (DialogSweeper[2] == true) ? ("{FF0000}Cleaning") : ("{33AA33}$75.00"));
				strcat(S3MP4K, String);
				ShowPlayerDialog(playerid, SWEEPERJOB, DIALOG_STYLE_TABLIST_HEADERS, "Sweeper Sidejob", S3MP4K, "Select", "Cancel");
			}
			else
			{
			    format(String, sizeof(String),"ERROR: Kamu harus menunggu %d Menit untuk menjadi Street Sweeper", PlayerInfo[playerid][pSweeperT]/60);
			    SendClientMessage(playerid, COLOR_GRAD2, String);
				RemovePlayerFromVehicle(playerid);
		 	}
		}
		else if(IsBUSCAR(vehicleid))
		{
		    new String[10000], S3MP4K[10000];
		    if(PlayerInfo[playerid][pBusTime] == 0)
			{
		    	strcat(S3MP4K, "Route\tPrice\n");
				format(String, sizeof(String), "Route A: Commerce - Ocean Dock\t%s\n", (DialogBus[0] == true) ? ("{FF0000}Taken") : ("{33AA33}$100.00"));
				strcat(S3MP4K, String);
				format(String, sizeof(String), "Route B: Commerce - Los Santos Bank\t%s\n", (DialogBus[1] == true) ? ("{FF0000}Taken") : ("{33AA33}$100.00"));
				strcat(S3MP4K, String);
				format(String, sizeof(String), "Route C: Commerce - East Los Santos\t{FF0000}Maintenance");
				strcat(S3MP4K, String);
				ShowPlayerDialog(playerid, BUSJOB, DIALOG_STYLE_TABLIST_HEADERS, "Bus Driver Sidejob", S3MP4K, "Select", "Cancel");
			}
			else
			{
			    format(String, sizeof(String),"ERROR: Kamu harus menunggu %d Menit untuk menjadi Bus Driver", PlayerInfo[playerid][pBusTime]/60);
			    SendClientMessage(playerid, COLOR_GRAD2, String);
				RemovePlayerFromVehicle(playerid);
		 	}
		}
	    else if(IsDMVCar(vehicleid))
		{
		    if(LicenseTest[playerid] < 1)
		    {
                RemovePlayerFromVehicle(playerid);
		        SendClientMessage(playerid, COLOR_ORANGE, "Anda belum mengambil tes mengemudi.");
		    }
		}
	    if( GetPVarInt( playerid, "ToBeEjected" ) >= 1 )
    	{
	       	SetPVarInt( playerid, "ToBeEjected", 0 );
	       	RemovePlayerFromVehicle( playerid );
	       	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			AC_BS_SetPlayerPos(playerid, X, Y, Z+2);

			if(GetPVarInt(playerid, "Injured") == 1)
  			{
  			    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		   		AC_BS_SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
				AC_BS_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
				AC_BS_SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
   				ClearAnimations(playerid);
				ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
				TogglePlayerControllable(playerid, 0);
   			}
   		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		if(GetCarDealershipVehicleId(newcar) != -1 && GetCarDealershipVehicleId(newcar) == GetPVarInt(playerid, "editingcdveh")) return 1;
        if(GetCarDealershipVehicleId(newcar) != -1)
        {
			new string[57 + 20 + 4];
			format(string, sizeof(string),"Would you like to buy this {00FF00}%s?\n\nThis vehicle costs {00FFFF}$%s.", GetVehicleName(newcar), FormatMoney(CarDealershipInfo[GetCarDealershipId(newcar)][cdVehicleCost][GetCarDealershipVehicleId(newcar)]));
		    ShowPlayerDialog(playerid,DIALOG_CDBUY,DIALOG_STYLE_MSGBOX,"Warning:",string,"Buy","Cancel");
		    TogglePlayerControllable(playerid, false);
		    return 1;
        }
		GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		if((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_OFF) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510) {
		}
		else
		{
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 481 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 509 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 510)
			{
				SetPVarInt(playerid, "fuelonoff", 1);
			}
		}
	}
	if((newstate == 2 || newstate == 3 || newstate == 7 || newstate == 9) && pTazer[playerid] == 1)
	{
		givePlayerValidWeapon(playerid, pTazerReplace[playerid], 100);
		pTazer[playerid] = 0;
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		if(ConnectedToPC[playerid] == 1337)//mdc
	    {
	        ConnectedToPC[playerid] = 0;
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
		SafeTime[playerid] = 60;
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 519)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(VehicleStatus{vehicleid} == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to enter this Shamal as it's been damaged!");
   		AC_BS_SetPlayerPos(playerid, 2.509036, 23.118730, 1199.593750);
     	SetPlayerFacingAngle(playerid, 82.14);
        SetCameraBehindPlayer(playerid);
		PlayerInfo[playerid][pVW] = vehicleid;
		AC_BS_SetPlayerVirtualWorld(playerid, vehicleid);
		PlayerInfo[playerid][pInt] = 0;
        AC_BS_SetPlayerInterior(playerid, 1);
		InsideShamal[playerid] = vehicleid;
		SendClientMessageEx(playerid, COLOR_WHITE, "Type /exit near the door to exit the vehicle, or /window to look outside.");
	}
	IsPlayerSteppingInVehicle[playerid] = -1;
	return 1;
}

player_remove_vip_toys(iTargetID) {
	if(PlayerInfo[iTargetID][pDonateRank] >= 3) return 1;
	else for(new iToyIter; iToyIter < MAX_PLAYER_ATTACHED_OBJECTS; ++iToyIter) {
		for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsCop); ++LoopRapist) {
			if(HoldingObjectsCop[LoopRapist][holdingmodelid] == PlayerToyInfo[iTargetID][iToyIter][ptModelID]) {
				PlayerToyInfo[iTargetID][iToyIter][ptModelID] = 0;
				PlayerToyInfo[iTargetID][iToyIter][ptBone] = 0;
				PlayerToyInfo[iTargetID][iToyIter][ptPosX] = 0.0;
				PlayerToyInfo[iTargetID][iToyIter][ptPosY] = 0.0;
				PlayerToyInfo[iTargetID][iToyIter][ptPosZ] = 0.0;
				PlayerToyInfo[iTargetID][iToyIter][ptPosX] = 0.0;
				PlayerToyInfo[iTargetID][iToyIter][ptPosY] = 0.0;
				PlayerToyInfo[iTargetID][iToyIter][ptPosZ] = 0.0;
				if(IsPlayerAttachedObjectSlotUsed(iTargetID, iToyIter)) RemovePlayerAttachedObject(iTargetID, iToyIter);
			}
		}
	}
	SendClientMessageEx(iTargetID, COLOR_WHITE, "All accessories/toys that were property of your former employer have been removed.");
	return 1;
}

public CarInit()
{
	for(new f = 1; f < MAX_VEHICLES; f++)
	{
 		gLastDriver[f] = MAX_VEHICLES+1;
 		LinkVehicleToInterior(f, 0);
	}
	gLastDriver[MAX_PLAYERS]=INVALID_PLAYER_ID;
	return 1;
}

public CarRespawn(carid)
{
	foreach(Player, i)
	{
		if(IsPlayerInVehicle(i, carid) || HireCar[i] == carid)
		{
			gLastDriver[carid] = INVALID_PLAYER_ID;
			return 0;
		}
	}
	SetVehicleToRespawn(carid);
	gLastDriver[carid] = INVALID_PLAYER_ID;
	return 1;
}

vehicle_lock_doors(vehicle) {

	new
		vParamArr[7];

	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_ON, vParamArr[4], vParamArr[5], vParamArr[6]);
}

vehicle_unlock_doors(vehicle) {

	new
		vParamArr[7];

	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_OFF, vParamArr[4], vParamArr[5], vParamArr[6]);
}

stock IsSeatAvailable(vehicleid, seat)
{
	new carmodel = GetVehicleModel(vehicleid);
	for (new i = 0; i < sizeof( OneSeatVehicles ); i++ )
	{
	    if( carmodel == OneSeatVehicles[i] ) return 0;
	}
	foreach(Player, i)
	{
	    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
	    if(!IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
	    {
			new Float:x, Float:y, Float:z, Float:angle, Float:health;
			GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
//			if(health < 800) return SendClientMessageEx(playerid, COLOR_GREY, " Your vehicle is too damaged to park it.");
			if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
			GetVehicleZAngle(PlayerVehicleInfo[playerid][d][pvId], angle);
			PlayerVehicleInfo[playerid][d][pvPosX] = x;
			PlayerVehicleInfo[playerid][d][pvPosY] = y;
			PlayerVehicleInfo[playerid][d][pvPosZ] = z;
			PlayerVehicleInfo[playerid][d][pvPosAngle] = angle;
			PlayerVehicleInfo[playerid][d][pvHealth] = health;
		}
	}
	if (GetPlayerState(playerid) == 1)
	{
		return 1;
	}
	if (GetVehicleModel(vehicleid) == 574)
	{
	    if(KerjaSweeper[playerid] != 0)
	    {
	        SendClientMessageEx(playerid,COLOR_LIGHTBLUE,"Kamu telah berhenti bekerja, kamu dapat bekerja Street Sweeper 30 menit lagi.");
			KerjaSweeper[playerid] = 0;
			for(new i = 0; i < 3; i++)
			{
				SweeperSteps[playerid][i] = 0;
			}
			DisablePlayerRaceCheckpoint(playerid);
			PlayerInfo[playerid][pSweeperT] = 1800;
	    }
		return 1;
	}
	if (GetVehicleModel(vehicleid) == 431)
	{
	    if(KerjaBus[playerid] != 0)
	    {
	        SendClientMessageEx(playerid,COLOR_LIGHTBLUE,"Kamu telah berhenti bekerja, kamu dapat bekerja sebagai Bus Driver 30 menit lagi.");
			KerjaSweeper[playerid] = 0;
			for(new i = 0; i < 3; i++)
			{
				BusSteps[playerid][i] = 0;
			}
			DisablePlayerRaceCheckpoint(playerid);
			PlayerInfo[playerid][pSweeperT] = 1800;
	    }
		return 1;
	}
	// Seatbelt Check
	switch(Seatbelt[playerid])
	{
		case 1:
		{
			if(IsABike(vehicleid))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Anda telah melepaskan helm anda.");
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Anda telah melepaskan sabuk pengaman.");
			}
			Seatbelt[playerid] = 0;
		}
	}

	if(GetPVarInt(playerid, "rccam") == 1)
	{
		DestroyVehicle(GetPVarInt(playerid, "rcveh"));
		AC_BS_SetPlayerPos(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
		DeletePVar(playerid, "rccam");
		KillTimer(GetPVarInt(playerid, "rccamtimer"));
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if(IsPlayerNPC(playerid)) return 1;
	return 1;
}
public simpenmaxlimit()
{
    SaveMaxLimit();
}
public SetPlayerCriminal(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
	    new points = WantedPoints[playerid];
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new wantedmes[128];
		new wlevel;
		strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		GetPlayerName(playerid, turned, sizeof(turned));
		if (declare == INVALID_PLAYER_ID)
		{
			format(turner, sizeof(turner), "Unknown");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		if (declare == -5)
		{
		    format(turner, sizeof(turner), "MPS Lot Officer.");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		format(turnmes, sizeof(turnmes), "You've commited a Crime ( %s ). Reporter: %s.",reason,turner);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, turnmes);
		if(points > 0)
		{
		    new yesno;
			if(points == 1) { if(PlayerInfo[playerid][pWantedLevel] != 1) { PlayerInfo[playerid][pWantedLevel] = 1; wlevel = 1; yesno = 1;} }
			else if(points == 2) { if(PlayerInfo[playerid][pWantedLevel] != 2) { PlayerInfo[playerid][pWantedLevel] = 2; wlevel = 2; yesno = 1;} }
			else if(points == 3) { if(PlayerInfo[playerid][pWantedLevel] != 3) { PlayerInfo[playerid][pWantedLevel] = 3; wlevel = 3; yesno = 1;} }
			else if(points == 4) { if(PlayerInfo[playerid][pWantedLevel] != 4) { PlayerInfo[playerid][pWantedLevel] = 4; wlevel = 4; yesno = 1;} }
			else if(points == 5) { if(PlayerInfo[playerid][pWantedLevel] != 5) { PlayerInfo[playerid][pWantedLevel] = 5; wlevel = 5; yesno = 1;} }
			else if(points == 6) { if(PlayerInfo[playerid][pWantedLevel] != 6) { PlayerInfo[playerid][pWantedLevel] = 6; wlevel = 6; yesno = 1;} }
			if(PlayerInfo[playerid][pWantedLevel] >= 1) { if(gTeam[playerid] == 3) { gTeam[playerid] = 4; } }
			if(yesno)
			{
				format(wantedmes, sizeof(wantedmes), "Current wanted level: %d", wlevel);
				SendClientMessageEx(playerid, COLOR_YELLOW, wantedmes);
				foreach(Player, i)
				{
				    if(PlayerInfo[i][pMember] == 3||PlayerInfo[i][pLeader] == 3||PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1||PlayerInfo[i][pMember] == 2||PlayerInfo[i][pLeader] == 2|| (PlayerInfo[i][pMember] == 4||PlayerInfo[i][pLeader] == 4&&PlayerInfo[i][pDivision] == 2)||PlayerInfo[i][pMember] == 7||PlayerInfo[i][pLeader] == 7 || PlayerInfo[i][pMember] == 11 || PlayerInfo[i][pLeader] == 11)
				    {
						format(cbjstore, sizeof(turnmes), "HQ: All Units APB: Reporter: %s",GetPlayerNameEx(declare));
						SendClientMessageEx(i, TEAM_BLUE_COLOR, cbjstore);
						format(cbjstore, sizeof(turnmes), "HQ: Crime: %s, Suspect: %s",reason,GetPlayerNameEx(playerid));
						SendClientMessageEx(i, TEAM_BLUE_COLOR, cbjstore);
					}
				}
			}
		}
	}//not connected
}
//---------------------------------------------------------

public SetPlayerFree(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
		ClearCrime(playerid);
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new crbjstore[128];
		if (declare == INVALID_PLAYER_ID)
		{
			format(turner, sizeof(turner), "911");
		}
		else
		{
			if(IsPlayerConnected(declare))
			{
				GetPlayerName(declare, turner, sizeof(turner));
			}
		}
		GetPlayerName(playerid, turned, sizeof(turned));
		RingTone[playerid] = 20;
		foreach(Player, i)
		{
			if(IsACop(i))
			{
				format(crbjstore, sizeof(crbjstore), "HQ: All units, officer %s has completed their assignment.",turner);
				SendClientMessageEx(i, COLOR_DBLUE, crbjstore);
				format(crbjstore, sizeof(crbjstore), "HQ: %s has been processed, %s.",turned,reason);
				SendClientMessageEx(i, COLOR_DBLUE, crbjstore);
			}
		}
	}
}

forward RingToner();
public RingToner()
{
	foreach(Player, i)
	{
		if(RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
		{
			RingTone[i] = RingTone[i] -1;
			PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
		}
		if(RingTone[i] == 6)
		{
			RingTone[i] = RingTone[i] -1;
		}
		if(RingTone[i] == 20)
		{
			RingTone[i] = RingTone[i] -1;
			PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
		}
	}
	SetTimer("RingTonerRev", 1000, 0);
	return 1;
}

forward RingTonerRev();
public RingTonerRev()
{
	foreach(Player, i)
	{
			if(RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 5)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 19)
			{
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
				RingTone[i] = 0;
			}
	}
	SetTimer("RingToner", 1000, 0);
	return 1;
}

forward OtherTimerEx(playerid, type);
public OtherTimerEx(playerid, type)
{
	if(type == TYPE_TPMATRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpMatRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpMatRunTimer", GetPVarInt(playerid, "tpMatRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		}
	}
	else if(type == TYPE_TPDRUGRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpDrugRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpDrugRunTimer", GetPVarInt(playerid, "tpDrugRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
		}
	}
	else if(type == TYPE_ARMSTIMER)
	{
	    if(GetPVarInt(playerid, "ArmsTimer") > 0)
		{
			SetPVarInt(playerid, "ArmsTimer", GetPVarInt(playerid, "ArmsTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
		}
	}
	else if(type == TYPE_GUARDTIMER)
	{
	    if(GetPVarInt(playerid, "GuardTimer") > 0)
	    {
	        SetPVarInt(playerid, "GuardTimer", GetPVarInt(playerid, "GuardTimer")-1);
	        SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
	    }
	}
	else if(type == TYPE_GIVEWEAPONTIMER)
	{
	    if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
		{
			SetPVarInt(playerid, "GiveWeaponTimer", GetPVarInt(playerid, "GiveWeaponTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(type == TYPE_SELLMATSTIMER)
	{
	    if(GetPVarInt(playerid, "SellMatsTimer") > 0)
		{
			SetPVarInt(playerid, "SellMatsTimer", GetPVarInt(playerid, "SellMatsTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMATSTIMER);
		}
	}
	else if(type == TYPE_HOSPITALTIMER)
	{
	    if(GetPVarInt(playerid, "HospitalTimer") > 0)
		{
		    new Float:curhealth;
			GetPlayerHealth(playerid, curhealth);
			SetPVarInt(playerid, "HospitalTimer", GetPVarInt(playerid, "HospitalTimer")-1);
			AC_BS_SetPlayerHealth(playerid, curhealth+2);
			PlayerInfo[playerid][pHealth] += 2.0;
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HOSPITALTIMER);
			if(GetPVarInt(playerid, "HospitalTimer") == 0)
			{
				HospitalSpawn(playerid);
			}
		}
	}
	else if(type == TYPE_FLOODPROTECTION)
	{
 		if( CommandSpamUnmute[playerid] >= 1)
 		{
  			CommandSpamUnmute[playerid]--;
  			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
    	}
 		if( TextSpamUnmute[playerid] >= 1)
 		{
  			TextSpamUnmute[playerid]--;
  			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
    	}
	}
	else if(type == TYPE_HEALTIMER)
	{
	    if( GetPVarInt(playerid, "TriageTimer") >= 1)
 		{
  			SetPVarInt(playerid, "TriageTimer", GetPVarInt(playerid, "TriageTimer")-1);
  			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HEALTIMER);
    	}
	}
}

public SetPlayerWeapons(playerid)
{
    if(GetPVarInt(playerid, "IsInArena") >= 0) { return 1; }
	//ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(PlayerInfo[playerid][pGuns][s] > 0)
		{
			givePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][s], PlayerInfo[playerid][pGunsAmmo][s]);
		}
	}
	return 1;
}

public SetPlayerWeaponsEx(playerid)
{
	//ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(PlayerInfo[playerid][pGuns][s] > 0)
		{
			givePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][s], PlayerInfo[playerid][pAGuns][s]);
		}
	}
}

ShowStats(playerid, targetid)
{
	if(IsPlayerConnected(targetid)) {
		new sext[16], employer[64], rank[64], division[64], jtext[20], jtext2[20], ijtext[20], pnumber[20], facfam[20];
		if(PlayerInfo[targetid][pPnumber] == 0) pnumber = "None"; else format(pnumber, sizeof(pnumber), "%d", PlayerInfo[targetid][pPnumber]);
		if(PlayerInfo[targetid][pSex] == 1) { sext = "Male"; } else { sext = "Female"; }
		facfam = "Faction";
		if(PlayerInfo[targetid][pFMember] < 255)
		{
		    facfam = "Family"; division = "None";
			format(employer, sizeof(employer), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyName]);
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank1]);
				case 2: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank2]);
				case 3: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank3]);
				case 4: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank4]);
				case 5: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank5]);
	  			case 6: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank6]);
				default: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank1]);
			}
		}
		else GetPlayerFactionInfo(targetid, rank, division, employer);
		switch(PlayerInfo[targetid][pJob])
		{
			case 7: jtext = "Mechanic";
			case 8: jtext = "Lumberjack";
			case 20: jtext = "Trucker";
			case 1401: jtext = "Farmer";
			default: jtext = "None";
		}
		switch(PlayerInfo[targetid][pJob2])
		{
			case 7: jtext2 = "Mechanic";
			case 8: jtext2 = "Lumberjack";
			case 20: jtext2 = "Trucker";
			case 1401: jtext2 = "Farmer";
			default: jtext2 = "None";
		}
		switch(PlayerInfo[targetid][pIllegalJob])
		{
			case 1: ijtext = "Arms Dealer";
			case 2: ijtext = "Drug Dealer";
			default: ijtext = "None";
		}
		new drank[32];
		switch(PlayerInfo[targetid][pDonateRank])
		{
			case 1: drank = "Basic Donator";
			case 2: drank = "Advanced Donator";
			case 3: drank = "Professional Donator";
			case 4: drank = "Lifetime Donator";
			default: drank = "None";
		}
		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new ptime = PlayerInfo[targetid][pConnectTime];
		new housekey = PlayerInfo[targetid][pPhousekey];
		new bizkey = PlayerInfo[targetid][pPBiskey];
		new workshop = PlayerInfo[targetid][pWSid];
		new warns = PlayerInfo[targetid][pWarns];
		new farm = PlayerInfo[targetid][pFarmid];
		new coordsString[10000], S3MP4K[10000], idiot[1401];
		format(idiot, sizeof(idiot), "{00ffff}%s Statistic{FFFFFF}", PlayerInfo[targetid][pNormalName]);
		//SendClientMessageEx(playerid,COLOR_WHITE,coordsString);
		format(coordsString, sizeof(coordsString), "{FFFF00}IC Information:\n");
		strcat(S3MP4K, coordsString);
		//SendClientMessageEx(playerid, 0xFFFF00FF,coordsString);
		format(coordsString, sizeof(coordsString), "{FFFFFF}Origin: [%s] Gender: [%s] Married with: [%s] Bank: [{33AA33}$%s{FFFFFF}] Phone number: [%s] Phone credit: [%d Point]\n",PlayerInfo[targetid][pAge], sext, married, FormatMoney(PlayerInfo[targetid][pAccount]), pnumber,PlayerInfo[targetid][pPulsa2]);
        strcat(S3MP4K, coordsString);
		//SendClientMessageEx(playerid, 0xFFFFFFAA,coordsString);
		format(coordsString, sizeof(coordsString), "Money: [{33AA33}$%s{FFFFFF}] Job: [%s, %s, {FF0000}%s{FFFFFF}] JobSalary: [{33AA33}$%s{FFFFFF}] %s: [%s] Rank : [%s]\n", FormatMoney(GetPlayerCash(targetid)), jtext, jtext2, ijtext, FormatMoney(PlayerInfo[targetid][pPayCheck]), facfam, employer, rank);
        strcat(S3MP4K, coordsString);
		//SendClientMessageEx(playerid, 0xFFFFFFAA,coordsString);
		format(coordsString, sizeof(coordsString), "{FFFF00}OOC Information:\n");
        strcat(S3MP4K, coordsString);
		//SendClientMessageEx(playerid,COLOR_WHITE,coordsString);
		format(coordsString, sizeof(coordsString), "{FFFFFF}Player rank: [%s] Warns: [{FF0000}%d{FFFFFF}] Paycheck: [%d]\n",ORANK(targetid),warns,ptime);
        strcat(S3MP4K, coordsString);
		//SendClientMessageEx(playerid, 0xFFFFFFAA,coordsString);
		format(coordsString, sizeof(coordsString), "Donator rank: [%s] VIPExpired: [%s] JailTime: [{FF0000}%d {FFFFFF}Minutes]\n", drank, PlayerInfo[targetid][pVIPExpDate],PlayerInfo[targetid][pJailTime]/60);
        strcat(S3MP4K, coordsString);
		//SendClientMessageEx(playerid, 0xFFFFFFAA,coordsString);
		format(coordsString, sizeof(coordsString), "WID: [%d] IID: [%d] HP: [{ff0000}%.1f{FFFFFF}] AP: [%.1f]\n",PlayerInfo[targetid][pVW],PlayerInfo[targetid][pInt], PlayerInfo[targetid][pHealth], PlayerInfo[targetid][pArmor]);
        strcat(S3MP4K, coordsString);
        format(coordsString, sizeof(coordsString), "House: [%d] Business: [%d] Workshop: [%d] Farm: [%d]",housekey,bizkey,workshop,farm);
        strcat(S3MP4K, coordsString);
		//SendClientMessageEx(playerid, 0xFFFFFFAA,coordsString);
		ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_MSGBOX, idiot,S3MP4K,"Close","");
	}
}

//---------------------------------------------------------

SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pJailed] == 2)
    	{
   			SetPlayerColor(playerid,TEAM_HIT_COLOR);
   			return 1;
		}
		else if(PlayerInfo[playerid][pJailed] == 4)
  		{
    		SetPlayerColor(playerid,TEAM_HIT_COLOR);
    		return 1;
		}
		else
		{
            SetPlayerColor(playerid,TEAM_HIT_COLOR);
		}
	    if(IsACop(playerid))
	    {
	        if(PlayerInfo[playerid][pDuty] == 1)
	        {
	            if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	            {
	        		SetPlayerColor(playerid,TEAM_BLUE_COLOR);
				}
				else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
	            {
	        		SetPlayerColor(playerid,TEAM_FBI_COLOR);
				}
				else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
				{
				    SetPlayerColor(playerid, COLOR_TWAQUA);
				}
				else if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
				{
				    SetPlayerColor(playerid, TEAM_SASD);
				}
				else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
    			{
	        		SetPlayerColor(playerid,COLOR_NG);
				}
				else if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
    			{
	        		SetPlayerColor(playerid,COLOR_PMC);
				}
				else
				{
				    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
				}
			}
			else
			{
			    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
			}
		}
		else
		{
		    if((PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9) && PlayerInfo[playerid][pDuty] == 1)
	    	{
	    		SetPlayerColor(playerid,COLOR_NEWS);
			}
			else if((PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4) && PlayerInfo[playerid][pDuty] == 1)
			{
   				SetPlayerColor(playerid, TEAM_MED_COLOR);
			}
			else if((PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12) && PlayerInfo[playerid][pDuty] == 1)
			{
  				SetPlayerColor(playerid, COLOR_TR);
			}
			else
			{
			    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
   			}
			if(PlayerInfo[playerid][pWantedLevel] > 0)
		    {
				WantedPoints[playerid] = PlayerInfo[playerid][pWantedLevel];
			}
		}
	}
	return 1;
}
public OnGameModeExit()
{
    foreach(Player, i)
	{
 		OnPlayerStatsUpdate(i);
	}
    djson_OnGameModeExit();
    ServerLocked = false;
   	print("\n--------------------------------------");
	print("SERVER DIMATIKAN / DIRESTART");
	//Speedo
    for(new i=0; i<PLAYERS; i++)
    {
	   	TextDrawHideForPlayer(i, LBox[i]);
		TextDrawHideForPlayer(i, LLine1[i]);
		TextDrawHideForPlayer(i, LLine2[i]);
		TextDrawHideForPlayer(i, LLine3[i]);
		TextDrawHideForPlayer(i, LCredits[i]);
	}
	SaveATMs();
	SaveFarm();
	SaveObj();
	SaveBusinesses();
	SaveGates();
	SaveMod();
	SaveBuy();
	SaveGYMObject();
 //SavePlant();();
	SaveWorkshop();
	SaveRent();
	SaveHouses();
	SaveDynamicDoors();
	SaveDynamicMapIcons();
	SaveStock();
	SaveMaxLimit();
	SaveElevatorStuff();
	SaveServerStats();
	SaveFamilies();
	SaveFamiliesHQ();
 	SaveStuff();
	SaveServerStats();
	FMemberCounter(); // Family member counter (requested by game affairs to track gang activity)
	return 1;
}

public DoGMX()
{
	SendRconCommand("gmx");
	return 1;
}

public OnPlayerSuspectedForAimbot(playerid,hitid,weaponid,warnings)
{
	new str[144],nme[MAX_PLAYER_NAME],wname[32],Float:Wstats[BUSTAIM_WSTATS_SHOTS];

	ids[playerid]++;
	GetPlayerName(playerid,nme,sizeof(nme));
	GetWeaponName(weaponid,wname,sizeof(wname));
	if(warnings & WARNING_OUT_OF_RANGE_SHOT)
	{
	    format(str,256,"AIMWARNING: {ffffff}[%d]%s(%d) fired shots from a distance greater than the %s's fire range(Normal Range:%d)",ids[playerid],nme,playerid,wname,BustAim::GetNormalWeaponRange(weaponid));
		ABroadCast(COLOR_ARWIN, str, 1);
		BustAim::GetRangeStats(playerid,Wstats);
		format(str,256,"AIMWARNING: {ffffff}Shooter to Victim Distance(SA Units): 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		ABroadCast(COLOR_ARWIN, str, 1);
	}
	if(warnings & WARNING_PROAIM_TELEPORT)
	{
	    format(str,256,"AIMWARNING: {ffffff}[%d]%s(%d) is using proaim (Teleport Detected)",ids[playerid],nme,playerid);
		ABroadCast(COLOR_ARWIN, str, 1);
		BustAim::GetTeleportStats(playerid,Wstats);
		format(str,256,"Bullet to Victim Distance(SA Units): 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		ABroadCast(COLOR_ARWIN, str, 1);
	}
	if(warnings & WARNING_RANDOM_AIM)
	{
	    format(str,256,"AIMWARNING: {ffffff}[%d]%s(%d) is suspected to be using aimbot(Hit with Random Aim with %s)",ids[playerid],nme,playerid,wname);
		ABroadCast(COLOR_ARWIN, str, 1);
		BustAim::GetRandomAimStats(playerid,Wstats);
		format(str,256,"AIMWARNING: {ffffff}Random Aim Offsets: 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		ABroadCast(COLOR_ARWIN, str, 1);
	}
	if(warnings & WARNING_CONTINOUS_SHOTS)
	{
	    format(str,256,"AIMWARNING: {ffffff}[%d]%s(%d) has fired 10 shots continously with %s(%d)",ids[playerid],nme,playerid,wname,weaponid);
		ABroadCast(COLOR_ARWIN, str, 1);
	}
	return 0;
}

LoadServerStats()
{
	#define SERVER_STATS "serverstat.ini"

	if(!fexist(SERVER_STATS)) return 1;

	new	File: i_FileHandle = fopen("serverstat.ini", io_read), sz_FileStr[256];

	fread(i_FileHandle, sz_FileStr);
	sscanf(sz_FileStr, "p<,>iiiiiiiiiii", TotalLogin, TotalConnect, TotalAutoBan, TotalRegister, MaxPlayersConnected, MPDay, MPMonth, MPYear, MPHour, MPMinute, TotalUptime);
	return fclose(i_FileHandle);
}

SaveServerStats()
{

	new sz_FileStr[256], File: i_FileHandle = fopen(SERVER_STATS, io_write);

	format(sz_FileStr, sizeof(sz_FileStr), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", TotalLogin, TotalConnect, TotalAutoBan, TotalRegister,MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,MPMinute,TotalUptime);
	fwrite(i_FileHandle, sz_FileStr);

	#undef SERVER_STATS

	return fclose(i_FileHandle);
}
LoadStuff()
{
	new arrCoords[12][64];
	new strFromFile2[256];
	new File: file = fopen("stuff.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, ',');
		Jackpot = strval(arrCoords[0]);
		if(Jackpot < 0)
		{
		    Jackpot = 0;
		}
		Tax = strval(arrCoords[1]);
		TaxValue = strval(arrCoords[2]);
		if(TaxValue < 0)
		{
		    TaxValue = 0;
		}
		Security = strval(arrCoords[3]);
		SpecTimer = strval(arrCoords[5]);
		fclose(file);
  		if(Security == 0 || Security == 1)
		{
		}
		else
		{
			GameModeExit();
		}
	}
	else
	{
		GameModeExit();
	}
	return 1;
}

LoadElevatorStuff()
{
	new arrCoords[40][64];
	new strFromFile2[256];
	new File: file = fopen("elevator.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, ',');
		format(LAElevatorFloorName[0], 24, "%s", arrCoords[0]);
		format(LAElevatorFloorName[1], 24, "%s", arrCoords[1]);
		format(LAElevatorFloorName[2], 24, "%s", arrCoords[2]);
		format(LAElevatorFloorName[3], 24, "%s", arrCoords[3]);
		format(LAElevatorFloorName[4], 24, "%s", arrCoords[4]);
		format(LAElevatorFloorName[5], 24, "%s", arrCoords[5]);
		format(LAElevatorFloorName[6], 24, "%s", arrCoords[6]);
		format(LAElevatorFloorName[7], 24, "%s", arrCoords[7]);
		format(LAElevatorFloorName[8], 24, "%s", arrCoords[8]);
		format(LAElevatorFloorName[9], 24, "%s", arrCoords[9]);
		format(LAElevatorFloorName[10], 24, "%s", arrCoords[10]);
		format(LAElevatorFloorName[11], 24, "%s", arrCoords[11]);
		format(LAElevatorFloorName[12], 24, "%s", arrCoords[12]);
		format(LAElevatorFloorName[13], 24, "%s", arrCoords[13]);
		format(LAElevatorFloorName[14], 24, "%s", arrCoords[14]);
		format(LAElevatorFloorName[15], 24, "%s", arrCoords[15]);
		format(LAElevatorFloorName[16], 24, "%s", arrCoords[16]);
		format(LAElevatorFloorName[17], 24, "%s", arrCoords[17]);
		format(LAElevatorFloorName[18], 24, "%s", arrCoords[18]);
		format(LAElevatorFloorName[19], 24, "%s", arrCoords[19]);
		format(LAElevatorFloorPass[0], 24, "%s", arrCoords[20]);
		format(LAElevatorFloorPass[1], 24, "%s", arrCoords[21]);
		format(LAElevatorFloorPass[2], 24, "%s", arrCoords[22]);
		format(LAElevatorFloorPass[3], 24, "%s", arrCoords[23]);
		format(LAElevatorFloorPass[4], 24, "%s", arrCoords[24]);
		format(LAElevatorFloorPass[5], 24, "%s", arrCoords[25]);
		format(LAElevatorFloorPass[6], 24, "%s", arrCoords[26]);
		format(LAElevatorFloorPass[7], 24, "%s", arrCoords[27]);
		format(LAElevatorFloorPass[8], 24, "%s", arrCoords[28]);
		format(LAElevatorFloorPass[9], 24, "%s", arrCoords[29]);
		format(LAElevatorFloorPass[10], 24, "%s", arrCoords[30]);
		format(LAElevatorFloorPass[11], 24, "%s", arrCoords[31]);
		format(LAElevatorFloorPass[12], 24, "%s", arrCoords[32]);
		format(LAElevatorFloorPass[13], 24, "%s", arrCoords[33]);
		format(LAElevatorFloorPass[14], 24, "%s", arrCoords[34]);
		format(LAElevatorFloorPass[15], 24, "%s", arrCoords[35]);
		format(LAElevatorFloorPass[16], 24, "%s", arrCoords[36]);
		format(LAElevatorFloorPass[17], 24, "%s", arrCoords[37]);
		format(LAElevatorFloorPass[18], 24, "%s", arrCoords[38]);
		format(LAElevatorFloorPass[19], 24, "%s", arrCoords[39]);
	}
	return 1;
}
SaveStuff()
{
	new coordsString[256];
	format(coordsString, sizeof(coordsString), "%d,%d,%d,%d,%d", Jackpot,Tax,TaxValue,Security,SpecTimer);
	new File: file2 = fopen("stuff.ini", io_write);
	fwrite(file2, coordsString);
	fclose(file2);
	return 1;
}

SaveStock()
{
	new coordsString[256];
	format(coordsString, sizeof(coordsString), "%d,%d,%d,%d,%d,%d,%d,%d,%d", StockIkan,IDPlate,stockcomp,StockDPU,stockplant,stockpot,stockcrack,EquipmentStock,cutt);
	new File: file2 = fopen("stock.ini", io_write);
	fwrite(file2, coordsString);
	fclose(file2);
	return 1;
}
LoadStock()
{
	new arrCoords[20][64];
	new strFromFile2[256];
	new File: file = fopen("stock.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, ',');
		StockIkan = strval(arrCoords[0]);
		IDPlate = strval(arrCoords[1]);
		stockcomp = strval(arrCoords[2]);
		StockDPU = strval(arrCoords[3]);
		stockplant = strval(arrCoords[4]);
		stockpot = strval(arrCoords[5]);
		stockcrack = strval(arrCoords[6]);
		EquipmentStock = strval(arrCoords[7]);
		cutt = strval(arrCoords[8]);
		fclose(file);
	}
	else
	{
		GameModeExit();
	}
	return 1;
}

//---------------------------------
SaveElevatorStuff()
{
	new coordsString[10000];
	format(coordsString, sizeof(coordsString), "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s",
	LAElevatorFloorName[0],
	LAElevatorFloorName[1],
	LAElevatorFloorName[2],
	LAElevatorFloorName[3],
	LAElevatorFloorName[4],
	LAElevatorFloorName[5],
	LAElevatorFloorName[6],
	LAElevatorFloorName[7],
	LAElevatorFloorName[8],
	LAElevatorFloorName[9],
	LAElevatorFloorName[10],
	LAElevatorFloorName[11],
	LAElevatorFloorName[12],
	LAElevatorFloorName[13],
	LAElevatorFloorName[14],
	LAElevatorFloorName[15],
	LAElevatorFloorName[16],
	LAElevatorFloorName[17],
	LAElevatorFloorName[18],
	LAElevatorFloorName[19],
	LAElevatorFloorPass[0],
	LAElevatorFloorPass[1],
	LAElevatorFloorPass[2],
	LAElevatorFloorPass[3],
	LAElevatorFloorPass[4],
	LAElevatorFloorPass[5],
	LAElevatorFloorPass[6],
	LAElevatorFloorPass[7],
	LAElevatorFloorPass[8],
	LAElevatorFloorPass[9],
	LAElevatorFloorPass[10],
	LAElevatorFloorPass[11],
	LAElevatorFloorPass[12],
	LAElevatorFloorPass[13],
	LAElevatorFloorPass[14],
	LAElevatorFloorPass[15],
	LAElevatorFloorPass[16],
	LAElevatorFloorPass[17],
	LAElevatorFloorPass[18],
	LAElevatorFloorPass[19]
	);
	new File: file2 = fopen("elevator.ini", io_write);
	fwrite(file2, coordsString);
	fclose(file2);
	return 1;
}

LoadMaxLimit()
{
	new arrCoords[12][64];
	new strFromFile2[256];
	new File: file = fopen("maxlimit.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, ',');
		SpawnedATM = strval(arrCoords[0]);
		fclose(file);
	}
	else
	{
		GameModeExit();
	}
	return 1;
}

SaveMaxLimit()
{
	new coordsString[256];
	format(coordsString, sizeof(coordsString), "%d", SpawnedATM);
	new File: file2 = fopen("maxlimit.ini", io_write);
	fwrite(file2, coordsString);
	fclose(file2);
	return 1;
}

LoadMOTDs()
{
	new arrCoords[4][128];
	new strFromFile2[512];
	new File: file = fopen("motd.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, '|');
		strmid(GlobalMOTD, arrCoords[0], 0, strlen(arrCoords[0]), 255);
		strmid(AdminMOTD, arrCoords[1], 0, strlen(arrCoords[1]), 255);
		strmid(CAMOTD, arrCoords[3], 0, strlen(arrCoords[3]), 255);
		fclose(file);
	}
	else
	{
		fcreate("motd.ini");
		print("motd.ini doesn't exit, setting the default MOTDs");
		format(GlobalMOTD, sizeof(GlobalMOTD), "Welcome to Enterplay Gaming Roleplay Server.");
		format(AdminMOTD, sizeof(AdminMOTD), "Admin MOTD: None.");
		format(CAMOTD, sizeof(CAMOTD), "Helpers MOTD: None.");
  		SaveMOTDs();
	}
	return 1;
}

SaveMOTDs()
{
	new coordsString[512];
	format(coordsString, sizeof(coordsString), "%s|%s|%s", GlobalMOTD,AdminMOTD,CAMOTD);
	new File: file2 = fopen("motd.ini", io_write);
	fwrite(file2, coordsString);
	fclose(file2);
	return 1;
}

LoadFamilies() {

	if(!fexist("families.cfg")) return 1;

	new
		szFileStr[512],
		iIndex,
		File: iFileHandle = fopen("families.cfg", io_read);

	while (iIndex < sizeof(FamilyInfo) && fread(iFileHandle, szFileStr)) {

		sscanf(szFileStr, "p<|>is[42]s[65]s[24]iiifffiiis[20]s[20]s[20]s[20]s[20]s[20]iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii",
			FamilyInfo[iIndex][FamilyTaken],
			FamilyInfo[iIndex][FamilyName],
			FamilyInfo[iIndex][FamilyMOTD],
			FamilyInfo[iIndex][FamilyLeader],
			FamilyInfo[iIndex][FamilyBank],
			FamilyInfo[iIndex][FamilyCash],
			FamilyInfo[iIndex][FamilyUSafe],
			FamilyInfo[iIndex][FamilySafe][0],
			FamilyInfo[iIndex][FamilySafe][1],
			FamilyInfo[iIndex][FamilySafe][2],
			FamilyInfo[iIndex][FamilyPot],
			FamilyInfo[iIndex][FamilyCrack],
			FamilyInfo[iIndex][FamilyMats],
			FamilyInfo[iIndex][FamilyRank1],
			FamilyInfo[iIndex][FamilyRank2],
			FamilyInfo[iIndex][FamilyRank3],
			FamilyInfo[iIndex][FamilyRank4],
			FamilyInfo[iIndex][FamilyRank5],
			FamilyInfo[iIndex][FamilyRank6],
			FamilyInfo[iIndex][FamilyMembers],
			FamilyInfo[iIndex][FamilyMaxSkins],
			FamilyInfo[iIndex][FamilySkins][0],
			FamilyInfo[iIndex][FamilySkins][1],
			FamilyInfo[iIndex][FamilySkins][2],
			FamilyInfo[iIndex][FamilySkins][3],
			FamilyInfo[iIndex][FamilySkins][4],
			FamilyInfo[iIndex][FamilySkins][5],
			FamilyInfo[iIndex][FamilySkins][6],
			FamilyInfo[iIndex][FamilySkins][7],
			FamilyInfo[iIndex][FamilyColor],
			FamilyInfo[iIndex][FamilyTurfTokens],
			FamilyInfo[iIndex][FamilyGuns][0],
			FamilyInfo[iIndex][FamilyGuns][1],
			FamilyInfo[iIndex][FamilyGuns][2],
			FamilyInfo[iIndex][FamilyGuns][3],
			FamilyInfo[iIndex][FamilyGuns][4],
			FamilyInfo[iIndex][FamilyGuns][5],
			FamilyInfo[iIndex][FamilyGuns][6],
			FamilyInfo[iIndex][FamilyGuns][7],
			FamilyInfo[iIndex][FamilyGuns][8],
			FamilyInfo[iIndex][FamilyGuns][9],
			FamilyInfo[iIndex][FamilyGunsAmmo][0],
			FamilyInfo[iIndex][FamilyGunsAmmo][1],
			FamilyInfo[iIndex][FamilyGunsAmmo][2],
			FamilyInfo[iIndex][FamilyGunsAmmo][3],
			FamilyInfo[iIndex][FamilyGunsAmmo][4],
			FamilyInfo[iIndex][FamilyGunsAmmo][5],
			FamilyInfo[iIndex][FamilyGunsAmmo][6],
			FamilyInfo[iIndex][FamilyGunsAmmo][7],
			FamilyInfo[iIndex][FamilyGunsAmmo][8],
			FamilyInfo[iIndex][FamilyGunsAmmo][9]
		);
		++iIndex;
	}
	return fclose(iFileHandle);
}

SaveFamilies()
{
	new idx;
	new File: file2;
	while (idx < sizeof(FamilyInfo))
	{
		new coordsString[512];
		format(coordsString, sizeof(coordsString), "%d|%s|%s|%s|%d|%d|%d|%f|%f|%f|%d|%d|%d|%s|%s|%s|%s|%s|%s|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		FamilyInfo[idx][FamilyTaken],
		FamilyInfo[idx][FamilyName],
		FamilyInfo[idx][FamilyMOTD],
		FamilyInfo[idx][FamilyLeader],
		FamilyInfo[idx][FamilyBank],
		FamilyInfo[idx][FamilyCash],
		FamilyInfo[idx][FamilyUSafe],
		FamilyInfo[idx][FamilySafe][0],
		FamilyInfo[idx][FamilySafe][1],
		FamilyInfo[idx][FamilySafe][2],
		FamilyInfo[idx][FamilyPot],
		FamilyInfo[idx][FamilyCrack],
		FamilyInfo[idx][FamilyMats],
		FamilyInfo[idx][FamilyRank1],
		FamilyInfo[idx][FamilyRank2],
		FamilyInfo[idx][FamilyRank3],
		FamilyInfo[idx][FamilyRank4],
		FamilyInfo[idx][FamilyRank5],
		FamilyInfo[idx][FamilyRank6],
		FamilyInfo[idx][FamilyMembers],
		FamilyInfo[idx][FamilyMaxSkins],
		FamilyInfo[idx][FamilySkins][0],
		FamilyInfo[idx][FamilySkins][1],
		FamilyInfo[idx][FamilySkins][2],
		FamilyInfo[idx][FamilySkins][3],
		FamilyInfo[idx][FamilySkins][4],
		FamilyInfo[idx][FamilySkins][5],
		FamilyInfo[idx][FamilySkins][6],
		FamilyInfo[idx][FamilySkins][7],
		FamilyInfo[idx][FamilyColor],
		FamilyInfo[idx][FamilyTurfTokens],
		FamilyInfo[idx][FamilyGuns][0],
		FamilyInfo[idx][FamilyGuns][1],
		FamilyInfo[idx][FamilyGuns][2],
		FamilyInfo[idx][FamilyGuns][3],
		FamilyInfo[idx][FamilyGuns][4],
		FamilyInfo[idx][FamilyGuns][5],
		FamilyInfo[idx][FamilyGuns][6],
		FamilyInfo[idx][FamilyGuns][7],
		FamilyInfo[idx][FamilyGuns][8],
		FamilyInfo[idx][FamilyGuns][9],
		FamilyInfo[idx][FamilyGunsAmmo][0],
		FamilyInfo[idx][FamilyGunsAmmo][1],
		FamilyInfo[idx][FamilyGunsAmmo][2],
		FamilyInfo[idx][FamilyGunsAmmo][3],
		FamilyInfo[idx][FamilyGunsAmmo][4],
		FamilyInfo[idx][FamilyGunsAmmo][5],
		FamilyInfo[idx][FamilyGunsAmmo][6],
		FamilyInfo[idx][FamilyGunsAmmo][7],
		FamilyInfo[idx][FamilyGunsAmmo][8],
		FamilyInfo[idx][FamilyGunsAmmo][9]);
		if(idx == 0)
		{
			file2 = fopen("families.cfg", io_write);
		}
		else
		{
			file2 = fopen("families.cfg", io_append);
		}
		fwrite(file2, coordsString);
		idx++;
		fclose(file2);
	}
	return 1;
}

LoadFamiliesHQ()
{
    new String2[64];
	format(String2, sizeof(String2), "familieshq.ini");
	new File: GangFile = fopen(String2, io_read);
	//printf("[DEBUG] LoadFamiliesHQ: String2 (%s)", String2);
	if ( GangFile )
	{
	    //print("[DEBUG] LoadFamiliesHQ: GangFile exists, the handle parsed.");
		new key[ 256 ] , val[ 256 ];
		new Data[ 256 ];
		//print("[DEBUG] Starting while ( fread( GangFile , Data , sizeof( Data ) ) )");
		while ( fread( GangFile , Data , sizeof( Data ) ) )
		{
		    new String[10000];
		    for(new f = 0; f < MAX_FAMILY; f++)
    		{
				key = ini_GetKey( Data );
				format(String, 128, "Family%dEntranceX",f);
				if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyInfo[f][FamilyEntrance][0] = floatstr( val ); }
				format(String, 128, "Family%dEntranceY",f);
				if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyInfo[f][FamilyEntrance][1] = floatstr( val ); }
				format(String, 128, "Family%dEntranceZ",f);
				if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyInfo[f][FamilyEntrance][2] = floatstr( val ); }
				format(String, 128, "Family%dEntranceA",f);
				if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyInfo[f][FamilyEntrance][3] = floatstr( val ); }
				format(String, 128, "Family%dExitX",f);
				if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyInfo[f][FamilyExit][0] = floatstr( val ); }
				format(String, 128, "Family%dExitY",f);
				if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyInfo[f][FamilyExit][1] = floatstr( val ); }
				format(String, 128, "Family%dExitZ",f);
				if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyInfo[f][FamilyExit][2] = floatstr( val ); }
				format(String, 128, "Family%dExitA",f);
				if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyInfo[f][FamilyExit][3] = floatstr( val ); }
				format(String, 128, "Family%dInterior",f);
				if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyInfo[f][FamilyInterior] = strval( val ); }
				format(String, 128, "Family%dCustomMap",f);
				if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyInfo[f][FamilyCustomMap] = strval( val ); }
				format(String, 128, "Family%dVirtualWorld",f);
				if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyInfo[f][FamilyVirtualWorld] = strval( val ); }
				for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
    			{
    			    format(String, 128, "Family%dVeh%dModelId",f, fv);
					if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyVehicleInfo[f][fv][fvModelId] = strval( val ); }
					format(String, 128, "Family%dVeh%dSpawnx",f, fv);
					if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyVehicleInfo[f][fv][fvSpawnx] = floatstr( val ); }
					format(String, 128, "Family%dVeh%dSpawny",f, fv);
					if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyVehicleInfo[f][fv][fvSpawny] = floatstr( val ); }
					format(String, 128, "Family%dVeh%dSpawnz",f, fv);
					if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyVehicleInfo[f][fv][fvSpawnz] = floatstr( val ); }
					format(String, 128, "Family%dVeh%dSpawna",f, fv);
					if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyVehicleInfo[f][fv][fvSpawna] = floatstr( val ); }
					format(String, 128, "Family%dVeh%dLock",f, fv);
					if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyVehicleInfo[f][fv][fvLock] = strval( val ); }
					format(String, 128, "Family%dVeh%dLocked",f, fv);
					if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyVehicleInfo[f][fv][fvLocked] = strval( val ); }
					format(String, 128, "Family%dVeh%dPaintJob",f, fv);
					if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyVehicleInfo[f][fv][fvPaintJob] = strval( val ); }
					format(String, 128, "Family%dVeh%dColor1",f, fv);
					if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyVehicleInfo[f][fv][fvColor1] = strval( val ); }
					format(String, 128, "Family%dVeh%dColor2",f, fv);
					if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyVehicleInfo[f][fv][fvColor2] = strval( val ); }
					format(String, 128, "Family%dVeh%dFuel",f, fv);
					if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); FamilyVehicleInfo[f][fv][fvFuel] = floatstr( val ); }
    			}
    			//printf("Family %d loaded [DEBUG] FamilyEntranceX: %.1f FamilyEntranceY: %.1f FamilyEntranceZ: %.1f", f, FamilyInfo[f][FamilyEntrance][0], FamilyInfo[f][FamilyEntrance][1], FamilyInfo[f][FamilyEntrance][2]);
			}
		}
		fclose(GangFile);
	}
	return 1;
}

SaveFamiliesHQ()
{
	new String3[32];
	//GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	format(String3, sizeof(String3), "familieshq.ini");
	new File: hFile = fopen(String3, io_write);
	if (hFile)
	{
		new var[32];
		for(new f = 0; f < MAX_FAMILY; f++)
   		{
			format(var, 1024, "Family%dEntranceX=%.1f\n",f, FamilyInfo[f][FamilyEntrance][0]); fwrite(hFile, var);
			format(var, 1024, "Family%dEntranceY=%.1f\n",f, FamilyInfo[f][FamilyEntrance][1]); fwrite(hFile, var);
			format(var, 1024, "Family%dEntranceZ=%.1f\n",f, FamilyInfo[f][FamilyEntrance][2]); fwrite(hFile, var);
			format(var, 1024, "Family%dEntranceA=%.1f\n",f, FamilyInfo[f][FamilyEntrance][3]); fwrite(hFile, var);
			format(var, 1024, "Family%dExitX=%.1f\n",f, FamilyInfo[f][FamilyExit][0]); fwrite(hFile, var);
			format(var, 1024, "Family%dExitY=%.1f\n",f, FamilyInfo[f][FamilyExit][1]); fwrite(hFile, var);
			format(var, 1024, "Family%dExitZ=%.1f\n",f, FamilyInfo[f][FamilyExit][2]); fwrite(hFile, var);
			format(var, 1024, "Family%dExitA=%.1f\n",f, FamilyInfo[f][FamilyExit][3]); fwrite(hFile, var);
			format(var, 1024, "Family%dInterior=%d\n",f, FamilyInfo[f][FamilyInterior]); fwrite(hFile, var);
			format(var, 1024, "Family%dCustomMap=%d\n",f, FamilyInfo[f][FamilyCustomMap]); fwrite(hFile, var);
			format(var, 1024, "Family%dVirtualWorld=%d\n",f, FamilyInfo[f][FamilyVirtualWorld]); fwrite(hFile, var);

			for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
   			{
   			    format(var, 1024, "Family%dVeh%dModelId=%d\n",f, fv, FamilyVehicleInfo[f][fv][fvModelId]); fwrite(hFile, var);
				format(var, 1024, "Family%dVeh%dSpawnx=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawnx]); fwrite(hFile, var);
				format(var, 1024, "Family%dVeh%dSpawny=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawny]); fwrite(hFile, var);
				format(var, 1024, "Family%dVeh%dSpawnz=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawnz]); fwrite(hFile, var);
				format(var, 1024, "Family%dVeh%dSpawna=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawna]); fwrite(hFile, var);
				format(var, 1024, "Family%dVeh%dLock=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvLock]); fwrite(hFile, var);
				format(var, 1024, "Family%dVeh%dLocked=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvLocked]); fwrite(hFile, var);
				format(var, 1024, "Family%dVeh%dPaintJob=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvPaintJob]); fwrite(hFile, var);
				format(var, 1024, "Family%dVeh%dColor1=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvColor1]); fwrite(hFile, var);
				format(var, 1024, "Family%dVeh%dColor2=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvColor2]); fwrite(hFile, var);
				if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID) FamilyVehicleInfo[f][fv][fvFuel] = VehicleFuel[FamilyVehicleInfo[f][fv][fvId]];
				format(var, 32, "Family%dVeh%dFuel=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvFuel]); fwrite(hFile, var);
    		}
  		}
		fclose(hFile);
	}
	return 1;
}

FMemberCounter() {

	new
		arrCounts[sizeof(FamilyInfo)],
		szFileStr[128],
		arrTimeStamp[2][3],
		File: iFileHandle = fopen("logs/fmembercount.log", io_append);

	gettime(arrTimeStamp[0][0], arrTimeStamp[0][1], arrTimeStamp[0][2]);
	getdate(arrTimeStamp[1][0], arrTimeStamp[1][1], arrTimeStamp[1][2]);
	foreach(Player, i) if(PlayerInfo[i][pAdmin] < 2 && playerTabbed[i] == 0 && PlayerInfo[i][pFMember] != 255) ++arrCounts[PlayerInfo[i][pFMember]];

	format(szFileStr, sizeof(szFileStr), "----------------------------------------\r\nDate: %d/%d/%d - Time: %d:%d\r\n", arrTimeStamp[1][1], arrTimeStamp[1][2], arrTimeStamp[1][0], arrTimeStamp[0][0], arrTimeStamp[0][1]);
	fwrite(iFileHandle, szFileStr);

	for(new iFam; iFam < sizeof(FamilyInfo); ++iFam) format(szFileStr, sizeof(szFileStr), "(%i) %s: %i\r\n", iFam+1, FamilyInfo[iFam][FamilyName], arrCounts[iFam]), fwrite(iFileHandle, szFileStr);
	return fclose(iFileHandle);
}

forward ReportTimer(reportid);
public ReportTimer(reportid)
{
	if(Reports[reportid][BeingUsed] == 1)
	{
	    if(Reports[reportid][TimeToExpire] > 0)
	    {
	        Reports[reportid][TimeToExpire]--;
	        if(Reports[reportid][TimeToExpire] == 0)
	        {
	            SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_GRAD2, "Your report has expired. You can attempt to report again if you wish.");
	            Reports[reportid][BeingUsed] = 0;
	            Reports[reportid][ReportFrom] = 999;
	            return 1;
	        }
  			Reports[reportid][ReportExpireTimer] = SetTimerEx("ReportTimer", 60000, 0, "d", reportid);
		}
	}
	return 1;
}

forward ReplyTimer(reportid);
public ReplyTimer(reportid)
{
    Reports[reportid][BeingUsed] = 0;
	Reports[reportid][ReportFrom] = 999;
    Reports[reportid][CheckingReport] = 999;
}

LoadcDealerships()
{
	print("Load Dealership");
	new idx, idx2;
	new string[128];
	new owner[MAX_PLAYER_NAME];
	new message[128];
	djAutocommit(false);
	while (idx < sizeof(CarDealershipInfo))
	{
        format(string, sizeof(string), "%d/owned", idx);
		CarDealershipInfo[idx][cdOwned] = djInt("cardealerships.json", string);
		format(string, sizeof(string), "%d/owner", idx);
		format(owner, sizeof(owner), "%s", dj("cardealerships.json", string));
		strmid(CarDealershipInfo[idx][cdOwner], owner, 0, strlen(owner), 255);
		format(string, sizeof(string), "%d/entrance/x", idx);
		CarDealershipInfo[idx][cdEntranceX] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/entrance/y", idx);
		CarDealershipInfo[idx][cdEntranceY] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/entrance/z", idx);
		CarDealershipInfo[idx][cdEntranceZ] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/exit/x", idx);
		CarDealershipInfo[idx][cdExitX] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/exit/y", idx);
		CarDealershipInfo[idx][cdExitY] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/exit/z", idx);
	    CarDealershipInfo[idx][cdExitZ] = djFloat("cardealerships.json", string);
	    format(string, sizeof(string), "%d/message", idx);
		format(message, sizeof(message), "%s", dj("cardealerships.json", string));
		strmid(CarDealershipInfo[idx][cdMessage], message, 0, strlen(message), 255);
		format(string, sizeof(string), "%d/till", idx);
		CarDealershipInfo[idx][cdTill] = djInt("cardealerships.json", string);
		format(string, sizeof(string), "%d/interior", idx);
		CarDealershipInfo[idx][cdInterior] = djInt("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/x", idx);
		CarDealershipInfo[idx][cdVehicleSpawn][0] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/y", idx);
		CarDealershipInfo[idx][cdVehicleSpawn][1] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/z", idx);
		CarDealershipInfo[idx][cdVehicleSpawn][2] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/a", idx);
		CarDealershipInfo[idx][cdVehicleSpawn][3] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/radius", idx);
		CarDealershipInfo[idx][cdRadius] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/price", idx);
		CarDealershipInfo[idx][cdPrice] = djInt("cardealerships.json", string);
		while (idx2 < MAX_DEALERSHIPVEHICLES)
		{
            format(string, sizeof(string), "%d/vehicleangle/%d", idx, idx2);
		    CarDealershipInfo[idx][cdVehicleSpawnAngle][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclespawnx/%d", idx, idx2);
		    CarDealershipInfo[idx][cdVehicleSpawnX][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclespawny/%d", idx, idx2);
		    CarDealershipInfo[idx][cdVehicleSpawnY][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclespawnz/%d", idx, idx2);
		    CarDealershipInfo[idx][cdVehicleSpawnZ][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclecost/%d", idx, idx2);
		    CarDealershipInfo[idx][cdVehicleCost][idx2] = djInt("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehicletypes/%d", idx, idx2);
		    CarDealershipInfo[idx][cdVehicleModel][idx2] = djInt("cardealerships.json", string);
		    idx2++;
		}
		idx2 = 0;
		idx++;
	}
	djAutocommit(true);
	return 1;
}

SavecDealership(id)
{
	new idx2;
	new string[128];
	printf("Saving Car Dealership %d.", id);
	//djAutocommit(false);
    format(string, sizeof(string), "%d/owned", id);
	djSetInt("cardealerships.json", string, CarDealershipInfo[id][cdOwned]);
	format(string, sizeof(string), "%d/owner", id);
	djSet("cardealerships.json", string, CarDealershipInfo[id][cdOwner]);
	format(string, sizeof(string), "%d/entrance/x", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdEntranceX]);
	format(string, sizeof(string), "%d/entrance/y", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdEntranceY]);
	format(string, sizeof(string), "%d/entrance/z", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdEntranceZ]);
	format(string, sizeof(string), "%d/exit/x", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdExitX]);
	format(string, sizeof(string), "%d/exit/y", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdExitY]);
	format(string, sizeof(string), "%d/exit/z", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdExitZ]);
	format(string, sizeof(string), "%d/message", id);
	djSet("cardealerships.json", string, CarDealershipInfo[id][cdMessage]);
	format(string, sizeof(string), "%d/till", id);
	djSetInt("cardealerships.json", string, CarDealershipInfo[id][cdTill]);
	format(string, sizeof(string), "%d/interior", id);
	djSetInt("cardealerships.json", string, CarDealershipInfo[id][cdInterior]);
	format(string, sizeof(string), "%d/vehiclespawn/x", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawn][0]);
	format(string, sizeof(string), "%d/vehiclespawn/y", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawn][1]);
	format(string, sizeof(string), "%d/vehiclespawn/z", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawn][2]);
	format(string, sizeof(string), "%d/vehiclespawn/a", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawn][3]);
	format(string, sizeof(string), "%d/radius", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdRadius]);
	format(string, sizeof(string), "%d/price", id);
	djSetInt("cardealerships.json", string, CarDealershipInfo[id][cdPrice]);
	while (idx2 < MAX_DEALERSHIPVEHICLES)
	{
        format(string, sizeof(string), "%d/vehicleangle/%d", id, idx2);
        djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawnAngle][idx2]);
	    format(string, sizeof(string), "%d/vehiclespawnx/%d", id, idx2);
	    djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawnX][idx2]);
	    format(string, sizeof(string), "%d/vehiclespawny/%d", id, idx2);
	    djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawnY][idx2]);
	    format(string, sizeof(string), "%d/vehiclespawnz/%d", id, idx2);
	    djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawnZ][idx2]);
	    format(string, sizeof(string), "%d/vehiclecost/%d", id, idx2);
	    djSetInt("cardealerships.json", string, CarDealershipInfo[id][cdVehicleCost][idx2]);
	    format(string, sizeof(string), "%d/vehicletypes/%d", id, idx2);
	    djSetInt("cardealerships.json", string, CarDealershipInfo[id][cdVehicleModel][idx2]);
	    idx2++;
	}
    //djAutocommit(true);
	return 1;
}
stock LoadGates()
{
	new dinfo[22][128];
	new string[350];
	new File:file = fopen("gates.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_GATES)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
			GateInfo[idx][gModel] = strval(dinfo[0]);
			GateInfo[idx][gCX] = floatstr(dinfo[1]);
			GateInfo[idx][gCY] = floatstr(dinfo[2]);
			GateInfo[idx][gCZ] = floatstr(dinfo[3]);
			GateInfo[idx][gCRX] = floatstr(dinfo[4]);
			GateInfo[idx][gCRY] = floatstr(dinfo[5]);
			GateInfo[idx][gCRZ] = floatstr(dinfo[6]);
			GateInfo[idx][gOX] = floatstr(dinfo[7]);
			GateInfo[idx][gOY] = floatstr(dinfo[8]);
			GateInfo[idx][gOZ] = floatstr(dinfo[9]);
			GateInfo[idx][gORX] = floatstr(dinfo[10]);
			GateInfo[idx][gORY] = floatstr(dinfo[11]);
			GateInfo[idx][gORZ] = floatstr(dinfo[12]);
			format(GateInfo[idx][gPassword], 256, "%s", dinfo[13]);
			GateInfo[idx][gRange] = floatstr(dinfo[14]);
			GateInfo[idx][gFaction] = strval(dinfo[15]);
			GateInfo[idx][gWorkshop] = strval(dinfo[16]);
			GateInfo[idx][gHID] = strval(dinfo[17]);
			GateInfo[idx][gVW] = strval(dinfo[18]);
			GateInfo[idx][gInt] = strval(dinfo[19]);
			GateInfo[idx][gSpeed] = floatstr(dinfo[20]);
			GateInfo[idx][gOwner] = strval(dinfo[21]);
			if(GateInfo[idx][gModel]) // If gate exists
			{
				GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
				GateInfo[idx][gStatus] = 0;
			}
			idx++;
	    }
	}
	print("Gate berhasil dimuat.");
	return 1;
}

SaveHouses() {

	new
		szFileStr[1024],
		File: fHandle = fopen("apartments.cfg", io_write);

	for(new iIndex; iIndex < MAX_HOUSES; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%s|%s|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%f|%f|%s|%d|%d|%d|%d|%d\r\n",
			HouseInfo[iIndex][hOwned],
			HouseInfo[iIndex][hLevel],
			HouseInfo[iIndex][hHInteriorWorld],
			HouseInfo[iIndex][hDescription],
			HouseInfo[iIndex][hOwner],
			HouseInfo[iIndex][hExteriorX],
			HouseInfo[iIndex][hExteriorY],
			HouseInfo[iIndex][hExteriorZ],
			HouseInfo[iIndex][hExteriorR],
			HouseInfo[iIndex][hInteriorX],
			HouseInfo[iIndex][hInteriorY],
			HouseInfo[iIndex][hInteriorZ],
			HouseInfo[iIndex][hInteriorR],
			HouseInfo[iIndex][hGaragePos][0],
			HouseInfo[iIndex][hGaragePos][1],
			HouseInfo[iIndex][hGaragePos][2],
			HouseInfo[iIndex][hLock],
			HouseInfo[iIndex][hValue],
   			HouseInfo[iIndex][hSafeMoney],
			HouseInfo[iIndex][hPot],
			HouseInfo[iIndex][hCrack],
			HouseInfo[iIndex][hMaterials],
			HouseInfo[iIndex][hWeapons][0],
			HouseInfo[iIndex][hWeapons][1],
			HouseInfo[iIndex][hWeapons][2],
			HouseInfo[iIndex][hWeapons][3],
			HouseInfo[iIndex][hWeapons][4],
			HouseInfo[iIndex][hGLUpgrade],
			HouseInfo[iIndex][hPickupID],
			HouseInfo[iIndex][hCustomInterior],
			HouseInfo[iIndex][hCustomExterior],
			HouseInfo[iIndex][hExteriorA],
			HouseInfo[iIndex][hInteriorA],
			HouseInfo[iIndex][hAlamat],
			HouseInfo[iIndex][hWeaponsAmmo][0],
			HouseInfo[iIndex][hWeaponsAmmo][1],
			HouseInfo[iIndex][hWeaponsAmmo][2],
			HouseInfo[iIndex][hWeaponsAmmo][3],
			HouseInfo[iIndex][hWeaponsAmmo][4]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

LoadDynamicMapIcons()
{
	new arrCoords[7][64];
	new strFromFile2[256];
	new File: file = fopen("dynamicmapicons.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(DMPInfo))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
	  		DMPInfo[idx][dmpMarkerType] = strval(arrCoords[0]);
	  		DMPInfo[idx][dmpColor] = strval(arrCoords[1]);
	  		DMPInfo[idx][dmpVW] = strval(arrCoords[2]);
	  		DMPInfo[idx][dmpInt] = strval(arrCoords[3]);
	  		DMPInfo[idx][dmpPosX] = floatstr(arrCoords[4]);
	  		DMPInfo[idx][dmpPosY] = floatstr(arrCoords[5]);
	  		DMPInfo[idx][dmpPosZ] = floatstr(arrCoords[6]);

	  		if(DMPInfo[idx][dmpMarkerType] != 0)
	  		{
    			DMPInfo[idx][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[idx][dmpPosX], DMPInfo[idx][dmpPosY], DMPInfo[idx][dmpPosZ], DMPInfo[idx][dmpMarkerType], DMPInfo[idx][dmpColor], DMPInfo[idx][dmpVW], DMPInfo[idx][dmpInt], -1, 500.0);
			}

			idx++;
		}
		fclose(file);
	}
	return 1;
}

CreateDynamicDoor(doorid)
{
	new String[10000];
	format(String, sizeof(String), "{00FFFF}[id:%d]\n{FFFF00}%s\n{FFFFFF}Tekan '{FF0000}F{FFFFFF}' atau '{FF0000}Enter{FFFFFF}' untuk masuk.",doorid, DDoorsInfo[doorid][ddDescription]);
	switch(DDoorsInfo[doorid][ddPickupModel])
	{
	    case -1: { /* Disable Pickup */ }
		case 1:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1210, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 2:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1212, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 3:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1239, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 4:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1240, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 5:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1241, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 6:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1242, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 7:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1247, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 8:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1248, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 9:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1252, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 10:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1253, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 11:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1254, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 12:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1313, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 13:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1272, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 14:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1273, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 15:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1274, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 16:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1275, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 17:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1276, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 18:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1277, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 19:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1279, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 20:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1314, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 21:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1316, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 22:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1317, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 23:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1559, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 24:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1582, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 25:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(2894, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    default:
	    {
			DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(19130, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);
			CreateDynamicCP(DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], 2, DDoorsInfo[doorid][ddExteriorVW], -1, -1, 5.0);
			CreateDynamicCP(DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ], 2, DDoorsInfo[doorid][ddInteriorVW], -1, -1, 5.0);
	    }
	}
}

LoadDynamicDoors()
{
	new arrCoords[25][64];
	new strFromFile2[256];
	new File: file = fopen("dynamicdoors.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(DDoorsInfo))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			strmid(DDoorsInfo[idx][ddDescription], arrCoords[0], 0, strlen(arrCoords[0]), 128);
	  		DDoorsInfo[idx][ddCustomInterior] = strval(arrCoords[1]);
	  		DDoorsInfo[idx][ddExteriorVW] = strval(arrCoords[2]);
	  		DDoorsInfo[idx][ddExteriorInt] = strval(arrCoords[3]);
	  		DDoorsInfo[idx][ddInteriorVW] = strval(arrCoords[4]);
	  		DDoorsInfo[idx][ddInteriorInt] = strval(arrCoords[5]);
	  		DDoorsInfo[idx][ddExteriorX] = floatstr(arrCoords[6]);
	  		DDoorsInfo[idx][ddExteriorY] = floatstr(arrCoords[7]);
	  		DDoorsInfo[idx][ddExteriorZ] = floatstr(arrCoords[8]);
	  		DDoorsInfo[idx][ddExteriorA] = floatstr(arrCoords[9]);
	  		DDoorsInfo[idx][ddInteriorX] = floatstr(arrCoords[10]);
	  		DDoorsInfo[idx][ddInteriorY] = floatstr(arrCoords[11]);
	  		DDoorsInfo[idx][ddInteriorZ] = floatstr(arrCoords[12]);
	  		DDoorsInfo[idx][ddInteriorA] = floatstr(arrCoords[13]);
	  		DDoorsInfo[idx][ddCustomExterior] = strval(arrCoords[14]);
	  		DDoorsInfo[idx][ddVIP] = strval(arrCoords[15]);
	  		DDoorsInfo[idx][ddFamily] = strval(arrCoords[16]);
	  		DDoorsInfo[idx][ddFaction] = strval(arrCoords[17]);
	  		DDoorsInfo[idx][ddAdmin] = strval(arrCoords[18]);
	  		DDoorsInfo[idx][ddWanted] = strval(arrCoords[19]);
	  		DDoorsInfo[idx][ddVehicleAble] = strval(arrCoords[20]);
	  		DDoorsInfo[idx][ddColor] = strval(arrCoords[21]);
	  		DDoorsInfo[idx][ddPickupModel] = strval(arrCoords[22]);
	  		strmid(DDoorsInfo[idx][dPass], arrCoords[23], 0, strlen(arrCoords[23]), 24);
	  		DDoorsInfo[idx][dLocked] = strval(arrCoords[24]);
	  		if(DDoorsInfo[idx][ddExteriorX])
	  		{
		  		if(!IsNull(DDoorsInfo[idx][ddDescription]))
		  		{
		  		    CreateDynamicDoor(idx);
				}
			}
			idx++;
		}
		fclose(file);
	}
	return 1;
}

LoadHouses()
{
	if(!fexist("apartments.cfg")) return 1;
	new
		szFileStr[1024],
		File: iFileHandle = fopen("apartments.cfg", io_read),
		iIndex;
	while(iIndex < sizeof(HouseInfo) && fread(iFileHandle, szFileStr)) {
		sscanf(szFileStr, "p<|>iiis[128]s[32]fffffffffffiiiiiiiiiiiiiiiffs[128]iiiii",
			HouseInfo[iIndex][hOwned],
			HouseInfo[iIndex][hLevel],
			HouseInfo[iIndex][hHInteriorWorld],
			HouseInfo[iIndex][hDescription],
			HouseInfo[iIndex][hOwner],
			HouseInfo[iIndex][hExteriorX],
			HouseInfo[iIndex][hExteriorY],
			HouseInfo[iIndex][hExteriorZ],
			HouseInfo[iIndex][hExteriorR],
			HouseInfo[iIndex][hInteriorX],
			HouseInfo[iIndex][hInteriorY],
			HouseInfo[iIndex][hInteriorZ],
			HouseInfo[iIndex][hInteriorR],
			HouseInfo[iIndex][hGaragePos][0],
			HouseInfo[iIndex][hGaragePos][1],
			HouseInfo[iIndex][hGaragePos][2],
			HouseInfo[iIndex][hLock],
			HouseInfo[iIndex][hValue],
			HouseInfo[iIndex][hSafeMoney],
			HouseInfo[iIndex][hPot],
			HouseInfo[iIndex][hCrack],
			HouseInfo[iIndex][hMaterials],
			HouseInfo[iIndex][hWeapons][0],
			HouseInfo[iIndex][hWeapons][1],
			HouseInfo[iIndex][hWeapons][2],
			HouseInfo[iIndex][hWeapons][3],
			HouseInfo[iIndex][hWeapons][4],
			HouseInfo[iIndex][hGLUpgrade],
			HouseInfo[iIndex][hPickupID],
			HouseInfo[iIndex][hCustomInterior],
			HouseInfo[iIndex][hCustomExterior],
			HouseInfo[iIndex][hExteriorA],
			HouseInfo[iIndex][hInteriorA],
			HouseInfo[iIndex][hAlamat],
 			HouseInfo[iIndex][hWeaponsAmmo][0],
 			HouseInfo[iIndex][hWeaponsAmmo][1],
 			HouseInfo[iIndex][hWeaponsAmmo][2],
 			HouseInfo[iIndex][hWeaponsAmmo][3],
 			HouseInfo[iIndex][hWeaponsAmmo][4]
		);
		if(HouseInfo[iIndex][hExteriorX])
		{
			if(HouseInfo[iIndex][hOwned])
			{
				format(szFileStr, sizeof(szFileStr), "{00FFFF}[id:%d]\n{00FF00}Owner: {FFFFFF}%s{00FF00}\nAddres: {FFFFFF}%s",iIndex,HouseInfo[iIndex][hOwner],HouseInfo[iIndex][hAlamat]);
			}
			else
			{
				format(szFileStr, sizeof(szFileStr), "{FF0000}House for Sale{00FF00}\nInterior: {FFFFFF}%s\n{00FF00}Price: {FFFFFF}%s\n{00FF00}Level: {FFFFFF}%d\n{00FF00}Addres: {FFFFFF}%s\n{00FF00}ID: {FFFFFF}%d\n{00FF00}use '/buyhouse' for purchase this house",HouseInfo[iIndex][hDescription],FormatMoney(HouseInfo[iIndex][hValue]),HouseInfo[iIndex][hLevel],HouseInfo[iIndex][hAlamat],iIndex);
			}
			HouseInfo[iIndex][hPickupID] = CreateDynamicPickup(19132, 23, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]);
			HouseInfo[iIndex][hTextID] = CreateDynamic3DTextLabel(szFileStr, COLOR_GREEN, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]+1,10.0, .testlos = 1, .streamdistance = 5.0);
			CreateDynamicCP(HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ], 2,  0, -1, -1, 5.0);
			CreateDynamicCP(HouseInfo[iIndex][hInteriorX], HouseInfo[iIndex][hInteriorY], HouseInfo[iIndex][hInteriorZ], 2,  0, -1, -1, 5.0);
		}
		++iIndex;
		}
	return fclose(iFileHandle);
}


public OnGameModeInit()
{
	SetTimer("CheckGate", 1000, true);
	SetTimer("AutoPark", 60000*5, true);
	SetTimer("antiCheat", 300, true);
	SetTimer("HBE", 300, true);
	SetTimer("PLANTUPDATE", 60000*5, true);
	AntiDeAMX();
	djson_OnGameModeInit();
	ServerLocked = false;
	/*/NPC Bus
	//NPCs
	ConnectNPC("Bedjo","Bus");
	ConnectNPC("Sanusi","Bus2");*/

	new String[1000];
	//CheckPoint Door
	//
	toylist = LoadModelSelectionMenu("toylist.txt");
	vtoylist = LoadModelSelectionMenu("vtoylist.txt");
	skinlist = LoadModelSelectionMenu("skins.txt");
	FACTIONSKIN = LoadModelSelectionMenu("skins.txt");
	toy1000list = LoadModelSelectionMenu("toys1000.txt");

	CheckFiles();
    SetTimer("settime",1000,true);
    BUD::Setting(opt.Database, "iAnims.db" );
	BUD::Setting(opt.Asynchronous, true );
	BUD::Setting(opt.KeepAliveTime, 3000 );
	BUD::Initialize();
	BUD::VerifyColumn("speed", BUD::TYPE_FLOAT, IANIM_DEFAULT_SPEED);
	BUD::VerifyColumn("loop", BUD::TYPE_NUMBER, IANIM_DEFAULT_LOOP);
	BUD::VerifyColumn("lockx", BUD::TYPE_NUMBER, IANIM_DEFAULT_LOCKX);
	BUD::VerifyColumn("locky", BUD::TYPE_NUMBER, IANIM_DEFAULT_LOCKY);
	BUD::VerifyColumn("freeze", BUD::TYPE_NUMBER, IANIM_DEFAULT_FREEZE);
	BUD::VerifyColumn("time", BUD::TYPE_NUMBER, IANIM_DEFAULT_TIME);
	BUD::VerifyColumn("forcesync", BUD::TYPE_NUMBER, IANIM_DEFAULT_FORCESYNC);
	#if defined LOAD_ON_START
	new
	dbstr[64];

	for(new i = 1; i < MAX_ANIMS; i++)
	{
		format(dbstr, sizeof( dbstr ), "Animation%d", i);
		if( !BUD::IsNameRegistered( dbstr ) )
		{
			BUD::RegisterName(dbstr, dbstr);
			iAnim_AnimData[ i ][ iAnim_Speed ] = IANIM_DEFAULT_SPEED;
			iAnim_AnimData[ i ][ iAnim_Loop ] = IANIM_DEFAULT_LOOP;
			iAnim_AnimData[ i ][ iAnim_Lockx ] = IANIM_DEFAULT_LOCKX;
			iAnim_AnimData[ i ][ iAnim_Locky ] = IANIM_DEFAULT_LOCKY;
			iAnim_AnimData[ i ][ iAnim_Freeze ] = IANIM_DEFAULT_FREEZE;
			iAnim_AnimData[ i ][ iAnim_Time ] = IANIM_DEFAULT_TIME;
			iAnim_AnimData[ i ][ iAnim_ForceSync ] = IANIM_DEFAULT_FORCESYNC;
		}
		else
		{
			BUD::MultiGet( i , "fiiiiii",
			"speed", iAnim_AnimData[ i ][ iAnim_Speed ],
			"loop", iAnim_AnimData[ i ][ iAnim_Loop ],
			"lockx", iAnim_AnimData[ i ][ iAnim_Lockx ],
			"locky", iAnim_AnimData[ i ][ iAnim_Locky ],
			"freeze", iAnim_AnimData[ i ][ iAnim_Freeze ],
			"time", iAnim_AnimData[ i ][ iAnim_Time ],
			"forcesync",iAnim_AnimData[ i ][ iAnim_ForceSync ]
			);
		}
	}
	#endif
	//Animations
	txtAnimHelper = TextDrawCreate(542.000000, 417.000000, "~r~~k~~PED_SPRINT~ ~w~untuk menghentikan Animations");
	TextDrawUseBox(txtAnimHelper, 0);
	TextDrawFont(txtAnimHelper, 2);
	TextDrawSetShadow(txtAnimHelper,0); // no shadow
	TextDrawSetOutline(txtAnimHelper,1); // thickness 1
	TextDrawBackgroundColor(txtAnimHelper,0x000000FF);
	TextDrawColor(txtAnimHelper,0xFFFFFFFF);
	TextDrawAlignment(txtAnimHelper,3); // align right

	//Body Status
	BSText[0] = TextDrawCreate(498.000000, 125.000000, "Hunger");
	TextDrawBackgroundColor(BSText[0], 255);
	TextDrawFont(BSText[0], 2);
	TextDrawLetterSize(BSText[0], 0.329998, 1.399999);
	TextDrawColor(BSText[0], -1);
	TextDrawSetOutline(BSText[0], 0);
	TextDrawSetProportional(BSText[0], 1);
	TextDrawSetShadow(BSText[0], 1);
	TextDrawSetSelectable(BSText[0], 0);

	BSText[1] = TextDrawCreate(543.000000, 126.000000, "_");
	TextDrawAlignment(BSText[1], 2);
	TextDrawBackgroundColor(BSText[1], 255);
	TextDrawFont(BSText[1], 1);
	TextDrawLetterSize(BSText[1], 0.549998, 8.899993);
	TextDrawColor(BSText[1], -1);
	TextDrawSetOutline(BSText[1], 0);
	TextDrawSetProportional(BSText[1], 1);
	TextDrawSetShadow(BSText[1], 1);
	TextDrawUseBox(BSText[1], 1);
	TextDrawBoxColor(BSText[1], 102);
	TextDrawTextSize(BSText[1], 0.000000, 90.000000);
	TextDrawSetSelectable(BSText[1], 0);

	BSText[2] = TextDrawCreate(495.000000, 133.000000, ":");
	TextDrawBackgroundColor(BSText[2], 255);
	TextDrawFont(BSText[2], 1);
	TextDrawLetterSize(BSText[2], 0.500000, 2.000000);
	TextDrawColor(BSText[2], 16777215);
	TextDrawSetOutline(BSText[2], 0);
	TextDrawSetProportional(BSText[2], 1);
	TextDrawSetShadow(BSText[2], 1);
	TextDrawSetSelectable(BSText[2], 0);

	BSText[3] = TextDrawCreate(583.000000, 133.000000, ":");
	TextDrawBackgroundColor(BSText[3], 255);
	TextDrawFont(BSText[3], 1);
	TextDrawLetterSize(BSText[3], 0.500000, 2.000000);
	TextDrawColor(BSText[3], 16777215);
	TextDrawSetOutline(BSText[3], 0);
	TextDrawSetProportional(BSText[3], 1);
	TextDrawSetShadow(BSText[3], 1);
	TextDrawSetSelectable(BSText[3], 0);

	BSText[4] = TextDrawCreate(499.000000, 149.000000, "Bladder");
	TextDrawBackgroundColor(BSText[4], 255);
	TextDrawFont(BSText[4], 2);
	TextDrawLetterSize(BSText[4], 0.299998, 1.399999);
	TextDrawColor(BSText[4], -1);
	TextDrawSetOutline(BSText[4], 0);
	TextDrawSetProportional(BSText[4], 1);
	TextDrawSetShadow(BSText[4], 1);
	TextDrawSetSelectable(BSText[4], 0);

	BSText[5] = TextDrawCreate(583.000000, 156.000000, ":");
	TextDrawBackgroundColor(BSText[5], 255);
	TextDrawFont(BSText[5], 1);
	TextDrawLetterSize(BSText[5], 0.500000, 2.000000);
	TextDrawColor(BSText[5], 16777215);
	TextDrawSetOutline(BSText[5], 0);
	TextDrawSetProportional(BSText[5], 1);
	TextDrawSetShadow(BSText[5], 1);
	TextDrawSetSelectable(BSText[5], 0);

	BSText[6] = TextDrawCreate(495.000000, 156.000000, ":");
	TextDrawBackgroundColor(BSText[6], 255);
	TextDrawFont(BSText[6], 1);
	TextDrawLetterSize(BSText[6], 0.500000, 2.000000);
	TextDrawColor(BSText[6], 16777215);
	TextDrawSetOutline(BSText[6], 0);
	TextDrawSetProportional(BSText[6], 1);
	TextDrawSetShadow(BSText[6], 1);
	TextDrawSetSelectable(BSText[6], 0);

	BSText[7] = TextDrawCreate(499.000000, 173.000000, "Energy");
	TextDrawBackgroundColor(BSText[7], 255);
	TextDrawFont(BSText[7], 2);
	TextDrawLetterSize(BSText[7], 0.349999, 1.399999);
	TextDrawColor(BSText[7], -1);
	TextDrawSetOutline(BSText[7], 0);
	TextDrawSetProportional(BSText[7], 1);
	TextDrawSetShadow(BSText[7], 1);
	TextDrawSetSelectable(BSText[7], 0);

	BSText[8] = TextDrawCreate(495.000000, 185.000000, ":");
	TextDrawBackgroundColor(BSText[8], 255);
	TextDrawFont(BSText[8], 1);
	TextDrawLetterSize(BSText[8], 0.500000, 1.600000);
	TextDrawColor(BSText[8], 16777215);
	TextDrawSetOutline(BSText[8], 0);
	TextDrawSetProportional(BSText[8], 1);
	TextDrawSetShadow(BSText[8], 1);
	TextDrawSetSelectable(BSText[8], 0);

	BSText[9] = TextDrawCreate(583.000000, 184.000000, ":");
	TextDrawBackgroundColor(BSText[9], 255);
	TextDrawFont(BSText[9], 1);
	TextDrawLetterSize(BSText[9], 0.500000, 1.600000);
	TextDrawColor(BSText[9], 16777215);
	TextDrawSetOutline(BSText[9], 0);
	TextDrawSetProportional(BSText[9], 1);
	TextDrawSetShadow(BSText[9], 1);
	TextDrawSetSelectable(BSText[9], 0);

	sen = TextDrawCreate(580.000000, 80.000000, ".");
	TextDrawBackgroundColor(sen, 255);
	TextDrawFont(sen, 1);
	TextDrawLetterSize(sen, 0.549999, 2.200002);
	TextDrawColor(sen, 794437320);
	TextDrawSetOutline(sen, 1);
	TextDrawSetProportional(sen, 1);
	TextDrawSetSelectable(sen, 0);

	koma2 = TextDrawCreate(543.000000, 80.000000, ",");
	TextDrawBackgroundColor(koma2, 255);
	TextDrawFont(koma2, 0);
	TextDrawLetterSize(koma2, 0.549999, 2.200002);
	TextDrawColor(koma2, 794437320);
	TextDrawSetOutline(koma2, 1);
	TextDrawSetProportional(koma2, 1);
	TextDrawSetSelectable(koma2, 0);

	Kotak = TextDrawCreate(636.000000, 152.000000, ".");
	TextDrawBackgroundColor(Kotak, 255);
	TextDrawFont(Kotak, 1);
	TextDrawLetterSize(Kotak, 120.299995, 8.900002);
	TextDrawColor(Kotak, -1);
	TextDrawSetOutline(Kotak, 1);
	TextDrawSetProportional(Kotak, 1);
	TextDrawUseBox(Kotak, 1);
	TextDrawBoxColor(Kotak, 45);
	TextDrawTextSize(Kotak, 533.000000, 92.000000);
	TextDrawSetSelectable(Kotak, 0);

	Date = TextDrawCreate(532.000000, 4.000000, "14/01/2014");//Born ArWin14
	TextDrawBackgroundColor(Date, 255);
	TextDrawFont(Date, 1);
	TextDrawLetterSize(Date, 0.410000, 1.000000);
	TextDrawColor(Date, -1);
	TextDrawSetOutline(Date, 0);
	TextDrawSetProportional(Date, 1);
	TextDrawSetShadow(Date, 1);
	TextDrawSetSelectable(Date, 0);

	Time = TextDrawCreate(540.000000, 17.000000, "09:55:00");//Born ArWin14
	TextDrawBackgroundColor(Time, 255);
	TextDrawFont(Time, 1);
	TextDrawLetterSize(Time, 0.410000, 1.000000);
	TextDrawColor(Time, -1);
	TextDrawSetOutline(Time, 0);
	TextDrawSetProportional(Time, 1);
	TextDrawSetShadow(Time, 1);
	TextDrawSetSelectable(Time, 0);
	SetTimer("LuX_SpeedoMeterUp", UpdateConfig, 1);
    for(new v=0; v<MAX_VEHICLES; v++)
	{
    	LuX_ReadPosition(v);}
		for(new i; i<PLAYERS; i++)
		{
		AntiFlood_InitPlayer(i);
	//---------------------------------------------------------->
		LBox[i] = TextDrawCreate(155.000000, 350.000000, "_");
		TextDrawBackgroundColor(LBox[i], 255);
		TextDrawFont(LBox[i], 0);
		TextDrawLetterSize(LBox[i], 0.600000, 7.899996);
		TextDrawColor(LBox[i], 75);
		TextDrawSetOutline(LBox[i], 0);
		TextDrawSetProportional(LBox[i], 1);
		TextDrawSetShadow(LBox[i], 1);
		TextDrawUseBox(LBox[i], 1);
		TextDrawBoxColor(LBox[i], 75);
		TextDrawTextSize(LBox[i], 345.000000, 0.000000);
		TextDrawSetSelectable(LBox[i], 0);

	//---------------------------------------------------------->

		LLine1[i] = TextDrawCreate(216.000000, 348.000000, "Saddler");
		TextDrawBackgroundColor(LLine1[i], 255);
		TextDrawFont(LLine1[i], 3);
		TextDrawLetterSize(LLine1[i], 0.539999, 1.500004);
		TextDrawColor(LLine1[i], -1);
		TextDrawSetOutline(LLine1[i], 0);
		TextDrawSetProportional(LLine1[i], 1);
		TextDrawSetShadow(LLine1[i], 1);
		TextDrawSetSelectable(LLine1[i], 0);

	//---------------------------------------------------------->
		LLine2[i] = TextDrawCreate(160.000000, 370.000000, "");
		TextDrawBackgroundColor(LLine2[i], 255);
		TextDrawFont(LLine2[i], 1);
		TextDrawLetterSize(LLine2[i], 0.700000, 2.000000);
		TextDrawColor(LLine2[i], -1);
		TextDrawSetOutline(LLine2[i], 0);
		TextDrawSetProportional(LLine2[i], 1);
		TextDrawSetShadow(LLine2[i], 1);
		TextDrawSetSelectable(LLine2[i], 0);
	//---------------------------------------------------------->

		LLine3[i] = TextDrawCreate(161.000000, 394.000000, "");
		TextDrawBackgroundColor(LLine3[i], 255);
		TextDrawFont(LLine3[i], 1);
		TextDrawLetterSize(LLine3[i], 0.629999, 2.500000);
		TextDrawColor(LLine3[i], -1);
		TextDrawSetOutline(LLine3[i], 0);
		TextDrawSetProportional(LLine3[i], 1);
		TextDrawSetShadow(LLine3[i], 1);
		TextDrawSetSelectable(LLine3[i], 0);

	//---------------------------------------------------------->

		GPS[i] = TextDrawCreate(11.999984, 322.560089, "Loading");
		TextDrawAlignment(GPS[i], 0);
		TextDrawBackgroundColor(GPS[i], 255);
		TextDrawFont(GPS[i], 1);
		TextDrawLetterSize(GPS[i], 0.449999, 1.600000);
		TextDrawColor(GPS[i], -1);
		TextDrawSetOutline(GPS[i], 0);
		TextDrawSetProportional(GPS[i], 1);
	}
	EnableStuntBonusForAll(0);
	new servergmtextstr[128];
	format(servergmtextstr, 128, "gamemodetext %s", SERVER_GM_TEXT);
	SendRconCommand(servergmtextstr); // DO NOT REMOVE THIS
    format(servergmtextstr, 128, "language %s", SERVER_GM_LANGUAGE);
    SendRconCommand(servergmtextstr);
	new String1[MAX_PLAYER_NAME];
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	DisableInteriorEnterExits();
	LoadWorkshop();
 	LoadBizz();
	LoadFarm();
	LoadATM();
	LoadStock();
	LoadMaxLimit();
	LoadDynamicDoors();
	LoadDynamicMapIcons();
	LoadHouses();
	LoadGates();
	LoadcDealerships();
	LoadMod();
 //LoadPlant();
	LoadBuy();
	LoadGYMObject();
	LoadRent();
	LoadObjects();
	LoadStuff();
	LoadElevatorStuff();
	LoadServerStats();
	LoadFamilies();

	for(new f = 0; f < sizeof(FamilyInfo); f++)
	{
		for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
		{
		    FamilyVehicleInfo[f][fv][fvModelId] = 0;
			FamilyVehicleInfo[f][fv][fvSpawnx] = 0.0;
			FamilyVehicleInfo[f][fv][fvSpawny] = 0.0;
			FamilyVehicleInfo[f][fv][fvSpawnz] = 0.0;
			FamilyVehicleInfo[f][fv][fvSpawna] = 0.0;
			FamilyVehicleInfo[f][fv][fvPaintJob] = -1;
			FamilyVehicleInfo[f][fv][fvColor1] = 126;
			FamilyVehicleInfo[f][fv][fvColor2] = 126;
			FamilyVehicleInfo[f][fv][fvPrice] = 0;
			FamilyVehicleInfo[f][fv][fvFuel] = 100.0;
	    	FamilyVehicleInfo[f][fv][fvId] = INVALID_VEHICLE_ID;
		}
	}
	LoadFamiliesHQ();
	LoadMOTDs();
	ClearReports();
	SetNameTagDrawDistance(10.0);
	GiftAllowed = 1;
	News[hTaken1] = 0; News[hTaken2] = 0; News[hTaken3] = 0; News[hTaken4] = 0; News[hTaken5] = 0;
	format(String, sizeof(String), "Nothing");
	strmid(News[hAdd1], String, 0, strlen(String), 255);
	strmid(News[hAdd2], String, 0, strlen(String), 255);
	strmid(News[hAdd3], String, 0, strlen(String), 255);
	strmid(News[hAdd4], String, 0, strlen(String), 255);
	strmid(News[hAdd5], String, 0, strlen(String), 255);
	format(String1, sizeof(String1), "No-one");
	strmid(News[hContact1], String1, 0, strlen(String1), 255);
	strmid(News[hContact2], String1, 0, strlen(String1), 255);
	strmid(News[hContact3], String1, 0, strlen(String1), 255);
	strmid(News[hContact4], String1, 0, strlen(String1), 255);
	strmid(News[hContact5], String1, 0, strlen(String1), 255);
	format(objstore, sizeof(objstore), "MOLE: I got nothing, check back with me later.");
	format(cbjstore, sizeof(cbjstore), "HQ: There is nothing in your Vicinity, Out.");
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;

	if(!realtime)
	{
		SetWorldTime(wtime);
		gTime = wtime;
	}

	AllowInteriorWeapons(1);
	// CreatedCars check
	for(new i = 0; i < sizeof(CreatedCars); i++)
	{
		CreatedCars[i] = INVALID_VEHICLE_ID;
	}
	for(new v = 0; v < MAX_VEHICLES; v++)
	{
	    VehicleFuel[v] = 100.0;
	}
	// Player Class's
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}
	//TextDrawTextSize(MsgBox, 602.000000, 0.000000);
	DisableInteriorEnterExits();
	//Sweeper
	SWEEPERPlate[0] = SWEEPER[0] = AddStaticVehicleEx(574, 1626.1691,-1896.3145,13.2765,357.4089, 1, 1, 1);
	SetVehicleNumberPlate(SWEEPERPlate[0], "SWEEPER");
	SWEEPERPlate[1] = SWEEPER[1] = AddStaticVehicleEx(574, 1622.7128,-1896.3400,13.2757,358.0077, 1, 1, 1);
	SetVehicleNumberPlate(SWEEPERPlate[1], "SWEEPER");
	SWEEPERPlate[2] = SWEEPER[2] = AddStaticVehicleEx(574, 1619.3044,-1896.3998,13.2737,359.5278, 1, 1, 1);
	SetVehicleNumberPlate(SWEEPERPlate[2], "SWEEPER");
	//Bus
	BusPlate[0] = BUS[0] = AddStaticVehicleEx(431, 1698.3337, -1496.5729, 13.4855, 359.1141, 3, 1, 1);
	SetVehicleNumberPlate(BusPlate[0], "BUS");
	BusPlate[1] = BUS[1] = AddStaticVehicleEx(431, 1698.2653, -1511.8468, 13.4872, 359.8352, 6, 1, 1);
	SetVehicleNumberPlate(BusPlate[1], "BUS");
	BusPlate[2] = BUS[2] = AddStaticVehicleEx(431, 1698.4172, -1526.7191, 13.4833, 0.4046, 2, 1, 1);
	SetVehicleNumberPlate(BusPlate[2], "BUS");
	//LSPD VEHICLES
	Cruiser[0] = LSPDVehicles[0] = AddStaticVehicleEx(596,1602.0660,-1683.9678,5.6124,90.3080,0,1, VEHICLE_RESPAWN); // Cruiser
	SetVehicleNumberPlate(Cruiser[0], "ADAM-1");
	SetVehicleHealth(Cruiser[0], 2000.0);
	Cruiser[1] = LSPDVehicles[1] = AddStaticVehicleEx(596,1602.1194,-1687.9663,5.6107,90.5233,0,1, VEHICLE_RESPAWN); // Cruiser
	SetVehicleNumberPlate(Cruiser[1], "ADAM-2");
	SetVehicleHealth(Cruiser[1], 2000.0);
	Cruiser[2] = LSPDVehicles[2] = AddStaticVehicleEx(596,1602.1680,-1692.0110,5.6113,89.5516,0,1, VEHICLE_RESPAWN); // Cruiser
	SetVehicleNumberPlate(Cruiser[2], "ADAM-3");
	SetVehicleHealth(Cruiser[2], 2000.0);
	Cruiser[3] = LSPDVehicles[3] = AddStaticVehicleEx(596,1602.1666,-1696.1469,5.6123,90.4002,0,1, VEHICLE_RESPAWN); // Cruiser
	SetVehicleNumberPlate(Cruiser[3], "ADAM-4");
	SetVehicleHealth(Cruiser[3], 2000.0);
	LSPDVehicles[4] = AddStaticVehicleEx(468,1545.6774,-1671.9430,5.5675,83.3683,7,7, VEHICLE_RESPAWN); // Sanchez
	LSPDVehicles[5] = AddStaticVehicleEx(445,1545.9200,-1676.2919,5.7573,88.8056,7,7, VEHICLE_RESPAWN); // Admiral
	LSPDVehicles[6] = AddStaticVehicleEx(482,1546.0643,-1680.3092,6.0089,90.3870,7,7, VEHICLE_RESPAWN); // Burrito
	Kopassus[0] = LSPDVehicles[9] = AddStaticVehicleEx(601,1526.5850,-1644.1801,5.6494,180.3210,1,1, VEHICLE_RESPAWN); // Splashy
	SetVehicleNumberPlate(Kopassus[0], "KING-3");
	SetVehicleHealth(Kopassus[0], 10000.0);
	Kopassus[1] = LSPDVehicles[10] = AddStaticVehicleEx(601,1530.7244,-1644.2538,5.6494,179.6148,1,1, VEHICLE_RESPAWN); // Splashy
	SetVehicleNumberPlate(Kopassus[1], "KING-4");
	SetVehicleHealth(Kopassus[0], 10000.0);
	Kopassus[2] = LSPDVehicles[11] = AddStaticVehicleEx(427,1534.8553,-1644.8682,6.0226,180.7921,0,0, VEHICLE_RESPAWN); // Enforcer
	SetVehicleNumberPlate(Kopassus[2], "KING-5");
	SetVehicleHealth(Kopassus[2], 10000.0);
	Kopassus[3] = LSPDVehicles[12] = 	AddStaticVehicleEx(427,1538.9325,-1644.9508,6.0226,179.5991,0,0, VEHICLE_RESPAWN); // Enforcer
	SetVehicleNumberPlate(Kopassus[3], "KING-6");
	SetVehicleHealth(Kopassus[3], 10000.0);
	Lincoln[2] = LSPDVehicles[13] = AddStaticVehicleEx(411,1591.3544,-1712.0121,5.6177,0.4594,7,7, VEHICLE_RESPAWN); // Infernus
	SetVehicleNumberPlate(Lincoln[2], "LINCOLN-1");
	SetVehicleHealth(Lincoln[2], 2000.0);
	Lincoln[3] = LSPDVehicles[14] = AddStaticVehicleEx(560,1595.3734,-1712.0569,5.5961,359.7754,7,7, VEHICLE_RESPAWN); // Sultan
	SetVehicleNumberPlate(Lincoln[3], "LINCOLN-2");
	SetVehicleHealth(Lincoln[3], 2000.0);
	Lincoln[4] = LSPDVehicles[15] = AddStaticVehicleEx(541,1587.5099,-1712.2186,5.5155,359.9724,7,1, VEHICLE_RESPAWN); // Bullet
	SetVehicleNumberPlate(Lincoln[4], "LINCOLN-3");
	SetVehicleHealth(Lincoln[4], 2000.0);
	Lincoln[5] = LSPDVehicles[16] = AddStaticVehicleEx(451,1583.7574,-1712.1689,5.5882,0.1088,7,7, VEHICLE_RESPAWN); // Turismo
	SetVehicleNumberPlate(Lincoln[5], "LINCOLN-4");
	SetVehicleHealth(Lincoln[5], 2000.0);
	Kopassus[4] = LSPDVehicles[19] = AddStaticVehicleEx(497,1569.1587	,-1641.0361,28.5788,89.5537,0,1, VEHICLE_RESPAWN); // Maverick
	SetVehicleNumberPlate(Kopassus[4], "CHOPPER-1");
	Kopassus[5] = LSPDVehicles[20] = AddStaticVehicleEx(497,1567.7852,-1710.9760,28.6107,90.9795,0,1, VEHICLE_RESPAWN); // Maverick
	SetVehicleNumberPlate(Kopassus[5], "CHOPPER-2");
	Kopassus[6] = LSPDVehicles[21] = AddStaticVehicleEx(497,1549.1937,-1707.2985,28.5714,90.9819,0,1, VEHICLE_RESPAWN); // Maverick
	SetVehicleNumberPlate(Kopassus[6], "CHOPPER-3");
	Kopassus[7] = LSPDVehicles[22] = AddStaticVehicleEx(497,1547.7992,-1643.6317,28.5923,91.2595,0,1, VEHICLE_RESPAWN); // Maverick
	SetVehicleNumberPlate(Kopassus[7], "CHOPPER-4");
	Kopassus[8] = LSPDVehicles[7] = AddStaticVehicleEx(490,1545.7213,-1655.0195,6.0814,90.4218,0,1, VEHICLE_RESPAWN); // Rancher
	SetVehicleNumberPlate(Kopassus[8], "KING-1");
	SetVehicleHealth(Kopassus[8], 10000.0);
	Kopassus[9] = LSPDVehicles[8] = AddStaticVehicleEx(490,1545.8069,-1651.1516,6.0790,88.2897,0,1, VEHICLE_RESPAWN); // Rancher
	SetVehicleNumberPlate(Kopassus[9], "KING-2");
	//LSMD VEHICLES
	LSMDVehicles[1] = AddStaticVehicleEx(416, 1135.7958, -1339.6821, 13.7354, 0.0000,1,42, VEHICLE_RESPAWN);
	LSMDVehicles[2] = AddStaticVehicleEx(490, 1126.5653, -1329.1073, 13.5685, 0.0000,42,1, VEHICLE_RESPAWN);
	LSMDVehicles[3] = AddStaticVehicleEx(563, 1164.3168, -1378.1981, 27.2315, 270.0000,1,42, VEHICLE_RESPAWN);
	LSMDVehicles[4] = AddStaticVehicleEx(563, 1163.3397, -1355.6593, 27.2315, 270.0000,1,42, VEHICLE_RESPAWN);
	LSMDVehicles[5] = AddStaticVehicleEx(416, 1177.9625, -1308.6173, 13.9895, 270.0000,1,42, VEHICLE_RESPAWN);
	LSMDVehicles[6] = AddStaticVehicleEx(416, 1179.1405, -1339.2197, 13.9141, 270.0000,1,42, VEHICLE_RESPAWN);
	LSMDVehicles[7] = AddStaticVehicleEx(416, 1183.3546, -1331.5344, 13.5914, 0.0000,1,42, VEHICLE_RESPAWN);
	LSMDVehicles[8] = AddStaticVehicleEx(416, 1183.3188, -1315.5452, 13.5914, 180.0000,1,42, VEHICLE_RESPAWN);
	LSMDVehicles[9] = AddStaticVehicleEx(490, 1121.4974, -1329.1469, 13.3858, 0.0000,42,1, VEHICLE_RESPAWN);
	LSMDVehicles[10] = AddStaticVehicleEx(407, 1113.6646, -1329.1010, 13.4321, 0.0000,42,1, VEHICLE_RESPAWN);
	LSMDVehicles[11] = AddStaticVehicleEx(407, 1108.1724, -1329.0571, 13.4321, 0.0000,42,1, VEHICLE_RESPAWN);
	LSMDVehicles[12] = AddStaticVehicleEx(442, 1100.3240, -1328.0861, 13.4061, 0.0000,42,1, VEHICLE_RESPAWN);
	LSMDVehicles[13] = AddStaticVehicleEx(442, 1095.2428, -1328.0631, 13.4061, 0.0000,42,1, VEHICLE_RESPAWN);

    for(new x;x<sizeof(LSMDVehicles);x++)
	{
	    format(String, sizeof(String), "SAMD %d", LSMDVehicles[x]);
	    SetVehicleNumberPlate(LSMDVehicles[x], String);
	    SetVehicleToRespawn(LSMDVehicles[x]);
	}
	//San News Vehicles
	SanNewsVehicles[0] = AddStaticVehicleEx(582, 767.3442, -1334.0686, 13.7039, 180.0000,1,154, VEHICLE_RESPAWN);
	SanNewsVehicles[1] = AddStaticVehicleEx(582, 761.7844, -1334.1355, 13.7039, 180.0000,1,154, VEHICLE_RESPAWN);
	SanNewsVehicles[2] = AddStaticVehicleEx(582, 756.0706, -1334.2048, 13.7039, 180.0000,1,154, VEHICLE_RESPAWN);
	SanNewsVehicles[3] = AddStaticVehicleEx(582, 750.7026, -1334.2180, 13.7039, 180.0000,1,154, VEHICLE_RESPAWN);
	SanNewsVehicles[4] = AddStaticVehicleEx(582, 745.0070, -1334.3939, 13.7039, 180.0000,1,154, VEHICLE_RESPAWN);
	//DMVCar
	DMVPlate1 = DMVCar[1] = AddStaticVehicleEx(405,2052.8206,-1903.9745,13.3249,359.6511-180,6,1, 1); // Car1
	SetVehicleNumberPlate(DMVPlate1, "LATIHAN");
	DMVPlate2 = DMVCar[2] = AddStaticVehicleEx(405,2056.1641,-1903.9946,13.3470,359.6512-180,6,1, 1); // Car2
	SetVehicleNumberPlate(DMVPlate2, "LATIHAN");
	DMVPlate3 = DMVCar[3] = AddStaticVehicleEx(405,2059.3220,-1904.0138,13.3470,359.6512-180,6,1, 1); // Car3
	SetVehicleNumberPlate(DMVPlate3, "LATIHAN");
	DMVPlate4 = DMVCar[4] = AddStaticVehicleEx(405,2062.5098,-1904.0331,13.3470,359.6512-180,6,1, 1); // Car4
	SetVehicleNumberPlate(DMVPlate4, "LATIHAN");
	DMVPlate5 = DMVCar[5] = AddStaticVehicleEx(405,2065.6597,-1904.0526,13.3470,359.6512-180,6,1, 1); // Car5
	SetVehicleNumberPlate(DMVPlate5, "LATIHAN");
 	//SAGSVEHICLES
	GovVehicles[0] = AddStaticVehicleEx(525,1671.5378,-1710.6315,20.3563,267.0355,1,7,VEHICLE_RESPAWN); //Tow Truck
	SetVehicleNumberPlate(GovVehicles[0], "CRANE-1");
	GovVehicles[1] = AddStaticVehicleEx(525,1671.1296,-1705.2520,20.3548,268.9514,1,7,VEHICLE_RESPAWN); //Tow Truck
	SetVehicleNumberPlate(GovVehicles[1], "CRANE-2");
	GovVehicles[2] = AddStaticVehicleEx(525,1671.3967,-1699.8611,20.3582,269.2641,1,7,VEHICLE_RESPAWN); //Tow Truck
	SetVehicleNumberPlate(GovVehicles[2], "CRANE-3");
	GovVehicles[3] = AddStaticVehicleEx(525,1671.4471,-1694.5386,20.3518,271.9971,1,7,VEHICLE_RESPAWN); //Tow Truck
	SetVehicleNumberPlate(GovVehicles[3], "CRANE-4");
	GovVehicles[4] = AddStaticVehicleEx(428,1639.4771,-1687.4673,13.6421,90.2350,7,7,VEHICLE_RESPAWN);
	SetVehicleNumberPlate(GovVehicles[4], "SEC-1");
	GovVehicles[5] = AddStaticVehicleEx(428,1638.9178,-1682.0405,13.6588,91.0147,7,7,VEHICLE_RESPAWN);
	SetVehicleNumberPlate(GovVehicles[5], "SEC-2");
	GovVehicles[6] = AddStaticVehicleEx(507,1673.3914,-1718.8837,20.3098,359.6334,7,7,VEHICLE_RESPAWN);
	SetVehicleNumberPlate(GovVehicles[6], "DELTA-1");
	GovVehicles[7] = AddStaticVehicleEx(507,1667.0812,-1719.2802,20.3104,0.3652,7,7,VEHICLE_RESPAWN);
	SetVehicleNumberPlate(GovVehicles[4], "DELTA-2");
	GovVehicles[8] = AddStaticVehicleEx(482,1661.2102,-1719.3521,20.6086,359.9042,0,0,VEHICLE_RESPAWN);
	SetVehicleNumberPlate(GovVehicles[8], "STATIC");
	GovVehicles[9] = AddStaticVehicleEx(409,1655.6952,-1718.8076,20.2841,0.4101,7,7,VEHICLE_RESPAWN);
	SetVehicleNumberPlate(GovVehicles[9], "GOV-1");
	for(new h = 0; h < sizeof(FamilyInfo); h++)
	{
		if(FamilyInfo[h][FamilyUSafe] > 0)
		{
			FamilyInfo[h][FamilyPickup] = CreateDynamicPickup(1239, 23, FamilyInfo[h][FamilySafe][0], FamilyInfo[h][FamilySafe][1], FamilyInfo[h][FamilySafe][2]);
		}
		if(FamilyInfo[h][FamilyEntrance][0] != 0.0 && FamilyInfo[h][FamilyEntrance][1] != 0.0)
		{
		    FamilyInfo[h][FamilyEntrancePickup] = CreateDynamicPickup(1318, 23, FamilyInfo[h][FamilyEntrance][0], FamilyInfo[h][FamilyEntrance][1], FamilyInfo[h][FamilyEntrance][2]);
			format(String, sizeof(String), "%s", FamilyInfo[h][FamilyName]);
			FamilyInfo[h][FamilyEntranceText] = CreateDynamic3DTextLabel(String,COLOR_YELLOW,FamilyInfo[h][FamilyEntrance][0], FamilyInfo[h][FamilyEntrance][1], FamilyInfo[h][FamilyEntrance][2]+0.6,4.0);
		}
		LoadGangVehicles(h);
	}
	CreateDynamic3DTextLabel("Bike Dealership\n'/buybike' untuk membeli sebuah Sepedah",COLOR_YELLOW,701.7152,-518.4803,16.3245,4.0);//
	CreateDynamicPickup(1239, 23, 701.7152,-518.4803,16.3245, -1); //beli kendaraan di rodeo
	//FARMER AREA
	Farmer_Area = CreateDynamicCircle(-232.9231, -1365.9130, 65.0, 0, 0);
	//Vehicle Dealership Toys
	CreateDynamicObject(19454, 2249.29639, -2007.92871, 13.00518,   0.00000, -75.00000, 270.00000);
	CreateDynamicObject(19454, 2257.66089, -2007.90942, 13.01335,   0.00000, -75.00000, 270.00000);
	CreateDynamicObject(17950, 2258.87451, -2001.85742, 15.59330,   0.00000, 0.00000, 179.84660);
	CreateDynamicObject(17950, 2252.10449, -2001.85254, 15.59330,   0.00000, 0.00000, 179.84660);
	CreateDynamicObject(17950, 2245.34302, -2001.86829, 15.59330,   0.00000, 0.00000, 179.84660);
	CreateDynamicObject(17950, 2238.55420, -2001.86621, 15.59330,   0.00000, 0.00000, 179.84660);
	CreateDynamicObject(19454, 2239.71973, -2007.92737, 13.01153,   0.00000, -75.00000, 270.00000);
	CreateDynamicObject(19454, 2235.07104, -2002.36121, 11.72173,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2239.80176, -1997.61328, 11.72173,   0.00000, 0.00000, 270.03461);
	CreateDynamicObject(19454, 2248.17310, -1997.60315, 11.72173,   0.00000, 0.00000, 270.03461);
	CreateDynamicObject(19454, 2257.53296, -1997.59290, 11.72173,   0.00000, 0.00000, 270.03461);
	CreateDynamicObject(19454, 2262.29297, -2002.29932, 11.72173,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2257.27637, -2004.51770, 13.45165,   0.00000, -90.00000, 270.00000);
	CreateDynamicObject(19454, 2247.69800, -2004.51111, 13.43999,   0.00000, -90.00000, 270.00000);
	CreateDynamicObject(19454, 2239.98096, -2004.54016, 13.44340,   0.00000, -90.00000, 270.00000);
	CreateDynamicObject(19454, 2240.11157, -2001.02063, 13.44245,   0.00000, -90.00000, 270.00000);
	CreateDynamicObject(19454, 2249.70215, -2001.03479, 13.43978,   0.00000, -90.00000, 270.00000);
	CreateDynamicObject(19454, 2257.34473, -2001.03174, 13.45371,   0.00000, -90.00000, 270.00000);
	CreateDynamicObject(19454, 2257.23657, -1999.70068, 13.45999,   0.00000, -90.00000, 270.00000);
	CreateDynamicObject(19454, 2247.72510, -1999.70520, 13.40960,   0.00000, -90.00000, 270.00000);
	CreateDynamicObject(19454, 2240.22754, -1999.74353, 13.44134,   0.00000, -90.00000, 270.00000);

	//Pohon
	CreateDynamicObject(727,-1119.7800000,-1196.2800000,128.1300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(727,-1124.1900000,-1207.5900000,128.0300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(727,-1107.9000000,-1196.0600000,128.2300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(727,-1100.8500000,-1208.7000000,127.9200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(727,-1111.8400000,-1213.1600000,128.0200000,0.0000000,0.0000000,0.0000000); //
	//LS FISHING House One
	CreateDynamicObject(3886, 558.72, -2845.66, 0.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(3886, 558.72, -2845.66, -17.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(18259, 556.31, -2856.57, 1.69,   0.00, 0.00, 268.00);
	CreateDynamicObject(3886, 565.81, -2856.51, 0.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(3886, 565.81, -2848.50, 0.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(3886, 565.81, -2848.50, -17.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(3886, 565.81, -2856.51, -17.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(3886, 562.63, -2863.72, 0.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(3886, 552.34, -2863.72, -0.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(3886, 547.00, -2863.74, -0.60,   0.00, 0.00, 90.00);
	CreateDynamicObject(1442, 551.05, -2847.83, 2.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(3525, 551.04, -2847.74, 1.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(1491, 555.200683, -2851.467285, 1.825938,   0.00, 0.00, 0.00);
	CreateDynamicObject(2090, 559.56, -2855.98, 1.72,   0.00, 0.00, 270.00);
	CreateDynamicObject(1762, 547.87, -2856.30, 1.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(2307, 558.57, -2859.73, 1.72,   0.00, 0.00, 180.00);
	CreateDynamicObject(1761, 551.36, -2857.65, 1.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(2185, 553.15, -2860.68, 1.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(1714, 554.14, -2859.37, 1.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(2229, 549.43, -2852.10, 1.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(2229, 551.97, -2852.08, 1.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(2332, 550.48, -2852.42, 2.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(2312, 550.47, -2852.40, 2.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(2090, 558.43, -2855.33, 1.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(2572, 550.35, -2850.12, 1.75,   0.00, 0.00, 170.00);
	//LSPD
	CreateDynamicObject(982, 1539.531005, -1664.275512, 13.216876,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1539.526000, -1691.888793, 13.216874,   0.00, 0.00, 0.00);
	//prison interior
 	CreateDynamicObject(19377,1840.29980469,-1721.59960938,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (1)
    CreateDynamicObject(19377,1840.30004883,-1731.19995117,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (3)
    CreateDynamicObject(19377,1840.29980469,-1712.00000000,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (4)
    CreateDynamicObject(19396,1827.69995117,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (7)
    CreateDynamicObject(19377,1829.80004883,-1712.00000000,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (5)
    CreateDynamicObject(19377,1829.79980469,-1721.59960938,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (7)
    CreateDynamicObject(19377,1829.79980469,-1731.19921875,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (8)
    CreateDynamicObject(19377,1840.30004883,-1731.69995117,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (11)
    CreateDynamicObject(19377,1842.09997559,-1711.69995117,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (12)
    CreateDynamicObject(19441,1824.50000000,-1721.50000000,5206.89990234,0.00000000,0.00000000,0.00000000); //object(cs_landbit_33_a) (1)
    CreateDynamicObject(19377,1840.30004883,-1712.00000000,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (19)
    CreateDynamicObject(19377,1840.29980469,-1721.59960938,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (20)
    CreateDynamicObject(19377,1840.30004883,-1731.19995117,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (21)
    CreateDynamicObject(19377,1829.80004883,-1731.19995117,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (22)
    CreateDynamicObject(19377,1829.79980469,-1721.59960938,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (23)
    CreateDynamicObject(19377,1829.80004883,-1712.00000000,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (24)
    CreateDynamicObject(19377,1819.30004883,-1721.59997559,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (25)
    stair[0] = CreateObject(14877,1823.00000000,-1719.19995117,5203.10009766,0.00000000,0.00000000,0.00000000); //object(michelle-stairs) (1)
    CreateDynamicObject(19362,1826.23999023,-1724.09997559,5205.10009766,0.00000000,90.00000000,180.00000000); //object(archbrij_sfw) (1)
    CreateDynamicObject(19362,1826.23999023,-1720.90002441,5205.10009766,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (2)
    CreateDynamicObject(19362,1826.23999023,-1717.69995117,5205.10107422,0.00000000,90.00000000,180.00000000); //object(archbrij_sfw) (3)
    CreateDynamicObject(19362,1819.69995117,-1719.09997559,5203.50000000,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (4)
    CreateDynamicObject(19362,1819.69995117,-1722.30004883,5203.50000000,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (5)
    CreateDynamicObject(19362,1819.69921875,-1725.39941406,5203.50000000,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (6)
    CreateDynamicObject(19441,1821.39941406,-1721.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19368,1822.90002441,-1725.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (5)
    CreateDynamicObject(19368,1819.69995117,-1725.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (6)
    CreateDynamicObject(19368,1818.09997559,-1723.69995117,5203.29980469,0.00000000,0.00000000,0.00000000); //object(sboxbld4_sfw84) (7)
    CreateDynamicObject(19368,1818.09997559,-1720.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(sboxbld4_sfw84) (8)
    CreateDynamicObject(19368,1818.09997559,-1717.30004883,5203.29980469,0.00000000,0.00000000,0.00000000); //object(sboxbld4_sfw84) (9)
    CreateDynamicObject(19368,1819.69995117,-1717.69995117,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (10)
    CreateDynamicObject(19368,1822.90002441,-1717.69995117,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (11)
    CreateDynamicObject(19368,1824.50000000,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (12)
    CreateDynamicObject(19368,1822.90002441,-1720.69995117,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (13)
    CreateDynamicObject(19368,1822.90002441,-1720.69995117,5206.79980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (14)
    CreateDynamicObject(19368,1822.89941406,-1722.29980469,5206.79980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (15)
    CreateDynamicObject(19368,1822.90002441,-1725.30004883,5206.79980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (16)
    CreateDynamicObject(19368,1819.69995117,-1725.30004883,5206.79980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (17)
    CreateDynamicObject(19368,1818.09997559,-1723.69995117,5206.79980469,0.00000000,0.00000000,0.00000000); //object(sboxbld4_sfw84) (18)
    CreateDynamicObject(19368,1818.09997559,-1720.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(sboxbld4_sfw84) (19)
    CreateDynamicObject(19368,1818.09997559,-1717.30004883,5206.79980469,0.00000000,0.00000000,0.00000000); //object(sboxbld4_sfw84) (20)
    CreateDynamicObject(19368,1819.69995117,-1717.69995117,5206.79980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (21)
    CreateDynamicObject(19368,1822.90002441,-1717.69995117,5206.79980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (22)
    CreateDynamicObject(19441,1821.40002441,-1721.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_landbit_33_a) (6)
    CreateDynamicObject(19362,1825.50000000,-1719.30004883,5205.10205078,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (7)
    CreateDynamicObject(19377,1822.80004883,-1721.30004883,5208.60009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (26)
    CreateDynamicObject(19368,1824.50000000,-1716.09997559,5206.89990234,0.00000000,0.00000000,0.00000000); //object(sboxbld4_sfw84) (26)
    CreateDynamicObject(19368,1824.50000000,-1712.90002441,5206.89990234,0.00000000,0.00000000,0.00000000); //object(sboxbld4_sfw84) (27)
    CreateDynamicObject(19377,1829.79980469,-1731.69921875,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (27)
    fence[0] = CreateObject(19304,1827.90002441,-1725.19995117,5205.79980469,0.00000000,0.00000000,90.00000000); //object(vgstwires22_lvs) (1)
    fence[1] = CreateObject(19304,1827.90002441,-1721.69995117,5205.79980469,0.00000000,0.00000000,90.00000000); //object(vgstwires22_lvs) (2)
    fence[2] = CreateObject(19304,1832.69921875,-1716.39941406,5205.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (3)
    CreateDynamicObject(19362,1826.23999023,-1727.30004883,5205.10107422,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (8)
    CreateDynamicObject(19377,1831.59997559,-1711.69995117,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (28)
    CreateDynamicObject(19368,1822.89941406,-1722.29980469,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (29)
    CreateDynamicObject(19460,1826.09997559,-1709.40002441,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (1)
    CreateDynamicObject(19460,1824.50000000,-1717.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (2)
    CreateDynamicObject(19460,1824.50000000,-1730.09997559,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (3)
    CreateDynamicObject(19377,1829.79980469,-1711.69921875,5208.60009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (29)
    CreateDynamicObject(19377,1822.80004883,-1730.90002441,5208.60009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (31)
    CreateDynamicObject(19396,1827.69995117,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (8)
    CreateDynamicObject(19368,1824.50000000,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (32)
    CreateDynamicObject(19460,1826.09960938,-1709.39941406,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (4)
    CreateDynamicObject(19396,1830.90002441,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (9)
    CreateDynamicObject(19396,1834.09997559,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (10)
    CreateDynamicObject(19396,1837.30004883,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (11)
    CreateDynamicObject(19396,1840.50000000,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (12)
    CreateDynamicObject(19396,1843.69995117,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (13)
    CreateDynamicObject(19460,1845.30004883,-1709.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (5)
    CreateDynamicObject(19460,1845.30004883,-1709.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (6)
    CreateDynamicObject(19377,1840.29980469,-1711.69921875,5208.60009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (32)
    CreateDynamicObject(19396,1843.69995117,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (14)
    CreateDynamicObject(19396,1850.09960938,-1714.29980469,5203.29980469,0.00000000,0.00000000,90.00000000); //object(land_37_sfw) (15)
    CreateDynamicObject(19396,1837.30004883,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (16)
    CreateDynamicObject(19396,1834.09997559,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (17)
    CreateDynamicObject(19396,1830.90002441,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (19)
    CreateDynamicObject(19396,1843.69995117,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (20)
    CreateDynamicObject(19460,1845.30004883,-1709.50000000,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (7)
    CreateDynamicObject(19396,1840.50000000,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (21)
    CreateDynamicObject(19396,1837.30004883,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (22)
    CreateDynamicObject(19396,1834.09997559,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (23)
    CreateDynamicObject(19396,1830.90002441,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (24)
    CreateDynamicObject(19396,1827.69995117,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (25)
    CreateDynamicObject(19368,1824.50000000,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (33)
    CreateDynamicObject(19460,1829.69995117,-1707.59997559,5210.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (8)
    CreateDynamicObject(19460,1826.09960938,-1709.39941406,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (9)
    CreateDynamicObject(19460,1829.29980469,-1709.50000000,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (10)
    CreateDynamicObject(19460,1832.50000000,-1709.50000000,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (11)
    CreateDynamicObject(19460,1835.69995117,-1709.50000000,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (12)
    CreateDynamicObject(19460,1838.90002441,-1709.50000000,5210.29980469,0.00000000,0.00000000,0.25000000); //object(cs_mntdetail01) (13)
    CreateDynamicObject(19460,1842.09997559,-1709.50000000,5210.29980469,0.00000000,0.00000000,0.24719238); //object(cs_mntdetail01) (14)
    CreateDynamicObject(19460,1852.19995117,-1717.59997559,5206.89990234,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (15)
    CreateDynamicObject(19460,1848.90002441,-1707.59997559,5210.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (16)
    CreateDynamicObject(19460,1824.50000000,-1719.19995117,5210.39990234,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (17)
    CreateDynamicObject(19460,1824.50000000,-1728.80004883,5210.39990234,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (18)
    CreateDynamicObject(19368,1846.89941406,-1714.29980469,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (34)
    CreateDynamicObject(19377,1850.79980469,-1712.00000000,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (35)
    CreateDynamicObject(19377,1850.79980469,-1721.59960938,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (36)
    CreateDynamicObject(19460,1847.29980469,-1715.39941406,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19396,1840.50000000,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (26)
    CreateDynamicObject(19362,1845.69921875,-1718.09960938,5205.10107422,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (9)
    stair[1] = CreateObject(14877,1849.19995117,-1722.19995117,5206.60009766,0.00000000,0.00000000,179.99450684); //object(michelle-stairs) (4)
    stair[2] = CreateObject(14877,1822.19921875,-1723.79980469,5201.50000000,0.00000000,0.00000000,179.99450684); //object(michelle-stairs) (5)
    CreateDynamicObject(19377,1821.09997559,-1711.69995117,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (39)
    CreateDynamicObject(19377,1852.59960938,-1711.69921875,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (41)
    CreateDynamicObject(19377,1852.59960938,-1721.29980469,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (42)
    CreateDynamicObject(19460,1847.40002441,-1712.80004883,5206.89990234,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (20)
    CreateDynamicObject(19460,1839.30004883,-1707.59997559,5210.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (21)
    CreateDynamicObject(19368,1846.90002441,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (36)
    CreateDynamicObject(19460,1852.40002441,-1717.59997559,5210.39990234,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (23)
    CreateDynamicObject(19362,1847.30004883,-1714.90002441,5208.60009766,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (13)
    CreateDynamicObject(19460,1847.50000000,-1715.90002441,5210.39990234,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (24)
    CreateDynamicObject(19368,1846.90002441,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (37)
    CreateDynamicObject(19362,1845.69995117,-1724.50000000,5208.60009766,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (15)
    CreateDynamicObject(19368,1849.09997559,-1720.69995117,5206.89990234,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (38)
    CreateDynamicObject(19362,1845.69921875,-1721.29980469,5205.10107422,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (17)
    CreateDynamicObject(19362,1845.69995117,-1724.50000000,5205.10107422,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (18)
    CreateDynamicObject(19362,1845.69995117,-1727.69995117,5205.10205078,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (19)
    CreateDynamicObject(19460,1847.50000000,-1725.50000000,5206.89990234,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (25)
    CreateDynamicObject(19460,1852.29980469,-1723.69921875,5206.89990234,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (26)
    CreateDynamicObject(19460,1856.69921875,-1720.39941406,5206.89990234,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (27)
    CreateDynamicObject(19460,1856.69995117,-1720.30004883,5210.39990234,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (28)
    CreateDynamicObject(19460,1852.29980469,-1723.69921875,5210.39990234,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (29)
    CreateDynamicObject(19362,1845.69921875,-1721.29980469,5208.60009766,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (21)
    CreateDynamicObject(19362,1845.69995117,-1718.09997559,5208.60009766,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (22)
    CreateDynamicObject(19368,1849.09997559,-1720.69995117,5210.39990234,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (40)
    CreateDynamicObject(19377,1850.80004883,-1721.59997559,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (45)
    CreateDynamicObject(19377,1850.80004883,-1712.00000000,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (46)
    CreateDynamicObject(19460,1831.00000000,-1736.00000000,5206.79980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (30)
    CreateDynamicObject(19460,1829.69995117,-1707.59997559,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (31)
    CreateDynamicObject(19460,1839.30004883,-1707.59997559,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (32)
    CreateDynamicObject(19460,1839.30004883,-1707.59997559,5206.79980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (33)
    CreateDynamicObject(19460,1848.90002441,-1707.59997559,5206.79980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (34)
    CreateDynamicObject(19368,1845.69995117,-1707.59997559,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (41)
    CreateDynamicObject(19377,1850.79980469,-1731.19921875,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (47)
    CreateDynamicObject(19377,1852.59960938,-1730.89941406,5205.10107422,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (48)
    CreateDynamicObject(19460,1824.50000000,-1727.09997559,5206.89990234,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (35)
    CreateDynamicObject(19460,1845.29980469,-1734.00000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (36)
    CreateDynamicObject(19368,1824.50000000,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (43)
    CreateDynamicObject(19396,1827.69995117,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (28)
    CreateDynamicObject(19396,1830.90002441,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (29)
    CreateDynamicObject(19396,1834.09997559,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (30)
    CreateDynamicObject(19396,1837.30004883,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (31)
    CreateDynamicObject(19396,1840.50000000,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (32)
    CreateDynamicObject(19396,1843.69995117,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (33)
    CreateDynamicObject(19368,1846.90002441,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (44)
    CreateDynamicObject(19460,1826.09960938,-1734.09960938,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (37)
    CreateDynamicObject(19377,1829.80004883,-1731.69995117,5208.60107422,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (49)
    CreateDynamicObject(19377,1840.29980469,-1731.69921875,5208.60009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (50)
    CreateDynamicObject(19460,1847.50000000,-1728.50000000,5210.39990234,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (38)
    CreateDynamicObject(19377,1850.79980469,-1731.19921875,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (52)
    CreateDynamicObject(19460,1829.69921875,-1707.59960938,5206.79980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (39)
    CreateDynamicObject(19460,1840.59960938,-1736.00000000,5206.79980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (40)
    fence[3] = CreateObject(19304,1844.00000000,-1718.09997559,5205.79980469,0.00000000,0.00000000,90.00000000); //object(vgstwires22_lvs) (7)
    fence[4] = CreateObject(19304,1836.00000000,-1716.39941406,5205.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (8)
    fence[5] = CreateObject(19304,1839.09960938,-1716.39941406,5205.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (9)
    fence[6] = CreateObject(19304,1842.19921875,-1716.39941406,5205.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (11)
    fence[7] = CreateObject(19304,1829.59960938,-1716.39941406,5205.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (13)
    CreateDynamicObject(19368,1824.50000000,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (49)
    CreateDynamicObject(19396,1827.69995117,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (34)
    CreateDynamicObject(19396,1830.90002441,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (35)
    CreateDynamicObject(19396,1834.09997559,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (36)
    CreateDynamicObject(19396,1837.30004883,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (37)
    CreateDynamicObject(19396,1840.50000000,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (38)
    CreateDynamicObject(19396,1843.69995117,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (39)
    CreateDynamicObject(19368,1846.89941406,-1729.19921875,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19460,1826.09997559,-1734.09997559,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (41)
    CreateDynamicObject(19460,1831.00000000,-1736.00000000,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (42)
    CreateDynamicObject(19460,1840.59997559,-1736.00000000,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (43)
    CreateDynamicObject(19460,1845.29980469,-1734.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (44)
    CreateDynamicObject(19368,1824.50000000,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (51)
    CreateDynamicObject(19460,1826.09997559,-1734.09997559,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (45)
    CreateDynamicObject(19396,1827.69995117,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (42)
    CreateDynamicObject(19396,1830.90002441,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (43)
    CreateDynamicObject(19396,1834.09997559,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (44)
    CreateDynamicObject(19396,1837.30004883,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (45)
    CreateDynamicObject(19396,1840.50000000,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (46)
    CreateDynamicObject(19396,1843.69995117,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //object(land_37_sfw) (47)
    CreateDynamicObject(19368,1846.90002441,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (52)
    CreateDynamicObject(19460,1831.00000000,-1736.00000000,5210.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (46)
    CreateDynamicObject(19460,1840.59997559,-1736.00000000,5210.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (47)
    CreateDynamicObject(19460,1845.29980469,-1734.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (48)
    CreateDynamicObject(19460,1847.29980469,-1728.19921875,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (49)
    fence[8] = CreateObject(19304,1827.89941406,-1718.19921875,5205.79980469,0.00000000,0.00000000,90.00000000); //object(vgstwires22_lvs) (14)
    fence[9] = CreateObject(19304,1844.00000000,-1721.59997559,5205.79980469,0.00000000,0.00000000,90.00000000); //object(vgstwires22_lvs) (15)
    fence[10] = CreateObject(19304,1844.00000000,-1725.09997559,5205.79980469,0.00000000,0.00000000,90.00000000); //object(vgstwires22_lvs) (16)
    fence[11] = CreateObject(19304,1842.19921875,-1726.89941406,5205.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (17)
    fence[12] = CreateObject(19304,1839.09960938,-1726.89941406,5205.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (18)
    fence[13] = CreateObject(19304,1836.19921875,-1726.89941406,5205.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (19)
    fence[14] = CreateObject(19304,1832.69921875,-1726.89941406,5205.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (20)
    fence[15] = CreateObject(19304,1829.69921875,-1726.89941406,5205.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (21)
    fence[16] = CreateObject(19304,1827.90002441,-1718.19995117,5209.29980469,0.00000000,0.00000000,90.00000000); //object(vgstwires22_lvs) (27)
    fence[17] = CreateObject(19304,1827.90002441,-1721.69995117,5209.29980469,0.00000000,0.00000000,90.00000000); //object(vgstwires22_lvs) (28)
    fence[18] = CreateObject(19304,1827.90002441,-1725.19995117,5209.29980469,0.00000000,0.00000000,90.00000000); //object(vgstwires22_lvs) (29)
    fence[19] = CreateObject(19304,1844.00000000,-1725.09997559,5209.29980469,0.00000000,0.00000000,90.00000000); //object(vgstwires22_lvs) (36)
    fence[20] = CreateObject(19304,1844.00000000,-1721.59997559,5209.29980469,0.00000000,0.00000000,90.00000000); //object(vgstwires22_lvs) (37)
    fence[21] = CreateObject(19304,1844.00000000,-1718.09997559,5209.29980469,0.00000000,0.00000000,90.00000000); //object(vgstwires22_lvs) (38)
    CreateDynamicObject(19460,1842.09997559,-1734.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (50)
    CreateDynamicObject(19460,1838.90002441,-1734.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (51)
    CreateDynamicObject(19460,1835.69995117,-1734.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (52)
    CreateDynamicObject(19460,1832.50000000,-1734.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (53)
    CreateDynamicObject(19460,1829.30004883,-1734.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (54)
    CreateDynamicObject(19460,1829.30004883,-1734.00000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (55)
    CreateDynamicObject(19460,1832.50000000,-1734.00000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (56)
    CreateDynamicObject(19460,1835.69995117,-1734.00000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (57)
    CreateDynamicObject(19460,1838.90002441,-1734.00000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (58)
    CreateDynamicObject(19460,1842.09997559,-1734.00000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (59)
    CreateDynamicObject(19460,1842.09997559,-1734.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (60)
    CreateDynamicObject(19460,1838.90002441,-1734.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (61)
    CreateDynamicObject(19460,1835.69995117,-1734.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (62)
    CreateDynamicObject(19460,1832.50000000,-1734.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (63)
    CreateDynamicObject(19460,1829.30004883,-1734.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (64)
    CreateDynamicObject(19460,1829.30004883,-1709.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (65)
    CreateDynamicObject(19460,1832.50000000,-1709.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (66)
    CreateDynamicObject(19460,1835.69995117,-1709.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (67)
    CreateDynamicObject(19460,1838.90002441,-1709.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (68)
    CreateDynamicObject(19460,1842.09997559,-1709.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (69)
    CreateDynamicObject(19460,1842.09997559,-1709.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (70)
    CreateDynamicObject(19460,1838.90002441,-1709.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (71)
    CreateDynamicObject(19460,1835.80004883,-1709.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (72)
    CreateDynamicObject(19460,1832.50000000,-1709.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (73)
    CreateDynamicObject(19460,1829.30004883,-1709.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (74)
    CreateDynamicObject(19396,1847.29980469,-1721.79980469,5203.29980469,0.00000000,0.00000000,179.99450684); //object(land_37_sfw) (15)
    CreateDynamicObject(19368,1853.29980469,-1714.29980469,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (34)
    CreateDynamicObject(19460,1847.29980469,-1705.79980469,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19368,1856.50000000,-1714.29980469,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (34)
    CreateDynamicObject(19368,1852.30004883,-1720.69995117,5206.89990234,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (38)
    CreateDynamicObject(19368,1852.30004883,-1720.69995117,5210.39990234,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (38)
    CreateDynamicObject(19377,1861.29980469,-1721.59960938,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (45)
    CreateDynamicObject(19377,1849.19921875,-1730.89941406,5208.60107422,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (50)
    CreateDynamicObject(19362,1846.69995117,-1722.30004883,5208.60107422,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (21)
    fence[22] = CreateObject(19304,1829.59997559,-1716.40002441,5209.29980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (13)
    fence[23] = CreateObject(19304,1832.69995117,-1716.40002441,5209.29980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (3)
    fence[24] = CreateObject(19304,1836.00000000,-1716.40002441,5209.29980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (8)
    fence[25] = CreateObject(19304,1839.09997559,-1716.40002441,5209.29980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (9)
    fence[26] = CreateObject(19304,1842.19995117,-1716.40002441,5209.29980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (11)
    fence[27] = CreateObject(19304,1842.19995117,-1726.90002441,5209.29980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (17)
    fence[28] = CreateObject(19304,1839.09997559,-1726.90002441,5209.29980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (18)
    fence[29] = CreateObject(19304,1868.00000000,-1733.09997559,5210.70019531,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (19)
    fence[30] = CreateObject(19304,1832.69995117,-1726.90002441,5209.29980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (20)
    fence[31] = CreateObject(19304,1829.69995117,-1726.90002441,5209.29980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (21)
    CreateDynamicObject(19460,1858.00000000,-1712.29980469,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19414,1851.40100098,-1707.50097656,5203.30078125,0.00000000,0.00000000,270.00000000); //object(lodkmod2_sfw01) (1)
    CreateDynamicObject(19414,1848.90100098,-1707.50000000,5203.30078125,0.00000000,0.00000000,270.00000000); //object(lodkmod2_sfw01) (2)
    CreateDynamicObject(19414,1853.90039062,-1707.50000000,5203.30078125,0.00000000,0.00000000,270.00000000); //object(lodkmod2_sfw01) (3)
    CreateDynamicObject(19377,1861.29980469,-1712.00000000,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (35)
    CreateDynamicObject(19414,1856.39941406,-1707.50097656,5203.29980469,0.00000000,0.00000000,270.00000000); //object(lodkmod2_sfw01) (4)
    CreateDynamicObject(19460,1853.19921875,-1719.09960938,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1854.79980469,-1719.09960938,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19441,1848.30004883,-1740.69995117,5206.79980469,0.00000000,0.00000000,180.00000000); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19377,1852.59997559,-1702.40002441,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (35)
    CreateDynamicObject(19377,1852.59960938,-1702.39941406,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (35)
    CreateDynamicObject(19377,1863.09960938,-1702.39941406,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (35)
    CreateDynamicObject(19460,1853.19995117,-1701.00000000,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19396,1854.00000000,-1725.50000000,5203.29980469,0.00000000,0.00000000,179.99450684); //object(land_37_sfw) (15)
    CreateDynamicObject(19441,1854.00000000,-1727.09960938,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19460,1854.79980469,-1731.89941406,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1853.19995117,-1731.90002441,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19396,1850.00000000,-1729.19995117,5203.29980469,0.00000000,0.00000000,90.00000000); //object(land_37_sfw) (15)
    CreateDynamicObject(19368,1853.19995117,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(14416,1857.40002441,-1738.59997559,5205.39990234,0.00000000,0.00000000,359.99450684); //object(carter-stairs07) (1)
    CreateDynamicObject(19377,1850.80004883,-1740.80004883,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (47)
    CreateDynamicObject(19368,1846.69995117,-1736.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1853.79980469,-1741.50000000,5206.79980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19377,1852.59960938,-1731.89941406,5205.10205078,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (48)
    CreateDynamicObject(19460,1848.29980469,-1741.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (49)
    CreateDynamicObject(19460,1852.19995117,-1741.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (49)
    CreateDynamicObject(19377,1850.50000000,-1746.09960938,5205.00000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (48)
    CreateDynamicObject(19368,1847.29980469,-1734.59960938,5203.29980469,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1848.29980469,-1738.29980469,5206.79980469,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19441,1854.00000000,-1723.89941406,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19441,1852.19921875,-1740.69921875,5206.79980469,0.00000000,0.00000000,179.99450684); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19460,1843.50000000,-1741.50000000,5206.79980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19368,1852.19921875,-1738.29980469,5206.79980469,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1853.79980469,-1736.19921875,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19377,1861.00000000,-1746.09960938,5205.00000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (48)
    CreateDynamicObject(19368,1856.39941406,-1717.09960938,5203.29980469,0.00000000,0.00000000,270.00000000); //object(sboxbld4_sfw84) (34)
    CreateDynamicObject(19377,1861.29980469,-1721.59960938,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (35)
    CreateDynamicObject(19377,1861.29980469,-1731.19921875,5201.50000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (35)
    CreateDynamicObject(19460,1845.59997559,-1746.30004883,5206.79980469,0.00000000,0.00000000,180.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(14416,1850.19921875,-1739.39941406,5201.79980469,0.00000000,0.00000000,179.99450684); //object(carter-stairs07) (1)
    CreateDynamicObject(19377,1859.69921875,-1732.19921875,5208.60009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (50)
    CreateDynamicObject(19441,1855.40002441,-1740.80004883,5206.79980469,0.00000000,0.00000000,179.99450684); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19368,1866.19995117,-1749.40002441,5206.79980469,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19441,1859.40002441,-1740.80004883,5206.79980469,0.00000000,0.00000000,179.99450684); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19460,1850.30004883,-1751.00000000,5206.79980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19377,1850.19995117,-1740.50000000,5208.60107422,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (50)
    CreateDynamicObject(19460,1864.19921875,-1741.59960938,5206.79980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1859.90002441,-1751.00000000,5206.79980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1869.50000000,-1751.00000000,5206.79980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19396,1866.20019531,-1746.29980469,5206.79980469,0.00000000,0.00000000,179.99450684); //object(land_37_sfw) (15)
    CreateDynamicObject(19368,1855.39941406,-1738.39941406,5206.79980469,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1866.19995117,-1743.19995117,5206.79980469,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19377,1850.19921875,-1750.09960938,5208.60009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (50)
    CreateDynamicObject(19377,1860.59960938,-1746.39941406,5208.60009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (50)
    CreateDynamicObject(19377,1871.09997559,-1746.40002441,5208.60009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (50)
    CreateDynamicObject(19377,1864.59960938,-1736.79980469,5208.60205078,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (50)
    CreateDynamicObject(19368,1859.40002441,-1738.40002441,5206.79980469,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19377,1864.59960938,-1732.19921875,5208.60107422,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (50)
    CreateDynamicObject(19460,1845.30004883,-1743.59997559,5210.29980469,0.00000000,0.00000000,179.99450684); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1850.09997559,-1751.19995117,5210.29980469,0.00000000,0.00000000,90.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1845.29980469,-1753.19921875,5210.29980469,0.00000000,0.00000000,179.99450684); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1859.69995117,-1751.19995117,5210.29980469,0.00000000,0.00000000,90.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1869.30004883,-1751.19995117,5210.29980469,0.00000000,0.00000000,90.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1855.40002441,-1740.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1869.79980469,-1736.89941406,5210.29980469,0.00000000,0.00000000,179.99450684); //object(cs_mntdetail01) (40)
    CreateDynamicObject(14416,1869.09997559,-1725.09997559,5205.39990234,0.00000000,0.00000000,179.98901367); //object(carter-stairs07) (1)
    CreateDynamicObject(19377,1863.09960938,-1725.89941406,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (48)
    CreateDynamicObject(14416,1859.69995117,-1732.50000000,5201.89990234,0.00000000,0.00000000,89.98901367); //object(carter-stairs07) (1)
    CreateDynamicObject(19460,1869.80004883,-1724.50000000,5206.89990234,0.00000000,0.00000000,180.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1858.09997559,-1730.59997559,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19441,1863.00000000,-1721.80004883,5203.29980469,0.00000000,0.00000000,180.00000000); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19460,1867.79980469,-1721.00000000,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1867.09997559,-1726.90002441,5206.89990234,0.00000000,0.00000000,179.99450684); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19377,1863.09960938,-1716.29980469,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (48)
    CreateDynamicObject(19460,1862.30004883,-1727.50000000,5210.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (29)
    CreateDynamicObject(19377,1861.89941406,-1722.69921875,5208.60009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (50)
    CreateDynamicObject(19377,1873.59960938,-1717.39941406,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (48)
    CreateDynamicObject(19460,1869.80102539,-1724.09997559,5210.29980469,0.00000000,0.00000000,179.99450684); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19368,1869.80004883,-1730.50000000,5210.29980469,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1868.30004883,-1722.40002441,5210.29980469,0.00000000,0.00000000,90.00000000); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19460,1852.69921875,-1727.50000000,5210.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (29)
    CreateDynamicObject(19460,1869.80004883,-1714.90002441,5206.89990234,0.00000000,0.00000000,179.99450684); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1861.79980469,-1717.59960938,5206.89990234,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1871.39941406,-1717.59960938,5206.89990234,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19377,1872.40002441,-1717.69995117,5208.60009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (50)
    CreateDynamicObject(19460,1867.09997559,-1722.69995117,5210.29980469,0.00000000,0.00000000,179.99450684); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19368,1848.50000000,-1727.59960938,5210.39990234,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19460,1862.59997559,-1730.59997559,5206.89990234,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1867.79980469,-1722.59960938,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1862.09997559,-1733.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1862.09960938,-1733.29980469,5206.89990234,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19377,1867.69921875,-1735.39941406,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (48)
    CreateDynamicObject(19460,1849.59997559,-1731.80004883,5206.89990234,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (36)
    CreateDynamicObject(19368,1849.59997559,-1725.40002441,5206.89990234,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19460,1854.39941406,-1727.39941406,5206.89990234,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (26)
    CreateDynamicObject(19460,1859.19995117,-1722.59997559,5206.89990234,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (27)
    CreateDynamicObject(19377,1861.89941406,-1713.09960938,5208.60009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (50)
    CreateDynamicObject(19460,1855.69995117,-1730.40002441,5210.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (48)
    CreateDynamicObject(19460,1850.59997559,-1737.19995117,5210.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (29)
    CreateDynamicObject(19460,1841.00000000,-1737.19995117,5210.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (29)
    CreateDynamicObject(19368,1857.30004883,-1734.90002441,5206.89990234,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1862.59997559,-1732.19995117,5206.89990234,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19460,1853.09997559,-1736.59997559,5206.89990234,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1866.50000000,-1728.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1866.50000000,-1718.89941406,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1866.50000000,-1709.29980469,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1866.50000000,-1699.69995117,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1858.00000000,-1696.30004883,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1843.59997559,-1701.00000000,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1862.50000000,-1698.29980469,5203.29980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19377,1863.09960938,-1706.69921875,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (41)
    CreateDynamicObject(19377,1863.09997559,-1697.09997559,5205.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (41)
    CreateDynamicObject(19460,1868.00000000,-1742.50000000,5210.29980469,0.00000000,0.00000000,179.99450684); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19368,1869.59960938,-1737.69921875,5210.29980469,0.00000000,0.00000000,89.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1859.40002441,-1738.40002441,5210.29980469,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19441,1859.39941406,-1740.79980469,5210.29980469,0.00000000,0.00000000,179.99450684); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19368,1857.00000000,-1741.59997559,5210.29980469,0.00000000,0.00000000,89.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1860.19921875,-1741.59960938,5210.29980469,0.00000000,0.00000000,89.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1857.00000000,-1744.79980469,5210.29980469,0.00000000,0.00000000,89.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1858.59997559,-1743.19995117,5210.29980469,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19377,1850.50000000,-1740.80004883,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1850.50000000,-1750.40002441,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1861.00000000,-1750.39941406,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1871.50000000,-1750.40002441,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1861.00000000,-1740.80004883,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1871.50000000,-1740.80004883,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1861.29980469,-1731.19921875,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1871.80004883,-1731.19995117,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1871.80004883,-1721.59997559,5212.10009766,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (52)
    CreateDynamicObject(19460,1859.19995117,-1713.00000000,5206.89990234,0.00000000,0.00000000,0.00000000); //object(cs_mntdetail01) (27)
    CreateDynamicObject(19368,1861.80004883,-1738.40002441,5210.29980469,0.00000000,0.00000000,179.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19441,1861.80004883,-1740.80004883,5210.29980469,0.00000000,0.00000000,179.99450684); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19377,1871.50000000,-1746.09997559,5205.00000000,0.00000000,90.00000000,0.00000000); //object(freight_interiorsfw) (48)
    CreateDynamicObject(19460,1873.80004883,-1741.59997559,5206.79980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1879.09997559,-1751.00000000,5206.79980469,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1876.40002441,-1746.50000000,5206.79980469,0.00000000,0.00000000,179.99450684); //object(cs_mntdetail01) (40)
    CreateDynamicObject(19396,1857.80004883,-1729.00000000,5206.89990234,0.00000000,0.00000000,179.99450684); //object(land_37_sfw) (15)
    CreateDynamicObject(19396,1862.80004883,-1710.90002441,5203.29980469,0.00000000,0.00000000,89.99450684); //object(land_37_sfw) (15)
    CreateDynamicObject(19362,1860.80004883,-1734.80004883,5205.10009766,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (17)
    CreateDynamicObject(19362,1859.50000000,-1734.80102539,5205.10009766,0.00000000,90.00000000,179.99450684); //object(archbrij_sfw) (17)
    CreateDynamicObject(19441,1858.00000000,-1706.69921875,5203.29980469,0.00000000,0.00000000,179.99450684); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19441,1858.00000000,-1701.90002441,5203.29980469,0.00000000,0.00000000,179.99450684); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19442,1854.74121094,-1710.22949219,5269.51171875,0.00000000,0.00000000,0.00000000); //object(cs_landbit_44_a) (1)
    CreateDynamicObject(19442,1855.19995117,-1707.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_landbit_44_a) (2)
    CreateDynamicObject(19442,1852.69995117,-1707.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_landbit_44_a) (3)
    CreateDynamicObject(19442,1850.09997559,-1707.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //object(cs_landbit_44_a) (4)
    CreateDynamicObject(19466,1851.40002441,-1707.50000000,5203.29980469,0.00000000,0.00000000,270.00000000); //object(lod_liberty06) (1)
    CreateDynamicObject(19466,1853.90002441,-1707.50000000,5203.29980469,0.00000000,0.00000000,270.00000000); //object(lod_liberty06) (2)
    CreateDynamicObject(19466,1856.40002441,-1707.50000000,5203.29980469,0.00000000,0.00000000,270.00000000); //object(lod_liberty06) (3)
    CreateDynamicObject(19466,1848.90002441,-1707.50000000,5203.29980469,0.00000000,0.00000000,270.00000000); //object(lod_liberty06) (4)
    CreateDynamicObject(19396,1858.00000000,-1704.29980469,5203.29980469,0.00000000,0.00000000,179.99450684); //object(land_37_sfw) (15)
    CreateDynamicObject(19368,1859.59997559,-1710.90002441,5203.29980469,0.00000000,0.00000000,89.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1866.00000000,-1710.90002441,5203.29980469,0.00000000,0.00000000,89.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(1569,1860.80004883,-1698.40002441,5201.60009766,0.00000000,0.00000000,0.00000000); //object(adam_v_door) (1)
    CreateDynamicObject(1569,1863.80004883,-1698.40002441,5201.60009766,0.00000000,0.00000000,179.79998779); //object(adam_v_door) (2)
    CreateDynamicObject(19370,1859.69921875,-1706.00000000,5200.79980469,0.00000000,0.00000000,270.00000000); //object(freight_sfw15) (2)
    CreateDynamicObject(19370,1864.79980469,-1706.00000000,5200.79980469,0.00000000,0.00000000,270.00000000); //object(freight_sfw15) (3)
    CreateDynamicObject(19435,1859.79980469,-1706.69921875,5202.50000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_58_a) (1)
    CreateDynamicObject(19435,1864.69995117,-1706.69995117,5202.50000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_58_a) (2)
    CreateDynamicObject(19443,1861.19921875,-1706.69921875,5200.70019531,0.00000000,0.00000000,0.00000000); //object(cs_landbit_61_a) (1)
    CreateDynamicObject(19370,1859.69921875,-1707.39941406,5200.79980469,0.00000000,0.00000000,270.00000000); //object(freight_sfw15) (5)
    CreateDynamicObject(19443,1863.29980469,-1706.69921875,5200.70019531,0.00000000,0.00000000,0.00000000); //object(cs_landbit_61_a) (2)
    CreateDynamicObject(19370,1864.80004883,-1707.40002441,5200.79980469,0.00000000,0.00000000,270.00000000); //object(freight_sfw15) (6)
    CreateDynamicObject(2008,1859.09960938,-1707.09960938,5201.77001953,0.00000000,0.00000000,0.00000000); //object(officedesk1) (1)
    CreateDynamicObject(2008,1864.09997559,-1707.09997559,5201.77001953,0.00000000,0.00000000,0.00000000); //object(officedesk1) (2)
    CreateDynamicObject(19462,1862.80004883,-1706.00000000,5205.50000000,0.00000000,0.00000000,270.00000000); //object(cs_mntdetail01) (19)
    CreateDynamicObject(19435,1859.79980469,-1706.69921875,5203.79980469,0.00000000,90.00000000,0.00000000); //object(cs_landbit_58_a) (1)
    CreateDynamicObject(19435,1863.29980469,-1706.69921875,5203.79980469,0.00000000,90.00000000,0.00000000); //object(cs_landbit_58_a) (1)
    CreateDynamicObject(19435,1866.79980469,-1706.69921875,5203.79980469,0.00000000,90.00000000,0.00000000); //object(cs_landbit_58_a) (1)
    CreateDynamicObject(2606,1863.80004883,-1707.19995117,5204.10009766,0.00000000,0.00000000,0.00000000); //object(cj_police_counter2) (1)
    CreateDynamicObject(2606,1863.79980469,-1707.19921875,5204.52978516,0.00000000,0.00000000,0.00000000); //object(cj_police_counter2) (2)
    CreateDynamicObject(2608,1861.19995117,-1707.40002441,5204.60009766,0.00000000,0.00000000,0.00000000); //object(polce_shelf) (1)
    CreateDynamicObject(2608,1859.31604004,-1707.40002441,5204.60009766,0.00000000,0.00000000,0.00000000); //object(polce_shelf) (2)
    CreateDynamicObject(16101,1863.30004883,-1707.40002441,5192.79980469,0.00000000,0.00000000,0.00000000); //object(des_windsockpole) (1)
    CreateDynamicObject(16101,1861.19995117,-1707.30004883,5192.79980469,0.00000000,0.00000000,0.00000000); //object(des_windsockpole) (2)
    CreateDynamicObject(16101,1858.30004883,-1707.40002441,5192.79980469,0.00000000,0.00000000,0.00000000); //object(des_windsockpole) (3)
    CreateDynamicObject(16101,1866.09997559,-1707.40002441,5192.79980469,0.00000000,0.00000000,0.00000000); //object(des_windsockpole) (4)
    CreateDynamicObject(1806,1860.00000000,-1708.40002441,5201.60009766,0.00000000,0.00000000,0.00000000); //object(med_office_chair) (1)
    CreateDynamicObject(1806,1865.00000000,-1708.40002441,5201.60009766,0.00000000,0.00000000,0.00000000); //object(med_office_chair) (2)
    CreateDynamicObject(1811,1865.90002441,-1700.90002441,5202.20019531,0.00000000,0.00000000,0.00000000); //object(med_din_chair_5) (1)
    CreateDynamicObject(1811,1865.90002441,-1701.69995117,5202.20019531,0.00000000,0.00000000,0.00000000); //object(med_din_chair_5) (2)
    CreateDynamicObject(1811,1865.90002441,-1702.50000000,5202.20019531,0.00000000,0.00000000,0.00000000); //object(med_din_chair_5) (3)
    CreateDynamicObject(1811,1865.89941406,-1703.29980469,5202.20019531,0.00000000,0.00000000,0.00000000); //object(med_din_chair_5) (4)
    CreateDynamicObject(1811,1848.89941406,-1706.50000000,5202.20019531,0.00000000,0.00000000,90.00000000); //object(med_din_chair_5) (5)
    CreateDynamicObject(1811,1851.40002441,-1706.50000000,5202.20019531,0.00000000,0.00000000,90.00000000); //object(med_din_chair_5) (6)
    CreateDynamicObject(1811,1854.00000000,-1706.50000000,5202.20019531,0.00000000,0.00000000,90.00000000); //object(med_din_chair_5) (7)
    CreateDynamicObject(1811,1856.59997559,-1706.50000000,5202.20019531,0.00000000,0.00000000,90.00000000); //object(med_din_chair_5) (8)
    CreateDynamicObject(2007,1855.40002441,-1727.19995117,5201.60009766,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1856.40002441,-1727.19995117,5201.60009766,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (11)
    CreateDynamicObject(2007,1857.40002441,-1727.19995117,5201.60009766,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (12)
    CreateDynamicObject(2007,1858.40002441,-1730.00000000,5201.60009766,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (13)
    CreateDynamicObject(2007,1858.40002441,-1727.19995117,5201.60009766,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (14)
    CreateDynamicObject(19370,1857.30004883,-1727.80004883,5202.70019531,0.00000000,0.00000000,270.00000000); //object(freight_sfw15) (5)
    CreateDynamicObject(2007,1857.40002441,-1728.40002441,5201.60009766,0.00000000,0.00000000,359.98901367); //object(filing_cab_nu01) (15)
    CreateDynamicObject(2007,1856.40002441,-1728.40002441,5201.60009766,0.00000000,0.00000000,359.98901367); //object(filing_cab_nu01) (16)
    CreateDynamicObject(2007,1855.40002441,-1728.40002441,5201.60009766,0.00000000,0.00000000,359.98901367); //object(filing_cab_nu01) (17)
    CreateDynamicObject(2007,1858.40002441,-1727.19995117,5203.00000000,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (18)
    CreateDynamicObject(2007,1857.40002441,-1727.19995117,5203.00000000,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (19)
    CreateDynamicObject(2007,1856.40002441,-1727.19995117,5203.00000000,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (20)
    CreateDynamicObject(2007,1855.40002441,-1727.19995117,5203.00000000,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (21)
    CreateDynamicObject(2007,1858.40002441,-1728.40002441,5203.00000000,0.00000000,0.00000000,359.98901367); //object(filing_cab_nu01) (22)
    CreateDynamicObject(2007,1857.40002441,-1728.40002441,5203.00000000,0.00000000,0.00000000,359.98901367); //object(filing_cab_nu01) (23)
    CreateDynamicObject(2007,1856.40002441,-1728.40002441,5203.00000000,0.00000000,0.00000000,359.98901367); //object(filing_cab_nu01) (24)
    CreateDynamicObject(2007,1855.40002441,-1728.40002441,5203.00000000,0.00000000,0.00000000,359.98901367); //object(filing_cab_nu01) (25)
    CreateDynamicObject(2007,1858.40002441,-1728.40002441,5201.60009766,0.00000000,0.00000000,359.98901367); //object(filing_cab_nu01) (26)
    CreateDynamicObject(2007,1857.40002441,-1730.00000000,5201.60009766,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (27)
    CreateDynamicObject(2007,1856.40002441,-1730.00000000,5201.60009766,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (28)
    CreateDynamicObject(2007,1855.40002441,-1730.00000000,5201.60009766,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (29)
    CreateDynamicObject(2007,1855.40002441,-1730.00000000,5203.00000000,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (30)
    CreateDynamicObject(2007,1856.40002441,-1730.00000000,5203.00000000,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (31)
    CreateDynamicObject(2007,1857.40002441,-1730.00000000,5203.00000000,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (32)
    CreateDynamicObject(2007,1858.39941406,-1730.00000000,5203.00000000,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (33)
    CreateDynamicObject(19370,1854.80004883,-1727.80102539,5202.70019531,0.00000000,0.00000000,270.00000000); //object(freight_sfw15) (5)
    CreateDynamicObject(2303,1865.90002441,-1724.00000000,5201.60009766,0.00000000,0.00000000,270.00000000); //object(cj_k3_wash_mac) (1)
    CreateDynamicObject(2303,1865.89941406,-1725.00000000,5201.60009766,0.00000000,0.00000000,270.00000000); //object(cj_k3_wash_mac) (2)
    CreateDynamicObject(2303,1865.90002441,-1726.00000000,5201.60009766,0.00000000,0.00000000,270.00000000); //object(cj_k3_wash_mac) (3)
    CreateDynamicObject(2303,1865.90002441,-1726.00000000,5202.60009766,0.00000000,0.00000000,270.00000000); //object(cj_k3_wash_mac) (4)
    CreateDynamicObject(2303,1865.89941406,-1725.00000000,5202.60009766,0.00000000,0.00000000,270.00000000); //object(cj_k3_wash_mac) (5)
    CreateDynamicObject(2303,1865.90002441,-1724.00000000,5202.60009766,0.00000000,0.00000000,270.00000000); //object(cj_k3_wash_mac) (6)
    CreateDynamicObject(1892,1862.59997559,-1699.09997559,5201.60009766,0.00000000,0.00000000,0.00000000); //object(security_gatsh) (1)
    CreateDynamicObject(1892,1861.00000000,-1699.09997559,5201.60009766,0.00000000,0.00000000,0.00000000); //object(security_gatsh) (2)
    CreateDynamicObject(2008,1856.69995117,-1721.69995117,5201.60009766,0.00000000,0.00000000,180.00000000); //object(officedesk1) (1)
    CreateDynamicObject(2008,1856.69995117,-1718.90002441,5201.60009766,0.00000000,0.00000000,179.99450684); //object(officedesk1) (1)
    CreateDynamicObject(1671,1864.50000000,-1719.00000000,5202.00000000,0.00000000,0.00000000,270.00000000); //object(swivelchair_a) (1)
    CreateDynamicObject(1671,1855.80004883,-1717.90002441,5202.00000000,0.00000000,0.00000000,0.00000000); //object(swivelchair_a) (2)
    CreateDynamicObject(2846,1864.40002441,-1724.40002441,5201.60009766,0.00000000,0.00000000,0.00000000); //object(gb_bedclothes05) (1)
    CreateDynamicObject(2713,1865.90002441,-1723.00000000,5201.70019531,0.00000000,0.00000000,0.00000000); //object(cj_bucket) (1)
    CreateDynamicObject(2008,1863.50000000,-1719.90002441,5201.60009766,0.00000000,0.00000000,89.99450684); //object(officedesk1) (1)
    CreateDynamicObject(2008,1863.50000000,-1716.59997559,5201.60009766,0.00000000,0.00000000,89.99450684); //object(officedesk1) (1)
    CreateDynamicObject(2008,1864.90002441,-1711.59997559,5201.60009766,0.00000000,0.00000000,0.00000000); //object(officedesk1) (1)
    CreateDynamicObject(1671,1855.79980469,-1720.69921875,5202.00000000,0.00000000,0.00000000,0.00000000); //object(swivelchair_a) (3)
    CreateDynamicObject(1671,1864.50000000,-1715.59997559,5202.00000000,0.00000000,0.00000000,270.00000000); //object(swivelchair_a) (4)
    CreateDynamicObject(1671,1858.80004883,-1712.50000000,5202.00000000,0.00000000,0.00000000,90.00000000); //object(swivelchair_a) (5)
    CreateDynamicObject(2186,1866.00000000,-1714.40002441,5201.60009766,0.00000000,0.00000000,270.00000000); //object(photocopier_1) (1)
    CreateDynamicObject(2008,1860.00000000,-1711.69995117,5201.60009766,0.00000000,0.00000000,269.99450684); //object(officedesk1) (1)
    CreateDynamicObject(2008,1860.00000000,-1715.59997559,5201.60009766,0.00000000,0.00000000,269.98901367); //object(officedesk1) (1)
    CreateDynamicObject(1671,1865.79980469,-1712.39941406,5202.00000000,0.00000000,0.00000000,179.99450684); //object(swivelchair_a) (6)
    CreateDynamicObject(1671,1858.90002441,-1716.59997559,5202.00000000,0.00000000,0.00000000,90.00000000); //object(swivelchair_a) (7)
    CreateDynamicObject(14401,1853.90002441,-1705.40002441,5205.50000000,0.00000000,0.00000000,180.00000000); //object(bench1) (1)
    CreateDynamicObject(19368,1859.09997559,-1723.09997559,5206.89990234,0.00000000,0.00000000,89.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(14782,1862.39941406,-1718.09960938,5206.20019531,0.00000000,0.00000000,0.00000000); //object(int3int_boxing30) (3)
    CreateDynamicObject(14401,1853.89941406,-1706.50000000,5205.50000000,0.00000000,0.00000000,179.99450684); //object(bench1) (4)
    CreateDynamicObject(19368,1862.30004883,-1723.09997559,5206.89990234,0.00000000,0.00000000,89.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(14782,1860.59960938,-1722.63964844,5206.20019531,0.00000000,0.00000000,179.99450684); //object(int3int_boxing30) (4)
    CreateDynamicObject(2007,1859.90002441,-1723.69995117,5205.20019531,0.00000000,0.00000000,359.99450684); //object(filing_cab_nu01) (33)
    CreateDynamicObject(2007,1860.90002441,-1723.69995117,5205.20019531,0.00000000,0.00000000,359.98901367); //object(filing_cab_nu01) (33)
    CreateDynamicObject(2007,1861.90002441,-1723.69995117,5205.20019531,0.00000000,0.00000000,359.98901367); //object(filing_cab_nu01) (33)
    CreateDynamicObject(2007,1862.90002441,-1723.69995117,5205.20019531,0.00000000,0.00000000,359.98901367); //object(filing_cab_nu01) (33)
    CreateDynamicObject(14791,1871.59997559,-1745.90002441,5206.20019531,0.00000000,0.00000000,0.00000000); //object(a_vgsgymboxa) (1)
    CreateDynamicObject(2290,1853.40002441,-1733.90002441,5205.20019531,0.00000000,0.00000000,270.00000000); //object(swk_couch_1) (1)
    CreateDynamicObject(2290,1850.30004883,-1735.90002441,5205.20019531,0.00000000,0.00000000,90.00000000); //object(swk_couch_1) (2)
    CreateDynamicObject(2315,1851.90002441,-1734.19995117,5205.20019531,0.00000000,0.00000000,270.00000000); //object(cj_tv_table4) (1)
    CreateDynamicObject(1754,1856.40002441,-1735.69995117,5205.20019531,0.00000000,0.00000000,219.99816895); //object(swank_single_1) (1)
    CreateDynamicObject(2964,1863.30004883,-1727.50000000,5205.20019531,0.00000000,0.00000000,270.00000000); //object(k_pooltablesm) (1)
    CreateDynamicObject(19441,1860.19995117,-1736.80004883,5210.29980469,0.00000000,0.00000000,89.99450684); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(19441,1861.00000000,-1736.80102539,5210.29980469,0.00000000,0.00000000,89.99450684); //object(cs_landbit_33_a) (4)
    CreateDynamicObject(18059,1847.30004883,-1739.30004883,5209.10009766,0.00000000,0.00000000,0.00000000); //object(tables) (1)
    CreateDynamicObject(18059,1847.30004883,-1744.19995117,5209.10009766,0.00000000,0.00000000,0.00000000); //object(tables) (2)
    CreateDynamicObject(18059,1853.59997559,-1749.19995117,5209.10009766,0.00000000,0.00000000,0.00000000); //object(tables) (3)
    CreateDynamicObject(18059,1869.30004883,-1749.19995117,5209.10009766,0.00000000,0.00000000,0.00000000); //object(tables) (4)
    CreateDynamicObject(1746,1850.40002441,-1732.50000000,5205.20019531,0.00000000,0.00000000,0.00000000); //object(swank_1_footstool) (1)
    CreateDynamicObject(2140,1855.00000000,-1728.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //object(cj_k3_tall_unit1) (1)
    CreateDynamicObject(2137,1851.15002441,-1728.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //object(cj_k3_low_unit3) (1)
    CreateDynamicObject(2135,1850.19921875,-1728.97949219,5205.20019531,0.00000000,0.00000000,90.00000000); //object(cj_k3_cooker) (1)
    CreateDynamicObject(2136,1853.04980469,-1727.99414062,5205.20019531,0.00000000,0.00000000,0.00000000); //object(cj_k3_sink) (1)
    CreateDynamicObject(2305,1850.19995117,-1728.00000000,5205.20019531,0.00000000,0.00000000,90.00000000); //object(cj_k3_c_unit) (1)
    CreateDynamicObject(2137,1852.10937500,-1728.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //object(cj_k3_low_unit3) (2)
    CreateDynamicObject(2137,1850.20605469,-1729.94995117,5205.20019531,0.00000000,0.00000000,90.00000000); //object(cj_k3_low_unit3) (3)
    CreateDynamicObject(2638,1848.80004883,-1739.19995117,5209.29980469,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair2) (1)
    CreateDynamicObject(2638,1852.00000000,-1739.19995117,5209.29980469,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair2) (2)
    CreateDynamicObject(2638,1852.00000000,-1744.19995117,5209.29980469,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair2) (3)
    CreateDynamicObject(2638,1848.80004883,-1744.19995117,5209.29980469,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair2) (4)
    CreateDynamicObject(2638,1848.90002441,-1749.19995117,5209.29980469,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair2) (5)
    CreateDynamicObject(2638,1852.00000000,-1749.30004883,5209.29980469,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair2) (6)
    CreateDynamicObject(2638,1855.09997559,-1749.40002441,5209.29980469,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair2) (7)
    CreateDynamicObject(2638,1858.30004883,-1749.40002441,5209.29980469,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair2) (8)
    CreateDynamicObject(2638,1861.40002441,-1749.40002441,5209.29980469,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair2) (9)
    CreateDynamicObject(2638,1864.59997559,-1749.40002441,5209.29980469,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair2) (10)
    CreateDynamicObject(2639,1867.40002441,-1749.40002441,5209.20019531,0.00000000,0.00000000,90.00000000); //object(cj_pizza_chair3) (1)
    CreateDynamicObject(2639,1846.00000000,-1744.19995117,5209.20019531,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair3) (2)
    CreateDynamicObject(2639,1854.90002441,-1739.30004883,5209.20019531,0.00000000,0.00000000,90.00000000); //object(cj_pizza_chair3) (3)
    CreateDynamicObject(2639,1845.90002441,-1739.09997559,5209.20019531,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair3) (4)
    CreateDynamicObject(2639,1854.79980469,-1744.19921875,5209.20019531,0.00000000,0.00000000,90.00000000); //object(cj_pizza_chair3) (5)
    CreateDynamicObject(2639,1864.90002441,-1745.40002441,5209.20019531,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair3) (6)
    CreateDynamicObject(18059,1872.40002441,-1745.40002441,5209.10009766,0.00000000,0.00000000,0.00000000); //object(tables) (7)
    CreateDynamicObject(18059,1872.40002441,-1741.09997559,5209.10009766,0.00000000,0.00000000,0.00000000); //object(tables) (6)
    CreateDynamicObject(19460,1868.00000000,-1752.09997559,5210.29980469,0.00000000,0.00000000,179.99450684); //object(cs_mntdetail01) (40)
    CreateDynamicObject(2639,1867.40002441,-1745.40002441,5209.20019531,0.00000000,0.00000000,90.00000000); //object(cj_pizza_chair3) (7)
    CreateDynamicObject(2639,1867.40002441,-1741.19995117,5209.20019531,0.00000000,0.00000000,90.00000000); //object(cj_pizza_chair3) (8)
    CreateDynamicObject(2639,1845.89941406,-1749.09960938,5209.20019531,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair3) (9)
    CreateDynamicObject(2639,1864.90002441,-1741.09997559,5209.20019531,0.00000000,0.00000000,270.00000000); //object(cj_pizza_chair3) (10)
    CreateDynamicObject(2357,1853.69995117,-1730.69995117,5205.60009766,0.00000000,0.00000000,0.00000000); //object(dunc_dinning) (1)
    CreateDynamicObject(2120,1855.09997559,-1731.80004883,5205.79980469,0.00000000,0.00000000,270.00000000); //object(med_din_chair_4) (1)
    CreateDynamicObject(2120,1854.19995117,-1731.80004883,5205.79980469,0.00000000,0.00000000,270.00000000); //object(med_din_chair_4) (2)
    CreateDynamicObject(2120,1853.30004883,-1731.80004883,5205.79980469,0.00000000,0.00000000,270.00000000); //object(med_din_chair_4) (3)
    CreateDynamicObject(2120,1852.40002441,-1731.80004883,5205.79980469,0.00000000,0.00000000,270.00000000); //object(med_din_chair_4) (4)
    CreateDynamicObject(2120,1852.40002441,-1729.59997559,5205.79980469,0.00000000,0.00000000,90.00000000); //object(med_din_chair_4) (5)
    CreateDynamicObject(2120,1853.30004883,-1729.59997559,5205.79980469,0.00000000,0.00000000,90.00000000); //object(med_din_chair_4) (6)
    CreateDynamicObject(2120,1854.19995117,-1729.59997559,5205.79980469,0.00000000,0.00000000,90.00000000); //object(med_din_chair_4) (7)
    CreateDynamicObject(2120,1855.09997559,-1729.59997559,5205.79980469,0.00000000,0.00000000,90.00000000); //object(med_din_chair_4) (8)
    CreateDynamicObject(2441,1869.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (1)
    CreateDynamicObject(2441,1868.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (2)
    CreateDynamicObject(2441,1867.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (3)
    CreateDynamicObject(2441,1866.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (4)
    CreateDynamicObject(2441,1865.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (5)
    CreateDynamicObject(2441,1864.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (6)
    CreateDynamicObject(2441,1863.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (7)
    CreateDynamicObject(2441,1862.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (8)
    CreateDynamicObject(2441,1861.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (9)
    CreateDynamicObject(2441,1860.19921875,-1732.89941406,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (11)
    CreateDynamicObject(2441,1859.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (12)
    CreateDynamicObject(2441,1858.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (13)
    CreateDynamicObject(2441,1857.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (14)
    CreateDynamicObject(2441,1856.30004883,-1732.90002441,5212.29980469,0.00000000,180.00000000,0.00000000); //object(cj_ff_conter_4) (15)
    CreateDynamicObject(19368,1854.18395996,-1735.19995117,5210.29980469,0.00000000,0.00000000,89.99450684); //object(sboxbld4_sfw84) (50)
    CreateDynamicObject(2441,1856.19921875,-1732.89941406,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_4) (17)
    CreateDynamicObject(2441,1857.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (18)
    CreateDynamicObject(2441,1858.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (19)
    CreateDynamicObject(2441,1859.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (20)
    CreateDynamicObject(2441,1860.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (21)
    CreateDynamicObject(2441,1861.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (22)
    CreateDynamicObject(2441,1862.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (23)
    CreateDynamicObject(2441,1863.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (24)
    CreateDynamicObject(2441,1864.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (25)
    CreateDynamicObject(2441,1865.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (26)
    CreateDynamicObject(2441,1866.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (27)
    CreateDynamicObject(2441,1867.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (28)
    CreateDynamicObject(2441,1868.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (29)
    CreateDynamicObject(2441,1869.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //object(cj_ff_conter_4) (30)
    fence[32] = CreateObject(19304,1836.19921875,-1726.89941406,5209.29980469,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (19)
    fence[33] = CreateObject(19304,1864.50000000,-1733.09997559,5210.70019531,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (19)
    fence[34] = CreateObject(19304,1861.00000000,-1733.09997559,5210.70019531,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (19)
    fence[35] = CreateObject(19304,1857.50000000,-1733.09997559,5210.70019531,0.00000000,0.00000000,0.00000000); //object(vgstwires22_lvs) (19)
    CreateDynamicObject(2137,1856.30004883,-1728.09997559,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_k3_low_unit3) (2)
    CreateDynamicObject(2140,1858.23999023,-1728.09997559,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_k3_tall_unit1) (1)
    CreateDynamicObject(2137,1857.27001953,-1728.09997559,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_k3_low_unit3) (2)
    CreateDynamicObject(2140,1859.19995117,-1728.09997559,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_k3_tall_unit1) (1)
    CreateDynamicObject(2136,1860.19995117,-1728.09997559,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_k3_sink) (1)
    CreateDynamicObject(2135,1864.09997559,-1728.09997559,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_k3_cooker) (1)
    CreateDynamicObject(2137,1862.16003418,-1728.10705566,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_k3_low_unit3) (2)
    CreateDynamicObject(2137,1863.11999512,-1728.10705566,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_k3_low_unit3) (2)
    CreateDynamicObject(2627,1865.19995117,-1742.90002441,5205.10009766,0.00000000,0.00000000,0.00000000); //object(gym_treadmill) (1)
    CreateDynamicObject(2627,1863.90002441,-1742.90002441,5205.10009766,0.00000000,0.00000000,0.00000000); //object(gym_treadmill) (2)
    CreateDynamicObject(2627,1862.59997559,-1742.90002441,5205.10009766,0.00000000,0.00000000,0.00000000); //object(gym_treadmill) (3)
    CreateDynamicObject(2628,1864.90002441,-1749.50000000,5205.10009766,0.00000000,0.00000000,230.00000000); //object(gym_bench2) (1)
    CreateDynamicObject(2628,1863.19995117,-1749.90002441,5205.10009766,0.00000000,0.00000000,229.99877930); //object(gym_bench2) (2)
    CreateDynamicObject(2630,1858.80004883,-1749.90002441,5205.10009766,0.00000000,0.00000000,150.00000000); //object(gym_bike) (1)
    CreateDynamicObject(2630,1857.40002441,-1749.69995117,5205.10009766,0.00000000,0.00000000,149.99633789); //object(gym_bike) (2)
    CreateDynamicObject(2630,1859.09997559,-1747.80004883,5205.10009766,0.00000000,0.00000000,149.99633789); //object(gym_bike) (3)
    CreateDynamicObject(2416,1863.09997559,-1730.50000000,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_disp) (1)
    CreateDynamicObject(2416,1860.80004883,-1730.50000000,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_disp) (2)
    CreateDynamicObject(2451,1865.40002441,-1728.19995117,5208.70019531,0.00000000,0.00000000,0.00000000); //object(cj_ff_worktop_3) (1)
    CreateDynamicObject(1330,1869.09997559,-1737.09997559,5209.20019531,0.00000000,0.00000000,0.00000000); //object(binnt14_la) (1)
    CreateDynamicObject(1330,1861.00000000,-1742.19995117,5209.20019531,0.00000000,0.00000000,0.00000000); //object(binnt14_la) (2)
    CreateDynamicObject(2994,1859.09997559,-1744.09997559,5209.20019531,0.00000000,0.00000000,0.00000000); //object(kmb_trolley) (2)
    CreateDynamicObject(2994,1859.09997559,-1742.59997559,5209.20019531,0.00000000,0.00000000,0.00000000); //object(kmb_trolley) (3)
    CreateDynamicObject(14401,1857.80004883,-1760.59997559,5205.39990234,0.00000000,0.00000000,359.99450684); //object(bench1) (4)
    CreateDynamicObject(14401,1857.80004883,-1762.50000000,5205.39990234,0.00000000,0.00000000,359.98901367); //object(bench1) (4)
    CreateDynamicObject(2700,1849.30004883,-1750.59997559,5207.29980469,0.00000000,0.00000000,90.00000000); //object(cj_sex_tv2) (1)
    CreateDynamicObject(1811,1848.80004883,-1708.69995117,5202.20019531,0.00000000,0.00000000,270.00000000); //object(med_din_chair_5) (5)
    CreateDynamicObject(1811,1851.40002441,-1708.69995117,5202.20019531,0.00000000,0.00000000,270.00000000); //object(med_din_chair_5) (5)
    CreateDynamicObject(1811,1854.00000000,-1708.69995117,5202.20019531,0.00000000,0.00000000,270.00000000); //object(med_din_chair_5) (5)
    CreateDynamicObject(1811,1856.59997559,-1708.80004883,5202.20019531,0.00000000,0.00000000,270.00000000); //object(med_din_chair_5) (5)
    CreateDynamicObject(19435,1856.00000000,-1707.40002441,5202.60009766,0.00000000,90.00000000,0.00000000); //object(cs_landbit_58_a) (1)
    CreateDynamicObject(19435,1852.50000000,-1707.40002441,5202.60009766,0.00000000,90.00000000,0.00000000); //object(cs_landbit_58_a) (1)
    CreateDynamicObject(19435,1849.00000000,-1707.40002441,5202.60009766,0.00000000,90.00000000,0.00000000); //object(cs_landbit_58_a) (1)
    CreateDynamicObject(1800,1842.69995117,-1711.30004883,5201.60009766,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (1)
    CreateDynamicObject(1800,1839.50000000,-1711.30004883,5201.60009766,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (2)
    CreateDynamicObject(1800,1836.40002441,-1711.19995117,5201.60009766,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (3)
    CreateDynamicObject(1800,1833.09997559,-1711.19995117,5201.60009766,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (4)
    CreateDynamicObject(1800,1829.90002441,-1711.19995117,5201.60009766,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (5)
    CreateDynamicObject(1800,1826.69995117,-1711.19995117,5201.60009766,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (6)
    CreateDynamicObject(1800,1826.69995117,-1711.19995117,5205.20019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (7)
    CreateDynamicObject(1800,1829.90002441,-1711.19995117,5205.20019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (8)
    CreateDynamicObject(1800,1833.09997559,-1711.19995117,5205.20019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (9)
    CreateDynamicObject(1800,1836.30004883,-1711.19995117,5205.20019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (10)
    CreateDynamicObject(1800,1839.50000000,-1711.19995117,5205.20019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (11)
    CreateDynamicObject(1800,1842.69995117,-1711.19995117,5205.20019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (12)
    CreateDynamicObject(1800,1842.69995117,-1711.19995117,5208.70019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (13)
    CreateDynamicObject(1800,1839.50000000,-1711.30004883,5208.70019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (14)
    CreateDynamicObject(1800,1836.30004883,-1711.19995117,5208.70019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (15)
    CreateDynamicObject(1800,1833.09997559,-1711.19995117,5208.70019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (16)
    CreateDynamicObject(1800,1829.90002441,-1711.19995117,5208.70019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (17)
    CreateDynamicObject(1800,1826.69995117,-1711.19995117,5208.70019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (18)
    CreateDynamicObject(1800,1826.69995117,-1737.00000000,5208.70019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (19)
    CreateDynamicObject(1800,1829.90002441,-1737.00000000,5208.70019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (20)
    CreateDynamicObject(1800,1833.09997559,-1737.00000000,5208.70019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (21)
    CreateDynamicObject(1800,1836.30004883,-1737.00000000,5208.70019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (22)
    CreateDynamicObject(1800,1839.50000000,-1737.00000000,5208.70019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (23)
    CreateDynamicObject(1800,1842.69995117,-1737.00000000,5208.70019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (24)
    CreateDynamicObject(1800,1842.69995117,-1737.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (25)
    CreateDynamicObject(1800,1839.50000000,-1737.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (26)
    CreateDynamicObject(1800,1836.30004883,-1737.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (27)
    CreateDynamicObject(1800,1833.09997559,-1737.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (28)
    CreateDynamicObject(1800,1829.90002441,-1737.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (29)
    CreateDynamicObject(1800,1826.69995117,-1737.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (30)
    CreateDynamicObject(1800,1826.69995117,-1737.00000000,5201.60009766,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (31)
    CreateDynamicObject(1800,1829.90002441,-1737.00000000,5201.60009766,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (32)
    CreateDynamicObject(1800,1833.09997559,-1737.00000000,5201.60009766,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (33)
    CreateDynamicObject(1800,1836.30004883,-1737.00000000,5201.60009766,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (34)
    CreateDynamicObject(1800,1839.50000000,-1737.00000000,5201.60009766,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (35)
    CreateDynamicObject(1800,1842.69995117,-1737.00000000,5201.60009766,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (36)
    CreateDynamicObject(2000,1826.69995117,-1711.30004883,5208.70019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (1)
    CreateDynamicObject(2000,1829.90002441,-1711.40002441,5208.70019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (2)
    CreateDynamicObject(2000,1833.09997559,-1711.40002441,5208.70019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (3)
    CreateDynamicObject(2000,1836.30004883,-1711.40002441,5208.70019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (4)
    CreateDynamicObject(2000,1839.50000000,-1711.40002441,5208.70019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (5)
    CreateDynamicObject(2000,1842.69995117,-1711.40002441,5208.70019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (6)
    CreateDynamicObject(2000,1842.69995117,-1711.40002441,5205.20019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (7)
    CreateDynamicObject(2000,1839.50000000,-1711.40002441,5205.20019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (8)
    CreateDynamicObject(2000,1836.30004883,-1711.40002441,5205.20019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (9)
    CreateDynamicObject(2000,1833.09997559,-1711.40002441,5205.20019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (10)
    CreateDynamicObject(2000,1829.90002441,-1711.40002441,5205.20019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (11)
    CreateDynamicObject(2000,1826.69995117,-1711.40002441,5205.20019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (12)
    CreateDynamicObject(2000,1826.69995117,-1711.40002441,5201.60009766,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (13)
    CreateDynamicObject(2000,1829.90002441,-1711.50000000,5201.60009766,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (14)
    CreateDynamicObject(2000,1833.09997559,-1711.59997559,5201.60009766,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (15)
    CreateDynamicObject(2000,1836.40002441,-1711.69995117,5201.60009766,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (16)
    CreateDynamicObject(2000,1839.50000000,-1711.80004883,5201.60009766,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (17)
    CreateDynamicObject(2000,1842.69995117,-1732.19995117,5201.60009766,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (18)
    CreateDynamicObject(2000,1842.69921875,-1711.89941406,5201.60009766,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (19)
    CreateDynamicObject(2000,1839.50000000,-1732.09997559,5201.60009766,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (20)
    CreateDynamicObject(2000,1836.30004883,-1732.09997559,5201.60009766,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (21)
    CreateDynamicObject(2000,1833.09997559,-1732.09997559,5201.60009766,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (22)
    CreateDynamicObject(2000,1829.90002441,-1732.09997559,5201.60009766,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (23)
    CreateDynamicObject(2000,1826.69995117,-1732.09997559,5201.60009766,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (24)
    CreateDynamicObject(2000,1826.69995117,-1732.09997559,5205.20019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (25)
    CreateDynamicObject(2000,1829.90002441,-1732.09997559,5205.20019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (26)
    CreateDynamicObject(2000,1833.09997559,-1732.00000000,5205.20019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (27)
    CreateDynamicObject(2000,1836.30004883,-1732.00000000,5205.20019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (28)
    CreateDynamicObject(2000,1839.50000000,-1732.00000000,5205.20019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (29)
    CreateDynamicObject(2000,1842.69995117,-1732.00000000,5205.20019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (30)
    CreateDynamicObject(2000,1842.69995117,-1732.00000000,5208.70019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (32)
    CreateDynamicObject(2000,1839.50000000,-1732.00000000,5208.70019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (33)
    CreateDynamicObject(2000,1836.30004883,-1732.00000000,5208.70019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (34)
    CreateDynamicObject(2000,1833.09997559,-1732.00000000,5208.70019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (35)
    CreateDynamicObject(2000,1829.90002441,-1732.00000000,5208.70019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (36)
    CreateDynamicObject(2000,1826.69995117,-1732.00000000,5208.70019531,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu) (37)
    CreateDynamicObject(1886,1857.40002441,-1713.69995117,5205.10009766,9.75000000,0.00000000,220.50000000); //object(shop_sec_cam) (1)
    CreateDynamicObject(1886,1858.39941406,-1698.79980469,5205.00000000,9.74487305,0.00000000,20.49499512); //object(shop_sec_cam) (2)
    CreateDynamicObject(1886,1848.00000000,-1701.79980469,5205.10009766,9.74487305,0.00000000,20.49499512); //object(shop_sec_cam) (3)
    CreateDynamicObject(1886,1852.59997559,-1715.00000000,5205.00000000,9.74487305,0.00000000,320.49560547); //object(shop_sec_cam) (4)
    CreateDynamicObject(1886,1865.69995117,-1723.09997559,5205.10009766,9.74487305,0.00000000,270.49316406); //object(shop_sec_cam) (5)
    CreateDynamicObject(1886,1846.59997559,-1728.69995117,5205.00000000,13.99490356,0.00000000,236.48889160); //object(shop_sec_cam) (6)
    CreateDynamicObject(1886,1846.59997559,-1728.69995117,5208.50000000,13.99108887,0.00000000,236.48620605); //object(shop_sec_cam) (8)
    CreateDynamicObject(1886,1846.59997559,-1728.69995117,5212.10009766,13.99108887,0.00000000,236.48620605); //object(shop_sec_cam) (9)
    CreateDynamicObject(1886,1865.40002441,-1742.30004883,5208.60009766,13.99108887,0.00000000,308.73620605); //object(shop_sec_cam) (10)
    CreateDynamicObject(1886,1846.19921875,-1750.39941406,5208.60009766,13.99108887,0.00000000,128.73229980); //object(shop_sec_cam) (11)
    CreateDynamicObject(1886,1869.09997559,-1733.80004883,5212.20019531,13.99108887,0.00000000,294.73229980); //object(shop_sec_cam) (12)
    CreateDynamicObject(1886,1866.79980469,-1742.19921875,5208.60009766,13.99108887,0.00000000,46.73034668); //object(shop_sec_cam) (13)
    CreateDynamicObject(1886,1867.50000000,-1750.59997559,5212.10009766,13.99108887,0.00000000,224.73022461); //object(shop_sec_cam) (14)
    CreateDynamicObject(1886,1845.80004883,-1750.59997559,5212.20019531,13.99108887,0.00000000,146.72534180); //object(shop_sec_cam) (15)

    //Doors
    door[0] = CreateObject(1495,1849.32995605,-1714.31005859,5201.54003906,0.00000000,0.00000000,0.00000000); //object(gen_doorext01) (2)
    door[1] = CreateObject(1495,1847.31994629,-1722.56994629,5201.54003906,0.00000000,0.00000000,90.00000000); //object(gen_doorext01) (3)
    door[2] = CreateObject(1495,1854.01953125,-1726.27343750,5201.54003906,0.00000000,0.00000000,90.00000000); //object(gen_doorext01) (4)
    door[3] = CreateObject(1495,1862.02246094,-1710.91992188,5201.54003906,0.00000000,0.00000000,0.00000000); //object(gen_doorext01) (4)

    //Cells
    cell[0] = CreateObject(19303,1827.80004883,-1729.19995117,5202.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[1] = CreateObject(19303,1831.00000000,-1729.19995117,5202.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (2)
    cell[2] = CreateObject(19303,1834.19995117,-1729.19995117,5202.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (3)
    cell[3] = CreateObject(19303,1837.40002441,-1729.19995117,5202.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (4)
    cell[4] = CreateObject(19303,1840.59997559,-1729.19995117,5202.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (5)
    cell[5] = CreateObject(19303,1827.80004883,-1729.19995117,5206.39990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (6)
    cell[6] = CreateObject(19303,1831.00000000,-1729.19995117,5206.39990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (7)
    cell[7] = CreateObject(19303,1834.19995117,-1729.19995117,5206.39990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (8)
    cell[8] = CreateObject(19303,1837.40002441,-1729.19995117,5206.39990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (9)
    cell[9] = CreateObject(19303,1840.59997559,-1729.19995117,5206.39990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (10)
    cell[10] = CreateObject(19303,1843.80004883,-1729.19995117,5206.39990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (11)
    cell[11] = CreateObject(19303,1843.80004883,-1729.19995117,5202.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (12)
    cell[12] = CreateObject(19303,1843.80004883,-1729.19995117,5209.89990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (13)
    cell[13] = CreateObject(19303,1840.59997559,-1729.19995117,5209.89990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (14)
    cell[14] = CreateObject(19303,1837.40002441,-1729.19995117,5209.89990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (15)
    cell[15] = CreateObject(19303,1834.19995117,-1729.19995117,5209.89990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (16)
    cell[16] = CreateObject(19303,1831.00000000,-1729.19995117,5209.89990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (17)
    cell[17] = CreateObject(19303,1827.80004883,-1729.19995117,5209.89990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (18)
    cell[18] = CreateObject(19303,1827.80004883,-1714.30004883,5202.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[19] = CreateObject(19303,1831.00000000,-1714.30004883,5202.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[20] = CreateObject(19303,1834.19995117,-1714.30004883,5202.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[21] = CreateObject(19303,1837.40002441,-1714.30004883,5202.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[22] = CreateObject(19303,1840.59997559,-1714.30004883,5202.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[23] = CreateObject(19303,1843.80004883,-1714.30004883,5202.79980469,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[24] = CreateObject(19303,1843.80004883,-1714.30004883,5206.39990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[25] = CreateObject(19303,1840.59997559,-1714.30004883,5206.39990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[26] = CreateObject(19303,1837.40002441,-1714.30004883,5206.39990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[27] = CreateObject(19303,1834.19995117,-1714.30004883,5206.39990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[28] = CreateObject(19303,1831.00000000,-1714.30004883,5206.39990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[29] = CreateObject(19303,1827.80004883,-1714.30004883,5206.39990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[30] = CreateObject(19303,1827.80004883,-1714.30004883,5209.89990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[31] = CreateObject(19303,1831.00000000,-1714.30004883,5209.89990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[32] = CreateObject(19303,1834.19995117,-1714.30004883,5209.89990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[33] = CreateObject(19303,1837.40002441,-1714.30004883,5209.89990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[34] = CreateObject(19303,1840.59997559,-1714.30004883,5209.89990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)
    cell[35] = CreateObject(19303,1843.80004883,-1714.30004883,5209.89990234,0.00000000,0.00000000,0.00000000); //object(vgstwires21_lvs) (1)

     //SetObjectMaterial - Stairs
    for(new i=0; i<sizeof(stair); i++){
    	SetObjectMaterial(stair[i], 0, 19377, "all_walls", "la_carp3", 0);
    }

	new Stringg1 = CreateObject(19479, 1787.6879, -1590.8643, 14.7396, 0.0000, 0.0000, -49.6686);
	SetObjectMaterialText(Stringg1, "LOS SANTOS", 0, 120, "Arial Black", 50, 0, -1, 0, 1);
	new Stringg2 = CreateObject(19479, 1795.2635, -1584.4250, 14.7497, -0.2000, 0.0000, -49.6952);
	SetObjectMaterialText(Stringg2, "STATE PRISON", 0, 120, "Arial Black", 50, 0, -1, 0, 1);
	new Stringg3 = CreateObject(19481, 1802.2625, -1531.7999, 15.0590, 0.2000, 0.0000, 86.1961);
	SetObjectMaterialText(Stringg3, "LOS SANTOS", 0, 120, "arial black", 50, 0, -1, 0, 1);
	new Stringg4fix = CreateObject(19481, 1780.4577, -1530.2548, 15.1141, 0.0000, 0.0000, 86.6529);
	SetObjectMaterialText(Stringg4fix, "STATE PRISON", 0, 120, "arial black", 50, 0, -1, 0, 1);
	//DMV
	CreateDynamicPickup(1239, 1, 1490.1873, 1305.3954, 1092.8691, 0);
	CreateStreamed3DTextLabel("'/taketest'\nUntuk mendaftar Tes mengemudi", 0xFF0000FF, 1490.1873, 1305.3954, 1092.8691, 5.0, 0, 0);
	CreateDynamicPickup(1239, 1, 1491.1862, 1307.7758, 1092.9943);
	CreateStreamed3DTextLabel("'/renewlic'\nUntuk Memperpanjang SIM", 0xFF0000FF, 1491.1862, 1307.7758, 1092.9943, 10.0, 0, 0);
	//SAMD Pickups
	CreateDynamicPickup(1241, 23, -201.5379,-1741.6301,675.7687); // /buymedicine
	CreateDynamicPickup(1239, 23, -196.3475,-1748.7661,675.7687); // /samd
	//BANK Pickup
	CreateDynamic3DTextLabel("Bank Point", COLOR_WHITE,1428.6332, -986.0527, 996.1050+0.6,3.0);
	CreateDynamicPickup(1274, 23, 1428.6332,-986.0527,996.1050); // Bank Point
	//SAGS Pickup
	CreateDynamicPickup(1240, 23, 914.7402,1478.1088,1048.2020, -1); // SAGS Locker
	for(new d = 0; d < sizeof(CarDealershipInfo); d++)
	{
		if(CarDealershipInfo[d][cdEntranceX] != 0.0 && CarDealershipInfo[d][cdEntranceY] != 0.0)
		{
			CarDealershipInfo[d][cdPickupID] = CreateDynamicPickup(1239, 1, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]);
			if(CarDealershipInfo[d][cdOwned])
			{
	            format(String, sizeof(String),"[id:%d]\n{FFFF00}%s\n{FFFFFF}Owner: {00FF00}%s",d, CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdOwner]);
	            CarDealershipInfo[d][cdTextLabel] = CreateDynamic3DTextLabel(String,COLOR_TWAQUA,CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]+0.75,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
			}
			else
			{
	            format(String, sizeof(String),"[id:%d]\n{00FF00}this dealership for sale\n{FFFFFF}Price: {00FF00}$%s\n{00FF00}use '/buydealership' to buy this Dealer",d, FormatMoney(CarDealershipInfo[d][cdPrice]));
	            CarDealershipInfo[d][cdTextLabel] = CreateDynamic3DTextLabel(String,COLOR_TWAQUA,CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]+0.75,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
			}
		}
		for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
	    {
			if (CarDealershipInfo[d][cdVehicleModel][v] != 0)
			{
		        new carcreated = AddStaticVehicleEx(CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawnX][v], CarDealershipInfo[d][cdVehicleSpawnY][v], CarDealershipInfo[d][cdVehicleSpawnZ][v], CarDealershipInfo[d][cdVehicleSpawnAngle][v], -1, -1, 0);
		        format(String, sizeof(String), "[id:%d]\n{00FFFF}%s\n{FFFF00}$%s\n{FFFF00}Fuel Capacity: {FFFFFF}100.0\n{FFFF00}Fuel Total: {FFFFFF}100.0",v, GetVehicleName(carcreated), FormatMoney(CarDealershipInfo[d][cdVehicleCost][v]));
                CarDealershipInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(String,COLOR_ARWIN,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
                CarDealershipInfo[d][cdVehicleId][v] = carcreated;
                SetVehicleNumberPlate(carcreated,"{00FFFF}DEALER");
			}
		}
	}
	// Pickups
	CreateDynamicPickup(1239, 21, 252.5994, 117.4798, 1003.3950, -1);
	CreateDynamic3DTextLabel("Gunakan {FF6347}'/payticket'\n{FFFF00}Untuk membayar Surat Tilang", COLOR_YELLOW,252.5994, 117.4798, 1003.3950,10.0);

	CreateDynamicPickup(2912, 23, -612.4617, 16.3359, 182.6946, -1); // comp
	CreateDynamicPickup(1271, 23, 2197.4370, -2661.0859, 13.8646, -1); // mats
	CreateDynamicPickup(1239, 23, 377.9064,-1887.2205,7.8359, -1); // buybait
	CreateDynamicPickup(1239, 23, 236.3692, 109.5336, 1003.0551, -1); // /paymytickets point
	CreateDynamicPickup(1239, 23, 261.7639, 108.6571, 1004.6200, -1); //LSPD
    CreateDynamicPickup(1247, 23, 1528.4888,-1677.7632,5.8906, -1); // LSPD Arrest
    CreateDynamicPickup(1247, 23, 1566.4901,-1653.9076,28.3956, -1); // LSPD Arrest
    CreateDynamicPickup(1247, 23, 680.2208,-1546.9856,14.8516, -1); // LSPD Arrest
    CreateDynamicPickup(1247, 23, 1772.0134,-1548.0470,9.90700, -1); // PRISON STATE Arrest
    CreateDynamicPickup(1247, 23, 1991.7953,-2321.2532,13.5469, -1); // Deliver Arrest
	CreateDynamicPickup(1240, 23, 1142.4733,-1326.3633,13.6259, -1);// Deliverpt
	CreateDynamicPickup(1240, 23, 2027.0599,-1410.6870,16.9922, -1);// Deliverpt
	CreateDynamicPickup(1240, 23, 1227.2339,306.4730,19.7028, -1);// Deliverpt
	CreateDynamicPickup(1240, 23, -339.2989,1055.8138,19.7392, -1);// Deliverpt
	CreateDynamicPickup(1240, 23, -2695.5725,639.4147,14.4531, -1); // Deliverpt
	CreateDynamicPickup(1240, 23, 1165.1564,-1368.8240,26.6502, -1);// Deliverpt
	CreateDynamicPickup(1240, 23, 2024.5742,-1382.7844,48.3359, -1);// Deliverpt
	CreateDynamicPickup(1240, 23, 1233.3384,316.4022,24.7578, -1);// Deliverpt
	CreateDynamicPickup(1240, 23, -334.1560,1051.4434,26.0125, -1);// Deliverpt
	CreateDynamicPickup(1240, 23, -2656.0339,615.2567,66.0938, -1);// Deliverpt

	// Set in virtual worlds
	CreateDynamicPickup(1239, 23, 3327.232757, 306.817230, 999.148437, -1); // buybait
	//FACTION EQUIPMENT
	new equipmentt1[1024], equipmentt2[1024], equipmentt3[1024];
	format(equipmentt1, sizeof(equipmentt1), "'/sags'\nTo open your locker\nEquipment Stock: %d", EquipmentStock);
	format(equipmentt2, sizeof(equipmentt2), "'/sapd'\nTo open your locker\nEquipment Stock: %d", EquipmentStock);
	format(equipmentt3, sizeof(equipmentt3), "'/samd'\nTo open your locker\n'/takemedicine'\nto take medicine\nEquipment Stock: %d", EquipmentStock);
	equipment1 = CreateDynamic3DTextLabel(equipmentt1, COLOR_WHITE, 768.8376, 1466.3964, -74.1773, 5.0); // SAGS Locker
	CreateDynamicPickup(1239, 23, 768.8376, 1466.3964, -74.1773, -1); // SAGS Locker
	equipment2 = CreateDynamic3DTextLabel(equipmentt2, COLOR_WHITE, 261.7639, 108.6571, 1004.6200+0.6, 5.0);///SAPD Locker
	CreateDynamicPickup(1239, 23, 261.7639, 108.6571, 1004.6200+0.6, -1); // SAPD Locker
	equipment3 = CreateDynamic3DTextLabel(equipmentt3, COLOR_WHITE, -196.3475, -1748.7661, 675.7687+0.6, 5.0);///SAMD Locker
 	//Cacing
 	new ikan[128], pot[128], comp[256], plantt[128], kayu[256];
 	CreateDynamic3DTextLabel("[Stock Component]\n'/missions' untuk mengangkut barang", COLOR_YELLOW, 19.5219, 867.7570, 20.3990 ,10.0);

 	//POT AND CRACK
 	CreateDynamicPickup(1239, 23, 316.9504,1121.8683,1083.8828, -1); // DRUG HOUSE
 	format(pot, sizeof(pot), "Illegal Job\n{FFFF00}'/join' untuk menjadi Drug Dealer\nPot Available : %d\n'/getpot' untuk membeli Pot\nCrack Available : %d\n'/getcrack' untuk membeli Crack", stockpot, stockcrack);
 	pickupPot = CreateDynamic3DTextLabel(pot, COLOR_RED, 316.9504,1121.8683,1083.8828, 10);

	CreateDynamicPickup(1239, 23, 854.6003, -605.2056, 18.4219, -1); // komponen
 	format(comp, sizeof(comp), "[Component Storage]\nComponent Available : %d\nComponent Price : $0.50\n'/buycomponent' untuk membeli Komponen",stockcomp);
    pickupComp = CreateDynamic3DTextLabel(comp, COLOR_YELLOW, 854.6003, -605.2056, 18.4219, 10);

	//STOCK TANAMAN
	CreateDynamicPickup(2912, 23, -377.4544, -1449.8357, 25.7266, -1); // komponen
	format(plantt, sizeof(plantt), "[Plant Storage]\nPlant Available : %d.", stockplant);
	pickupPlant = CreateDynamic3DTextLabel(plantt, COLOR_YELLOW, -377.4544, -1449.8357, 25.7266, 10);
    //IKAN
    format(String, sizeof(String), "[Sellfish Point]\n'/sellallfish' untuk menjual Ikan");
 	CreateDynamic3DTextLabel(String, COLOR_WHITE,1778.7888,-1720.7598,13.5469,10.0);
 	//SELLFISH dan Trucker
	CreateDynamicPickup(2912, 23, 1768.7480,-1691.6910,13.4293, -1); // KOTAK OBJECT
    format(ikan, sizeof(ikan), "[Fish Storage]\nFish Available : %d\n '/missions' untuk mengangkut barang", StockIkan);
    pickupML = CreateDynamic3DTextLabel(ikan, COLOR_WHITE, 1768.7480,-1691.6910,13.4293, 10);
    CreateDynamicPickup(2912, 23, 1769.2200,-1700.5023,13.4871, -1); // KOTAK OBJECT2
    format(ikan, sizeof(ikan), "[Fish Storage]\nFish Available : %d\n '/missions' untuk mengangkut barang", StockIkan);
 	pickupML2 = CreateDynamic3DTextLabel(ikan, COLOR_WHITE, 1769.2200,-1700.5023,13.4871, 10);
	CreateDynamicPickup(1239, 23, 1778.7888,-1720.7598,13.5469, -1); // sellfish point pusat
	//Lumber
	CreateDynamicPickup(2912, 23, -1446.9056,-1544.0217,101.7685, -1); // KOTAK OBJECT
	format(String, sizeof(String), "[Wood Storage]\nWood Available: %d\n'/missions' untuk mengangkut barang", cutt);
	Wood3DText = CreateDynamic3DTextLabel(kayu, COLOR_WHITE, -1446.9056,-1544.0217,101.7685, 10);
	CreateDynamicPickup(1239, 23, -1449.5015,-1530.6028,101.7578, -1); // JOIN FARMER
	CreateDynamic3DTextLabel("[Lumberjack Store]\nType '/buychainsaw' Untuk membeli chainsaw",COLOR_WHITE,-1449.5015,-1530.6028,101.7578, 4.0);
	CreateDynamicPickup(1239, 23, -1438.7144,-1544.8334,102.2578, -1); // JOIN FARMER
	CreateDynamic3DTextLabel("[Lumberjack Job]\n'/join' untuk menjadi Lumberjack", COLOR_YELLOW,-1438.7144,-1544.8334,102.2578,10.0);
	CreateDynamicPickup(1239, 23, 2787.0144, -2417.9524, 13.5702, -1); // JOIN FARMER
	CreateDynamic3DTextLabel("[Ammunition Depot]\nType '/loadammu' Untuk membeli mengantar Amunisi",COLOR_WHITE,2787.0144, -2417.9524, 13.5702, 4.0);
	//FARMER
	CreateDynamicPickup(1239, 23, -372.3396, -1427.8840, 25.7266, -1); // jual BIBIT
	CreateDynamic3DTextLabel("[ArWin14 Toko Tanaman]\n'/buyseeds' untuk membeli bibit\n'/sellallplant' untuk menjual tanaman", COLOR_WHITE,-372.3396, -1427.8840, 25.7266,10.0);
	CreateDynamicPickup(1239, 23, -382.9773, -1426.2753, 26.3192, -1); // JOIN FARMER
	CreateDynamic3DTextLabel("[Farmer Job]\n'/join' untuk menjadi Farmer", COLOR_YELLOW,-382.2334, -1439.0685, 25.7266,10.0);
	//MEKANIK
	CreateDynamicPickup(1239, 23, 2241.3682,-2252.4514,14.7647, -1); // JOIN MEKANIK
	CreateDynamic3DTextLabel("[Mechanic Job]\n'/join' untuk menjadi Mechanic", COLOR_YELLOW,2241.3682,-2252.4514,14.7647, 10.0);

 	CreateDynamicPickup(1239, 23, 354.8210, 154.7380, 1025.4203, -1); // sellhouse point
 	CreateDynamic3DTextLabel("Housing Department\n'/sellhouse' for sell your house.", COLOR_WHITE, 354.8210, 154.7380, 1025.4203, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 3, -1); // Government

	CreateDynamic3DTextLabel("[Bait Store]\n'/buybait' untuk membeli Umpan ", COLOR_WHITE,377.9064,-1887.2205,7.8359,10.0);
	CreateDynamic3DTextLabel("Illegal Job\n{FFFF00}'/join' untuk menjadi Arms Dealer\n'/buymats' untuk membeli Materials\n'/buyschematic' untuk membeli Weapon Schematic ", COLOR_RED,1566.8347,23.2207,24.1641,10.0);
	CreateDynamicPickup(1239, 23, 1566.8347, 23.2207, 24.1641, -1); // BUYMATS
	//IMPOUND DAN UNIMPOUND
 	CreateDynamic3DTextLabel("Impound Center\n'/impound' untuk mengimpound kendaraan", COLOR_YELLOW, 2813.7676, -1472.8700, 16.2363, 10.0);
 	CreateDynamicPickup(1239, 23, 2813.7676, -1472.8700, 16.2363, -1); // TEMPAT UNTUK IMPOUND
 	CreateDynamic3DTextLabel("Impound Center\n'/unimpound' untuk mengunimpound kendaraan", COLOR_YELLOW, 2820.2354, -1475.2073, 16.2500, 10.0);
 	CreateDynamicPickup(1239, 23, 2820.2354, -1475.2073, 16.2500, -1); // TEMPAT UNTUK UNIMPOUND
	// General text labels
	CreateDynamicPickup(1239, 23, 1667.6727,-1409.0708,13.5469, -1);//CLAIMINSURANCE
    CreateDynamic3DTextLabel("Insurances Agency\n'/buyinsurances' for purchase vehicle insurances\n'/claiminsurance' to claim vehicle insurances",COLOR_YELLOW,1667.6727,-1409.0708,13.5469,4.0);//
    CreateDynamicPickup(1239, 23, 313.9758, -140.0722, 1004.0625, -1);//TRAINING WEAPON
	CreateDynamic3DTextLabel("Weapon Training\nuse '/train' for Training",COLOR_YELLOW,313.9758, -140.0722, 1004.0625,4.0);//
    CreateDynamic3DTextLabel("Plate Registration\n'{FFFF00}/buyplate{FFFFFF}' untuk membeli plate\nCost: {75AE5D}$25.00",COLOR_YELLOW,240.4523,112.9773,1003.2188+0.6,4.0);//
    CreateDynamicPickup(1239, 23, 240.4523,112.9773,1003.2188, -1);//BUYPLATE Pickup
	CreateDynamicPickup(1239, 1, 1241.5316, 324.9184, -11.7573);
   	CreateDynamic3DTextLabel("'/sanews'\nTo open your locker.",COLOR_WHITE,621.7416,-8.3904,1102.7633+0.6,4.0);///SANEWS
	CreateDynamic3DTextLabel("'/arrest'",COLOR_WHITE,-1606.307861, 673.740539, -5.242187+0.6,4.0);///arrest(SFPD)
	CreateDynamic3DTextLabel("San Andreas Police Department\nProcessing Entrance\n\n'/arrest'", COLOR_WHITE, 1772.0134,-1548.0470,9.90700+0.6,4.0);
	CreateDynamic3DTextLabel("'/arrest'",COLOR_WHITE,295.9513,-1540.6786,24.5938+0.6,4.0);///arrest(FBI)
	CreateDynamic3DTextLabel("'/arrest'",COLOR_WHITE,292.7859,-1530.6685,76.5391+0.6,4.0);///arrest(FBI ROOF)
   	CreateDynamic3DTextLabel("'/arrest'",COLOR_WHITE,1528.4888,-1677.7632,5.8906+0.6,4.0);///arrest(LSPD)
   	CreateDynamic3DTextLabel("'/arrest'",COLOR_WHITE, 680.2208,-1546.9856,14.8516+0.6,4.0);//Arrest(LSPD)
   	CreateDynamic3DTextLabel("'/arrest'",COLOR_WHITE,-228.4971,985.1687,19.6088+0.6,4.0);///arrest(SFPD)
   	CreateDynamic3DTextLabel("'/arrest'",COLOR_WHITE,2182.20, 530.32, 1.19+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("'/arrest'",COLOR_WHITE,1379.0077,-274.9919,1.9850+0.6,4.0);///SFPD Water Patrol
   	CreateDynamic3DTextLabel("'/arrest'",COLOR_WHITE,598.5661,-607.9127,-14.9744+0.6,4.0);///Arrest(SASD)
   	CreateDynamic3DTextLabel("'/arrest'",COLOR_WHITE,5612.6097, -624.7800, -4.1500+0.6,4.0);///Arrest(SASD)
	CreateDynamicPickup(1239, 23, 612.60968, -624.77997, -4.14998, -1);
	CreateDynamic3DTextLabel("'/arrest'",COLOR_WHITE,612.60968, -624.77997, -4.14998+0.6,4.0);///Arrest(SASD)
   	CreateDynamic3DTextLabel("/warrantarrest",COLOR_WHITE,1421.0535,-1134.1343,23.9753+0.6,4.0);///Arrest(warrant)
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_WHITE,-1528.814331, 2540.706054, 55.835937+0.6,4.0);///Deliverpt (TIERRA ROBADA)
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_WHITE,1142.4733,-1326.3633,13.6259+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_WHITE,2027.0599,-1410.6870,16.9922+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_WHITE,1227.2339,306.4730,19.7028+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_WHITE,-339.2989,1055.8138,19.7392+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_WHITE,1165.1564,-1368.8240,26.6502+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_WHITE,2024.5742,-1382.7844,48.3359+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_WHITE,1233.3384,316.4022,24.7578+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_WHITE,-334.1560,1051.4434,26.0125+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_WHITE,-2656.0339,615.2567,66.0938+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("Emergency Room\n/deliverpt",COLOR_WHITE,-2695.5725,639.4147,14.4531+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliver",COLOR_WHITE,1991.7953,-2321.2532,13.5469+0.6,4.0);// Deliver

	// SANews Broadcast
	SANews3DText = CreateDynamic3DTextLabel(String,COLOR_LIGHTBLUE,632.7400,-14.2350,1108.2181,8.0);
	UpdateSANewsBroadcast();
 	CreateDynamic3DTextLabel("Trucker Job \nType '/join' to become one\n'/buyprods' buy product biz\nProduct Price : $1.00\n'/buystock' untuk membeli Stock Bensin\nProduct Price: $0.12\n'/buytruck'\nuntuk membeli Truck",COLOR_WHITE,-76.8255,-1136.7314,1.0781,4.0);// Trucker Job (LS)

    CreateDynamicObject(1569, 2294, 2492.92, 2.29, 0, 0, 90);
    CreateDynamicObject(1569, 2294, 2492.92, 4.8, 0, 0, 90);

	/*/Vehicles
    NPCBedjo = CreateVehicle(431, 0.0, 0.0, 0.0, 0.0, 125, 125, 1);
	SetVehicleNumberPlate(NPCBedjo, "ArWin14");
    NPCSanusi = CreateVehicle(431, 0.0, 0.0, 0.0, 0.0, 0, 0, 1);
    SetVehicleNumberPlate(NPCSanusi, "ArWin14");*/

	// allsaint map parkir faction
	CreateDynamicObject(18766, 1112.51428, -1291.35303, 15.00690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18766, 1122.50366, -1291.35303, 15.00690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18766, 1132.44373, -1291.35303, 15.00690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1119.70520, -1290.76831, 18.04280,   0.00000, 28.00000, 90.00000);
	CreateDynamicObject(983, 1134.09924, -1290.76135, 18.04280,   0.00000, 28.00000, 90.00000);
	CreateDynamicObject(18766, 1139.29614, -1347.44836, 15.18810,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1144.25635, -1347.44836, 15.18810,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1149.21631, -1347.44836, 15.18810,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1084.91626, -1350.36377, 15.18810,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1089.87634, -1350.36377, 15.18810,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1094.83630, -1350.36377, 15.18810,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1079.95630, -1350.36377, 15.18810,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1074.99634, -1350.36377, 15.18810,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(982, 1085.34253, -1350.90869, 20.60310,   0.00000, -24.00000, 90.00000);
	CreateDynamicObject(984, 1143.66101, -1348.02295, 20.75720,   0.00000, -22.00000, 90.00000);
	CreateDynamicObject(18766, 1077.99585, -1294.08923, 19.83810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1137.85132, -1290.93652, 14.52720,   90.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1150.00964, -1290.94702, 14.52720,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1149.32410, -1290.96045, 18.52890,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1145.91418, -1290.96045, 18.52890,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1142.50415, -1290.96045, 18.52890,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1139.03210, -1290.96045, 18.52890,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 1077.74390, -1295.80310, 15.95410,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1597, 1136.32947, -1295.79712, 15.08330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(871, 1135.64905, -1292.78589, 12.96240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(847, 1136.62598, -1299.90601, 12.96240,   0.00000, 0.00000, 171.00000);
	CreateDynamicObject(889, 1137.01416, -1300.16016, 12.96240,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(970, 1137.39124, -1293.69421, 13.10160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1137.41003, -1298.00867, 13.10160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8865, 1118.05029, -1309.75195, 12.75720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3928, 1161.91406, -1320.68579, 30.55040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3928, 1162.02026, -1308.32080, 30.55040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1157.85315, -1304.78577, 30.98620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1157.82922, -1311.98071, 30.98620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1165.98376, -1311.98889, 30.98620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1165.99207, -1304.77600, 30.98620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13728, 1162.32751, -1370.12292, 36.36040,   0.00000, 0.00000, -178.00000);
	CreateDynamicObject(1231, 1116.33215, -1309.59387, 13.79510,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1231, 1127.86536, -1309.71472, 13.79510,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1223, 1128.51282, -1322.76123, 12.61710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1223, 1119.43323, -1322.80225, 12.61710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1223, 1115.45313, -1322.80176, 12.61710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1223, 1106.25647, -1322.91052, 12.61710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1223, 1102.33838, -1322.85608, 12.61710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1223, 1093.17737, -1322.94873, 12.61710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1223, 1132.76379, -1333.85596, 12.61710,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(19121, 1157.65283, -1317.12561, 30.98620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1165.92822, -1317.14001, 30.98620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1166.18677, -1324.53894, 30.98620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1157.78564, -1324.42273, 30.98620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 1160.39563, -1330.52649, 30.34700,   0.00000, 0.00000, 0.00000);

	// jalan deket cityhall
	CreateDynamicObject(984, 1341.64941, -1759.68506, 12.26430,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1340.40942, -1759.68506, 12.26430,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1339.16943, -1759.68506, 12.26430,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1337.92944, -1759.68506, 12.26430,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1336.68945, -1759.68506, 12.26430,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 1357.67126, -1754.53967, 12.30770,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1251, 1354.47131, -1754.53967, 12.30770,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1251, 1360.87134, -1754.53967, 12.30770,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1251, 1351.27124, -1754.53967, 12.30770,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1251, 1348.27124, -1754.53967, 12.30770,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1231, 1356.51294, -1742.44836, 13.90130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1302.91699, -1829.48462, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1302.91699, -1803.88464, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1302.91699, -1778.28455, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1302.91699, -1752.68457, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1302.91699, -1727.08459, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1302.91699, -1699.88464, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1302.91699, -1674.28455, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1302.91699, -1648.68457, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1302.91699, -1623.08459, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1302.91699, -1597.48462, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1302.91699, -1578.28455, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1302.91699, -1568.68457, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.91699, -1829.48462, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.91699, -1803.88464, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.91699, -1778.28455, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.91699, -1752.68457, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.91699, -1727.08459, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.91699, -1699.88464, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1304.94824, -1714.27698, 13.14230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1304.94824, -1712.67700, 13.14230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1305.01318, -1713.49329, 12.47170,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(982, 1306.91699, -1674.28455, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.91699, -1648.68457, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.91699, -1623.08459, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1306.91699, -1597.48462, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1306.91699, -1578.28455, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1306.91699, -1568.68457, 13.13560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1305.16223, -1562.79053, 13.14250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1305.16223, -1565.59045, 13.14250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1304.92920, -1564.82715, 12.54270,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1304.92920, -1563.42712, 12.54270,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(984, 1307.71704, -1556.28455, 13.13560,   0.00000, 0.00000, -8.00000);
	CreateDynamicObject(984, 1309.11694, -1546.08447, 13.13560,   0.00000, 0.00000, -8.00000);
	CreateDynamicObject(984, 1305.51294, -1545.95752, 13.13560,   0.00000, 0.00000, -8.00000);
	CreateDynamicObject(984, 1304.05139, -1556.28894, 13.13560,   0.00000, 0.00000, -8.00000);
	CreateDynamicObject(970, 1308.16284, -1539.72778, 13.14250,   0.00000, 0.00000, -2.00000);

	// Hospital
    CreateObject(19449,-207.3999939,-1739.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(17038,-205.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-204.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-202.8999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-201.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(19460,-207.3990021,-1739.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19449,-202.6000061,-1734.8000488,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19460,-206.1999969,-1734.8010254,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(1569,-206.0000000,-1734.9000244,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateObject(1569,-203.0000000,-1734.9000244,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateObject(19387,-196.6992188,-1744.5000000,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19357,-201.3994141,-1736.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-201.4003906,-1736.5000000,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(2885,-211.7998047,-1734.7998047,678.4000244,270.0000000,180.0000000,180.0000000);
	CreateObject(17038,-199.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-198.3999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-196.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(19449,-196.6000061,-1738.0159912,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19460,-196.6719971,-1738.0169678,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19449,-195.3994141,-1742.8994141,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(17038,-195.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(19460,-195.4010010,-1742.9000244,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19449,-201.1000061,-1739.6999512,674.0999756,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-201.1005859,-1739.6992188,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19357,-199.8837891,-1744.5000000,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19460,-191.1503906,-1744.4990234,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19460,-191.1503906,-1744.5009766,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-199.0749969,-1744.4990234,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-199.0749969,-1744.5009766,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-199.8849945,-1744.4980469,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19460,-201.0989990,-1739.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19357,-201.3994141,-1746.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19387,-201.3994141,-1749.2998047,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19357,-201.3999939,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19387,-201.3999939,-1755.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19357,-201.3999939,-1758.9000244,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(17038,-205.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-204.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-202.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-201.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-199.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-198.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-196.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-195.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(19368,-201.4019928,-1746.0999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-201.4010010,-1746.9250488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19387,-201.3994141,-1762.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19449,-206.1999969,-1763.6999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-201.4010010,-1751.6369629,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-201.4019928,-1753.3249512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-201.4010010,-1758.0369873,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-201.4019928,-1759.7249756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-201.4010010,-1764.4370117,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-206.3000031,-1763.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19387,-207.3994141,-1746.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19387,-207.3994141,-1758.8994141,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19357,-207.3999939,-1762.0999756,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19449,-195.3994141,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19449,-195.3994141,-1762.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19449,-196.5996094,-1758.7998047,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19460,-206.0000000,-1733.2998047,672.5999756,270.0000000,179.9945068,0.0000000);
	CreateObject(19460,-203.0000000,-1733.3000488,672.5999756,270.0000000,179.9945068,0.0000000);
	CreateObject(19441,-203.7140045,-1733.3010254,677.3980244,0.0000000,270.0000000,90.0000000);
	CreateObject(19441,-205.2870026,-1733.3010254,677.3970244,0.0000000,270.0000000,90.0000000);
	CreateObject(2885,-200.8994141,-1734.7998047,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateObject(2885,-200.8994141,-1741.5000000,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateObject(2885,-211.7998047,-1741.5000000,678.4000244,270.0000000,179.9945068,179.9945068);
	CreateObject(2885,-211.7998047,-1748.1992188,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateObject(2885,-200.8999939,-1748.1999512,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateObject(2885,-200.8994141,-1754.8994141,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateObject(2885,-200.8994141,-1761.5996094,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateObject(2885,-211.7998047,-1761.5996094,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateObject(17038,-207.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-208.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-210.3999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-211.8999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-213.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-213.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-211.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-210.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-208.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(17038,-207.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateObject(19449,-214.6000061,-1758.9000244,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19449,-214.5996094,-1749.2998047,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19449,-214.6000061,-1739.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19449,-212.1992188,-1734.7998047,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-199.8000031,-1744.5010986,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-201.3979950,-1746.0999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-201.3990021,-1746.9250488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-201.3990021,-1751.6369629,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-201.3970032,-1753.3242188,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-201.3990021,-1758.0369873,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-201.3979950,-1759.7249756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-195.4010010,-1752.5000000,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-195.4003906,-1762.0996094,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-196.6494141,-1758.7988281,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19460,-196.6494141,-1758.8007812,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19460,-207.3979950,-1740.5140381,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-207.3990021,-1761.2370605,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-207.3979950,-1764.4000244,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-214.5989990,-1758.8000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-214.5980072,-1749.1999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-214.5989990,-1739.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-215.8000031,-1734.8011475,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19460,-207.4010010,-1739.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-207.4013672,-1740.5136719,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-207.4011993,-1761.2370605,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19368,-207.4010010,-1764.3994141,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(3034,-204.3994141,-1763.5996094,676.7000122,0.0000000,0.0000000,179.9945068);
	CreateObject(1523,-201.3699951,-1756.4499512,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateObject(1523,-201.3691406,-1750.0498047,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateObject(1523,-201.3699951,-1762.8499756,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateObject(2686,-201.5130005,-1744.9000244,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateObject(2685,-201.5130005,-1745.4000244,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateObject(2688,-207.2998047,-1747.5996094,676.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(16101,-201.5000000,-1748.5000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-201.5000000,-1750.0000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-201.5000000,-1754.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-201.5000000,-1756.4000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-201.5000000,-1761.3000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-201.5000000,-1762.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-201.3291016,-1748.5000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-201.3300018,-1750.0000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-201.3300018,-1754.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-201.3300018,-1756.4000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-201.3300018,-1761.3000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-201.3300018,-1762.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(14487,-211.8000031,-1751.5000000,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateObject(14487,-211.7998047,-1729.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateObject(14487,-218.5996094,-1729.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateObject(14487,-218.6000061,-1754.3000488,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateObject(14487,-190.8994141,-1753.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateObject(14487,-190.8999939,-1735.1999512,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateObject(14487,-190.8994141,-1731.6992188,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateObject(1523,-207.3691406,-1746.8496094,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateObject(1523,-207.3699951,-1759.6500244,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateObject(16101,-207.3291016,-1745.2998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-207.3300018,-1746.8199463,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-207.3300018,-1758.0999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-207.3300018,-1759.6199951,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-207.5000000,-1759.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-207.5000000,-1758.0999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-207.5000000,-1746.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-207.5000000,-1745.2998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(1999,-200.5000000,-1740.3994141,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateObject(2009,-199.5000000,-1743.7998047,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateObject(1671,-199.5000000,-1739.3000488,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateObject(1671,-199.2998047,-1743.0000000,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateObject(19387,-213.0000000,-1742.6992188,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19357,-209.7998047,-1742.6992188,673.9010010,0.0000000,0.0000000,90.0000000);
	CreateObject(19357,-209.0000000,-1742.7001953,673.9000244,0.0000000,0.0000000,90.0000000);
	CreateObject(19449,-212.1999969,-1742.6989746,679.0000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19466,-208.5000000,-1742.6999512,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateObject(19466,-210.7402344,-1742.6992188,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-209.0000000,-1742.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-210.6640015,-1742.6979980,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-215.3739929,-1742.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-215.3750000,-1742.7001953,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-209.0000000,-1742.7011719,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-210.6640015,-1742.7021484,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(1523,-213.7890625,-1742.7294922,674.7399902,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-212.2998047,-1742.7998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-213.8000031,-1742.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-213.8000031,-1742.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-212.3000031,-1742.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-207.5000000,-1742.6992188,666.9000244,0.0000000,0.0000000,0.0000000);
	CreateObject(3657,-213.8999939,-1745.6999512,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(3394,-213.7998047,-1739.0000000,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateObject(3396,-208.1992188,-1737.0000000,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateObject(3397,-208.1992188,-1740.8994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateObject(14487,-218.6000061,-1731.8000488,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateObject(2007,-213.6992188,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateObject(2007,-212.6992188,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateObject(2132,-211.0996094,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateObject(14532,-211.3994141,-1737.0996094,675.7800293,0.0000000,0.0000000,194.7491455);
	CreateObject(2146,-211.0996094,-1738.7998047,675.2700195,0.0000000,0.0000000,0.0000000);
	CreateObject(3657,-206.8999939,-1754.5999756,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(2811,-201.8994141,-1735.3994141,674.7999878,0.0000000,0.0000000,139.9932861);
	CreateObject(2811,-201.8999939,-1763.1999512,674.7999878,0.0000000,0.0000000,219.9957275);
	CreateObject(2811,-206.8999939,-1763.1999512,674.7999878,0.0000000,0.0000000,149.9957275);
	CreateObject(3657,-206.8999939,-1739.5999756,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(2811,-206.8994141,-1735.3994141,674.7999878,0.0000000,0.0000000,221.9897461);
	CreateObject(2688,-201.5000000,-1760.5000000,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateObject(19460,-201.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-207.3000031,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-207.3000031,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-207.3000031,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-201.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-201.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-204.8000031,-1734.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-206.3999939,-1763.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-214.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-214.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-214.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-207.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-207.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-207.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-214.3999939,-1734.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-212.1999969,-1742.8000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-212.1999969,-1742.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-196.6000061,-1744.4000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-196.6000061,-1738.0999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-196.6000061,-1744.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-196.6000061,-1758.6999512,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-196.6000061,-1758.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-195.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-195.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-195.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19357,-209.0000000,-1748.8010254,673.9010010,0.0000000,0.0000000,90.0000000);
	CreateObject(19449,-207.3999939,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-207.4010010,-1751.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-207.3990021,-1751.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-207.4019928,-1753.3000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-207.3979950,-1753.3000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(3657,-206.8999939,-1750.4000244,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19387,-213.0000000,-1748.8000488,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19449,-212.1999969,-1748.8010254,679.0000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19357,-209.8000031,-1748.8000488,673.9000244,0.0000000,0.0000000,90.0000000);
	CreateObject(19466,-208.6000061,-1748.8000488,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateObject(19466,-210.8404999,-1748.8000488,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateObject(19449,-212.1999969,-1756.1999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateObject(1523,-213.7890015,-1748.8299561,674.7399902,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-212.1999969,-1748.6999512,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-212.1999969,-1748.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-212.1999969,-1756.0999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(19460,-212.3000031,-1756.1989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-209.0000000,-1748.7990000,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-210.6629944,-1748.7980000,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-210.6621094,-1748.8027344,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-209.0000000,-1748.8017578,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-215.3750000,-1748.7989502,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19368,-215.3750000,-1748.8007812,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(3397,-208.1999969,-1750.8000488,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateObject(3396,-208.1999969,-1754.4000244,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-212.1999969,-1756.3000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(2132,-209.8999939,-1755.5999756,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateObject(2007,-212.3000031,-1755.5999756,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateObject(2007,-213.3000031,-1755.5999756,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateObject(3394,-213.8000031,-1752.1999512,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateObject(2146,-211.1000061,-1751.9000244,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(14532,-210.6999969,-1753.5000000,675.7999878,0.0000000,0.0000000,14.0000000);
	CreateObject(19460,-212.2998047,-1756.2001953,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(3657,-201.8994141,-1746.5000000,675.2999878,0.0000000,0.0000000,270.0000000);
	CreateObject(2811,-214.0000000,-1743.4000244,674.7999878,0.0000000,0.0000000,251.9897461);
	CreateObject(2811,-214.0000000,-1748.0999756,674.7999878,0.0000000,0.0000000,295.9879761);
	CreateObject(16101,-207.5000000,-1748.8000488,666.9000244,0.0000000,0.0000000,0.0000000);
	CreateObject(3394,-213.8000031,-1761.5000000,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateObject(2007,-214.0000000,-1758.5999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateObject(2007,-214.0000000,-1757.5999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateObject(2132,-210.1000061,-1763.0999756,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateObject(3396,-208.1999969,-1761.6999512,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateObject(3397,-210.8000031,-1756.6999512,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateObject(2146,-211.1999969,-1759.9000244,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(11237,-230.0000000,-1760.4000244,698.9000244,0.0000000,180.0000000,180.0000000);
	CreateObject(3053,-211.1999969,-1760.4000244,678.4000244,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-211.1999969,-1760.4000244,688.0999756,0.0000000,180.0000000,0.0000000);
	CreateObject(2596,-214.3000031,-1760.0999756,676.7000122,0.0000000,0.0000000,90.0000000);
	CreateObject(2885,-211.8000031,-1754.9000244,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateObject(2596,-214.3000031,-1760.8000488,676.7000122,0.0000000,0.0000000,90.0000000);
	CreateObject(2596,-214.3000031,-1760.8000488,677.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(2596,-214.3000031,-1760.0999756,677.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(16101,-222.6000061,-1760.4000244,677.9000244,0.0000000,90.0000000,0.0000000);
	CreateObject(16101,-214.5000000,-1760.4000244,666.19387220,0.0000000,0.0000000,0.0000000);
	CreateObject(3808,-207.2500000,-1757.8000488,676.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(3808,-212.0000000,-1742.8499756,676.2999878,0.0000000,0.0000000,270.0000000);
	CreateObject(3808,-212.0000000,-1748.6600342,676.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19460,-201.3000031,-1749.5000000,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-201.3000031,-1759.0999756,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(2009,-199.5000000,-1747.8000488,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateObject(1999,-200.5000000,-1746.0999756,674.8010254,0.0000000,0.0000000,90.0000000);
	CreateObject(1671,-199.3999939,-1746.9000244,675.2000122,0.0000000,0.0000000,264.0000000);
	CreateObject(1671,-199.3999939,-1745.0999756,675.2000122,0.0000000,0.0000000,278.0000000);
	CreateObject(2009,-196.8000031,-1753.8000488,674.8010254,0.0000000,0.0000000,90.0000000);
	CreateObject(1999,-197.8000031,-1752.0999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateObject(1999,-198.6999969,-1752.8000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateObject(2009,-199.6999969,-1751.0999756,674.8010254,0.0000000,0.0000000,270.0000000);
	CreateObject(1671,-197.6000061,-1753.0000000,675.2000122,0.0000000,0.0000000,282.0000000);
	CreateObject(1671,-196.8000031,-1751.3000488,675.2000122,0.0000000,0.0000000,260.0000000);
	CreateObject(1671,-199.8000031,-1752.0999756,675.2000122,0.0000000,0.0000000,84.0000000);
	CreateObject(1671,-199.8000031,-1753.8000488,675.2000122,0.0000000,0.0000000,104.0000000);
	CreateObject(2009,-196.0000000,-1757.1999512,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateObject(1999,-197.6999969,-1758.1999512,674.8010254,0.0000000,0.0000000,180.0000000);
	CreateObject(1671,-196.8999939,-1757.3000488,675.2000122,0.0000000,0.0000000,0.0000000);
	CreateObject(1671,-198.6999969,-1758.0000000,675.2000122,0.0000000,0.0000000,0.0000000);
	CreateObject(2202,-196.0000000,-1746.1999512,674.7800293,0.0000000,0.0000000,270.0000000);
	CreateObject(2811,-195.8999939,-1745.0999756,674.7999878,0.0000000,0.0000000,115.9932861);
	CreateObject(2007,-196.0000000,-1748.3000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateObject(2007,-196.0000000,-1749.3000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateObject(2811,-200.8999939,-1758.3000488,674.7999878,0.0000000,0.0000000,141.9881592);
	CreateObject(2611,-198.1999969,-1758.6700439,676.7999878,0.0000000,0.0000000,180.0000000);
	CreateObject(2611,-201.2700043,-1746.4000244,676.5999756,0.0000000,0.0000000,89.9945068);
	CreateObject(19449,-215.8000031,-1763.6999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19449,-201.3999939,-1768.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(19449,-195.3999939,-1771.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateObject(2885,-200.8999939,-1768.3000488,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateObject(19460,-201.3990021,-1767.5799561,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-195.4010010,-1771.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(19460,-195.5000000,-1768.5000000,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19460,-201.3000031,-1768.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateObject(19449,-196.6000061,-1772.4000244,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateObject(19460,-196.6000061,-1772.3990479,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(19460,-196.6000061,-1772.3000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(14487,-190.8999939,-1778.1999512,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateObject(1789,-211.8000031,-1753.0999756,675.2999878,0.0000000,0.0000000,290.0000000);
	CreateObject(1789,-211.8994141,-1759.1992188,675.2999878,0.0000000,0.0000000,270.0000000);
	CreateObject(1789,-210.1999969,-1737.6999512,675.2999878,0.0000000,0.0000000,99.9951172);
	CreateObject(1800,-199.0000000,-1759.5000000,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateObject(1800,-199.0000000,-1771.5000000,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateObject(1800,-199.0000000,-1767.5999756,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateObject(1800,-199.0000000,-1763.6999512,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateObject(1800,-200.6999969,-1766.9000244,674.7000122,0.0000000,0.0000000,0.0000000);
	CreateObject(1800,-200.6999969,-1773.3000488,674.7000122,0.0000000,0.0000000,0.0000000);
	CreateObject(1789,-196.1999969,-1770.6999512,675.2999878,0.0000000,0.0000000,180.0000000);
	CreateObject(1789,-196.1999969,-1766.6999512,675.2999878,0.0000000,0.0000000,179.9945068);
	CreateObject(1789,-196.1999969,-1762.9000244,675.2999878,0.0000000,0.0000000,179.9945068);
	CreateObject(1789,-196.3000031,-1760.6999512,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(1789,-200.5000000,-1766.1999512,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(1789,-200.5000000,-1769.4000244,675.2999878,0.0000000,0.0000000,180.0000000);
	CreateObject(19460,-216.0000000,-1763.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateObject(1999,-197.5000000,-1740.4000244,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateObject(1671,-196.5000000,-1739.3000488,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateObject(19460,-215.8999939,-1763.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateObject(16101,-212.3000031,-1748.6999512,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-213.8000031,-1748.6999512,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-213.8000031,-1748.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(16101,-212.3000031,-1748.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(2852,-206.8000031,-1742.8000488,675.2800293,0.0000000,0.0000000,0.0000000);
	CreateObject(2315,-206.8000031,-1742.4000244,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateObject(2855,-206.6999969,-1743.6999512,675.2999878,0.0000000,0.0000000,0.0000000);

	SetObjectMaterial(CreateObject(11435,-204.3999939,-1745.0999756,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetObjectMaterial(CreateObject(11435,-204.3999939,-1752.0000000,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetObjectMaterial(CreateObject(11435,-204.3999939,-1758.8000488,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetObjectMaterial(CreateObject(11435,-198.6000061,-1764.0000000,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetObjectMaterial(CreateObject(11435,-198.6000061,-1769.1999512,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetObjectMaterial(CreateObject(11435,-198.6000061,-1756.3000488,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetObjectMaterial(CreateObject(11435,-198.6000061,-1749.9000244,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
    SetObjectMaterialText(CreateObject(19353, -195.4142, -1741.4693, 676.4188, 0.0000, 0.0000, 180.0), "HOSPITAL", 0, 140, "Cambria", 130, 1, -1, 0, 1);
	SetObjectMaterialText(CreateObject(19353, -195.4142, -1741.4362, 676.8190, 0.0000, 0.0000, 180), "SAN ANDREAS COUNTY", 0, 140, "Cambria", 55, 1, -584707328, 0, 1);
	SetObjectMaterialText(CreateObject(19353, -195.4142, -1739.7816, 676.8000, 0.0000, 0.0000, 180), "|", 0, 140, "Arial", 200, 1, -13750738, 0, 1);
	SetObjectMaterialText(CreateObject(19353, -195.4142, -1743.1800, 676.8000, 0.0000, 0.0000, 180), "|", 0, 140, "Arial", 200, 1, -13750738, 0, 1);

    // Bank interior
    CreateObject(14602, 1443.33521, -985.86328, 1000.47083, 0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1420.34436, -987.59058, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1420.34436, -997.22662, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1420.34436, -977.94659, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1420.34436, -968.31262, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateObject(19377, 1425.39563, -997.23810, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1425.52917, -996.80780, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19377, 1425.39563, -987.59912, 998.69928, 0.00000, -90.00000, 0.00000);
	CreateObject(19377, 1425.39563, -977.97009, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateObject(19377, 1425.39563, -968.33612, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateObject(19450, 1425.15210, -1001.58301, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateObject(19450, 1444.42175, -992.99921, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateObject(19450, 1425.24097, -1001.64844, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateObject(19450, 1435.60022, -997.79559, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1430.77246, -1001.59528, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateObject(1569, 1432.61536, -1001.55011, 995.10773, 0.00000, 0.00000, 0.00000);
	CreateObject(19388, 1438.83838, -993.01642, 996.85449, 0.00000, 0.00000, 90.90000);
	CreateObject(19431, 1436.57031, -993.03369, 996.85193, 0.00000, 0.00000, 89.95040);
	CreateObject(19431, 1436.32031, -993.03369, 996.85388, 0.00000, 0.00000, 89.95040);
	CreateObject(19450, 1425.15210, -970.08197, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateObject(19450, 1427.71814, -970.08197, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateObject(19450, 1439.00610, -970.08197, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateObject(19450, 1448.52612, -970.08197, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateObject(19388, 1433.38245, -970.08441, 996.86249, 0.00000, 0.00000, 89.78290);
	CreateObject(19450, 1444.40637, -976.56262, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1444.40637, -966.93060, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1444.40637, -994.98560, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateObject(19377, 1435.89355, -997.23810, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateObject(19377, 1435.89355, -987.59912, 998.70532, 0.00000, -90.00000, 0.00000);
	CreateObject(19377, 1435.89355, -977.97009, 998.70532, 0.00000, -90.00000, 0.00000);
	CreateObject(19377, 1435.89355, -968.33612, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateObject(19377, 1446.39160, -968.33612, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateObject(19377, 1446.39160, -977.97009, 998.69733, 0.00000, -90.00000, 0.00000);
	CreateObject(19377, 1446.39160, -987.59912, 998.69733, 0.00000, -90.00000, 0.00000);
	CreateObject(19450, 1444.40637, -986.19659, 1000.16260, -180.00000, 0.00000, 0.00000);
	CreateObject(1569, 1457.74744, -985.02881, 995.10431, 0.00000, 0.00000, -90.06000);
	CreateObject(19377, 1446.35864, -997.23810, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateObject(16101, 1424.50464, -988.71008, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateObject(16101, 1424.50464, -990.89410, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateObject(16101, 1424.50464, -993.07813, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateObject(16101, 1424.50464, -995.26208, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateObject(16101, 1424.50464, -997.44611, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateObject(16101, 1424.50464, -999.63013, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateObject(16101, 1424.50464, -983.33411, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateObject(16101, 1424.50464, -981.15009, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateObject(16101, 1424.50464, -978.96613, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateObject(16101, 1424.50464, -976.78210, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateObject(16101, 1424.50464, -974.59808, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateObject(16101, 1424.50464, -972.41412, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateObject(19325, 1424.51428, -991.97479, 999.00391, 0.00000, 0.00000, 0.00000);
	CreateObject(19325, 1424.51428, -998.45477, 999.00391, 0.00000, 0.00000, 0.00000);
	CreateObject(19325, 1424.51428, -980.05078, 999.00391, 0.00000, 0.00000, 0.00000);
	CreateObject(19325, 1424.51428, -973.42279, 999.00391, 0.00000, 0.00000, 0.00000);
	CreateObject(2190, 1426.35876, -983.58972, 995.82874, 0.00000, 0.00000, -39.84000);
	CreateObject(2190, 1427.57007, -986.54395, 995.82874, 0.00000, 0.00000, -102.06001);
	CreateObject(2190, 1425.72351, -988.86444, 995.82874, 0.00000, 0.00000, -154.73996);
	CreateObject(1715, 1425.98022, -986.25348, 995.10559, 0.00000, 0.00000, 81.60000);
	CreateObject(1715, 1425.09607, -984.83795, 995.10559, 0.00000, 0.00000, 148.67998);
	CreateObject(1715, 1424.76306, -987.25067, 995.10559, 0.00000, 0.00000, 29.09999);
	CreateObject(2244, 1427.16125, -984.70050, 996.06403, 0.00000, 0.00000, 27.72000);
	CreateObject(2244, 1426.93335, -987.59070, 996.06403, 0.00000, 0.00000, -24.42000);
	CreateObject(2165, 1420.89612, -986.00458, 995.10638, 0.00000, 0.00000, 89.57999);
	CreateObject(1715, 1422.16272, -985.46423, 995.10559, 0.00000, 0.00000, -105.06001);
	CreateObject(2164, 1420.47449, -980.71246, 995.10602, 0.00000, 0.00000, 87.65998);
	CreateObject(2773, 1426.07617, -993.09894, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateObject(2773, 1426.07690, -990.98590, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateObject(2773, 1426.07617, -995.23187, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateObject(2773, 1426.07617, -997.52289, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateObject(2773, 1426.07617, -999.65588, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateObject(2773, 1426.07690, -981.18988, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateObject(2773, 1426.07690, -979.05688, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateObject(2773, 1426.07690, -976.84491, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateObject(2773, 1426.07690, -974.63287, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateObject(2773, 1426.07690, -972.42090, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateObject(1514, 1424.18726, -992.59534, 996.20605, 0.00000, 0.00000, 89.58002);
	CreateObject(1514, 1424.18726, -994.72827, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateObject(1514, 1424.18726, -996.94031, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateObject(1514, 1424.18726, -999.23132, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateObject(1514, 1424.18726, -980.66632, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateObject(1514, 1424.18726, -978.53333, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateObject(1514, 1424.18726, -976.32129, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateObject(1514, 1424.18726, -974.18829, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateObject(1514, 1424.18726, -971.97632, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateObject(1514, 1424.18726, -1001.12732, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateObject(2599, 1426.01086, -1000.61847, 995.50098, 0.00000, 0.00000, -90.78001);
	CreateObject(2599, 1425.84473, -973.51959, 995.50061, 0.00000, 0.00000, -89.88000);
	CreateObject(2007, 1420.94165, -999.54968, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateObject(2007, 1420.94165, -998.60168, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateObject(2007, 1420.94165, -997.65369, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateObject(2007, 1420.94165, -996.70569, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateObject(2007, 1420.94165, -995.75769, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateObject(1806, 1422.44788, -971.87213, 995.10742, 0.00000, 0.00000, -78.18002);
	CreateObject(1806, 1422.44788, -973.37311, 995.10742, 0.00000, 0.00000, -86.22002);
	CreateObject(1806, 1422.44788, -975.50610, 995.10742, 0.00000, 0.00000, -94.20003);
	CreateObject(1806, 1422.44788, -977.63910, 995.10742, 0.00000, 0.00000, -93.60002);
	CreateObject(1806, 1422.44788, -979.93011, 995.10742, 0.00000, 0.00000, -83.64001);
	CreateObject(1806, 1422.44788, -991.78009, 995.10742, 0.00000, 0.00000, -87.24001);
	CreateObject(1806, 1422.44788, -993.75513, 995.10742, 0.00000, 0.00000, -101.16003);
	CreateObject(1806, 1422.44788, -996.04608, 995.10742, 0.00000, 0.00000, -91.26003);
	CreateObject(1806, 1422.44788, -998.33710, 995.10742, 0.00000, 0.00000, -89.94003);
	CreateObject(1806, 1422.44788, -1000.23309, 995.10742, 0.00000, 0.00000, -78.18000);
	CreateObject(19379, 1425.52917, -987.17383, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1425.52917, -977.54077, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1425.52917, -967.90881, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1436.03015, -996.80780, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1436.03015, -987.17383, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1436.03015, -977.53979, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1436.03015, -967.90778, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1446.53076, -987.19177, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1457.03186, -987.19177, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1457.03186, -977.55780, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1446.53186, -977.55780, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1446.53186, -967.92480, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19379, 1446.53223, -996.81183, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateObject(19450, 1449.15112, -981.53003, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateObject(19450, 1458.76709, -981.53003, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateObject(19450, 1449.15210, -990.17499, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateObject(19450, 1458.78308, -990.17499, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateObject(19377, 1449.57959, -985.77112, 998.29529, 0.00000, -90.00000, 0.00000);
	CreateObject(19377, 1459.64563, -985.73309, 998.27332, 0.00000, -90.00000, 0.00000);
	CreateObject(19450, 1457.40637, -985.67657, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateObject(1569, 1457.37061, -982.48169, 995.10571, 0.00000, 0.00000, 269.37631);
	CreateObject(1569, 1457.37549, -985.46259, 995.10571, 0.00000, 0.00000, 89.99800);
	CreateObject(1569, 1457.36865, -986.57483, 995.10571, 0.00000, 0.00000, 269.37631);
	CreateObject(1569, 1457.37585, -989.57758, 995.10571, 0.00000, 0.00000, 89.99800);
	CreateObject(19431, 1440.70752, -982.46478, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateObject(19431, 1440.70752, -981.04077, 996.86212, 0.00000, 0.00000, -91.14001);
	CreateObject(19431, 1439.91956, -981.72931, 996.86212, 0.00000, 0.00000, -183.05991);
	CreateObject(19431, 1441.44763, -981.76929, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateObject(19431, 1441.44763, -989.43732, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateObject(19431, 1440.70752, -988.71283, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateObject(19431, 1440.70752, -990.13281, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateObject(19431, 1439.88562, -989.40332, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateObject(19431, 1431.84351, -988.67279, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateObject(19431, 1431.10046, -989.40332, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateObject(19431, 1431.84351, -990.13580, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateObject(19431, 1432.58154, -989.40332, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateObject(19431, 1432.58154, -982.06531, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateObject(19431, 1431.02148, -982.01929, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateObject(19431, 1431.84351, -982.75677, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateObject(19431, 1431.84351, -981.32483, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateObject(1569, 1432.61133, -970.15210, 995.10773, 0.00000, 0.00000, 0.00000);
	CreateObject(14576, 1435.29407, -987.92871, 990.71588, 0.00000, 0.00000, -0.36000);
	CreateObject(19379, 1436.03015, -1001.03583, 995.02307, 0.00000, -90.00000, 0.00000);
	CreateObject(19388, 1438.86841, -1002.63641, 996.85449, 0.00000, 0.00000, 90.90000);
	CreateObject(19450, 1440.54065, -997.84619, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1437.23877, -997.84979, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateObject(19377, 1440.83362, -1004.66913, 998.26831, 0.00000, -90.00000, 0.00000);
	CreateObject(2634, 1441.06909, -1004.53168, 992.32001, 0.00000, 0.00000, 270.07040);
	CreateObject(2198, 1433.27332, -996.86798, 989.92047, 0.00000, 0.00000, 178.63960);
	CreateObject(2198, 1433.27332, -994.02600, 989.92047, 0.00000, 0.00000, 178.63960);
	CreateObject(2198, 1433.27332, -990.89001, 989.92047, 0.00000, 0.00000, 178.63960);
	CreateObject(2198, 1433.27332, -1000.00403, 989.92047, 0.00000, 0.00000, 178.63960);
	CreateObject(1806, 1432.72278, -998.97363, 989.91901, 0.00000, 0.00000, -167.28003);
	CreateObject(1806, 1432.60571, -995.73785, 989.91901, 0.00000, 0.00000, 175.12816);
	CreateObject(1806, 1432.60571, -992.79791, 989.91901, 0.00000, 0.00000, 194.12750);
	CreateObject(1806, 1432.60571, -989.75989, 989.91901, 0.00000, 0.00000, 186.49478);
	CreateObject(16782, 1443.08545, -993.57495, 992.76324, 0.00000, 0.00000, 179.01819);
	CreateObject(3397, 1442.95642, -993.62469, 989.94727, 0.00000, 0.00000, 357.18283);
	CreateObject(3386, 1442.72241, -996.43250, 989.89600, 0.00000, 0.00000, 176.06250);
	CreateObject(3386, 1442.72241, -997.60852, 989.91400, 0.00000, 0.00000, 176.06250);
	CreateObject(3386, 1442.87439, -990.38049, 989.91400, 0.00000, 0.00000, 356.84091);
	CreateObject(3386, 1442.87439, -989.24652, 989.91400, 0.00000, 0.00000, 356.84091);
	CreateObject(18643, 1427.60217, -995.31152, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateObject(18643, 1418.20618, -995.31152, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateObject(18643, 1418.20618, -990.12750, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateObject(18643, 1427.60217, -990.12750, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateObject(18643, 1427.60217, -984.45752, 984.45007, 0.00000, 0.00000, 0.00000);
	CreateObject(18643, 1418.04419, -984.45752, 984.45007, 0.00000, 0.00000, 0.00000);
	CreateObject(14598, 1431.54688, -985.73328, 1010.65839, 0.00000, 0.00000, 0.00000);
	CreateObject(1723, 1439.22668, -972.44214, 995.05151, 0.00000, 0.00000, 0.00000);
	CreateObject(1723, 1442.60986, -973.58191, 995.05151, 0.00000, 0.00000, 269.47330);
	CreateObject(1723, 1441.65991, -976.88171, 995.05151, 0.00000, 0.00000, 179.19260);
	CreateObject(1723, 1438.09546, -975.58490, 995.05151, 0.00000, 0.00000, 86.82700);
	CreateObject(1817, 1439.95251, -975.20856, 995.11218, 0.00000, 0.00000, -0.36000);
	CreateObject(2011, 1437.90637, -970.72211, 995.11951, 0.00000, 0.00000, 0.00000);
	CreateObject(2002, 1439.03247, -970.70801, 995.11951, 0.00000, 0.00000, 0.00000);
	CreateObject(1776, 1440.21924, -970.60382, 996.18219, 0.00000, 0.00000, 0.00000);
	CreateObject(2816, 1439.91479, -974.76520, 995.62378, 0.00000, 0.00000, -66.18000);
	CreateObject(2245, 1440.35779, -974.71698, 995.85413, 0.00000, 0.00000, 0.00000);
	CreateObject(1549, 1441.38904, -970.58020, 995.07281, 0.00000, 0.00000, 0.00000);
	CreateObject(2961, 1436.19360, -992.91449, 996.43372, 0.00000, 0.00000, 0.00000);
	CreateObject(2690, 1436.22546, -992.86798, 996.92572, 0.00000, 0.00000, 169.80000);
	CreateObject(1999, 1435.73157, -1005.59863, 995.12238, 0.00000, 0.00000, 177.89998);
	CreateObject(1806, 1435.42896, -1003.91840, 995.12079, 0.00000, 0.00000, 146.81998);
	CreateObject(2606, 1433.61072, -1004.31232, 996.30280, 0.00000, 0.00000, 89.94000);
	CreateObject(2606, 1433.61072, -1004.31232, 996.73480, 0.00000, 0.00000, 89.94000);
	CreateObject(2606, 1433.61072, -1004.31232, 997.16681, 0.00000, 0.00000, 89.94000);
	CreateObject(2894, 1435.51477, -1005.65875, 995.93512, 0.00000, 0.00000, -156.29988);
	CreateObject(348, 1435.81042, -1005.49841, 995.93518, 91.00000, 0.00000, 38.22002);
	CreateObject(2839, 1434.89624, -1005.61493, 995.12347, 0.00000, 0.00000, 28.74000);
	CreateObject(1235, 1436.75586, -1005.67822, 995.63458, 0.00000, 0.00000, 4.14000);
	CreateObject(2881, 1436.83350, -1005.81738, 995.13568, -2.00000, -69.00000, 28.00000);
	CreateObject(2881, 1436.72742, -1005.73517, 995.13568, -2.00000, -69.00000, -15.20001);
	CreateObject(2007, 1420.94165, -995.75769, 996.49847, 0.00000, 0.00000, 89.76000);
	CreateObject(2007, 1420.94165, -996.70569, 996.50250, 0.00000, 0.00000, 89.76000);
	CreateObject(2007, 1420.94165, -997.65369, 996.50250, 0.00000, 0.00000, 89.76000);
	CreateObject(2007, 1420.94165, -998.60168, 996.50250, 0.00000, 0.00000, 89.76000);
	CreateObject(2007, 1420.94165, -999.54968, 996.50250, 0.00000, 0.00000, 89.76000);
	CreateObject(2942, 1446.68677, -989.58667, 995.71686, 0.00000, 0.00000, 179.99986);
	CreateObject(2942, 1448.42285, -989.58667, 995.71692, 0.00000, 0.00000, 179.99989);
	CreateObject(2942, 1450.13086, -989.58667, 995.71692, 0.00000, 0.00000, 179.99989);
	CreateObject(2690, 1434.28040, -1002.78546, 996.38782, 0.00000, 0.00000, -4.26000);
	CreateObject(1892, 1456.52942, -986.43781, 995.14093, 0.00000, 0.00000, 86.76000);
	CreateObject(1892, 1456.52942, -990.61377, 995.14093, 0.00000, 0.00000, 86.76000);
	CreateObject(1892, 1456.52942, -982.26178, 995.14093, 0.00000, 0.00000, 86.76000);
	CreateObject(14633, 1426.06604, -979.43066, 996.56683, 0.00000, 0.00000, 0.00000);
	CreateObject(2811, 1456.85181, -986.05109, 995.10602, 0.00000, 0.00000, 78.96002);
	CreateObject(3386, 1442.87439, -988.14252, 989.91400, 0.00000, 0.00000, 356.84091);
	CreateObject(3386, 1442.87439, -987.03851, 989.91400, 0.00000, 0.00000, 356.84091);
	CreateObject(3386, 1442.72241, -998.80847, 989.91400, 0.00000, 0.00000, 176.06250);
	CreateObject(3386, 1442.72241, -1000.00848, 989.91400, 0.00000, 0.00000, 176.06250);
	CreateObject(3391, 1440.51379, -987.03638, 989.89600, 0.00000, 0.00000, 89.76003);
	CreateObject(3392, 1436.92480, -987.02655, 989.89398, 0.00000, 0.00000, 89.81998);
	CreateObject(1806, 1441.29553, -993.01025, 989.92133, 0.00000, 0.00000, -119.94001);
	CreateObject(2634, 1435.35193, -980.29688, 984.21887, 0.00000, 0.00000, 179.04001);
	CreateObject(1502, 1438.05847, -992.99011, 995.10675, 0.00000, 0.00000, 0.00000);
	CreateObject(1499, 1438.53723, -1002.59253, 990.92316, 0.00000, 0.00000, 0.00000);
	CreateObject(2690, 1440.72217, -1010.17639, 994.91425, 0.00000, 0.00000, -90.41999);
	CreateObject(2690, 1433.67712, -1004.35260, 992.91760, 0.00000, 0.00000, 83.58002);
	CreateObject(2690, 1440.74304, -1010.16492, 991.04169, 0.00000, 0.00000, -88.08002);
	CreateObject(2690, 1433.68909, -1004.27728, 988.57770, 0.00000, 0.00000, 83.94003);
	CreateObject(2690, 1433.56665, -1009.76007, 986.42206, 0.00000, 0.00000, 83.70004);
	CreateObject(18643, 1441.46216, -995.31152, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateObject(18643, 1441.64221, -990.12750, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateObject(18643, 1441.54224, -984.45752, 984.45007, 0.00000, 0.00000, 0.00000);

	eastlobby1 = CreateDynamicObject(1536,253.14941406,110.59960938,1002.21502686,0.00000000,0.00000000,270.00000000); // East lobby door (moves north)
	eastlobby2 = CreateDynamicObject(1536,253.18457031,107.59960938,1002.21502686,0.00000000,0.00000000,90.00000000); // East lobby door (moves south)
	westlobby1 = CreateDynamicObject(1536,239.71582031,116.09179688,1002.21502686,0.00000000,0.00000000,90.00000000); // West lobby door (moves north)
	westlobby2 = CreateDynamicObject(1536,239.67968750,119.09960938,1002.21502686,0.00000000,0.00000000,269.98901367); // West lobby door (moves south)
	locker1 = CreateDynamicObject(1536,267.29980469,112.56640625,1003.61718750,0.00000000,0.00000000,179.99450684); // Locker door (moves east)
	locker2 = CreateDynamicObject(1536,264.29980469,112.52929688,1003.61718750,0.00000000,0.00000000,0.00000000); // Locker door (moves west)
	cctv1 = CreateDynamicObject(1536,264.44921875,115.79980469,1003.61718750,0.00000000,0.00000000,0.00000000); // CCTV door (moves west)
	cctv2 = CreateDynamicObject(1536,267.46875000,115.83691406,1003.61718750,0.00000000,0.00000000,179.99450684); // CCTV door (moves east)
	chief1 = CreateDynamicObject(1536,229.59960938,119.50000000,1009.21875000,0.00000000,0.00000000,0.00000000); // innermost chief's door
	chief2 = CreateDynamicObject(1536,232.59960938,119.53515625,1009.21875000,0.00000000,0.00000000,179.99450684); // outermost chief's door (both move west)
	fbichief1 = CreateDynamicObject(1536,232.9210, 107.6005, 1009.2137,0.00000000,0.00000000,90.00000000); // innermost chief's door
	fbichief2 = CreateDynamicObject(1536,232.8668, 110.5419, 1009.2137,0.00000000,0.00000000,-90.0000000); // outermost chief's door (both move west)
 	//LSPD buttons
 	fbichiefin = CreateButton(232.8, 107.6475, 1010.8138,-90.00000000);
 	fbichiefout = CreateButton(233.03, 110.4297, 1010.8138,90.00000000);
	eastin = CreateButton(253.44921875,110.59960938,1003.79998779,90.00000000); //object(fire_break) (1)
	westout = CreateButton(239.79492188,116.18457031,1003.87286377,90.00000000); //object(fire_break) (2)
	westin = CreateButton(239.32031250,116.27441406,1003.87286377,270.00000000); //object(fire_break) (3)
	eastout = CreateButton(253.00000000,110.59960938,1003.79998779,270.00000000); //
	elevator = CreateButton(275.83984375,120.94921875,1005.12280273,90.00000000); //object(kmb_keypad) (1)
	cctvin = CreateButton(264.55566406,115.97949219,1005.12280273,179.99450684); //object(kmb_keypad) (2)
	cctvout = CreateButton(264.55566406,115.69531250,1005.12280273,0.00000000); //object(kmb_keypad) (3)
	lockerin = CreateButton(267.21679688,112.40917969,1005.12280273,0.00000000); //object(kmb_keypad) (4)
	lockerout = CreateButton(267.21679688,112.66992188,1005.12280273,179.99450684); //object(kmb_keypad) (5)
	chiefout = CreateButton(232.50000000,119.38476562,1010.81384277,0.00000000); //object(sec_keypad) (2)
	chiefin = CreateButton(229.67089844,119.66992188,1010.81384277,179.99450684); //object(sec_keypad) (1)
	roofkey = CreateButton(1565.93652344,-1667.35058594,28.85165977,179.99450684); //object(sec_keypad) (3)
	garagekey = CreateButton(1567.14550781,-1689.62011719,6.69999981,0.00000000); //object(sec_keypad) (4)
	//MAPPING BASE Sandi
	CreateDynamicObject(19456, 2194.22900, -1524.93713, 24.47980,   0.00000, 0.00000, 72.00000);
	CreateDynamicObject(19456, 2198.75391, -1521.59680, 24.49500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 2187.26904, -1521.14539, 24.46727,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2187.25415, -1515.45959, 24.47983,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2191.73438, -1524.13245, 24.47980,   0.00000, 0.00000, 72.00000);
	CreateDynamicObject(931, 2188.63989, -1516.22424, 23.92000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2475, 2190.74341, -1515.36401, 22.81342,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 2191.37842, -1515.61365, 24.43033,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2043, 2191.36572, -1515.42969, 24.43033,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2358, 2190.63647, -1515.53357, 24.45480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1636, 2191.14136, -1515.56140, 23.70460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1636, 2190.50488, -1515.44153, 23.70460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1799, 2193.06226, -1518.87610, 22.86433,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(356, 2193.13281, -1517.10803, 23.53340,   90.00000, 0.00000, 25.00000);
	CreateDynamicObject(1728, 2191.36377, -1506.33203, 22.76500,   0.00000, 0.00000, -215.00000);
	CreateDynamicObject(2321, 2184.63794, -1503.44092, 22.96463,   -0.48000, -0.12000, 0.00000);
	CreateDynamicObject(1728, 2193.47998, -1523.93787, 22.78480,   0.00000, 0.00000, 134.00000);
	CreateDynamicObject(1729, 2192.16748, -1520.36621, 22.80327,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 2194.38843, -1522.48853, 23.41485,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2839, 2182.79956, -1503.29529, 23.51246,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1575, 2193.66479, -1521.69238, 23.27290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1575, 2193.36548, -1521.90344, 23.27290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(356, 2192.91968, -1521.33813, 23.44321,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3525, 2187.83179, -1506.24854, 22.87868,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 2189.41064, -1522.75476, 23.38519,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1450, 2196.92944, -1517.01538, 23.51737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4227, 2189.61670, -1494.70557, 25.51158,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2676, 2189.71167, -1521.75122, 23.03230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 2185.98950, -1494.98083, 23.38248,   0.00000, 24.00000, 90.00000);
	CreateDynamicObject(1440, 2183.55005, -1495.29382, 23.44325,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1462, 2187.82471, -1495.26636, 22.89736,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2676, 2190.43970, -1517.88770, 23.03230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 2193.80688, -1518.85229, 23.12101,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2671, 2189.47949, -1520.14563, 22.93099,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 2194.03589, -1519.99963, 22.78480,   0.00000, 0.00000, -38.00000);
	CreateDynamicObject(2321, 2193.16821, -1521.49487, 22.90370,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(933, 2197.26123, -1524.60596, 22.85167,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(851, 2181.96875, -1496.38403, 23.21232,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(851, 2180.50854, -1496.33606, 23.21232,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 2180.47681, -1504.44653, 22.72958,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1442, 2187.57715, -1496.58911, 23.39559,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1219, 2192.11353, -1507.23413, 23.81660,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1219, 2182.17456, -1505.69873, 23.81660,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2671, 2191.41748, -1505.43591, 22.97328,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2671, 2193.61816, -1505.32092, 22.97328,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1219, 2189.56372, -1507.20691, 23.81660,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1219, 2184.80811, -1505.73633, 23.81660,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1441, 2180.38159, -1495.24414, 23.64704,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1429, 2184.22412, -1503.18481, 24.18870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 2187.90186, -1506.25598, 23.39559,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1340, 2207.15430, -1500.76111, 23.78497,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1340, 2207.18188, -1503.23914, 23.78497,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(356, 2184.81641, -1503.28906, 23.52833,   90.00000, -7.00000, 4.00000);
	CreateDynamicObject(1575, 2189.81079, -1505.14221, 23.14671,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1575, 2185.31250, -1503.19226, 23.32573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 2186.08691, -1503.18958, 23.54807,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2358, 2186.15356, -1503.67896, 23.55451,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 2184.64063, -1503.63940, 23.49319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(348, 2185.15161, -1503.62354, 23.45250,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1575, 2191.69946, -1504.18030, 23.32573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3525, 2189.35791, -1522.65845, 22.87868,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3525, 2187.53076, -1496.50171, 22.87868,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1429, 2197.15405, -1524.51697, 24.05840,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(1499, 2187.27368, -1521.88501, 22.91117,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2197.08838, -1520.43811, 26.18541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 2188.89526, -1517.71875, 26.18541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 2195.82129, -1518.55115, 26.18541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 2192.36719, -1517.72827, 26.18540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 2197.04907, -1519.40247, 26.18541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 2194.73584, -1523.35107, 26.18540,   0.00000, 90.00000, 72.00000);
	CreateDynamicObject(19447, 2192.21753, -1522.52649, 26.18540,   0.00000, 90.00000, 72.00000);
	CreateDynamicObject(19088, 2196.90771, -1521.20813, 27.74182,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 2191.89893, -1502.38745, 22.76496,   0.00000, 0.00000, -38.00000);
	CreateDynamicObject(1728, 2186.87817, -1505.14502, 22.76500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1728, 2183.72412, -1505.06909, 22.76500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(933, 2189.97095, -1496.01672, 22.88849,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2321, 2191.16650, -1503.91907, 22.90370,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(2321, 2182.22095, -1503.44104, 22.96463,   -0.48000, -0.12000, 0.00000);
	CreateDynamicObject(356, 2191.95020, -1504.78320, 23.47920,   90.00000, -7.00000, 4.00000);
	CreateDynamicObject(2358, 2191.17505, -1503.80872, 23.55451,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(348, 2191.18481, -1506.19983, 23.24015,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 2192.41406, -1504.52917, 23.42830,   0.00000, 0.00000, 55.00000);
	CreateDynamicObject(2043, 2186.08960, -1503.38391, 23.54807,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1670, 2191.14941, -1504.20190, 23.42574,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1575, 2191.95898, -1504.38989, 23.32573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2839, 2194.13721, -1522.11206, 23.41611,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2839, 2183.70679, -1503.26855, 23.51246,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2058, 2182.68359, -1503.46350, 23.46813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 2180.59058, -1505.44849, 23.35999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 2180.00635, -1505.43433, 23.35999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3057, 2188.27759, -1504.88135, 23.06808,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2885, 2197.07422, -1494.64966, 26.71510,   0.00000, 0.00000, 180.00000);
	//WORKSHOP
	CreateDynamicObject(12943, 1823.79749, -1414.49329, 12.56853,   0.00000, 0.00000, -89.10000);
	CreateDynamicObject(19817, 1823.95557, -1421.59119, 10.71962,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19817, 1826.52600, -1408.89441, 10.71962,   0.00000, 0.00000, 90.17999);
	CreateDynamicObject(12943, 1368.62427, -1750.45313, 12.52006,   0.00000, 0.00000, -90.23996);
	CreateDynamicObject(19817, 1368.73132, -1756.01733, 10.68330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19817, 1370.77649, -1744.82739, 10.68330,   0.00000, 0.00000, 87.54001);
	CreateDynamicObject(12943, 2349.64014, -1364.73242, 23.06472,   0.00000, 0.00000, -89.87999);
	CreateDynamicObject(19817, 2349.69873, -1370.89307, 21.13840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19817, 2348.01904, -1359.49329, 21.11840,   0.00000, 0.00000, -89.76000);
	CreateDynamicObject(12943, -84.24071, -1210.13342, 1.68996,   0.00000, 0.00000, 77.10000);
	CreateDynamicObject(19817, -82.83020, -1203.82507, -0.21890,   0.00000, 0.00000, 167.69991);
	CreateDynamicObject(19817, -87.75559, -1214.76892, -0.17623,   0.00000, 0.00000, -100.14001);
	//Gate PnS, CarBomb, Transfender, Arch Angel, Lowrider.
	CreateDynamicObject(1966, 2644.8601074219, -2039.1999511719, 13.5, 0, 0, 0);
	CreateDynamicObject(1966, 2071.5, -1831.5999755859, 14.89999961853, 0, 0, 90);
	CreateDynamicObject(1966, 488.39999389648, -1734.6999511719, 12.39999961853, 0, 0, 352);
	CreateDynamicObject(1966, 1024.9000244141, -1029.4000244141, 33, 0, 0, 0);
	CreateDynamicObject(1966, 1041.4000244141, -1025.9000244141, 33, 0, 0, 0);
	CreateDynamicObject(1966, 720.09997558594, -462.54000854492, 17, 0, 0, 0);
	CreateDynamicObject(1966, -1935.9000244141, 238.69999694824, 36.099998474121, 0, 0, 0);
	CreateDynamicObject(1966, -1906, 277.79998779297, 42.900001525879, 0, 0, 0);
	CreateDynamicObject(1966, -1902.6999511719, 277.79998779297, 42.900001525879, 0, 0, 0);
	CreateDynamicObject(1966, -1904.5, 277.79998779297, 42.900001525879, 0, 0, 0);
	CreateDynamicObject(1966, -2716.3000488281, 217.5, 5, 0, 0, 90);
	CreateDynamicObject(1966, -2425.6999511719, 1028, 52.200000762939, 0, 0, 0);
	CreateDynamicObject(1966, -1420.5, 2591.1999511719, 57.799999237061, 0, 0, 0);
	CreateDynamicObject(1966, 429.9700012207, 2546.5, 16.799999237061, 0, 0, 90);
	CreateDynamicObject(1966, 2383.5, 1043.5999755859, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(1966, 2389.6000976563, 1043.5999755859, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(1966, 1843.3000488281, -1856.3000488281, 13, 0, 0, 90);
	CreateDynamicObject(1966, -100, 1111.4300537109, 21.5, 0, 0, 0);
	CreateDynamicObject(1966, 1968.4000244141, 2163.5, 12.60000038147, 0, 0, 90);
	CreateDynamicObject(1966, 1968.4000244141, 2161.6000976563, 12.60000038147, 0, 0, 90);
	CreateDynamicObject(1966, 2391.3999023438, 1483.5999755859, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(1966, 2395.8999023438, 1483.5999755859, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(1966, 2006, 2303.6999511719, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(1966, -1786.8000488281, 1209.4000244141, 26.89999961853, 0, 0, 0);
	//SAGS HQ
	CreateDynamicObject(1635, 1654.16064, -1656.22815, 26.93860,   0.00000, 0.00000, 89.52000);
	CreateDynamicObject(19313, 1635.72522, -1721.73938, 15.05214,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 1631.45154, -1721.78479, 15.02874,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 1624.33411, -1714.75476, 14.97780,   0.00000, 0.00000, 90.83998);
	CreateDynamicObject(19313, 1623.97632, -1700.73792, 14.89550,   0.00000, 0.00000, 91.37999);
	CreateDynamicObject(19313, 1623.67542, -1686.66516, 14.82414,   0.00000, 0.00000, 91.20005);
	CreateDynamicObject(19313, 1623.45886, -1672.65527, 14.78685,   0.00000, 0.00000, 90.48004);
	CreateDynamicObject(19313, 1623.48230, -1671.63599, 14.74631,   0.00000, 0.00000, 90.59996);
	CreateDynamicObject(19313, 1639.42273, -1664.36023, 15.02410,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(1251, 1671.47339, -1719.53430, 19.58330,   0.00000, 0.00000, 0.90000);
	CreateDynamicObject(1251, 1665.66296, -1719.51477, 19.58240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1662.75562, -1719.51270, 19.58090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1659.74744, -1719.52734, 19.59020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1668.53149, -1719.51514, 19.59047,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1657.14319, -1719.50842, 19.58180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 1699.09180, -1678.27405, 21.20378,   0.00000, 0.00000, 90.66004);
	CreateDynamicObject(1251, 1654.36987, -1719.50867, 19.58180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1651.43762, -1719.49707, 19.55970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1671.74121, -1693.19739, 19.56190,   0.00000, 0.00000, 91.68000);
	CreateDynamicObject(1251, 1671.71387, -1695.86926, 19.56570,   0.00000, 0.00000, 90.84000);
	CreateDynamicObject(1251, 1671.72180, -1698.54993, 19.57620,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(1251, 1671.71985, -1701.15479, 19.57520,   0.00000, 0.00000, 89.34000);
	CreateDynamicObject(1251, 1671.72778, -1703.85364, 19.57540,   0.00000, 0.00000, 88.02000);
	CreateDynamicObject(1251, 1671.70325, -1706.60779, 19.56470,   0.00000, 0.00000, 87.96000);
	CreateDynamicObject(1251, 1671.70435, -1709.25867, 19.57990,   0.00000, 0.00000, 88.50000);
	CreateDynamicObject(1251, 1671.71326, -1712.01440, 19.57980,   0.00000, 0.00000, 87.84000);
	CreateDynamicObject(1251, 1646.46411, -1692.89148, 19.44750,   0.00000, 0.00000, 90.84000);
	CreateDynamicObject(1251, 1646.46814, -1693.84839, 19.44520,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(1251, 1646.47205, -1694.68457, 19.45650,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1251, 1646.47119, -1695.51672, 19.45870,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(1251, 1646.47644, -1696.35242, 19.46730,   0.00000, 0.00000, 89.64000);
	CreateDynamicObject(1251, 1646.47107, -1697.12805, 19.47190,   0.00000, 0.00000, 90.96000);
	CreateDynamicObject(1251, 1646.47534, -1697.93616, 19.47550,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19966, 1623.55042, -1664.13806, 12.53023,   0.00000, 0.00000, 176.75999);
	CreateDynamicObject(1251, 1646.49219, -1698.76941, 19.47690,   0.00000, 0.00000, 90.42000);
	CreateDynamicObject(1251, 1646.49170, -1699.49524, 19.48230,   0.00000, 0.00000, 91.08000);
	CreateDynamicObject(1251, 1646.47925, -1700.29004, 19.48220,   0.00000, 0.00000, 91.50000);
	CreateDynamicObject(1251, 1646.47266, -1701.14954, 19.48120,   0.00000, 0.00000, 92.33990);
	CreateDynamicObject(1251, 1646.47327, -1702.08069, 19.48080,   0.00000, 0.00000, 93.18000);
	CreateDynamicObject(1251, 1646.45264, -1702.92126, 19.48110,   0.00000, 0.00000, 93.78000);
	CreateDynamicObject(1251, 1646.46167, -1703.82849, 19.48150,   0.00000, 0.00000, 93.72000);
	CreateDynamicObject(1251, 1639.15601, -1678.07202, 12.53860,   0.00000, 0.00000, 90.78000);
	CreateDynamicObject(1251, 1639.19885, -1680.73499, 12.54055,   0.00000, 0.00000, 89.99999);
	CreateDynamicObject(1251, 1639.22498, -1683.21375, 12.53385,   0.00000, 0.00000, 91.14002);
	CreateDynamicObject(1251, 1639.21448, -1685.94055, 12.52861,   0.00000, 0.00000, 88.91995);
	CreateDynamicObject(1251, 1639.21277, -1688.88403, 12.52169,   0.00000, 0.00000, 89.88002);
	//mechanic center
	CreateDynamicObject(983, 2238.93286, -2239.29492, 13.05342,   0.00000, 0.00000, 42.91084);
	CreateDynamicObject(983, 2244.41553, -2229.71753, 13.05342,   0.00000, 0.00000, 131.19383);
	CreateDynamicObject(983, 2240.80542, -2232.83716, 13.05342,   0.00000, 0.00000, 131.19383);
	CreateDynamicObject(967, 2233.51025, -2215.47925, 12.53993,   0.00000, 0.00000, 45.36076);
	CreateDynamicObject(17950, 2195.06250, -2190.05371, 14.81110,   0.00000, 0.00000, 224.40190);
	CreateDynamicObject(16151, 2248.61157, -2243.47168, 12.88140,   0.00000, 0.00000, 314.48499);
	CreateDynamicObject(17950, 2183.14355, -2201.97485, 14.80415,   0.00000, 0.00000, 224.40195);
	CreateDynamicObject(17950, 2171.31470, -2213.87109, 14.79090,   0.00000, 0.00000, 224.40190);
	CreateDynamicObject(1432, 2247.19995, -2235.85303, 12.58322,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2243.18750, -2239.09033, 12.58322,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2242.75977, -2234.55054, 12.58322,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(968, 2238.92603, -2220.17993, 12.54025,   0.00000, 0.00000, 323.32849);
	CreateDynamicObject(970, 2230.79004, -2216.93750, 13.13560,   0.00000, 0.00000, 44.28260);
	CreateDynamicObject(970, 2227.83813, -2219.80493, 13.14640,   0.00000, 0.00000, 44.28260);
	CreateDynamicObject(970, 2224.81226, -2222.76660, 13.22470,   0.04000, 0.00000, 44.28260);
	CreateDynamicObject(970, 2232.06372, -2218.30005, 13.22470,   0.00000, 0.00000, 44.28260);
	CreateDynamicObject(970, 2229.09521, -2221.18555, 13.22470,   0.00000, 0.00000, 44.28260);
	CreateDynamicObject(970, 2226.18555, -2224.04150, 13.22470,   0.00000, 0.00000, 44.28260);
	CreateDynamicObject(983, 2179.14014, -2212.16968, 12.94448,   0.00000, 0.00000, 314.37595);
	CreateDynamicObject(983, 2181.37451, -2209.95825, 12.94448,   0.00000, 0.00000, 315.03506);
	CreateDynamicObject(983, 2191.02734, -2200.25244, 12.94448,   0.00000, 0.00000, 315.03506);
	CreateDynamicObject(983, 2193.27881, -2197.97852, 12.94448,   0.00000, 0.00000, 315.03506);
	CreateDynamicObject(983, 2202.75537, -2188.58716, 12.94448,   0.00000, 0.00000, 315.03506);
	CreateDynamicObject(970, 2190.42261, -2204.34668, 13.22470,   0.00000, 0.00000, 312.58493);
	CreateDynamicObject(970, 2193.17480, -2207.32178, 13.22470,   -0.16000, 0.00000, 312.58490);
	CreateDynamicObject(970, 2185.20117, -2209.29321, 13.22470,   -0.16000, 0.00000, 315.02319);
	CreateDynamicObject(970, 2188.10596, -2212.16553, 13.22470,   -0.16000, 0.00000, 315.02319);
	CreateDynamicObject(970, 2196.99194, -2197.35400, 13.22470,   -0.16000, 0.00000, 312.58490);
	CreateDynamicObject(970, 2202.12744, -2192.26636, 13.07440,   -0.16000, 0.00000, 312.58490);
	CreateDynamicObject(970, 2199.81885, -2200.44360, 13.22470,   -0.16000, 0.00000, 312.58490);
	CreateDynamicObject(970, 2204.94653, -2195.30518, 13.07440,   -0.16000, 0.00000, 312.58490);
	CreateDynamicObject(970, 2178.45459, -2216.01563, 13.22470,   -0.16000, 0.00000, 315.02319);
	CreateDynamicObject(970, 2173.33911, -2221.13232, 13.22470,   -0.16000, 0.00000, 315.02319);
	CreateDynamicObject(970, 2176.26831, -2224.07251, 13.22470,   -0.16000, 0.00000, 315.02319);
	CreateDynamicObject(970, 2181.39258, -2218.90454, 13.22470,   -0.16000, 0.00000, 315.02319);
	CreateDynamicObject(955, 2256.53516, -2239.06763, 12.92850,   0.00000, 0.00000, 226.47800);
	CreateDynamicObject(955, 2253.53857, -2242.19873, 12.93810,   0.00000, 0.00000, 226.47800);
	//SAGS INTERIOR
    CreateDynamicObject(19449, 774.45941, 1445.14978, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 770.95453, 1445.18384, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 774.33508, 1454.72388, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 770.99512, 1454.56360, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 767.55731, 1454.44568, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 767.46698, 1445.24036, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 764.20618, 1454.26038, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 764.21112, 1444.93298, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19450, 762.61853, 1449.87183, -73.42007,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 762.61298, 1459.39734, -73.42007,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 780.84656, 1444.79248, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 780.89362, 1454.18860, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 777.44757, 1445.28748, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 777.52582, 1454.35486, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19450, 762.60510, 1440.32507, -73.42007,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 762.60583, 1431.30603, -73.42007,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 767.09003, 1442.03162, -73.42007,   -180.00000, 0.00000, 89.94003);
	CreateDynamicObject(19450, 772.90619, 1442.00464, -73.42007,   -180.00000, 0.00000, 89.94003);
	CreateDynamicObject(19450, 760.82458, 1454.00317, -71.08770,   -180.00000, 0.00000, -88.02000);
	CreateDynamicObject(19466, 763.15680, 1454.02026, -73.20258,   0.00000, 0.00000, -87.54002);
	CreateDynamicObject(19466, 764.35870, 1454.09192, -73.20260,   0.00000, 0.00000, -87.54000);
	CreateDynamicObject(19442, 765.54657, 1454.94116, -73.54564,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, 763.49847, 1455.50281, -75.20420,   0.00000, 0.00000, 179.58000);
	CreateDynamicObject(1491, 765.54449, 1455.71375, -75.18990,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19442, 765.52631, 1457.94312, -73.54560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 765.56360, 1458.99536, -70.86500,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(2008, 763.27081, 1458.39343, -75.19700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 767.32941, 1458.92151, -73.42010,   -180.00000, 0.00000, 90.06000);
	CreateDynamicObject(19442, 765.52728, 1458.89771, -73.54560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, 764.14850, 1457.15857, -75.20420,   0.00000, 0.00000, 358.80011);
	CreateDynamicObject(2773, 763.05939, 1452.94763, -74.68170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 765.22894, 1452.95142, -74.68173,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 770.94830, 1463.81909, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 774.19000, 1463.80859, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 767.52753, 1463.85461, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19450, 765.90302, 1463.65271, -73.42010,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 772.11938, 1458.91626, -75.18990,   0.00000, 0.00000, -1.02000);
	CreateDynamicObject(19450, 778.40417, 1458.91125, -73.42010,   -180.00000, 0.00000, 90.06000);
	CreateDynamicObject(19450, 769.06561, 1458.93115, -70.93250,   360.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 766.40387, 1459.46252, -75.20812,   0.00000, 0.00000, 89.63999);
	CreateDynamicObject(2164, 769.03497, 1459.01953, -75.19790,   0.00000, 0.00000, 179.63989);
	CreateDynamicObject(2356, 767.48431, 1460.22522, -75.21178,   0.00000, 0.00000, 89.88000);
	CreateDynamicObject(2381, 766.88226, 1463.81958, -73.18822,   0.00000, 0.00000, 89.10002);
	CreateDynamicObject(2167, 765.85345, 1461.96484, -75.21640,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(2180, 766.35114, 1466.16223, -75.54143,   0.00000, 0.00000, 89.34004);
	CreateDynamicObject(2180, 767.13092, 1466.15796, -75.54140,   0.00000, 0.00000, 89.34000);
	CreateDynamicObject(349, 766.05139, 1465.96252, -74.20145,   0.00000, 0.00000, 94.08002);
	CreateDynamicObject(356, 766.06732, 1466.76257, -74.54228,   0.00000, 0.00000, 93.60001);
	CreateDynamicObject(367, 767.24377, 1465.74036, -74.74081,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 767.26141, 1465.97266, -74.74081,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 767.25873, 1466.23279, -74.74081,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 770.63831, 1468.59241, -73.42010,   -180.00000, 0.00000, 90.54003);
	CreateDynamicObject(19450, 775.39325, 1463.89734, -73.42010,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 775.37360, 1463.73718, -73.42010,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19859, 762.70862, 1446.17505, -73.95390,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(1723, 769.23907, 1444.60925, -75.17995,   0.00000, 0.00000, -91.31999);
	CreateDynamicObject(1723, 771.27985, 1444.50366, -75.17995,   0.00000, 0.00000, -91.31999);
	CreateDynamicObject(1723, 773.44836, 1444.56348, -75.17995,   0.00000, 0.00000, -91.31999);
	CreateDynamicObject(1723, 769.39056, 1448.29773, -75.17995,   0.00000, 0.00000, -91.31999);
	CreateDynamicObject(1723, 771.42987, 1448.25439, -75.17995,   0.00000, 0.00000, -91.31999);
	CreateDynamicObject(19450, 774.10248, 1446.00183, -73.42010,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 774.10541, 1450.98560, -73.42010,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 774.12238, 1457.35315, -73.43314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 773.40430, 1448.27795, -75.17995,   0.00000, 0.00000, -91.31999);
	CreateDynamicObject(19450, 779.68866, 1442.00623, -73.42007,   -180.00000, 0.00000, 89.94003);
	CreateDynamicObject(19449, 764.20203, 1446.73132, -71.74464,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 764.19128, 1455.85486, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 767.59943, 1463.82947, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 767.53229, 1454.94568, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 767.50818, 1445.45300, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 770.16443, 1445.36475, -71.64143,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 772.90784, 1445.51965, -71.59882,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 773.22540, 1444.30444, -71.49235,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 770.12689, 1454.91113, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 772.82178, 1455.06104, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(14699, 769.91028, 1447.42383, -73.25701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 770.14075, 1442.12585, -73.25701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 765.94507, 1453.98547, -73.25701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 760.78693, 1454.17407, -76.08544,   -180.00000, 0.00000, 90.96003);
	CreateDynamicObject(1744, 763.64447, 1454.28381, -74.68380,   0.00000, 0.00000, 0.84000);
	CreateDynamicObject(2894, 764.62677, 1454.01257, -74.33420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2371, 766.62891, 1463.21484, -71.75115,   0.00000, -179.00000, 0.00000);
	CreateDynamicObject(19443, 765.90503, 1466.46216, -74.19710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 765.91553, 1467.85925, -74.19710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(349, 766.05139, 1465.96252, -74.44077,   0.00000, 0.00000, 94.08002);
	CreateDynamicObject(349, 766.05139, 1465.96252, -74.00201,   0.00000, 0.00000, 94.08002);
	CreateDynamicObject(349, 766.05139, 1465.96252, -73.76270,   0.00000, 0.00000, 94.08002);
	CreateDynamicObject(356, 766.07355, 1467.42310, -74.24260,   0.00000, 0.00000, 93.60001);
	CreateDynamicObject(356, 766.07355, 1467.42310, -73.92270,   0.00000, 0.00000, 93.60001);
	CreateDynamicObject(356, 766.07355, 1467.42310, -73.62276,   0.00000, 0.00000, 93.60001);
	CreateDynamicObject(356, 766.07355, 1467.42310, -73.30282,   0.00000, 0.00000, 93.60001);
	CreateDynamicObject(348, 767.25293, 1466.57019, -74.70301,   -86.00000, 0.00000, 0.00000);
	CreateDynamicObject(348, 767.27289, 1466.83020, -74.70300,   -86.00000, 0.00000, 0.00000);
	CreateDynamicObject(348, 767.27289, 1467.09021, -74.70300,   -86.00000, 0.00000, 0.00000);
	CreateDynamicObject(348, 767.27289, 1467.37024, -74.70300,   -86.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 767.39539, 1467.93384, -74.87489,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 767.39539, 1467.93384, -74.81490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 767.39539, 1467.93384, -74.75490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 770.87701, 1463.84265, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 773.75830, 1463.85132, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19450, 782.46014, 1451.27722, -73.42010,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 782.50452, 1447.11670, -73.42010,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(2518, 774.71863, 1454.90149, -74.84809,   0.00000, 0.00000, 92.51999);
	CreateDynamicObject(2518, 774.71863, 1453.96155, -74.84810,   0.00000, 0.00000, 92.52000);
	CreateDynamicObject(2685, 774.23529, 1454.87268, -73.62720,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(19431, 774.84949, 1455.82031, -73.40340,   -180.00000, 0.00000, -87.84000);
	CreateDynamicObject(19431, 776.44080, 1455.87781, -73.40340,   -180.00000, 0.00000, -87.84000);
	CreateDynamicObject(19388, 778.76068, 1455.97473, -73.43314,   0.00000, 0.00000, 91.85999);
	CreateDynamicObject(14699, 772.84406, 1454.00366, -73.25701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 768.94720, 1454.37427, -73.25701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 773.74927, 1459.23669, -73.25701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 773.60425, 1463.56165, -73.25701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 784.98138, 1456.11328, -73.42010,   -180.00000, 0.00000, 90.06000);
	CreateDynamicObject(19431, 774.99719, 1453.13257, -73.44670,   0.00000, 0.00000, 91.02000);
	CreateDynamicObject(19431, 776.53741, 1453.15002, -73.44670,   0.00000, 0.00000, 91.02000);
	CreateDynamicObject(2528, 774.60492, 1452.24646, -75.17600,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(19431, 774.91467, 1451.46875, -73.44670,   0.00000, 0.00000, 91.02000);
	CreateDynamicObject(19431, 776.50293, 1451.49585, -73.44670,   0.00000, 0.00000, 91.02000);
	CreateDynamicObject(1491, 777.24652, 1451.57153, -75.20640,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(2528, 774.62109, 1450.54443, -75.17600,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(19431, 774.98230, 1449.86584, -73.44670,   0.00000, 0.00000, 91.02000);
	CreateDynamicObject(1491, 777.20038, 1449.89209, -75.20640,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(19431, 776.49432, 1449.90381, -73.44670,   0.00000, 0.00000, 91.02000);
	CreateDynamicObject(1491, 777.21094, 1448.35095, -75.20640,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(19431, 776.52344, 1448.30383, -73.44670,   0.00000, 0.00000, 91.02000);
	CreateDynamicObject(19431, 774.94226, 1448.25818, -73.44670,   0.00000, 0.00000, 91.02000);
	CreateDynamicObject(2528, 774.59570, 1449.01563, -75.17600,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(2515, 774.46124, 1447.23596, -74.07521,   0.00000, 0.00000, 91.01999);
	CreateDynamicObject(2515, 774.46118, 1446.11597, -74.07520,   0.00000, 0.00000, 91.02000);
	CreateDynamicObject(2515, 774.46118, 1444.93604, -74.07520,   0.00000, 0.00000, 91.02000);
	CreateDynamicObject(19466, 774.19934, 1445.70325, -73.09683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 774.21411, 1446.60315, -73.09680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 774.19855, 1444.02124, -73.09683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2515, 774.46118, 1443.81604, -74.07520,   0.00000, 0.00000, 91.02000);
	CreateDynamicObject(3812, 769.05975, 1442.35718, -72.55362,   0.00000, 0.00000, 89.21999);
	CreateDynamicObject(3812, 771.11621, 1442.31299, -72.55362,   0.00000, 0.00000, 89.21999);
	CreateDynamicObject(3812, 762.72192, 1456.29321, -72.49570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 763.64679, 1454.01257, -74.33420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, 764.75848, 1455.50281, -75.20420,   0.00000, 0.00000, 179.58000);
	CreateDynamicObject(2369, 764.29865, 1454.72571, -74.59000,   0.00000, 0.00000, 1.44000);
	CreateDynamicObject(1744, 764.57507, 1454.18555, -74.92610,   0.00000, 0.00000, 181.44000);
	CreateDynamicObject(19449, 776.11670, 1454.49915, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 779.17572, 1454.47766, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 781.39587, 1454.40588, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 781.35919, 1446.20447, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 778.95148, 1445.87659, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 775.94336, 1445.54236, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(14699, 781.58740, 1442.37659, -73.25701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 781.06494, 1446.55359, -73.25701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 781.71399, 1451.00476, -73.25701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3812, 776.49359, 1442.52832, -72.53438,   0.00000, 0.00000, 92.09999);
	CreateDynamicObject(3812, 780.04004, 1442.60706, -72.53438,   0.00000, 0.00000, 92.09999);
	CreateDynamicObject(3812, 782.25250, 1451.40063, -72.28086,   0.00000, 0.00000, 178.55994);
	CreateDynamicObject(19450, 782.48230, 1446.09204, -73.42010,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 770.68799, 1464.93042, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 773.72961, 1464.62036, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(2796, 778.91260, 1455.97668, -72.34880,   0.00000, 0.00000, 2.04000);
	CreateDynamicObject(3791, 774.59662, 1464.20654, -74.76029,   0.00000, 0.00000, 88.68001);
	CreateDynamicObject(3791, 774.49261, 1461.06580, -74.76029,   0.00000, 0.00000, 88.68001);
	CreateDynamicObject(1235, 773.68402, 1450.66125, -74.71430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19172, 762.79358, 1448.48206, -73.24023,   0.00000, 0.00000, 90.54000);
	CreateDynamicObject(1808, 768.37531, 1468.27734, -75.18160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2394, 766.24060, 1463.85571, -73.17713,   0.00000, 0.00000, 88.92001);
	CreateDynamicObject(2387, 769.52948, 1467.74048, -75.20899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2387, 770.75073, 1467.75525, -75.20899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3041, 773.34906, 1467.87012, -75.16968,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 765.87274, 1442.17065, -72.72808,   0.00000, 0.00000, 180.12003);
	CreateDynamicObject(19449, 784.34229, 1460.47583, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 784.31421, 1468.11780, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 787.51324, 1460.79077, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 781.02063, 1463.64319, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 777.64532, 1463.78125, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 781.02783, 1471.88086, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 777.58881, 1472.92346, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 776.84393, 1472.84656, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 784.33264, 1474.59338, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 787.52478, 1469.97375, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 787.26117, 1474.69189, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19450, 775.39044, 1473.41577, -73.42010,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 788.97943, 1460.80164, -73.42010,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 788.97290, 1470.24609, -73.42010,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 788.94910, 1478.44812, -73.42010,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 780.18518, 1476.49670, -73.42010,   -180.00000, 0.00000, 90.06000);
	CreateDynamicObject(19450, 788.39392, 1476.50085, -73.42010,   -180.00000, 0.00000, 90.06000);
	CreateDynamicObject(19449, 786.93909, 1460.04614, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19388, 784.80212, 1458.88879, -73.44160,   0.00000, 0.00000, 89.46000);
	CreateDynamicObject(19450, 791.09302, 1458.89954, -73.42010,   -180.00000, 0.00000, 90.06000);
	CreateDynamicObject(2169, 779.42499, 1463.82483, -75.22410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2169, 781.35748, 1463.82861, -75.22410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2169, 783.29956, 1463.80969, -75.22410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2169, 785.20300, 1463.81335, -75.22410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2169, 786.35541, 1464.78699, -75.22410,   0.00000, 0.00000, 89.10000);
	CreateDynamicObject(2169, 786.39136, 1466.71277, -75.22410,   0.00000, 0.00000, 89.10000);
	CreateDynamicObject(2169, 786.41364, 1468.61829, -75.22410,   0.00000, 0.00000, 89.10000);
	CreateDynamicObject(2169, 786.44843, 1470.55444, -75.22410,   0.00000, 0.00000, 89.10000);
	CreateDynamicObject(2169, 786.46918, 1472.24036, -75.22410,   0.00000, 0.00000, 89.10000);
	CreateDynamicObject(2169, 777.41589, 1465.76392, -75.22410,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(2169, 777.53198, 1463.81274, -75.22410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2169, 777.42688, 1467.65942, -75.22410,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(2169, 777.43512, 1469.53748, -75.22410,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(2169, 777.45648, 1471.47717, -75.22410,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(2169, 777.47247, 1473.43616, -75.22410,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(2169, 784.91400, 1473.41711, -75.22410,   0.00000, 0.00000, 178.13989);
	CreateDynamicObject(2169, 783.03052, 1473.45874, -75.22410,   0.00000, 0.00000, 178.97990);
	CreateDynamicObject(2169, 781.23090, 1473.49829, -75.22410,   0.00000, 0.00000, 178.61990);
	CreateDynamicObject(2169, 779.41119, 1473.52686, -75.22410,   0.00000, 0.00000, 179.15990);
	CreateDynamicObject(2169, 786.01550, 1473.39063, -75.22410,   0.00000, 0.00000, 178.13989);
	CreateDynamicObject(2227, 782.08698, 1468.73865, -75.18237,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 781.92621, 1468.27002, -74.19763,   0.00000, 0.00000, 89.22000);
	CreateDynamicObject(1846, 781.71802, 1475.42285, -73.59350,   -90.00000, 0.00000, -0.54000);
	CreateDynamicObject(1562, 781.94757, 1474.99768, -74.47800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 784.97510, 1474.96936, -74.47797,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 778.70898, 1475.08081, -74.47797,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 787.69879, 1472.78760, -74.76212,   0.00000, 0.00000, -89.64006);
	CreateDynamicObject(1671, 787.70319, 1470.92004, -74.76210,   0.00000, 0.00000, -89.64010);
	CreateDynamicObject(2614, 784.81909, 1476.34412, -73.01147,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 778.57874, 1476.34326, -73.01147,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 787.70544, 1469.15942, -74.76210,   0.00000, 0.00000, -89.64010);
	CreateDynamicObject(1671, 787.68762, 1467.03845, -74.50957,   0.00000, 0.00000, -89.64010);
	CreateDynamicObject(1671, 787.65393, 1464.99744, -74.50957,   0.00000, 0.00000, -89.64010);
	CreateDynamicObject(1671, 785.73669, 1462.35486, -74.50957,   0.00000, 0.00000, -179.64020);
	CreateDynamicObject(1671, 783.75433, 1462.31738, -74.50957,   0.00000, 0.00000, -179.64020);
	CreateDynamicObject(1671, 781.92981, 1462.26172, -74.50957,   0.00000, 0.00000, -179.64020);
	CreateDynamicObject(1671, 779.86127, 1462.29175, -74.50957,   0.00000, 0.00000, -179.64020);
	CreateDynamicObject(1671, 778.05951, 1462.26672, -74.50957,   0.00000, 0.00000, -179.64020);
	CreateDynamicObject(1671, 775.99292, 1472.86047, -74.76756,   0.00000, 0.00000, 91.32001);
	CreateDynamicObject(1671, 776.06232, 1470.80896, -74.76756,   0.00000, 0.00000, 91.32001);
	CreateDynamicObject(1671, 776.10309, 1469.03247, -74.76756,   0.00000, 0.00000, 91.32001);
	CreateDynamicObject(1671, 776.11749, 1467.11755, -74.76756,   0.00000, 0.00000, 91.32001);
	CreateDynamicObject(1671, 776.22870, 1465.31189, -74.76756,   0.00000, 0.00000, 91.32001);
	CreateDynamicObject(3812, 788.71039, 1473.35364, -72.45187,   0.00000, 0.00000, 180.71989);
	CreateDynamicObject(3812, 788.76257, 1463.70007, -72.45187,   0.00000, 0.00000, 180.71989);
	CreateDynamicObject(3812, 775.71826, 1472.49268, -72.41885,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3812, 775.67627, 1464.10107, -72.41885,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 777.21002, 1463.81531, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 777.11029, 1472.49280, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 780.45612, 1472.38892, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 780.65491, 1463.95105, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 783.86108, 1460.61853, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 787.41431, 1460.48596, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 787.42456, 1469.84534, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 783.92322, 1469.79504, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 783.94611, 1473.24573, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 787.49500, 1473.98645, -71.67870,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(14699, 783.95093, 1468.73804, -73.31911,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 783.83246, 1464.08264, -73.31911,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 783.57990, 1459.62390, -73.31911,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 783.22852, 1454.98694, -73.31911,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19172, 775.48438, 1467.24036, -72.66785,   0.00000, 0.00000, 89.57999);
	CreateDynamicObject(1491, 784.00916, 1458.87671, -75.18990,   0.00000, 0.00000, -1.02000);
	CreateDynamicObject(19449, 763.79089, 1454.35156, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19449, 763.93420, 1445.14612, -75.28610,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(2608, 788.76001, 1475.45459, -73.55988,   0.00000, 0.00000, -92.70004);
	CreateDynamicObject(19859, 762.69141, 1443.18994, -73.95390,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2412, 763.14838, 1442.74390, -75.19713,   0.00000, 0.00000, -88.86001);
	CreateDynamicObject(2412, 763.17920, 1445.94971, -75.19710,   0.00000, 0.00000, -88.86000);
	CreateDynamicObject(16779, 769.74500, 1463.53455, -71.79717,   0.00000, 0.00000, 0.00000);
	//LSPD INT OBJECTS
	CreateDynamicObject(1616,240.28379822,107.48500061,1010.29998779,0.00000000,0.00000000,270.00000000); //object(nt_securecam1_01) (1)
	CreateDynamicObject(2058,262.23831177,107.09999847,1006.12506104,270.00000000,0.00000000,0.00000000); //object(cj_gun_docs) (1)
	CreateDynamicObject(971,264.83126831,106.72861481,1004.59997559,0.00000000,0.00000000,0.00000000); //object(subwaygate) (3)
	CreateDynamicObject(1491,222.17500305,119.45999908,1009.21502686,0.00000000,0.00000000,0.00000000); //object(gen_doorint01) (1)
	CreateDynamicObject(1491,258.54998779,117.67968750,1007.82000732,0.00000000,0.00000000,0.00000000); //object(gen_doorint01) (3)
	CreateDynamicObject(1491,260.73925781,117.67968750,1007.82000732,0.00000000,0.00000000,0.00000000); //object(gen_doorint01) (4)
	CreateDynamicObject(2612,263.50000000,112.34960938,1005.50000000,0.00000000,0.00000000,0.00000000); //object(police_nb2) (1)
	CreateDynamicObject(3857,233.04499817,124.00000000,1013.00000000,0.00000000,0.00000000,315.00000000); //object(ottosmash3) (1)
	CreateDynamicObject(3857,232.73730469,124.00000000,1013.00000000,0.00000000,0.00000000,135.00000000); //object(ottosmash3) (2)
	CreateDynamicObject(1491,225.05999756,115.94999695,1002.22998047,0.00000000,0.00000000,0.00000000); //object(gen_doorint01) (2)
	CreateDynamicObject(1491,233.11000061,119.25000000,1002.22998047,0.00000000,0.00000000,0.00000000); //object(gen_doorint01) (5)
	CreateDynamicObject(1491,236.80999756,119.25000000,1002.22998047,0.00000000,0.00000000,0.00000000); //object(gen_doorint01) (6)
	CreateDynamicObject(3051,275.77499390,122.65599823,1004.97937012,0.00000000,0.00000000,46.00000000); //object(lift_dr) (1)
	CreateDynamicObject(3051,275.75000000,121.50000000,1004.97937012,0.00000000,0.00000000,45.00000000); //object(lift_dr) (2)
	CreateDynamicObject(1485,227.89999390,125.30000305,1010.21002197,50.00000000,10.00000000,2.00000000); //object(cj_ciggy) (1)
	CreateDynamicObject(1510,228.07321167,125.27845001,1010.15997314,0.00000000,0.00000000,0.00000000); //object(dyn_ashtry) (1)
	CreateDynamicObject(2196,228.40014648,125.53178406,1010.13958740,0.00000000,0.00000000,29.77478027); //object(work_lamp1) (1)
	CreateDynamicObject(2063,262.95996094,107.40136719,1004.53997803,0.00000000,0.00000000,179.99450684); //object(cj_greenshelves) (1)
	CreateDynamicObject(2043,262.29138184,107.46166229,1004.09997559,0.00000000,0.00000000,294.36035156); //object(ammo_box_m4) (1)
	CreateDynamicObject(2044,262.99542236,107.55000305,1004.96002197,0.00000000,0.00000000,39.99572754); //object(cj_mp5k) (2)
	CreateDynamicObject(1672,262.62597656,107.59999847,1005.37500000,0.00000000,90.00000000,0.00000000); //object(gasgrenade) (1)
	CreateDynamicObject(1672,262.81585693,107.48020935,1005.41998291,0.00000000,0.00000000,0.00000000); //object(gasgrenade) (2)
	CreateDynamicObject(14782,267.76998901,109.30000305,1004.63323975,0.00000000,0.00000000,270.00000000); //object(int3int_boxing30) (2)
	CreateDynamicObject(14782,260.79980469,108.75000000,1004.63323975,0.00000000,0.00000000,90.00000000); //object(int3int_boxing30) (3)
	CreateDynamicObject(2359,263.54296875,107.39648438,1005.53002930,0.00000000,0.00000000,183.89465332); //object(ammo_box_c5) (1)
	CreateDynamicObject(2038,263.47906494,107.32552338,1004.51000977,270.00000000,0.00000000,29.91000366); //object(ammo_box_s2) (1)
	CreateDynamicObject(2035,262.61035156,107.39941406,1004.50000000,0.00000000,0.00000000,19.99511719); //object(cj_m16) (1)
	CreateDynamicObject(2690,264.43099976,107.26506042,1003.97662354,0.00000000,0.00000000,312.13488770); //object(cj_fire_ext) (1)
	CreateDynamicObject(2058,262.98568726,107.09528351,1005.36926270,90.00000000,180.00549316,359.98352051); //object(cj_gun_docs) (1)
	CreateDynamicObject(11631,269.81250000,118.18945312,1004.86309814,0.00000000,0.00000000,270.00000000); //object(ranch_desk) (1)
	CreateDynamicObject(2356,269.14312744,117.66873169,1003.61718750,0.00000000,0.00000000,294.49548340); //object(police_off_chair) (1)
	CreateDynamicObject(2094,262.86523438,110.89941406,1003.60998535,0.00000000,0.00000000,0.00000000); //object(swank_cabinet_4) (1)
	CreateDynamicObject(1886,267.73999023,107.50000000,1007.40002441,20.00000000,0.00000000,235.00000000); //object(shop_sec_cam) (1)
	CreateDynamicObject(1235,270.03616333,116.56486511,1004.12023926,0.00000000,0.00000000,0.00000000); //object(wastebin) (1)
	CreateDynamicObject(2606,267.36914062,120.50683594,1004.59997559,0.00000000,0.00000000,0.00000000); //object(cj_police_counter2) (1)
	CreateDynamicObject(2606,267.36914062,120.50683594,1005.04998779,0.00000000,0.00000000,0.00000000); //object(cj_police_counter2) (2)
	CreateDynamicObject(1738,270.29000854,120.00000000,1004.27178955,0.00000000,0.00000000,269.27026367); //object(cj_radiator_old) (1)
	CreateDynamicObject(2180,265.50552368,120.27999878,1003.61718750,0.00000000,0.00000000,180.54052734); //object(med_office5_desk_3) (1)
	CreateDynamicObject(1788,265.60000610,120.50000000,1004.48681641,0.00000000,0.00000000,0.00000000); //object(swank_video_1) (1)
	CreateDynamicObject(1782,265.59960938,120.50000000,1004.65002441,0.00000000,0.00000000,0.00000000); //object(med_video_2) (1)
	CreateDynamicObject(2595,264.21002197,120.37789154,1004.77404785,0.00000000,0.00000000,314.65002441); //object(cj_shop_tv_video) (1)
	CreateDynamicObject(1785,265.59960938,120.50976562,1004.84997559,0.00000000,0.00000000,0.00000000); //object(low_video_1) (1)
	CreateDynamicObject(1840,264.81204224,120.58029938,1004.41882324,0.00000000,0.00000000,105.60998535); //object(speaker_2) (1)
	CreateDynamicObject(1840,265.70001221,120.55999756,1004.96264648,0.00000000,0.00000000,75.00000000); //object(speaker_2) (2)
	CreateDynamicObject(2356,265.15481567,119.43829346,1003.61718750,0.00000000,0.00000000,34.19393921); //object(police_off_chair) (2)
	CreateDynamicObject(4100,246.51953125,119.39941406,1005.40002441,0.00000000,179.99450684,219.99023438); //object(meshfence1_lan) (1)
	CreateDynamicObject(2933,253.19921875,118.19921875,1005.79998779,0.00000000,0.00000000,90.00000000); //object(pol_comp_gate) (1)
	CreateDynamicObject(2933,239.60000610,110.48000336,1005.79998779,0.00000000,0.00000000,90.00000000); //object(pol_comp_gate) (2)
	CreateDynamicObject(2101,266.74893188,120.49598694,1005.28363037,0.00000000,0.00000000,0.00000000); //object(med_hi_fi_3) (1)
	CreateDynamicObject(1886,264.25000000,116.55000305,1007.29998779,30.00000000,0.00000000,140.00000000); //object(shop_sec_cam) (2)
	CreateDynamicObject(2611,268.47473145,116.05200195,1005.25000000,0.00000000,0.00000000,180.00000000); //object(police_nb1) (1)
	CreateDynamicObject(1703,243.10000610,107.59999847,1002.21875000,0.00000000,0.00000000,180.00000000); //object(kb_couch02) (1)
	CreateDynamicObject(4100,232.84960938,128.50000000,1011.91998291,0.00000000,0.00000000,49.99877930); //object(meshfence1_lan) (4)
	CreateDynamicObject(2595,226.24514771,120.27544403,1011.28753662,0.00000000,0.00000000,77.72994995); //object(cj_shop_tv_video) (2)
	CreateDynamicObject(3934,1565.94946289,-1701.00000000,27.39999962,0.00000000,0.00000000,0.00000000); //object(helipad01) (1)
	CreateDynamicObject(3934,1565.94921875,-1646.02929688,27.39999962,0.00000000,0.00000000,0.00000000); //object(helipad01) (2)
	CreateDynamicObject(2953,228.27796936,125.20470428,1010.14331055,0.00000000,0.00000000,143.45983887); //object(kmb_paper_code) (1)
	//LSPD-Chink Gates-LSSD-LSMD-All Saints
	LSPDGate = CreateDynamicObject(988, 1539.83447, -1625.47095, 13.30220,   0.00000, 0.00000, 270.00000);
	LSPDGate1 = CreateDynamicObject(988, 1539.83447, -1630.86499, 13.30220,   0.00000, 0.00000, 270.00000);
 	//LSPD Improvements farva
	CreateDynamicObject(11326,1604.98535156,-1623.68457031,14.71534920,0.00000000,0.00000000,90.00000000); //Impount point
	lspddoor1 = CreateDynamicObject(1569, 246.35150146484, 72.547714233398, 1002.640625, 0.000000, 0.000000, 0.000000); //
	lspddoor2 = CreateDynamicObject(1569, 245.03300476074, 72.568511962891, 1002.640625, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(12814, 264.49127197266, 1882.6428222656, 16.587562561035, 0, 0, 0); // NG jet door
	CreateDynamicObject(991, 226.45503234863, 1872.4094238281, 13.949615478516, 0, 0, 270.27062988281);

	CreateDynamicObject(3029, 2175.6774902344, 1594.2722167969, 998.97888183594, 0, 0, 268.69067382813); // Drug Factory Doors
 	CreateDynamicObject(1569, 1167.8109130859, 1362.78515625, 9.8125076293945, 0.000000, 0.000000, 0.000000); // Senate Door
	CreateDynamicObject(10832, 296.68603515625, -1549.5653076172, 77.338836669922, 0.000000, 0.000000, 162.94946289063); //
	CreateDynamicObject(3029, 2223.58203125, 1598.2083740234, 998.9765625, 0, 0, 268.69067382813);
	//SANEWS Gates
	SANGate = CreateDynamicObject(969, 781.77154541016, -1384.7692871094, 12.726663589478, 0, 0, 180.54052734375);
	CreateDynamicObject(19377, 777.92218, -1330.11633, 11.28358,   0.00000, 0.00000, 88.92000);
   	CreateDynamicObject(1282, 781.29571533203, -1328.1229248047, 13.235691070557, 0, 0, 270.63061523438);
    CreateDynamicObject(1282, 777.85040283203, -1328.0673828125, 13.235691070557, 0, 0, 270.67565917969);
    CreateDynamicObject(1282, 774.73156738281, -1328.00390625, 13.235691070557, 0, 0, 270.27026367188);

	//FIX (Incognito's streamer v2.3.8) - Stability Glitch for the Welcome
	CreateDynamicObject(4729, 682.85186767578, -446.04205322266, -26.629999160767, 20, 90, 0.000000, -1, 1, -1, 200.0);
	//SANews Custom Interior
	SANewsStudio = CreateButton(625.50000000,-13.60000038,1108.50000000,270.00000000); //object(sec_keypad) (1)
	SANewsStudioA = CreateDynamicObject(1536,625.60937500,-10.80000019,1106.96081543,0.00000000,0.00000000,270.00000000); //object(gen_doorext15) (1)
	SANewsStudioB = CreateDynamicObject(1536,625.64941406,-13.77000046,1106.96081543,0.00000000,0.00000000,89.99450684); //object(gen_doorext15) (2)

	SANewsPrivate = CreateButton(625.51953125,-3.59961796,1108.50000000,269.99450684); //object(sec_keypad) (2)
	SANewsPrivateOPP = CreateButton(626.13519287,-0.08516422,1108.61315918,0); //object(sec_keypad) (4)
	SANewsPrivateA = CreateDynamicObject(1536,625.60937500,-0.55000001,1106.96081543,0.00000000,0.00000000,269.98901367); //object(gen_doorext15) (4)
	SANewsPrivateB = CreateDynamicObject(1536,625.65002441,-3.54999995,1106.96081543,0.00000000,0.00000000,89.99450684); //object(gen_doorext15) (4)

	SANewsOffice = CreateButton(614.58581543,17.78320312,1108.55004883,0); //object(sec_keypad) (3)
	SANewsOfficeA = CreateDynamicObject(1536,614.66998291,17.82812500,1106.98425293,0.00000000,0.00000000,0.00000000); //object(gen_doorext15) (3)
	SANewsOfficeB = CreateDynamicObject(1536,617.69000244,17.86899948,1106.98425293,0.00000000,0.00000000,179.99450684); //object(gen_doorext15) (5)

    CreateDynamicObject(14858,642.46972656,5.32226562,1112.10925293,0.00000000,0.00000000,0.00000000); //object(veg_pol_main1) (1)
	CreateDynamicObject(14393,634.28417969,-11.96093750,1109.19995117,0.00000000,0.00000000,179.99450684); //object(dr_gsnew09) (1)
	CreateDynamicObject(2395,625.67999268,-11.09000015,1108.97705078,0.00000000,90.00000000,89.99975586); //object(cj_sports_wall) (1)
	CreateDynamicObject(2815,625.54998779,-11.60999966,1106.96081543,0.00000000,0.00000000,270.00000000); //object(gb_livingrug01) (1)
	CreateDynamicObject(14391,633.47290039,-11.00473785,1107.93298340,0.00000000,0.00000000,183.99998474); //object(dr_gsnew07) (1)
	CreateDynamicObject(1714,631.42712402,-9.90536308,1106.97290039,0.00000000,0.00000000,92.00000000); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1714,631.51861572,-11.47354698,1106.97290039,0.00000000,0.00000000,95.99853516); //object(kb_swivelchair1) (2)
	CreateDynamicObject(1714,631.59759521,-13.82226276,1106.97290039,0.00000000,0.00000000,77.99853516); //object(kb_swivelchair1) (3)
	CreateDynamicObject(2315,638.78424072,-11.80882740,1106.97290039,0.00000000,0.00000000,0.00000000); //object(cj_tv_table4) (1)
	CreateDynamicObject(1760,640.32360840,-13.80259418,1106.96557617,0.00000000,0.00000000,179.99993896); //object(med_couch_2) (1)
	CreateDynamicObject(1760,642.01440430,-10.61748886,1106.96557617,0.00000000,0.00000000,265.99450684); //object(med_couch_2) (2)
	CreateDynamicObject(1760,638.34350586,-9.24169922,1106.96557617,0.00000000,0.00000000,357.98999023); //object(med_couch_2) (3)
	CreateDynamicObject(2105,639.46795654,-11.76701641,1107.83972168,0.00000000,0.00000000,0.00000000); //object(cj_mlight14) (1)
	CreateDynamicObject(1786,639.09246826,-16.56604958,1108.46118164,0.00000000,0.00000000,182.00000000); //object(swank_tv_4) (1)
	CreateDynamicObject(2611,607.23999023,4.63107729,1108.79919434,0.00000000,0.00000000,90.00000000); //object(police_nb1) (1)
	CreateDynamicObject(2172,612.69000244,8.02299976,1106.96081543,0.00000000,0.00000000,271.99951172); //object(med_office2_desk_1) (1)
	CreateDynamicObject(2172,612.74200439,6.11000013,1106.96081543,0.00000000,0.00000000,271.99951172); //object(med_office2_desk_1) (3)
	CreateDynamicObject(2172,612.82000732,4.19999981,1106.96081543,0.00000000,0.00000000,271.99951172); //object(med_office2_desk_1) (4)
	CreateDynamicObject(2172,612.91583252,2.29999995,1106.96081543,0.00000000,0.00000000,271.99951172); //object(med_office2_desk_1) (5)
	CreateDynamicObject(2172,614.61499023,8.80000019,1106.96081543,0.00000000,0.00000000,181.99853516); //object(med_office2_desk_1) (6)
	CreateDynamicObject(2172,615.54998779,6.90000010,1106.96081543,0.00000000,0.00000000,89.99450684); //object(med_office2_desk_1) (7)
	CreateDynamicObject(2172,615.53997803,4.92999983,1106.96081543,0.00000000,0.00000000,89.99450684); //object(med_office2_desk_1) (8)
	CreateDynamicObject(2172,615.53997803,3.00000000,1106.96081543,0.00000000,0.00000000,89.99450684); //object(med_office2_desk_1) (9)
	CreateDynamicObject(2172,615.59667969,1.14257812,1106.96081543,0.00000000,0.00000000,91.99450684); //object(med_office2_desk_1) (10)
	CreateDynamicObject(2172,613.81042480,0.11331153,1106.96081543,0.00000000,0.00000000,5.99450684); //object(med_office2_desk_1) (11)
	CreateDynamicObject(2202,608.04675293,25.50461388,1106.96081543,0.00000000,0.00000000,355.99548340); //object(photocopier_2) (2)
	CreateDynamicObject(2202,611.21105957,22.59075928,1106.96081543,0.00000000,0.00000000,267.99499512); //object(photocopier_2) (3)
	CreateDynamicObject(2202,606.74566650,21.13117599,1106.96081543,0.00000000,0.00000000,91.98995972); //object(photocopier_2) (4)
	CreateDynamicObject(2612,606.41625977,22.18580818,1109.21020508,0.00000000,0.00000000,92.00000000); //object(police_nb2) (1)
	CreateDynamicObject(14532,607.53033447,0.48353872,1107.94348145,0.00000000,0.00000000,278.00000000); //object(tv_stand_driv) (1)
	CreateDynamicObject(14455,620.77935791,1.52993298,1108.63256836,0.00000000,0.00000000,88.00000000); //object(gs_bookcase) (1)
	CreateDynamicObject(2610,620.71752930,11.24325848,1107.78625488,0.00000000,0.00000000,272.00000000); //object(cj_p_fileing2) (1)
	CreateDynamicObject(2610,620.69189453,10.45298672,1107.78625488,0.00000000,0.00000000,271.99951172); //object(cj_p_fileing2) (2)
	CreateDynamicObject(2610,620.77746582,9.95960999,1107.78625488,0.00000000,0.00000000,271.99951172); //object(cj_p_fileing2) (3)
	CreateDynamicObject(2610,620.86340332,9.46644592,1107.78625488,0.00000000,0.00000000,271.99951172); //object(cj_p_fileing2) (4)
	CreateDynamicObject(2610,620.80957031,12.05457497,1107.78625488,0.00000000,0.00000000,271.99951172); //object(cj_p_fileing2) (5)
	CreateDynamicObject(2610,620.72308350,12.54651070,1107.78625488,0.00000000,0.00000000,271.99951172); //object(cj_p_fileing2) (6)
	CreateDynamicObject(2002,620.62536621,-2.25854850,1106.96740723,0.00000000,0.00000000,219.99996948); //object(water_coolnu) (1)
	CreateDynamicObject(2356,616.59564209,1.70691252,1106.96081543,0.00000000,0.00000000,82.00000000); //object(police_off_chair) (1)
	CreateDynamicObject(2356,616.59997559,3.50000000,1106.96081543,0.00000000,0.00000000,85.99548340); //object(police_off_chair) (2)
	CreateDynamicObject(2356,616.72247314,5.33097982,1106.96081543,0.00000000,0.00000000,85.99548340); //object(police_off_chair) (3)
	CreateDynamicObject(2356,616.43884277,7.40511417,1106.96081543,0.00000000,0.00000000,85.99548340); //object(police_off_chair) (4)
	CreateDynamicObject(2356,614.28680420,9.94143581,1106.96081543,0.00000000,0.00000000,179.99450684); //object(police_off_chair) (5)
	CreateDynamicObject(2356,611.65472412,7.65680075,1106.96081543,0.00000000,0.00000000,271.99401855); //object(police_off_chair) (6)
	CreateDynamicObject(2356,611.69030762,5.75110149,1106.96081543,0.00000000,0.00000000,271.99353027); //object(police_off_chair) (7)
	CreateDynamicObject(2356,611.73883057,3.85063982,1106.96081543,0.00000000,0.00000000,275.99255371); //object(police_off_chair) (8)
	CreateDynamicObject(2356,611.76660156,1.83999658,1106.96081543,0.00000000,0.00000000,269.98706055); //object(police_off_chair) (9)
	CreateDynamicObject(2356,614.28808594,-0.91274583,1106.96081543,0.00000000,0.00000000,3.98803711); //object(police_off_chair) (10)
	CreateDynamicObject(18001,634.46514893,-9.94189835,1108.90002441,0.00000000,0.00000000,270.00000000); //object(int_barbera07) (1)
	CreateDynamicObject(18001,634.81518555,-9.89375305,1108.90002441,0.00000000,0.00000000,87.99450684); //object(int_barbera07) (2)
	CreateDynamicObject(14576,610.93597412,-5.72900009,1102.55004883,0.00000000,0.00000000,90.00000000); //object(vault_door) (1)
	CreateDynamicObject(5154,597.87915039,5.38002968,1107.90002441,0.00000000,0.00000000,0.00000000); //object(dk_cargoshp03d) (1)
	CreateDynamicObject(2596,626.83544922,14.12057877,1109.63659668,0.00000000,0.00000000,168.00000000); //object(cj_sex_tv) (1)
	CreateDynamicObject(1760,629.00543213,19.98082924,1106.96862793,0.00000000,0.00000000,268.00000000); //object(med_couch_2) (4)
	CreateDynamicObject(1760,629.05010986,16.73079109,1106.96862793,0.00000000,0.00000000,267.99499512); //object(med_couch_2) (5)
	CreateDynamicObject(1760,622.69268799,18.65637589,1106.96862793,0.00000000,0.00000000,85.99499512); //object(med_couch_2) (6)
	CreateDynamicObject(1737,626.67340088,14.59884357,1106.96862793,0.00000000,0.00000000,0.00000000); //object(med_dinning_5) (1)
	CreateDynamicObject(2855,626.56701660,14.41764069,1107.76403809,0.00000000,0.00000000,0.00000000); //object(gb_bedmags05) (1)
	CreateDynamicObject(2855,627.76269531,14.64497566,1107.76403809,0.00000000,0.00000000,0.00000000); //object(gb_bedmags05) (2)
	CreateDynamicObject(2852,626.97869873,14.60966778,1107.76403809,0.00000000,0.00000000,0.00000000); //object(gb_bedmags02) (1)
	CreateDynamicObject(16779,615.26452637,21.77450371,1110.67565918,0.00000000,0.00000000,0.00000000); //object(ufo_light02) (2)
	CreateDynamicObject(2207,614.39941406,22.22851562,1106.96862793,0.00000000,0.00000000,0.00000000); //object(med_office7_desk_1) (1)
	CreateDynamicObject(1714,615.42492676,23.99887657,1106.96862793,0.00000000,0.00000000,0.00000000); //object(kb_swivelchair1) (5)
	CreateDynamicObject(14455,617.87719727,19.94697571,1108.64038086,0.00000000,0.00000000,90.00000000); //object(gs_bookcase) (2)
	CreateDynamicObject(1736,615.59039307,25.61513901,1109.45642090,0.00000000,0.00000000,0.00000000); //object(cj_stags_head) (1)
	CreateDynamicObject(1792,611.62188721,19.60732269,1109.22570801,0.00000000,0.00000000,88.00000000); //object(swank_tv_1) (1)
	CreateDynamicObject(1715,614.61193848,20.83850670,1106.96862793,0.00000000,0.00000000,166.00000000); //object(kb_swivelchair2) (1)
	CreateDynamicObject(1715,616.42956543,20.91477585,1106.96862793,0.00000000,0.00000000,191.99790955); //object(kb_swivelchair2) (2)
	CreateDynamicObject(2254,612.09082031,22.21679688,1108.81018066,0.00000000,0.00000000,91.99499512); //object(frame_clip_1) (1)
	CreateDynamicObject(2253,615.11578369,22.23282051,1108.02636719,0.00000000,0.00000000,0.00000000); //object(plant_pot_22) (1)
	CreateDynamicObject(2344,615.80242920,22.27825165,1107.75610352,0.00000000,0.00000000,0.00000000); //object(cj_remote) (1)
	CreateDynamicObject(11631,619.70800781,25.16038895,1108.21447754,0.00000000,0.00000000,0.00000000); //object(ranch_desk) (1)
	CreateDynamicObject(1714,619.33459473,23.57044411,1106.96862793,0.00000000,0.00000000,170.00000000); //object(kb_swivelchair1) (6)
	CreateDynamicObject(2284,621.36389160,20.95416641,1109.24877930,0.00000000,0.00000000,272.00000000); //object(frame_6) (1)
	CreateDynamicObject(11631,607.75012207,-11.90947437,1108.20666504,0.00000000,0.00000000,0.00000000); //object(ranch_desk) (2)
	CreateDynamicObject(1715,607.58239746,-13.49375629,1106.96081543,0.00000000,0.00000000,176.00000000); //object(kb_swivelchair2) (3)
	CreateDynamicObject(11631,617.51165771,-12.09211636,1108.20666504,0.00000000,0.00000000,0.00000000); //object(ranch_desk) (4)
	CreateDynamicObject(2596,605.66900635,-16.04958916,1109.20361328,0.00000000,0.00000000,96.00000000); //object(cj_sex_tv) (2)
	CreateDynamicObject(2596,610.81494141,-15.55771923,1109.20361328,0.00000000,0.00000000,95.99853516); //object(cj_sex_tv) (3)
	CreateDynamicObject(2596,616.22973633,-14.59648514,1109.20361328,0.00000000,0.00000000,95.99853516); //object(cj_sex_tv) (4)
	CreateDynamicObject(1715,617.74633789,-14.35595703,1106.96081543,0.00000000,0.00000000,175.99548340); //object(kb_swivelchair2) (5)
	CreateDynamicObject(2258,622.17285156,-16.44600868,1109.02624512,0.00000000,0.00000000,90.00000000); //object(frame_clip_5) (1)
	CreateDynamicObject(2258,622.20458984,-13.08205986,1109.02624512,0.00000000,0.00000000,90.00000000); //object(frame_clip_5) (2)
	CreateDynamicObject(638,624.98730469,-15.25488281,1107.65783691,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush) (1)
	CreateDynamicObject(638,625.09375000,-9.94088364,1107.65783691,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush) (2)
	CreateDynamicObject(2833,625.59997559,-1.52999997,1106.96081543,0.00000000,0.00000000,269.99450684); //object(gb_livingrug02) (1)
	CreateDynamicObject(2395,625.56933594,-3.29980469,1106.96081543,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (2)
	CreateDynamicObject(2395,625.53393555,1.89499998,1106.96081543,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2634,604.13281250,-4.64925003,1096.00000000,0.00000000,0.00000000,0.99426270); //object(ab_vaultdoor) (1)
	CreateDynamicObject(1829,589.01727295,-5.70625496,1094.83288574,0.00000000,0.00000000,88.00000000); //object(man_safenew) (2)
	CreateDynamicObject(2357,612.95507812,-4.13281250,1102.19995117,0.00000000,0.00000000,357.99499512); //object(dunc_dinning) (1)
	CreateDynamicObject(2357,617.15917969,-4.25976562,1102.19995117,0.00000000,0.00000000,357.98950195); //object(dunc_dinning) (2)
	CreateDynamicObject(1714,610.05914307,-4.04691267,1101.76098633,0.00000000,0.00000000,92.00000000); //object(kb_swivelchair1) (7)
	CreateDynamicObject(1715,612.29827881,-2.95827055,1101.76098633,0.00000000,0.00000000,354.00000000); //object(kb_swivelchair2) (6)
	CreateDynamicObject(1715,613.47113037,-2.86647367,1101.76098633,0.00000000,0.00000000,358.00000000); //object(kb_swivelchair2) (7)
	CreateDynamicObject(1715,614.40014648,-2.95161390,1101.76098633,0.00000000,0.00000000,0.00000000); //object(kb_swivelchair2) (8)
	CreateDynamicObject(1715,616.29040527,-2.98273230,1101.76098633,0.00000000,0.00000000,356.00000000); //object(kb_swivelchair2) (9)
	CreateDynamicObject(1715,617.29266357,-2.97574115,1101.76098633,0.00000000,0.00000000,358.00000000); //object(kb_swivelchair2) (10)
	CreateDynamicObject(1715,618.53515625,-3.00781250,1101.76098633,0.00000000,0.00000000,355.99548340); //object(kb_swivelchair2) (11)
	CreateDynamicObject(1715,620.00872803,-4.45329094,1101.76098633,0.00000000,0.00000000,261.99645996); //object(kb_swivelchair2) (12)
	CreateDynamicObject(1715,618.28814697,-5.65014362,1101.76098633,0.00000000,0.00000000,175.99548340); //object(kb_swivelchair2) (13)
	CreateDynamicObject(1715,617.14172363,-5.65282631,1101.76098633,0.00000000,0.00000000,175.98999023); //object(kb_swivelchair2) (14)
	CreateDynamicObject(1715,615.96875000,-5.59472656,1101.76098633,0.00000000,0.00000000,175.98999023); //object(kb_swivelchair2) (15)
	CreateDynamicObject(1715,614.45343018,-5.46411514,1101.76098633,0.00000000,0.00000000,175.98999023); //object(kb_swivelchair2) (16)
	CreateDynamicObject(1715,613.40948486,-5.56284285,1101.76098633,0.00000000,0.00000000,175.99548340); //object(kb_swivelchair2) (17)
	CreateDynamicObject(1715,612.02648926,-5.58781672,1101.76098633,0.00000000,0.00000000,175.99548340); //object(kb_swivelchair2) (18)
	CreateDynamicObject(1792,618.89117432,2.27977228,1103.80383301,0.00000000,0.00000000,0.00000000); //object(swank_tv_1) (2)
	CreateDynamicObject(16779,616.81835938,-4.78906250,1106.08691406,0.00000000,0.00000000,0.00000000); //object(ufo_light02) (3)
	CreateDynamicObject(2251,614.90917969,-4.12875605,1103.45312500,0.00000000,0.00000000,0.00000000); //object(plant_pot_20) (1)
	CreateDynamicObject(2254,611.30072021,2.07645988,1104.96911621,0.00000000,0.00000000,0.00000000); //object(frame_clip_1) (2)
	CreateDynamicObject(2254,622.99902344,1.93705368,1104.96911621,0.00000000,0.00000000,0.00000000); //object(frame_clip_1) (3)
	CreateDynamicObject(2257,616.74517822,-9.70432758,1104.70874023,0.00000000,0.00000000,178.00000000); //object(frame_clip_4) (1)
	CreateDynamicObject(3095,630.51000977,0.63000000,1102.75988770,0.00000000,270.00000000,91.99990845); //object(a51_jetdoor) (1)
	CreateDynamicObject(3095,632.33154297,6.58042145,1111.17907715,0.00000000,270.00000000,89.99993896); //object(a51_jetdoor) (2)
	CreateDynamicObject(14782,620.54199219,-9.12792969,1102.63000488,0.00000000,0.00000000,179.99450684); //object(int3int_boxing30) (1)
	CreateDynamicObject(1491,634.85998535,-16.79999924,1106.96557617,0.00000000,0.00000000,90.00000000); //object(gen_doorint01) (2)
	CreateDynamicObject(1491,634.82202148,-13.93000031,1106.96557617,0.00000000,0.00000000,272.00000000); //object(gen_doorint01) (3)
	CreateDynamicObject(1651,625.69830322,-2.36727190,1110.54016113,0.00000000,0.00000000,0.00000000); //object(od_copwindows) (1)
	CreateDynamicObject(1964,615.79547119,22.80142784,1107.89819336,0.00000000,0.00000000,358.00000000); //object(est_dsk_stuf) (1)
	CreateDynamicObject(2634,603.28906250,-5.69824219,1093.08898926,0.00000000,0.00000000,270.99975586); //object(ab_vaultdoor) (1)
	CreateDynamicObject(1535,604.78417969,-21.86660004,1106.96081543,0.00000000,0.00000000,90.00000000); //object(gen_doorext14) (3)
	CreateDynamicObject(1556,625.62615967,21.84776306,1106.96862793,0.00000000,0.00000000,0.00000000); //object(gen_doorext18) (1)
	CreateDynamicObject(14632,624.23736572,-20.03052139,1108.50000000,0.00000000,0.00000000,0.00000000); //object(paperchase_bits2b) (1)
	CreateDynamicObject(2609,612.24395752,25.95507812,1107.70288086,0.00000000,0.00000000,0.00000000); //object(cj_p_fileing1) (2)
	CreateDynamicObject(2609,612.70001221,25.95507812,1107.70288086,0.00000000,0.00000000,0.00000000); //object(cj_p_fileing1) (4)
	CreateDynamicPickup(1239, 1, 234.8281, 165.0236, 1002.9930);
	CreateDynamic3DTextLabel("{33AA33}Advertisement Agency\n{FFFFFF}Gunakan {FFFF00}/ad {FFFFFF}untuk Memasang Iklan", COLOR_WHITE, 234.8281, 165.0236, 1002.9930, 5.0);

    //CHURCH INTERIOR
	CreateObject(9931, 1947.48584, -368.61978, 1108.01086,   0.00000, 0.00000, 90.00000);
	CreateObject(9931, 1980.55762, -368.51563, 1108.01086,   0.00000, 0.00000, 90.00000);
	CreateObject(11472, 1964.78711, -372.02051, 1089.22351,   0.00000, 0.00000, 0.00000);
	CreateObject(11472, 1963.28967, -372.02139, 1089.22351,   0.00000, 0.00000, 0.00000);
	CreateObject(11472, 1964.04480, -372.98050, 1089.46387,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1970.61438, -368.20404, 1093.28040,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1968.51074, -368.20703, 1093.28040,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1957.52185, -368.25833, 1093.28040,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1959.61914, -368.25586, 1093.28040,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1963.97839, -368.12149, 1072.75439,   90.00000, 0.00000, 0.25000);
	CreateObject(2960, 1964.05884, -348.98987, 1101.36646,   0.00000, 90.00000, 89.99451);
	CreateObject(2960, 1963.98291, -349.00000, 1101.70667,   90.00000, 0.00000, 179.99451);
	CreateObject(2960, 1964.05872, -348.99045, 1100.00586,   0.00000, 90.00000, 90.00000);
	CreateObject(3872, 1964.02686, -346.40851, 1102.33020,   0.00000, 155.25000, 90.27026);
	CreateObject(1667, 1962.98828, -370.41272, 1093.62292,   0.00000, 0.00000, 0.00000);
	CreateObject(1664, 1962.83521, -370.42520, 1093.70105,   0.00000, 0.00000, 0.00000);
	CreateObject(2868, 1965.95605, -370.30142, 1093.53430,   0.00000, 0.00000, 0.00000);
	CreateObject(2270, 1965.47998, -352.47623, 1093.48364,   0.00000, 0.00000, 270.00000);
	CreateObject(2271, 1962.60437, -352.58060, 1093.48804,   0.00000, 0.00000, 90.00000);
	CreateObject(2357, 1964.05090, -370.68906, 1093.12402,   0.00000, 0.00000, 0.00000);
	CreateObject(2808, 1957.51367, -364.26172, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1959.68164, -364.26172, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1970.61328, -364.26172, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1968.44238, -364.26172, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1961.85547, -364.26172, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1966.27246, -364.26172, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2868, 1962.14697, -370.30624, 1093.53430,   0.00000, 0.00000, 0.00000);
	CreateObject(948, 1966.09277, -374.17285, 1092.72888,   0.00000, 0.00000, 0.00000);
	CreateObject(948, 1961.96313, -374.22888, 1092.72888,   0.00000, 0.00000, 0.00000);
	CreateObject(2894, 1963.95081, -370.94278, 1093.53430,   0.00000, 0.00000, 0.00000);
	CreateObject(3462, 1959.30408, -374.06839, 1094.24255,   0.00000, 0.00000, 270.00000);
	CreateObject(3462, 1968.78186, -374.08835, 1094.24255,   0.00000, 0.00000, 270.00000);
	CreateObject(949, 1956.02258, -353.46194, 1095.83191,   0.00000, 0.00000, 0.00000);
	CreateObject(2946, 1965.59985, -349.21301, 1091.94543,   0.00000, 0.00000, 90.00000);
	CreateObject(2946, 1962.47034, -349.19955, 1091.94543,   0.00000, 0.00000, 270.00000);
	CreateObject(2808, 1970.60681, -360.67249, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1968.43054, -360.67249, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1966.25378, -360.67249, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1957.52234, -360.67249, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1959.69580, -360.67249, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1961.86865, -360.67249, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1957.51660, -357.18195, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1959.69250, -357.18195, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1961.86780, -357.18195, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1970.61279, -357.18195, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1968.43701, -357.18195, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(2808, 1966.26782, -357.18195, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateObject(14410, 1968.61401, -349.16000, 1092.01758,   0.00000, 0.00000, 270.00000);
	CreateObject(11472, 1971.98047, -351.97092, 1092.19568,   0.00000, 0.00000, 90.00000);
	CreateObject(11472, 1971.98047, -353.19617, 1092.19568,   0.00000, 0.00000, 90.00000);
	CreateObject(14410, 1959.47412, -349.41287, 1092.01660,   0.00000, 0.00000, 90.00000);
	CreateObject(11472, 1956.10046, -351.96487, 1092.19568,   0.00000, 0.00000, 270.00000);
	CreateObject(11472, 1956.10046, -353.19617, 1092.19568,   0.00000, 0.00000, 270.00000);
	CreateObject(11472, 1965.10974, -347.94531, 1095.44092,   0.00000, 90.00000, 180.00000);
	CreateObject(11472, 1962.98315, -347.94104, 1095.44019,   0.00000, 270.00000, 179.99451);
	CreateObject(1698, 1962.46606, -352.53400, 1095.31421,   0.00000, 0.00000, 270.27026);
	CreateObject(1698, 1962.87317, -352.53400, 1095.53918,   0.00000, 0.00000, 270.26917);
	CreateObject(1698, 1963.24683, -352.53400, 1095.76416,   0.00000, 0.00000, 270.26917);
	CreateObject(1698, 1965.60022, -352.53400, 1095.31421,   0.00000, 0.00000, 90.00000);
	CreateObject(1698, 1965.20435, -352.53400, 1095.53918,   0.00000, 0.00000, 90.00000);
	CreateObject(1698, 1964.72375, -352.53400, 1095.76416,   0.00000, 0.00000, 270.26917);
	CreateObject(970, 1964.05688, -353.88498, 1096.74243,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1959.94470, -353.88498, 1095.74719,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1955.77246, -353.88589, 1095.74719,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1968.17297, -353.88498, 1095.74719,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1972.25000, -353.88589, 1095.74719,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1959.97607, -351.29065, 1095.74719,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1968.10303, -351.29065, 1095.74719,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1965.96204, -349.21619, 1096.74170,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1962.13757, -349.21619, 1096.74243,   0.00000, 0.00000, 90.00000);
	CreateObject(2887, 1964.04822, -349.34906, 1094.78955,   90.00000, 0.00000, 0.00000);
	CreateObject(949, 1971.95068, -353.46039, 1095.83191,   0.00000, 0.00000, 0.00000);
	CreateObject(948, 1965.68555, -352.45767, 1091.94543,   0.00000, 0.00000, 0.00000);
	CreateObject(948, 1962.38428, -352.45767, 1091.94543,   0.00000, 0.00000, 0.00000);
	CreateObject(949, 1961.60730, -354.34103, 1092.58167,   0.00000, 0.00000, 0.00000);
	CreateObject(949, 1966.46326, -354.34805, 1092.58167,   0.00000, 0.00000, 0.00000);
	CreateObject(1720, 1970.09338, -373.59497, 1092.72888,   0.00000, 0.00000, 180.00000);
	CreateObject(1720, 1970.91199, -373.58316, 1092.72888,   0.00000, 0.00000, 179.99451);
	CreateObject(18981, 1960.55225, -361.76544, 1091.45117,   0.00000, 90.00000, 0.00000);
	//LSPD Parkiran
	CreateDynamicObject(19357, 1539.61255, -1619.52563, 14.24920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 1539.61255, -1622.65955, 14.24920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1543.72583, -1637.94788, 14.24920,   0.00000, 0.00000, 62.00000);
	CreateDynamicObject(982, 1539.24316, -1622.87769, 16.43870,   0.00000, -34.00000, 0.00000);
	CreateDynamicObject(984, 1539.29797, -1608.88452, 16.37670,   0.00000, -34.00000, 0.00000);
	CreateDynamicObject(983, 1542.16980, -1637.52393, 16.43870,   0.00000, -34.00000, 62.00000);
	CreateDynamicObject(19357, 1539.61255, -1634.12976, 14.24920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1552.41406, -1602.02246, 16.43870,   0.00000, 34.00000, 90.00000);
	CreateDynamicObject(982, 1577.95813, -1602.02246, 16.43870,   0.00000, 34.00000, 90.00000);
	CreateDynamicObject(982, 1595.25610, -1602.02246, 16.43870,   0.00000, 34.00000, 90.00000);
	CreateDynamicObject(982, 1608.45618, -1615.16492, 16.43870,   0.00000, 34.00000, 0.00000);
	CreateDynamicObject(984, 1608.45618, -1631.71887, 16.43870,   0.00000, 34.00000, 0.00000);
	CreateDynamicObject(983, 1604.88855, -1638.44275, 16.43870,   0.00000, -34.00000, 90.00000);
	//Paytoll
	CreateDynamicObject(985, 39.2700, -1532.0552, 6.1021, 0.00000, 0.00000, 30.00000);
	CreateDynamicObject(985, 39.4043, -1527.9960, 6.1021, 0.00000, 0.00000, -30.00000);
	paytoll1 = CreateDynamicObject(985, 35.5887, -1521.9341, 6.1021,   0.00000, 0.00000, 85.00000);
	paytoll2 = CreateDynamicObject(985, 35.6054, -1538.1528, 6.1021,   0.00000, 0.00000, 89.00000);
	CreateDynamicPickup(1239, 23, 35.4701, -1538.2247, 5.6325);
	CreateStreamed3DTextLabel("{FFFF00}Bunyikan {AA3333}Klakson {FFFF00}Kendaraan\nUntuk membuka Palang pintu\nBiaya Toll({33AA33}$0.25{FFFF00})", COLOR_WHITE, 35.4701, -1538.2247, 5.6325, 10, 0, 0);
	CreateDynamicPickup(1239, 23, 36.2957, -1522.1597, 5.2411);
	CreateStreamed3DTextLabel("{FFFF00}Bunyikan {AA3333}Klakson {FFFF00}Kendaraan\nUntuk membuka Palang pintu\nBiaya Toll({33AA33}$0.25{FFFF00})", COLOR_WHITE, 36.2957, -1522.1597, 5.2411, 10, 0, 0);
	CreateDynamicPickup(1239, 23, -76.8255,-1136.7314,1.0781, -1); //Trucker Registration (LS)
	if (realtime)
	{
		new tmphour;
		new tmpminute;
		new tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		SetWorldTime(tmphour);
		gTime = tmphour;
	}

	vehicleMods[0][4] = {1013, 1024, 0, 0};
	vehicleMods[0][6] = {1018, 1019, 1020, 1021};
	vehicleMods[1][0] = {1001, 1003, 0, 0};
	vehicleMods[1][1] = {1004, 1005, 0, 0};
	vehicleMods[1][2] = {1006, 0, 0, 0};
	vehicleMods[1][3] = {1007, 0, 0, 0};
	vehicleMods[1][4] = {1013, 0, 0, 0};
	vehicleMods[1][6] = {1019, 1020, 0, 0};
	vehicleMods[1][12] = {1143, 1145, 0, 0};
	vehicleMods[4][0] = {1002, 1016, 1000, 0};
	vehicleMods[4][3] = {1007, 0, 0, 0};
	vehicleMods[4][4] = {1013, 0, 0, 0};
	vehicleMods[4][6] = {1019, 1020, 1021, 0};
	vehicleMods[5][0] = {1000, 1001, 1014, 1023};
	vehicleMods[5][6] = {1018, 1019, 1020, 1021};
	vehicleMods[10][0] = {1001, 1003, 1023, 0};
	vehicleMods[10][3] = {1007, 0, 0, 0};
	vehicleMods[10][4] = {1013, 1024, 0, 0};
	vehicleMods[10][6] = {1019, 1020, 1021, 0};
	vehicleMods[15][0] = {1001, 1003, 1023, 0};
	vehicleMods[15][6] = {1018, 1019, 0, 0};
	vehicleMods[15][3] = {1007, 0, 0, 0};
	vehicleMods[18][0] = {1002, 1016, 0, 0};
	vehicleMods[18][2] = {1006, 0, 0, 0};
	vehicleMods[18][6] = {1020, 1021, 0, 0};
	vehicleMods[20][0] = {1001, 1003, 0, 0};
	vehicleMods[20][1] = {1004, 1005, 0, 0};
	vehicleMods[20][6] = {1019, 1021, 0, 0};
	vehicleMods[21][0] = {1000, 1014, 1016, 1023};
	vehicleMods[21][6] = {1018, 1019, 1020, 1021};
	vehicleMods[22][3] = {1007, 0, 0, 0};
	vehicleMods[22][4] = {1013, 0, 0, 0};
	vehicleMods[22][6] = {1019, 1020, 1021, 0};
	vehicleMods[26][0] = {1001, 1003, 0, 0};
	vehicleMods[26][1] = {1004, 1005, 0, 0};
	vehicleMods[26][2] = {1006, 0, 0, 0};
	vehicleMods[26][6] = {1019, 1021, 0, 0};
	vehicleMods[36][0] = {1001, 1003, 0, 0};
	vehicleMods[36][2] = {1006, 0, 0, 0};
	vehicleMods[36][3] = {1007, 0, 0, 0};
	vehicleMods[36][4] = {1013, 0, 0, 0};
	vehicleMods[36][6] = {1019, 1020, 1021, 1022};
	vehicleMods[39][0] = {1001, 1003, 1023, 0};
	vehicleMods[39][3] = {1007, 0, 0, 0};
	vehicleMods[39][4] = {1013, 0, 0, 0};
	vehicleMods[39][12] = {1143, 1145, 0, 0};
	vehicleMods[77][2] = {1006, 0, 0, 0};
	vehicleMods[77][3] = {1007, 0, 0, 0};
	vehicleMods[77][6] = {1018, 1019, 1020, 1021};
	vehicleMods[78][1] = {1004, 1005, 1012, 0};
	vehicleMods[78][4] = {1013, 1024, 0, 0};
	vehicleMods[78][6] = {1020, 1021, 1022, 0};
	vehicleMods[89][0] = {1000, 1002, 1016, 0};
	vehicleMods[89][1] = {1004, 1005, 0, 0};
	vehicleMods[89][2] = {1006, 0, 0, 0};
	vehicleMods[89][4] = {1013, 1024, 0, 0};
	vehicleMods[89][6] = {1018, 1019, 1020, 0};
	vehicleMods[91][0] = {1003, 1014, 1023, 0};
	vehicleMods[91][3] = {1007, 0, 0, 0};
	vehicleMods[91][6] = {1018, 1019, 1020, 1021};
	vehicleMods[91][12] = {1143, 1145, 0, 0};
	vehicleMods[92][0] = {1000, 1016, 0, 0};
	vehicleMods[92][1] = {1004, 1005, 0, 0};
	vehicleMods[92][2] = {1006, 0, 0, 0};
	vehicleMods[96][0] = {1001, 1002, 1003, 1023};
	vehicleMods[96][1] = {1011, 0, 0, 0};
	vehicleMods[96][2] = {1006, 0, 0, 0};
	vehicleMods[96][6] = {1019, 1020, 0, 0};
	vehicleMods[96][12] = {1143, 0, 0, 0};
	vehicleMods[100][4] = {1013, 1024, 0, 0};
	vehicleMods[100][6] = {1019, 1020, 1021, 0};
	vehicleMods[116][0] = {1000, 1002, 1015, 1016};
	vehicleMods[116][1] = {1004, 0, 0, 0};
	vehicleMods[116][3] = {1007, 0, 0, 0};
	vehicleMods[116][6] = {1018, 1019, 1020, 1021};
	vehicleMods[117][0] = {1002, 1003, 1016, 1023};
	vehicleMods[117][3] = {1007, 0, 0, 0};
	vehicleMods[117][6] = {1018, 1019, 1020, 0};
	vehicleMods[117][12] = {1143, 1145, 0, 0};
	vehicleMods[118][0] = {1001, 1003, 1023, 0};
	vehicleMods[118][1] = {1005, 0, 0, 0};
	vehicleMods[118][2] = {1006, 0, 0, 0};
	vehicleMods[118][3] = {1007, 0, 0, 0};
	vehicleMods[118][4] = {1013, 0, 0, 0};
	vehicleMods[118][6] = {1018, 1020, 0, 0};
	vehicleMods[118][12] = {1143, 1145, 0, 0};
	vehicleMods[127][0] = {1001, 1014, 1015, 0};
	vehicleMods[127][3] = {1007, 0, 0, 0};
	vehicleMods[127][6] = {1018, 1020, 1021, 0};
	vehicleMods[129][0] = {1001, 1003, 1023, 0};
	vehicleMods[129][1] = {1011, 1012, 0, 0};
	vehicleMods[129][2] = {1006, 0, 0, 0};
	vehicleMods[129][3] = {1007, 0, 0, 0};
	vehicleMods[129][6] = {1018, 1019, 1020, 0};
	vehicleMods[134][1] = {1100, 1123, 1125, 0};
	vehicleMods[134][3] = {1101, 1106, 0, 0};
	vehicleMods[134][6] = {1126, 1127, 0, 0};
	vehicleMods[134][10] = {1179, 1185, 0, 0};
	vehicleMods[134][11] = {1178, 1180, 0, 0};
	vehicleMods[135][3] = {1118, 1119, 0, 0};
	vehicleMods[135][6] = {1113, 1114, 0, 0};
	vehicleMods[135][10] = {1115, 1116, 1117, 0};
	vehicleMods[135][11] = {1109, 1110, 0, 0};
	vehicleMods[136][2] = {1103, 1128, 0, 0};
	vehicleMods[136][3] = {1108, 0, 0, 0};
	vehicleMods[136][6] = {1104, 1105, 0, 0};
	vehicleMods[136][10] = {1181, 1182, 0, 0};
	vehicleMods[136][11] = {1183, 1184, 0, 0};
	vehicleMods[140][0] = {1001, 1023, 0, 0};
	vehicleMods[140][1] = {1004, 0, 0, 0};
	vehicleMods[140][2] = {1006, 0, 0, 0};
	vehicleMods[140][3] = {1007, 0, 0, 0};
	vehicleMods[140][4] = {1024, 0, 0, 0};
	vehicleMods[140][6] = {1018, 1019, 1020, 0};
	vehicleMods[140][12] = {1143, 1145, 0, 0};
	vehicleMods[142][0] = {1014, 1015, 0, 0};
	vehicleMods[142][6] = {1018, 1019, 1020, 1021};
	vehicleMods[142][12] = {1145, 0, 0, 0};
	vehicleMods[146][0] = {1001, 1002, 1023, 0};
	vehicleMods[146][1] = {1004, 0, 0, 0};
	vehicleMods[146][2] = {1006, 0, 0, 0};
	vehicleMods[146][3] = {1007, 0, 0, 0};
	vehicleMods[146][4] = {1024, 0, 0, 0};
	vehicleMods[146][6] = {1018, 1019, 0, 0};
	vehicleMods[146][12] = {1143, 1145, 0, 0};
	vehicleMods[147][0] = {1000, 1003, 1016, 0};
	vehicleMods[147][6] = {1018, 1019, 1020, 1021};
	vehicleMods[147][12] = {1143, 0, 0, 0};
	vehicleMods[149][0] = {1001, 1003, 1023, 0};
	vehicleMods[149][1] = {1011, 1012, 0, 0};
	vehicleMods[149][3] = {1007, 0, 0, 0};
	vehicleMods[149][6] = {1018, 1019, 1020, 0};
	vehicleMods[149][12] = {1143, 1145, 0, 0};
	vehicleMods[150][0] = {1001, 1003, 1023, 0};
	vehicleMods[150][1] = {1004, 1005, 0, 0};
	vehicleMods[150][2] = {1006, 0, 0, 0};
	vehicleMods[150][6] = {1018, 1019, 1020, 0};
	vehicleMods[150][12] = {1143, 1145, 0, 0};
	vehicleMods[151][0] = {1002, 1003, 1016, 1023};
	vehicleMods[151][1] = {1005, 0, 0, 0};
	vehicleMods[151][2] = {1006, 0, 0, 0};
	vehicleMods[151][6] = {1018, 1019, 1020, 1021};
	vehicleMods[158][0] = {1164, 1163, 0, 0};
	vehicleMods[158][2] = {1088, 1091, 0, 0};
	vehicleMods[158][3] = {1090, 1093, 0, 0};
	vehicleMods[158][6] = {1092, 1089, 0, 0};
	vehicleMods[158][10] = {1166, 1165, 0, 0};
	vehicleMods[158][11] = {1168, 1167, 0, 0};
	vehicleMods[159][0] = {1162, 1158, 0, 0};
	vehicleMods[159][2] = {1067, 1068, 0, 0};
	vehicleMods[159][3] = {1069, 1070, 0, 0};
	vehicleMods[159][6] = {1065, 1066, 0, 0};
	vehicleMods[159][10] = {1160, 1173, 0, 0};
	vehicleMods[159][11] = {1159, 1161, 0, 0};
	vehicleMods[160][0] = {1138, 1139, 0, 0};
	vehicleMods[160][2] = {1032, 1033, 0, 0};
	vehicleMods[160][3] = {1026, 1031, 0, 0};
	vehicleMods[160][6] = {1028, 1029, 0, 0};
	vehicleMods[160][10] = {1169, 1170, 0, 0};
	vehicleMods[160][11] = {1141, 1140, 0, 0};
	vehicleMods[161][0] = {1058, 1060, 0, 0};
	vehicleMods[161][2] = {1055, 1061, 0, 0};
	vehicleMods[161][3] = {1056, 1057, 0, 0};
	vehicleMods[161][6] = {1064, 1059, 0, 0};
	vehicleMods[161][10] = {1155, 1157, 0, 0};
	vehicleMods[161][11] = {1154, 1156, 0, 0};
	vehicleMods[162][0] = {1147, 1146, 0, 0};
	vehicleMods[162][2] = {1035, 1038, 0, 0};
	vehicleMods[162][3] = {1036, 1039, 0, 0};
	vehicleMods[162][6] = {1034, 1037, 0, 0};
	vehicleMods[162][10] = {1171, 1172, 0, 0};
	vehicleMods[162][11] = {1149, 1148, 0, 0};
	vehicleMods[165][0] = {1049, 1050, 0, 0};
	vehicleMods[165][2] = {1054, 1053, 0, 0};
	vehicleMods[165][3] = {1047, 1048, 0, 0};
	vehicleMods[165][6] = {1046, 1045, 0, 0};
	vehicleMods[165][10] = {1153, 1152, 0, 0};
	vehicleMods[165][11] = {1150, 1151, 0, 0};
	vehicleMods[167][2] = {1130, 1131, 0, 0};
	vehicleMods[167][3] = {1133, 0, 0, 0};
	vehicleMods[167][6] = {1129, 1132, 0, 0};
	vehicleMods[167][10] = {1189, 1188, 0, 0};
	vehicleMods[167][11] = {1187, 1186, 0, 0};
	vehicleMods[175][3] = {1042, 0, 0, 0};
	vehicleMods[175][6] = {1044, 1043, 0, 0};
	vehicleMods[175][10] = {1174, 1175, 0, 0};
	vehicleMods[175][11] = {1176, 1177, 0, 0};
	vehicleMods[176][3] = {1137, 1134, 0, 0};
	vehicleMods[176][6] = {1136, 1135, 0, 0};
	vehicleMods[176][10] = {1191, 1190, 0, 0};
	vehicleMods[176][11] = {1192, 1193, 0, 0};
	vehicleMods[180][0] = {1001, 1023, 0, 0};
	vehicleMods[180][2] = {1006, 0, 0, 0};
	vehicleMods[180][3] = {1007, 0, 0, 0};
	vehicleMods[180][6] = {1018, 1020, 0, 0};
	vehicleMods[185][0] = {1001, 1003, 1023, 0};
	vehicleMods[185][2] = {1006, 0, 0, 0};
	vehicleMods[185][3] = {1007, 0, 0, 0};
	vehicleMods[185][4] = {1013, 0, 0, 0};
	vehicleMods[185][6] = {1018, 1019, 1020, 0};
	vehicleMods[185][12] = {1143, 1145, 0, 0};
	vehicleMods[189][0] = {1000, 1016, 0, 0};
	vehicleMods[189][1] = {1005, 1004, 0, 0};
	vehicleMods[189][2] = {1006, 0, 0, 0};
	vehicleMods[189][3] = {1007, 0, 0, 0};
	vehicleMods[189][4] = {1013, 1024, 0, 0};
	vehicleMods[189][6] = {1018, 1020, 0, 0};
	vehicleMods[189][12] = {1145, 0, 0, 0};
	vehicleMods[200][1] = {1004, 1005, 0, 0};
	vehicleMods[200][2] = {1006, 0, 0, 0};
	vehicleMods[200][3] = {1007, 0, 0, 0};
	vehicleMods[200][4] = {1013, 0, 0, 0};
	vehicleMods[200][6] = {1018, 1020, 1022, 0};
	vehicleMods[203][0] = {1001, 1023, 0, 0};
	vehicleMods[203][2] = {1006, 0, 0, 0};
	vehicleMods[203][3] = {1007, 0, 0, 0};
	vehicleMods[203][4] = {1024, 0, 0, 0};
	vehicleMods[203][6] = {1019, 1020, 0, 0};
	vehicleMods[203][12] = {1143, 1145, 0, 0};
    WeatherRotator();
    SetTimer("WeatherRotator", 2400000, true);
	CarInit();
	EventKernel[EventCreator] = 999;
	return 1;
}
forward WeatherRotator();
public WeatherRotator()
{
	new index, String1[10000], String2[10000];
	index = random(sizeof(gWeather));
	SetWeather(gWeather[index]);
	FishPrice = Random(10,25);
	HargaAnggur = Random(9,15);
	HargaBlueberry = Random(9,15);
	HargaStrawberry = Random(9,15);
	HargaGandum = Random(9,15);
	HargaTomat = Random(9,15);
	HargaBensin = Random(50,99);
	//Ikan;
	new SELLFISH = CreateDynamicObject(18244, 1778.642333, -1720.711791, 18.690179, 90.099990, -2.199999, 2.100000);
	format(String1,sizeof(String1),"{FFFFFF}Sellfish Point\nFish Price: $0.%s",FormatMoney(FishPrice));
	SetDynamicObjectMaterialText(SELLFISH, 0, String1, 50, "Arial", 15, 1, 0xFFFFFFFF, 255, 1);
	//Tanaman
	new SELLFARM2 = CreateDynamicObject(18244, -371.336853, -1427.711547, 30.534753, 93.300041, -0.499999, -90.200012);
	format(String2,sizeof(String2),"{FFFFFF}Anggur: $0.%s\nBlueberry: $0.%s\nStrawberry: $0.%s\nGandum: $0.%s\nTomat: $0.%s", FormatMoney(HargaAnggur), FormatMoney(HargaBlueberry), FormatMoney(HargaStrawberry), FormatMoney(HargaGandum), FormatMoney(HargaTomat));
	SetDynamicObjectMaterialText(SELLFARM2, 0, String2, 100, "Arial", 25, 1, 0xFFFFFFFF, 255, 1);
}
forward AutoPark();
public AutoPark()
{
	for(new x; x<=MAX_PLAYERS;x++)
	{
	    if(IsPlayerConnected(x))
	    {
			for(new v;v<MAX_PLAYERVEHICLES; ++v)
			{
					new Float:vx, Float:y, Float:z, Float:angle, Float:health;
				 	GetVehicleDamageStatus(PlayerVehicleInfo[x][v][pvId], PlayerVehicleInfo[x][v][pvStatus][0], PlayerVehicleInfo[x][v][pvStatus][1], PlayerVehicleInfo[x][v][pvStatus][2], PlayerVehicleInfo[x][v][pvStatus][3]);
					GetVehicleHealth(PlayerVehicleInfo[x][v][pvId], health);
					UpdatePlayerVehicleMods(x, v);
					if(PlayerInfo[x][pLockCar] == GetPlayerVehicleID(x)) PlayerInfo[x][pLockCar] = INVALID_VEHICLE_ID;
					GetVehiclePos(PlayerVehicleInfo[x][v][pvId], vx, y, z);
					GetVehicleZAngle(PlayerVehicleInfo[x][v][pvId], angle);
					PlayerVehicleInfo[x][v][pvPosX] = vx;
					PlayerVehicleInfo[x][v][pvPosY] = y;
					PlayerVehicleInfo[x][v][pvPosZ] = z;
					PlayerVehicleInfo[x][v][pvPosAngle] = angle;
					PlayerVehicleInfo[x][v][pvHealth] = health;
			}
			new Float:vx,Float:y,Float:z,Float:a, Float:health;
		 	GetVehicleDamageStatus(PlayerRentInfo[x][prId], PlayerRentInfo[x][prStatus][0], PlayerRentInfo[x][prStatus][1], PlayerRentInfo[x][prStatus][2], PlayerRentInfo[x][prStatus][3]);
			GetVehicleHealth(PlayerRentInfo[x][prId], health);
			GetVehiclePos(PlayerRentInfo[x][prId], vx, y, z);
			GetVehicleZAngle(PlayerRentInfo[x][prId], a);
			PlayerRentInfo[x][prPosX] = vx;
			PlayerRentInfo[x][prPosY] = y;
			PlayerRentInfo[x][prPosZ] = z;
			PlayerRentInfo[x][prPosAngle] = a;
			PlayerRentInfo[x][prHealth] = health;
		}
	}
}

forward CheckGate();
public CheckGate()
{
	for(new x; x<=MAX_PLAYERS;x++)
	{
	    if(IsPlayerConnected(x))
	    {
			new idx = PlayerInfo[x][pGate];
			if(IsPlayerInRangeOfPoint(x, GateInfo[idx][gRange], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]))
			{
		    	if(GateInfo[idx][gStatus] == 0)
			    {
			    	GateInfo[idx][gStatus] = 1;
			        MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
			        SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
			    }
			}
			else
			{
			    if(GateInfo[idx][gStatus] == 1)
			    {
       				GateInfo[idx][gStatus] = 0;
			        MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
			        SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
			    }
			}
		}
	}
}

forward Turn(playerid);
public Turn(playerid)
{
	MoveObject(wheel, 390.1562, -2028.6246, 21.9786,12.0, 0.0, rotY, 90.0);//MAINWHEEL
	AttachObjectToObject(gondel1, wheel, 0.0, 0.0, -11.66, 0.0, -rotY, 0.0);//gondel1
	AttachObjectToObject(gondel2, wheel, 0.0, 0.0, 11.66, 0.0, -rotY, 0.0);//gondel2
	AttachObjectToObject(gondel3, wheel, -11.66, 0.0, 0.0, 0.0, -rotY, 0.0);//gondel3
	AttachObjectToObject(gondel4, wheel, 11.66, 0.0, 0.0, 0.0, -rotY, 0.0);//gondel4
	AttachObjectToObject(gondel5, wheel, 9.33, 0.0, -7.0, 0.0 , -rotY, 0.0);//gondel5
	AttachObjectToObject(gondel6, wheel, -9.33, 0.0, 7.0, 0.0, -rotY, 0.0);//gondel6
	AttachObjectToObject(gondel7, wheel, 9.33, 0.0, 7.0, 0.0, -rotY, 0.0);//gondel7
	AttachObjectToObject(gondel8, wheel, -9.33, 0.0, -7.0, 0.0, -rotY, 0.0);//gondel8
	rotY ++;
}
//
stock GetClosestPlayer(p1)
{
	new Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	foreach(Player, x)
	{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
	}
	return player;
}

public SyncPlayerTime(playerid)
{
	new hour, minute, second;
	gettime(hour, minute, second);
	SetPlayerTime(playerid, hour, minute);
	return 1;
}

public SyncMinTime()
{
	new hour, minute, second;
	gettime(hour, minute, second);
	foreach(Player, i)
	{
	    if(GetPlayerVirtualWorld(i) == 133769)
		{
		    SetPlayerWeather(i, 45);
			SetPlayerTime(i, 0, 0);
		}
		else
		{
			SetPlayerTime(i, hour, minute);
		}
	}
	return 1;
}

public SyncTime()
{
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		ghour = tmphour;
		TotalUptime += 1;
		PayDay();
		if (realtime)
		{
			SetWorldTime(tmphour);
			gTime = tmphour;
		}

		for(new i = 0; i < MAX_BUSINESSES; i++)
    	{
    	    foreach(Player, ia)
    		{
    		    if(PlayerInfo[ia][pPBiskey] >= 1 && BizzInfo[i][bProducts] > 500)
    		    {
    				BizzInfo[i][bTill] += 1000;
    				BizzInfo[i][bProducts] -= 2;
				}
			}
		}
		SaveFamilies();
	}
}

forward PayCheck(playerid);
public PayCheck(playerid)
{
	new pc = PlayerInfo[playerid][pPayCheck];
	new pajak = (( pc / 1000 ) * TaxValue); new string[128];
	Tax += pajak;
	if(PlayerInfo[playerid][pConnectTime] == 2) SendClientMessageEx(playerid, COLOR_LIGHTRED, "Sekarang kamu dapat menggunakan senjata!");
	PlayerInfo[playerid][pConnectTime]++;
	PlayerInfo[playerid][pExp]++;
	new bank;
	bank = pc - pajak;
	PlayerInfo[playerid][pAccount] += bank;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pPDTime] = 3600;
	PlayerInfo[playerid][pDutyTime] = 0;
	PlayerInfo[playerid][pJTime] --;
	GameTextForPlayer(playerid, "~g~PayCheck ~r~anda telah terambil!", 5000, 1);
    new nxtlevel = PlayerInfo[playerid][pLevel]+1;
	new expamount = nxtlevel*levelexp;
			if (PlayerInfo[playerid][pExp] < expamount)
			{
				format(string, sizeof(string), "Anda Perlu %d Point Untuk level selanjutnya.", expamount - PlayerInfo[playerid][pExp]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				return 1;
			}
			else
			{
				format(string, sizeof(string), "~g~LEVEL UP~n~~w~You Are Now Level %d", nxtlevel);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pLevel]++;
				PlayerInfo[playerid][pExp] = PlayerInfo[playerid][pExp]-expamount;
				SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
			}
	return 1;
}

public PayDay()
{
    GiftAllowed = 1;
	//if(BankRobberyTime) BankRobberyTime --;
	SaveATMs();
	SaveFarm();
	SaveObj();
	SaveBusinesses();
	SaveGates();
	SaveMod();
	SaveBuy();
	SaveGYMObject();
 //SavePlant();();
	SaveWorkshop();
	SaveRent();
	SaveHouses();
	SaveDynamicDoors();
	SaveDynamicMapIcons();
	SaveStock();
	//SaveHarga();
	SaveMaxLimit();
	SaveElevatorStuff();
	SaveServerStats();
	SaveFamilies();
	SaveFamiliesHQ();
 	SaveStuff();
	SaveServerStats();
	FMemberCounter(); // Family member counter (requested by game affairs to track gang activity)
	return 0;
}

public splits(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

public OnPlayerRegister(playerid, password[])
{
	if(IsPlayerConnected(playerid))
	{
			new String3[32];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(String3, sizeof(String3), "users/%s.ini", playername3);
			new File: hFile = fopen(String3, io_write);
   			if (hFile)
			{
				strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 255);
				new var[1024];
				format(var, 1024, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				format(var, 1024, "AdminOnDuty=%d\n", PlayerInfo[playerid][pAdminDuty]);fwrite(hFile, var);
				format(var, 1024, "AdminName=%s\n",PlayerInfo[playerid][pAdminName]);fwrite(hFile, var);
				format(var, 1024, "NormalName=%s\n",PlayerInfo[playerid][pNormalName]);fwrite(hFile, var);
				format(var, 1024, "VIPName=%s\n", PlayerInfo[playerid][pVIPName]);fwrite(hFile, var);
				format(var, 1024, "AdminBan=%s\n", PlayerInfo[playerid][pAdminban]);fwrite(hFile, var);
				format(var, 1024, "BanReason=%s\n", PlayerInfo[playerid][pBanReason]);fwrite(hFile, var);
				format(var, 1024, "BanExpired=%s\n", PlayerInfo[playerid][pBanExpired]);fwrite(hFile, var);
       			format(var, 1024, "BanExpired2=%s\n", PlayerInfo[playerid][pBanExpired2]);fwrite(hFile, var);
				format(var, 1024, "Accent=%s\n", PlayerInfo[playerid][pAccent]);fwrite(hFile, var);
				format(var, 1024, "SweeperT=%d\n",PlayerInfo[playerid][pSweeperT]);fwrite(hFile, var);
				format(var, 1024, "WSBos=%d\n", PlayerInfo[playerid][pWSBos]);fwrite(hFile, var);
				format(var, 1024, "DutyTime=%d\n", PlayerInfo[playerid][pDutyTime]);fwrite(hFile, var);
				format(var, 1024, "LadangBos=%d\n", PlayerInfo[playerid][pFarmBos]);fwrite(hFile, var);
				format(var, 1024, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 1024, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 1024, "Band=%d\n",PlayerInfo[playerid][pBanned]);fwrite(hFile, var);
				format(var, 1024, "PermBand=%d\n",PlayerInfo[playerid][pPermaBanned]);fwrite(hFile, var);
				format(var, 1024, "Warnings=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				format(var, 1024, "Disabled=%d\n",PlayerInfo[playerid][pDisabled]);fwrite(hFile, var);
				format(var, 1024, "DonateRank=%d\n",PlayerInfo[playerid][pDonateRank]);fwrite(hFile, var);
				format(var, 1024, "DutyTimeTotal=%d\n",PlayerInfo[playerid][pDutyTimeTotal]);fwrite(hFile, var);
				format(var, 1024, "TogReports=%d\n",PlayerInfo[playerid][pTogReports]);fwrite(hFile, var);
				format(var, 1024, "Radio=%d\n",PlayerInfo[playerid][pRadio]);fwrite(hFile, var);
				format(var, 1024, "RadioFreq=%d\n",PlayerInfo[playerid][pRadioFreq]);fwrite(hFile, var);
				format(var, 1024, "Bandage=%d\n",PlayerInfo[playerid][pBandage]);fwrite(hFile, var);
				format(var, 1024, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 1024, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 1024, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 1024, "Lumber=%d\n",PlayerInfo[playerid][pLumber]);fwrite(hFile, var);
				format(var, 1024, "Cacing=%d\n",PlayerInfo[playerid][pCacing]);fwrite(hFile, var);
				format(var, 1024, "AdminOnDutyTime=%d\n",PlayerInfo[playerid][pAdminOnDutyTime]);fwrite(hFile, var);
				format(var, 1024, "PBiskey2=%d\n",PlayerInfo[playerid][pPBiskey2]);fwrite(hFile, var);
				format(var, 1024, "PDTime=%d\n",PlayerInfo[playerid][pPDTime]);fwrite(hFile, var);
				format(var, 1024, "Hunger=%d\n",PlayerInfo[playerid][pHunger]);fwrite(hFile, var);
				format(var, 1024, "Bladder=%d\n",PlayerInfo[playerid][pBladder]);fwrite(hFile, var);
				format(var, 1024, "Energi=%d\n",PlayerInfo[playerid][pEnergi]);fwrite(hFile, var);
				format(var, 1024, "Condition=%d\n",PlayerInfo[playerid][pCondition]);fwrite(hFile, var);
				format(var, 1024, "SilincedSkill=%d\n",PlayerInfo[playerid][pSilincedSkill]);fwrite(hFile, var);
				format(var, 1024, "DesertEagleSkill=%d\n",PlayerInfo[playerid][pDesertEagleSkill]);fwrite(hFile, var);
				format(var, 1024, "RifleSkill=%d\n",PlayerInfo[playerid][pRifleSkill]);fwrite(hFile, var);
				format(var, 1024, "ShotgunSkill=%d\n",PlayerInfo[playerid][pShotgunSkill]);fwrite(hFile, var);
				format(var, 1024, "SpassSkill=%d\n",PlayerInfo[playerid][pSpassSkill]);fwrite(hFile, var);
				format(var, 1024, "MP5Skill=%d\n",PlayerInfo[playerid][pMP5Skill]);fwrite(hFile, var);
				format(var, 1024, "AK47Skill=%d\n",PlayerInfo[playerid][pAK47Skill]);fwrite(hFile, var);
				format(var, 1024, "M4Skill=%d\n",PlayerInfo[playerid][pM4Skill]);fwrite(hFile, var);
				format(var, 1024, "SniperSkill=%d\n",PlayerInfo[playerid][pSniperSkill]);fwrite(hFile, var);
				format(var, 1024, "TrainingTime=%d\n",PlayerInfo[playerid][pTrainingTime]);fwrite(hFile, var);
				format(var, 1024, "PBiskey=%d\n",PlayerInfo[playerid][pPBiskey]);fwrite(hFile, var);
				format(var, 1024, "InBizz=%d\n",PlayerInfo[playerid][pInBizz]);fwrite(hFile, var);
				format(var, 1024, "Mask=%d\n",PlayerInfo[playerid][pMask]);fwrite(hFile, var);
				format(var, 1024, "MaskUse=%d\n",PlayerInfo[playerid][pMaskUse]);fwrite(hFile, var);
				format(var, 1024, "MaskID=%d\n",PlayerInfo[playerid][pMaskID]);fwrite(hFile, var);
				format(var, 1024, "Pancingan=%d\n",PlayerInfo[playerid][pPancingan]);fwrite(hFile, var);
				format(var, 1024, "Age=%s\n",PlayerInfo[playerid][pAge]);fwrite(hFile, var);
				format(var, 1024, "Paracetamol=%d\n",PlayerInfo[playerid][pParacetamol]);fwrite(hFile, var);
				format(var, 1024, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 1024, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 1024, "Money=%d\n",GetPVarInt(playerid, "Cash"));fwrite(hFile, var);
				format(var, 1024, "Bank=%d\n",PlayerInfo[playerid][pAccount]);fwrite(hFile, var);
				format(var, 1024, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 1024, "Arrested=%d\n",PlayerInfo[playerid][pArrested]);fwrite(hFile, var);
				format(var, 1024, "FitnessTimer=%d\n",PlayerInfo[playerid][pFitnessTimer]);fwrite(hFile, var);
				format(var, 1024, "Job=%d\n",PlayerInfo[playerid][pJob]);fwrite(hFile, var);
				format(var, 1024, "WSJob=%d\n",PlayerInfo[playerid][pWSJob]);fwrite(hFile, var);
				format(var, 1024, "FarmJob=%d\n",PlayerInfo[playerid][pFarmJob]);fwrite(hFile, var);
				format(var, 1024, "Jerigen=%d\n",PlayerInfo[playerid][pJerigen]);fwrite(hFile, var);
				format(var, 1024, "Bensin=%d\n",PlayerInfo[playerid][pBensin]);fwrite(hFile, var);
				format(var, 1024, "UseSorry=%d\n",PlayerInfo[playerid][pUseSorry]);fwrite(hFile, var);
                format(var, 1024, "Kuli=%d\n",PlayerInfo[playerid][pKuli]);fwrite(hFile, var);
				format(var, 1024, "Job2=%d\n",PlayerInfo[playerid][pJob2]);fwrite(hFile, var);
				format(var, 1024, "IllegalJob=%d\n",PlayerInfo[playerid][pIllegalJob]);fwrite(hFile, var);
				format(var, 1024, "Paycheck=%d\n",PlayerInfo[playerid][pPayCheck]);fwrite(hFile, var);
				format(var, 1024, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 1024, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 1024, "WRestricted=%d\n",PlayerInfo[playerid][pWRestricted]);fwrite(hFile, var);
				format(var, 1024, "Materials=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 1024, "Pulsa2=%d\n",PlayerInfo[playerid][pPulsa2]);fwrite(hFile, var);
				format(var, 1024, "Packages=%d\n",GetPVarInt(MAX_PLAYERS, "Packages"));fwrite(hFile, var);
				format(var, 1024, "Crates=%d\n",PlayerInfo[playerid][pCrates]);fwrite(hFile, var);
				format(var, 1024, "Pot=%d\n",PlayerInfo[playerid][pPot]);fwrite(hFile, var);
				format(var, 1024, "Crack=%d\n",PlayerInfo[playerid][pCrack]);fwrite(hFile, var);
				format(var, 1024, "Leader=%d\n",PlayerInfo[playerid][pLeader]);fwrite(hFile, var);
				format(var, 1024, "Member=%d\n",PlayerInfo[playerid][pMember]);fwrite(hFile, var);
				format(var, 1024, "Division=%d\n",PlayerInfo[playerid][pDivision]);fwrite(hFile, var);
				format(var, 1024, "FMember=%d\n",PlayerInfo[playerid][pFMember]);fwrite(hFile, var);
				format(var, 1024, "Rank=%d\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
				format(var, 1024, "Amoxicilin=%d\n",PlayerInfo[playerid][pAmoxicilin]);fwrite(hFile, var);
				format(var, 1024, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 1024, "Ultrafluenza=%d\n",PlayerInfo[playerid][pUltrafluenza]);fwrite(hFile, var);
				format(var, 1024, "DrugsSkill=%d\n",PlayerInfo[playerid][pTruckingSkill]);fwrite(hFile, var);
				format(var, 1024, "ArmsSkill=%d\n",PlayerInfo[playerid][pArmsSkill]);fwrite(hFile, var);
				format(var, 1024, "SmugglerSkill=%d\n",PlayerInfo[playerid][pSmugSkill]);fwrite(hFile, var);
				format(var, 1024, "FightingStyle=%d\n",PlayerInfo[playerid][pFightStyle]);fwrite(hFile, var);
				GetPlayerHealth(MAX_PLAYERS,PlayerInfo[playerid][pHealth]);
				format(var, 1024, "pHealth=%.1f\n",PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
				GetPlayerArmour(MAX_PLAYERS,PlayerInfo[playerid][pArmor]);
				format(var, 1024, "pArmor=%.1f\n",PlayerInfo[playerid][pArmor]);fwrite(hFile, var);
				format(var, 1024, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
				format(var, 1024, "pGroin=%.1f\n",PlayerInfo[playerid][pBodyCondition][0]);fwrite(hFile, var);
				format(var, 1024, "pTorso=%.1f\n",PlayerInfo[playerid][pBodyCondition][1]);fwrite(hFile, var);
				format(var, 1024, "pRArm=%.1f\n",PlayerInfo[playerid][pBodyCondition][2]);fwrite(hFile, var);
				format(var, 1024, "pLArm=%.1f\n",PlayerInfo[playerid][pBodyCondition][3]);fwrite(hFile, var);
				format(var, 1024, "pRLeg=%.1f\n",PlayerInfo[playerid][pBodyCondition][4]);fwrite(hFile, var);
				format(var, 1024, "pLLeg=%.1f\n",PlayerInfo[playerid][pBodyCondition][5]);fwrite(hFile, var);
				//format(var, 1024, "pSArmor=%.1f\n",PlayerInfo[playerid][pSArmor]);fwrite(hFile, var);
				format(var, 1024, "Int=%d\n",PlayerInfo[playerid][pInt]);fwrite(hFile, var);
				format(var, 1024, "Local=%d\n",PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
				format(var, 1024, "VirtualWorld=%d\n",PlayerInfo[playerid][pVW]);fwrite(hFile, var);
				format(var, 1024, "HouseInvite=%d\n",PlayerInfo[playerid][pHouseInvite]);fwrite(hFile, var);
				format(var, 1024, "Model=%d\n",PlayerInfo[playerid][pModel]);fwrite(hFile, var);
				format(var, 1024, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 1024, "FMax=%d\n",PlayerInfo[playerid][pFMax]);fwrite(hFile, var);
				format(var, 1024, "FTime=%d\n",PlayerInfo[playerid][pFTime]);fwrite(hFile, var);
				format(var, 1024, "pLumberTime=%d\n",PlayerInfo[playerid][pLumberTime]);fwrite(hFile, var);
				format(var, 1024, "JTime=%d\n",PlayerInfo[playerid][pJTime]);fwrite(hFile, var);
				format(var, 1024, "HaulingTime=%d\n",PlayerInfo[playerid][pHaulingTime]);fwrite(hFile, var);
				format(var, 1024, "Phone=%d\n",PlayerInfo[playerid][pPhone]);fwrite(hFile, var);
				format(var, 1024, "KartuPerdana=%d\n",PlayerInfo[playerid][pKartuPerdana]);fwrite(hFile, var);
				format(var, 1024, "Gate=%d\n",PlayerInfo[playerid][pGate]);fwrite(hFile, var);
				format(var, 1024, "Painkiller=%d\n",PlayerInfo[playerid][pPainkiller]);fwrite(hFile, var);
				format(var, 1024, "BusTime=%d\n",PlayerInfo[playerid][pBusTime]);fwrite(hFile, var);
				format(var, 1024, "BeratIkan=%d\n",PlayerInfo[playerid][pBeratIkan]);fwrite(hFile, var);
				format(var, 1024, "Apartment=%d\n",PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
				format(var, 1024, "Apartment2=%d\n",PlayerInfo[playerid][pPhousekey2]);fwrite(hFile, var);
				format(var, 1024, "Renting=%d\n",PlayerInfo[playerid][pRenting]);fwrite(hFile, var);
				format(var, 1024, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
				format(var, 1024, "CTime=%d\n",PlayerInfo[playerid][pCTime]);fwrite(hFile, var);
				format(var, 1024, "CarLicID=%d\n",PlayerInfo[playerid][pCarLicID]);fwrite(hFile, var);
				format(var, 1024, "KTP=%d\n",PlayerInfo[playerid][pKTP]);fwrite(hFile, var);
				format(var, 1024, "WorkShop=%d\n",PlayerInfo[playerid][pWS]);fwrite(hFile, var);
				format(var, 1024, "Ladang=%d\n",PlayerInfo[playerid][pFarm]);fwrite(hFile, var);
				format(var, 1024, "pTruckerLic=%d\n",PlayerInfo[playerid][pTruckerLic]);fwrite(hFile, var);
				format(var, 1024, "WSid=%d\n",PlayerInfo[playerid][pWSid]);fwrite(hFile, var);
				format(var, 1024, "Farmid=%d\n",PlayerInfo[playerid][pFarmid]);fwrite(hFile, var);
				format(var, 1024, "MissionTime=%d\n",PlayerInfo[playerid][pMissionsTime]);fwrite(hFile, var);
				format(var, 1024, "KTime=%d\n",PlayerInfo[playerid][pKTime]);fwrite(hFile, var);
				format(var, 1024, "pLumberLic=%d\n",PlayerInfo[playerid][pLumberLic]);fwrite(hFile, var);
				format(var, 1024, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
				format(var, 1024, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 1024, "CheckCash=%d\n",PlayerInfo[playerid][pCheckCash]);fwrite(hFile, var);
				format(var, 1024, "Checks=%d\n",PlayerInfo[playerid][pChecks]);fwrite(hFile, var);
				//format(var, 1024, "MInsure=%d\n",PlayerInfo[playerid][pMInsure]);fwrite(hFile, var);
				format(var, 1024, "GunLic=%d\n",PlayerInfo[playerid][pGunLic]);fwrite(hFile, var);
				for(new s = 0; s < 12; s++)
				{
					format(var, 1024, "Gun%d=%d\n", s, PlayerInfo[playerid][pGuns][s]);fwrite(hFile, var);
					format(var, 1024, "GunAmmo%d=%d\n", s, PlayerInfo[playerid][pGunsAmmo][s]);fwrite(hFile, var);
				}
				format(var, 1024, "DrugsTime=%d\n",PlayerInfo[playerid][pDrugsTime]);fwrite(hFile, var);
				format(var, 1024, "MechTime=%d\n",PlayerInfo[playerid][pMechTime]);fwrite(hFile, var);
				format(var, 1024, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 1024, "CDPlayer=%d\n",PlayerInfo[playerid][pCDPlayer]);fwrite(hFile, var);
				format(var, 1024, "Dice=%d\n",PlayerInfo[playerid][pDice]);fwrite(hFile, var);
				format(var, 1024, "Cangkul=%d\n",PlayerInfo[playerid][pCangkul]);fwrite(hFile, var);
				format(var, 1024, "Spraycan=%d\n",PlayerInfo[playerid][pSpraycan]);fwrite(hFile, var);
				format(var, 1024, "Rope=%d\n",PlayerInfo[playerid][pRope]);fwrite(hFile, var);
				format(var, 1024, "Cigars=%d\n",PlayerInfo[playerid][pCigar]);fwrite(hFile, var);
				format(var, 1024, "Sprunk=%d\n",PlayerInfo[playerid][pSprunk]);fwrite(hFile, var);
				format(var, 1024, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 1024, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 1024, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 1024, "Tutor=%d\n",PlayerInfo[playerid][pTutorial]);fwrite(hFile, var);
				format(var, 1024, "OnDuty=%d\n",PlayerInfo[playerid][pDuty]);fwrite(hFile, var);
				format(var, 1024, "Hospital=%d\n",GetPVarInt(MAX_PLAYERS, "Hospital"));fwrite(hFile, var);
				format(var, 1024, "Adjustable=%d\n",PlayerInfo[playerid][pAdjustable]);fwrite(hFile, var);
				format(var, 1024, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 1024, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 1024, "IP=%s\n",PlayerInfo[playerid][pIP]);fwrite(hFile, var);
				format(var, 1024, "WantedLevel=%d\n",PlayerInfo[playerid][pWantedLevel]);fwrite(hFile, var);
				format(var, 1024, "Insurance=%d\n",PlayerInfo[playerid][pInsurance]);fwrite(hFile, var);
				format(var, 1024, "Snack=%d\n",PlayerInfo[playerid][pSnack]);fwrite(hFile, var);
				format(var, 1024, "MineralWater=%d\n",PlayerInfo[playerid][pMineralWater]);fwrite(hFile, var);
				format(var, 1024, "AdMuted=%d\n",PlayerInfo[playerid][pADMute]);fwrite(hFile, var);
				format(var, 1024, "AdMutedTotal=%d\n",PlayerInfo[playerid][pADMuteTotal]);fwrite(hFile, var);
				format(var, 1024, "HelpMute=%d\n",PlayerInfo[playerid][pHelpMute]);fwrite(hFile, var);
				format(var, 1024, "SPos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 1024, "SPos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 1024, "SPos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 1024, "SPos_r=%.1f\n",PlayerInfo[playerid][pPos_r]);fwrite(hFile, var);
				format(var, 1024, "ReportMuted=%d\n",PlayerInfo[playerid][pRMuted]);fwrite(hFile, var);
    			format(var, 1024, "ReportMutedTotal=%d\n",PlayerInfo[playerid][pRMutedTotal]);fwrite(hFile, var);
    			format(var, 1024, "ReportMutedTime=%d\n",PlayerInfo[playerid][pRMutedTime]);fwrite(hFile, var);
    			format(var, 1024, "UsePainkiller=%d\n",PlayerInfo[playerid][pUsePainkiller]);fwrite(hFile, var);
    			format(var, 1024, "GYMTime=%d\n",PlayerInfo[playerid][pGYMTime]);fwrite(hFile, var);
    			format(var, 1024, "GiftTime=%d\n",PlayerInfo[playerid][pGiftTime]);fwrite(hFile, var);
    			format(var, 1024, "AdvisorDutyHours=%d\n",PlayerInfo[playerid][pDutyHours]);fwrite(hFile, var);
    			format(var, 1024, "AcceptedHelp=%d\n",PlayerInfo[playerid][pAcceptedHelp]);fwrite(hFile, var);
    			format(var, 1024, "AcceptReport=%d\n",PlayerInfo[playerid][pAcceptReport]);fwrite(hFile, var);
    			format(var, 1024, "TrashReport=%d\n",PlayerInfo[playerid][pTrashReport]);fwrite(hFile, var);
    			format(var, 1024, "GangWarn=%d\n",PlayerInfo[playerid][pGangWarn]);fwrite(hFile, var);
    			format(var, 1024, "FactionBanned=%d\n",PlayerInfo[playerid][pFactionBanned]);fwrite(hFile, var);
    			format(var, 1024, "CSFBanned=%d\n",PlayerInfo[playerid][pCSFBanned]);fwrite(hFile, var);
				for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
	    		{
	        		format(var, 1024, "pv%dPosX=%.1f\n", v, PlayerVehicleInfo[playerid][v][pvPosX]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dPosY=%.1f\n", v, PlayerVehicleInfo[playerid][v][pvPosY]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dPosZ=%.1f\n", v, PlayerVehicleInfo[playerid][v][pvPosZ]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dPosAngle=%.1f\n", v, PlayerVehicleInfo[playerid][v][pvPosAngle]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dModelId=%d\n", v, PlayerVehicleInfo[playerid][v][pvModelId]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dLock=%d\n", v, PlayerVehicleInfo[playerid][v][pvLock]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dLocked=%d\n", v, PlayerVehicleInfo[playerid][v][pvLocked]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dPaintJob=%d\n", v, PlayerVehicleInfo[playerid][v][pvPaintJob]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dColor1=%d\n", v, PlayerVehicleInfo[playerid][v][pvColor1]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dNeon=%d\n", v, PlayerVehicleInfo[playerid][v][pvNeon]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dColor2=%d\n", v, PlayerVehicleInfo[playerid][v][pvColor2]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dPrice=%d\n", v, PlayerVehicleInfo[playerid][v][pvPrice]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dTicket=%d\n", v, PlayerVehicleInfo[playerid][v][pvTicket]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeapon0=%d\n", v, PlayerVehicleInfo[playerid][v][pvWeapons][0]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeapon1=%d\n", v, PlayerVehicleInfo[playerid][v][pvWeapons][1]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeapon2=%d\n", v, PlayerVehicleInfo[playerid][v][pvWeapons][2]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeaponAmmo0=%d\n", v, PlayerVehicleInfo[playerid][v][pvWeaponsAmmo][0]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeaponAmmo1=%d\n", v, PlayerVehicleInfo[playerid][v][pvWeaponsAmmo][1]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeaponAmmo2=%d\n", v, PlayerVehicleInfo[playerid][v][pvWeaponsAmmo][2]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWepUpgrade=%d\n", v, PlayerVehicleInfo[playerid][v][pvWepUpgrade]);fwrite(hFile, var);
	   			 	if(PlayerVehicleInfo[playerid][v][pvImpounded] == 0) PlayerVehicleInfo[playerid][v][pvFuel] = VehicleFuel[PlayerVehicleInfo[playerid][v][pvId]];
	   			 	format(var, 32, "pv%dFuel=%.1f\n", v, PlayerVehicleInfo[playerid][v][pvFuel]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dHealth=%.1f\n", v, PlayerVehicleInfo[playerid][v][pvHealth]);fwrite(hFile, var);
					format(var, 1024, "pv%dInsurances=%d\n", v, PlayerVehicleInfo[playerid][v][pvInsurances]);fwrite(hFile, var);
					format(var, 1024, "pv%dMesinUpgrade=%d\n", v, PlayerVehicleInfo[playerid][v][pvMesinUpgrade]);fwrite(hFile, var);
					format(var, 1024, "pv%dBodyUpgrade=%d\n", v, PlayerVehicleInfo[playerid][v][pvBodyUpgrade]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dStatus0=%d\n", v, PlayerVehicleInfo[playerid][v][pvStatus][0]);fwrite(hFile, var);
					format(var, 1024, "pv%dStatus1=%d\n", v, PlayerVehicleInfo[playerid][v][pvStatus][1]);fwrite(hFile, var);
					format(var, 1024, "pv%dStatus2=%d\n", v, PlayerVehicleInfo[playerid][v][pvStatus][2]);fwrite(hFile, var);
					format(var, 1024, "pv%dStatus3=%d\n", v, PlayerVehicleInfo[playerid][v][pvStatus][3]);fwrite(hFile, var);
					format(var, 1024, "pv%dLicense=%d\n", v, PlayerVehicleInfo[playerid][v][pvLicense]);fwrite(hFile, var);
					format(var, 1024, "pv%dLicenseTime=%d\n", v, PlayerVehicleInfo[playerid][v][pvLicenseTime]);fwrite(hFile, var);
					format(var, 1024, "pv%dLicenseExpired=%s\n", v, PlayerVehicleInfo[playerid][v][pvLicenseExpired]);fwrite(hFile, var);
					format(var, 1024, "pv%dImpound=%d\n", v, PlayerVehicleInfo[playerid][v][pvImpounded]);fwrite(hFile, var);
					format(var, 1024, "pv%dStored=%d\n", v, PlayerVehicleInfo[playerid][v][pvStored]);fwrite(hFile, var);
					format(var, 1024, "pv%dDestroyed=%d\n", v, PlayerVehicleInfo[playerid][v][pvDestroyed]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dNumPlate=%s\n", v, PlayerVehicleInfo[playerid][v][pvNumberPlate]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText1=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText1]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText2=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText2]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText3=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText3]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText4=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText4]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText5=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText5]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText6=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText6]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText7=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText7]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText8=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText8]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText9=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText9]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText10=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText10]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol1=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol1]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol2=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol2]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol3=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol3]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol4=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol4]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol5=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol5]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol6=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol6]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol7=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol7]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol8=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol8]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol9=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol9]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol10=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol10]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize1=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize1]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize2=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize2]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize3=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize3]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize4=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize4]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize5=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize5]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize6=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize6]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize7=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize7]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize8=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize8]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize9=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize9]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize10=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize10]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID1=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID1]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID2=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID2]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID3=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID3]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID4=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID4]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID5=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID5]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID6=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID6]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID7=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID7]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID8=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID8]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID9=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID9]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID10=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID10]);fwrite(hFile, var);
	    			for(new m = 0; m < MAX_MODS; m++)
	     	   		{
                		format(var, 1024, "pv%dMod%d=%d\n", v, m, PlayerVehicleInfo[playerid][v][pvMods][m]);fwrite(hFile, var);
	        		}
	        		for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++)
	        		{
	        		    format(var, 1024, "pv%dToyID%d=%d\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyID][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyPosX%d=%.5f\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyPosX][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyPosY%d=%.5f\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyPosY][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyPosZ%d=%.5f\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyPosZ][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyRotX%d=%.5f\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyRotX][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyRotY%d=%.5f\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyRotY][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyRotZ%d=%.5f\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyColor%d=%d\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyColor][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyIndex%d=%d\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyIndex][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyTexture1%d=%d\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyTexture1][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyTexture2%d=%d\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyTexture2][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyTextureID%d=%d\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyTextureID][vt]);fwrite(hFile, var);
					}
	        		//format(var, 1024, "pv%dAllowedPlayer=%s\n", v, PlayerVehicleInfo[playerid][v][pvAllowPlayer]);fwrite(hFile, var);
				}
				format(var, 1024, "prTax=%d\n", PlayerRentInfo[playerid][prTax]);fwrite(hFile, var);
				format(var, 1024, "prRentTime=%d\n", PlayerRentInfo[playerid][prRentTime]);fwrite(hFile, var);
				format(var, 1024, "prVehicleRent=%d\n", PlayerRentInfo[playerid][prVehicleRent]);fwrite(hFile, var);
				format(var, 1024, "prModelId=%d\n", PlayerRentInfo[playerid][prModelId]);fwrite(hFile, var);
				format(var, 1024, "prPosX=%.1f\n", PlayerRentInfo[playerid][prPosX]);fwrite(hFile, var);
				format(var, 1024, "prPosY=%.1f\n", PlayerRentInfo[playerid][prPosY]);fwrite(hFile, var);
				format(var, 1024, "prPosZ=%.1f\n", PlayerRentInfo[playerid][prPosZ]);fwrite(hFile, var);
				format(var, 1024, "prPosAngle=%.1f\n", PlayerRentInfo[playerid][prPosAngle]);fwrite(hFile, var);
				format(var, 1024, "prColor1=%d\n", PlayerRentInfo[playerid][prColor1]);fwrite(hFile, var);
				format(var, 1024, "prColor2=%d\n", PlayerRentInfo[playerid][prColor2]);fwrite(hFile, var);
				format(var, 1024, "prLock=%d\n", PlayerRentInfo[playerid][prLock]);fwrite(hFile, var);
				format(var, 1024, "prLocked=%d\n", PlayerRentInfo[playerid][prLocked]);fwrite(hFile, var);
				format(var, 1024, "prTicket=%d\n", PlayerRentInfo[playerid][prTicket]);fwrite(hFile, var);
				format(var, 1024, "prFuel=%d\n", PlayerRentInfo[playerid][prFuel]);fwrite(hFile, var);
				format(var, 1024, "prHealth=%.1f\n", PlayerRentInfo[playerid][prHealth]);fwrite(hFile, var);
				format(var, 1024, "prStatus0=%d\n", PlayerRentInfo[playerid][prStatus][0]);fwrite(hFile, var);
				format(var, 1024, "prStatus1=%d\n", PlayerRentInfo[playerid][prStatus][1]);fwrite(hFile, var);
				format(var, 1024, "prStatus2=%d\n", PlayerRentInfo[playerid][prStatus][2]);fwrite(hFile, var);
				format(var, 1024, "prStatus3=%d\n", PlayerRentInfo[playerid][prStatus][3]);fwrite(hFile, var);
	    		for(new vv = 0; vv < MAX_PLAYERTOYS; vv++)
	    		{
					format(var, 1024, "pt%dModelID=%d\n", vv, PlayerToyInfo[playerid][vv][ptModelID]);fwrite(hFile, var);
					format(var, 1024, "pt%dBone=%d\n", vv, PlayerToyInfo[playerid][vv][ptBone]);fwrite(hFile, var);
	        		format(var, 1024, "pt%dPosX=%.5f\n", vv, PlayerToyInfo[playerid][vv][ptPosX]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dPosY=%.5f\n", vv, PlayerToyInfo[playerid][vv][ptPosY]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dPosZ=%.5f\n", vv, PlayerToyInfo[playerid][vv][ptPosZ]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dRotX=%.5f\n", vv, PlayerToyInfo[playerid][vv][ptRotX]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dRotY=%.5f\n", vv, PlayerToyInfo[playerid][vv][ptRotY]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dRotZ=%.5f\n", vv, PlayerToyInfo[playerid][vv][ptRotZ]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dScaX=%.5f\n", vv, PlayerToyInfo[playerid][vv][ptScaX]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dScaY=%.5f\n", vv, PlayerToyInfo[playerid][vv][ptScaY]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dScaZ=%.5f\n", vv, PlayerToyInfo[playerid][vv][ptScaZ]);fwrite(hFile, var);
	    		}
	    		format(var, 1024, "VIPJoinDate=%s\n",PlayerInfo[playerid][pVIPJoinDate]);fwrite(hFile, var);//vip
				format(var, 1024, "VIPExpDate=%s\n",PlayerInfo[playerid][pVIPExpDate]);fwrite(hFile, var);//vip
				format(var, 1024, "VIPExpTime=%s\n",PlayerInfo[playerid][pVIPExpTime]);fwrite(hFile, var);//vip
	    		format(var, 1024, "VIPInviteDay=%d\n",PlayerInfo[playerid][pVIPInviteDay]);fwrite(hFile, var);
	    		format(var, 1024, "TempVIP=%d\n",PlayerInfo[playerid][pTempVIP]);fwrite(hFile, var);
	    		format(var, 1024, "BuddyInvite=%d\n",PlayerInfo[playerid][pBuddyInvited]);fwrite(hFile, var);
	    		format(var, 1024, "VIPLeft=%d\n",PlayerInfo[playerid][pVIPLeft]);fwrite(hFile, var);
	    		format(var, 1024, "Tokens=%d\n",PlayerInfo[playerid][pTokens]);fwrite(hFile, var);
	    		format(var, 1024, "TriageTime=%d\n",PlayerInfo[playerid][pTriageTime]);fwrite(hFile, var);
	    		format(var, 1024, "jailedBy=%s\n", PlayerInfo[playerid][pJailedBy]);fwrite(hFile, var);
	    		format(var, 1024, "PrisonReason=%s\n", PlayerInfo[playerid][pPrisonReason]);fwrite(hFile, var);
	    		format(var, 1024, "TicketTime=%d\n",PlayerInfo[playerid][pTicketTime]);fwrite(hFile, var);
	    		format(var, 1024, "Screwdriver=%d\n",PlayerInfo[playerid][pScrewdriver]);fwrite(hFile, var);
	    		format(var, 1024, "Tire=%d\n",PlayerInfo[playerid][pTire]);fwrite(hFile, var);
	    		format(var, 1024, "Firstaid=%d\n",PlayerInfo[playerid][pFirstaid]);fwrite(hFile, var);
	    		format(var, 1024, "Rccam=%d\n",PlayerInfo[playerid][pRccam]);fwrite(hFile, var);
	    		format(var, 1024, "Receiver=%d\n",PlayerInfo[playerid][pReceiver]);fwrite(hFile, var);
	    		format(var, 1024, "GPS=%d\n",PlayerInfo[playerid][pGPS]);fwrite(hFile, var);
	    		format(var, 1024, "Sweep=%d\n",PlayerInfo[playerid][pSweep]);fwrite(hFile, var);
	    		format(var, 1024, "SweepLeft=%d\n",PlayerInfo[playerid][pSweepLeft]);fwrite(hFile, var);
	    		format(var, 1024, "Bugged=%d\n",PlayerInfo[playerid][pBugged]);fwrite(hFile, var);
	    		format(var, 1024, "Hospital=%d\n",PlayerInfo[playerid][pHospital]);fwrite(hFile, var);
				format(var, 1024, "TanamanAnggur=%d\n",PlayerInfo[playerid][pTanamanAnggur]);fwrite(hFile, var);
				format(var, 1024, "TanamanBlueberry=%d\n",PlayerInfo[playerid][pTanamanBlueberry]);fwrite(hFile, var);
				format(var, 1024, "TanamanStrawberry=%d\n",PlayerInfo[playerid][pTanamanStrawberry]);fwrite(hFile, var);
				format(var, 1024, "TanamanGandum=%d\n",PlayerInfo[playerid][pTanamanGandum]);fwrite(hFile, var);
				format(var, 1024, "TanamanTomat=%d\n",PlayerInfo[playerid][pTanamanTomat]);fwrite(hFile, var);
				format(var, 1024, "BibitAnggur=%d\n",PlayerInfo[playerid][pBibitAnggur]);fwrite(hFile, var);
				format(var, 1024, "BibitBlueberry=%d\n",PlayerInfo[playerid][pBibitBlueberry]);fwrite(hFile, var);
				format(var, 1024, "BibitStrawberry=%d\n",PlayerInfo[playerid][pBibitStrawberry]);fwrite(hFile, var);
				format(var, 1024, "BibitGandum=%d\n",PlayerInfo[playerid][pBibitGandum]);fwrite(hFile, var);
				format(var, 1024, "BibitTomat=%d\n",PlayerInfo[playerid][pBibitTomat]);fwrite(hFile, var);
				format(var, 1024, "Warrants=%s\n",PlayerInfo[playerid][pWarrant]);fwrite(hFile, var);
				format(var, 1024, "JudgeJailTime=%d\n",PlayerInfo[playerid][pJudgeJailTime]);fwrite(hFile, var);
				format(var, 1024, "JudgeJailType=%d\n",PlayerInfo[playerid][pJudgeJailType]);fwrite(hFile, var);
				format(var, 1024, "BeingSentenced=%d\n",PlayerInfo[playerid][pBeingSentenced]);fwrite(hFile, var);
				format(var, 1024, "ProbationTime=%d\n",PlayerInfo[playerid][pProbationTime]);fwrite(hFile, var);
	    		format(var, 1024, "CallsAccepted=%d\n", PlayerInfo[playerid][pCallsAccepted]);fwrite(hFile, var);
	    		format(var, 1024, "PatientsDelivered=%d\n",PlayerInfo[playerid][pPatientsDelivered]);fwrite(hFile, var);
	    		format(var, 1024, "LiveBanned=%d\n",PlayerInfo[playerid][pLiveBanned]);fwrite(hFile, var);
	    		format(var, 1024, "FreezeBank=%d\n",PlayerInfo[playerid][pFreezeBank]);fwrite(hFile, var);
				format(var, 1024, "Component=%d\n",PlayerInfo[playerid][pComponent]);fwrite(hFile, var);
				format(var, 1024, "BoomBox=%d\n",PlayerInfo[playerid][pBoomBox]);fwrite(hFile, var);
	    		//if( strcmp( key, "jailedBy", true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pJailedBy], val, 0, strlen(val)-1, 255); }
				fclose(hFile);
				new String[200];
				OnPlayerLogin(playerid, password);
				format(String, sizeof(String), "[DATABASE] {FFFFFF}Akun dengan Nama {FFFF00}%s {FFFFFF}telah berhasil terdaftar di Database", GetName(playerid));
				SendClientMessage(playerid, COLOR_ARWIN, String);
				TotalRegister++;
			}
	}
	return 1;
}

public OnPlayerStatsUpdate(playerid)
{
	if(GetPVarInt(playerid, "TempName") == 1) return 1;
	if(IsPlayerConnected(playerid))
	{
		if(gPlayerLogged{playerid})
		{
		    new String3[32];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
   			format(String3, sizeof(String3), "users/%s.ini", playername3);
			new File: hFile = fopen(String3, io_write);
			if (hFile)
			{
				new var[1024];
				format(var, 1024, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				format(var, 1024, "AdminOnDuty=%d\n", PlayerInfo[playerid][pAdminDuty]);fwrite(hFile, var);
				format(var, 1024, "AdminName=%s\n", PlayerInfo[playerid][pAdminName]);fwrite(hFile, var);
				format(var, 1024, "NormalName=%s\n", PlayerInfo[playerid][pNormalName]);fwrite(hFile, var);
				format(var, 1024, "VIPName=%s\n", PlayerInfo[playerid][pVIPName]);fwrite(hFile, var);
				format(var, 1024, "AdminBan=%s\n", PlayerInfo[playerid][pAdminban]);fwrite(hFile, var);
				format(var, 1024, "BanReason=%s\n", PlayerInfo[playerid][pBanReason]);fwrite(hFile, var);
				format(var, 1024, "BanExpired=%s\n", PlayerInfo[playerid][pBanExpired]);fwrite(hFile, var);
       			format(var, 1024, "BanExpired2=%s\n", PlayerInfo[playerid][pBanExpired2]);fwrite(hFile, var);
				format(var, 1024, "Accent=%s\n", PlayerInfo[playerid][pAccent]);fwrite(hFile, var);
				format(var, 1024, "SweeperT=%d\n",PlayerInfo[playerid][pSweeperT]);fwrite(hFile, var);
				format(var, 1024, "WSBos=%d\n", PlayerInfo[playerid][pWSBos]);fwrite(hFile, var);
				format(var, 1024, "DutyTime=%d\n", PlayerInfo[playerid][pDutyTime]);fwrite(hFile, var);
				format(var, 1024, "LadangBos=%d\n", PlayerInfo[playerid][pFarmBos]);fwrite(hFile, var);
				format(var, 1024, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 1024, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 1024, "Band=%d\n",PlayerInfo[playerid][pBanned]);fwrite(hFile, var);
				format(var, 1024, "PermBand=%d\n",PlayerInfo[playerid][pPermaBanned]);fwrite(hFile, var);
				format(var, 1024, "Warnings=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				format(var, 1024, "Disabled=%d\n",PlayerInfo[playerid][pDisabled]);fwrite(hFile, var);
				format(var, 1024, "DonateRank=%d\n",PlayerInfo[playerid][pDonateRank]);fwrite(hFile, var);
				format(var, 1024, "DutyTimeTotal=%d\n",PlayerInfo[playerid][pDutyTimeTotal]);fwrite(hFile, var);
				format(var, 1024, "TogReports=%d\n",PlayerInfo[playerid][pTogReports]);fwrite(hFile, var);
				format(var, 1024, "Radio=%d\n",PlayerInfo[playerid][pRadio]);fwrite(hFile, var);
				format(var, 1024, "RadioFreq=%d\n",PlayerInfo[playerid][pRadioFreq]);fwrite(hFile, var);
				format(var, 1024, "Bandage=%d\n",PlayerInfo[playerid][pBandage]);fwrite(hFile, var);
				format(var, 1024, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 1024, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 1024, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 1024, "Lumber=%d\n",PlayerInfo[playerid][pLumber]);fwrite(hFile, var);
				format(var, 1024, "Cacing=%d\n",PlayerInfo[playerid][pCacing]);fwrite(hFile, var);
				format(var, 1024, "AdminOnDutyTime=%d\n",PlayerInfo[playerid][pAdminOnDutyTime]);fwrite(hFile, var);
				format(var, 1024, "PBiskey2=%d\n",PlayerInfo[playerid][pPBiskey2]);fwrite(hFile, var);
				format(var, 1024, "PDTime=%d\n",PlayerInfo[playerid][pPDTime]);fwrite(hFile, var);
				format(var, 1024, "Hunger=%d\n",PlayerInfo[playerid][pHunger]);fwrite(hFile, var);
				format(var, 1024, "Bladder=%d\n",PlayerInfo[playerid][pBladder]);fwrite(hFile, var);
				format(var, 1024, "Energi=%d\n",PlayerInfo[playerid][pEnergi]);fwrite(hFile, var);
				format(var, 1024, "Condition=%d\n",PlayerInfo[playerid][pCondition]);fwrite(hFile, var);
				format(var, 1024, "SilincedSkill=%d\n",PlayerInfo[playerid][pSilincedSkill]);fwrite(hFile, var);
				format(var, 1024, "DesertEagleSkill=%d\n",PlayerInfo[playerid][pDesertEagleSkill]);fwrite(hFile, var);
				format(var, 1024, "RifleSkill=%d\n",PlayerInfo[playerid][pRifleSkill]);fwrite(hFile, var);
				format(var, 1024, "ShotgunSkill=%d\n",PlayerInfo[playerid][pShotgunSkill]);fwrite(hFile, var);
				format(var, 1024, "SpassSkill=%d\n",PlayerInfo[playerid][pSpassSkill]);fwrite(hFile, var);
				format(var, 1024, "MP5Skill=%d\n",PlayerInfo[playerid][pMP5Skill]);fwrite(hFile, var);
				format(var, 1024, "AK47Skill=%d\n",PlayerInfo[playerid][pAK47Skill]);fwrite(hFile, var);
				format(var, 1024, "M4Skill=%d\n",PlayerInfo[playerid][pM4Skill]);fwrite(hFile, var);
				format(var, 1024, "SniperSkill=%d\n",PlayerInfo[playerid][pSniperSkill]);fwrite(hFile, var);
				format(var, 1024, "TrainingTime=%d\n",PlayerInfo[playerid][pTrainingTime]);fwrite(hFile, var);
				format(var, 1024, "PBiskey=%d\n",PlayerInfo[playerid][pPBiskey]);fwrite(hFile, var);
				format(var, 1024, "InBizz=%d\n",PlayerInfo[playerid][pInBizz]);fwrite(hFile, var);
				format(var, 1024, "Mask=%d\n",PlayerInfo[playerid][pMask]);fwrite(hFile, var);
				format(var, 1024, "MaskUse=%d\n",PlayerInfo[playerid][pMaskUse]);fwrite(hFile, var);
				format(var, 1024, "MaskID=%d\n",PlayerInfo[playerid][pMaskID]);fwrite(hFile, var);
				format(var, 1024, "Pancingan=%d\n",PlayerInfo[playerid][pPancingan]);fwrite(hFile, var);
				format(var, 1024, "Age=%s\n",PlayerInfo[playerid][pAge]);fwrite(hFile, var);
				format(var, 1024, "Paracetamol=%d\n",PlayerInfo[playerid][pParacetamol]);fwrite(hFile, var);
				format(var, 1024, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 1024, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 1024, "Money=%d\n",GetPVarInt(playerid, "Cash"));fwrite(hFile, var);
				format(var, 1024, "Bank=%d\n",PlayerInfo[playerid][pAccount]);fwrite(hFile, var);
				format(var, 1024, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 1024, "Arrested=%d\n",PlayerInfo[playerid][pArrested]);fwrite(hFile, var);
				format(var, 1024, "FitnessTimer=%d\n",PlayerInfo[playerid][pFitnessTimer]);fwrite(hFile, var);
				format(var, 1024, "Job=%d\n",PlayerInfo[playerid][pJob]);fwrite(hFile, var);
				format(var, 1024, "WSJob=%d\n",PlayerInfo[playerid][pWSJob]);fwrite(hFile, var);
				format(var, 1024, "FarmJob=%d\n",PlayerInfo[playerid][pFarmJob]);fwrite(hFile, var);
				format(var, 1024, "Jerigen=%d\n",PlayerInfo[playerid][pJerigen]);fwrite(hFile, var);
				format(var, 1024, "Bensin=%d\n",PlayerInfo[playerid][pBensin]);fwrite(hFile, var);
				format(var, 1024, "UseSorry=%d\n",PlayerInfo[playerid][pUseSorry]);fwrite(hFile, var);
				format(var, 1024, "Kuli=%d\n",PlayerInfo[playerid][pKuli]);fwrite(hFile, var);
				format(var, 1024, "Job2=%d\n",PlayerInfo[playerid][pJob2]);fwrite(hFile, var);
				format(var, 1024, "IllegalJob=%d\n",PlayerInfo[playerid][pIllegalJob]);fwrite(hFile, var);
				format(var, 1024, "Paycheck=%d\n",PlayerInfo[playerid][pPayCheck]);fwrite(hFile, var);
				format(var, 1024, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 1024, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 1024, "WRestricted=%d\n",PlayerInfo[playerid][pWRestricted]);fwrite(hFile, var);
				format(var, 1024, "Materials=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 1024, "Pulsa2=%d\n",PlayerInfo[playerid][pPulsa2]);fwrite(hFile, var);
				format(var, 1024, "Packages=%d\n",GetPVarInt(playerid, "Packages"));fwrite(hFile, var);
				format(var, 1024, "Crates=%d\n",PlayerInfo[playerid][pCrates]);fwrite(hFile, var);
				format(var, 1024, "Pot=%d\n",PlayerInfo[playerid][pPot]);fwrite(hFile, var);
				format(var, 1024, "Crack=%d\n",PlayerInfo[playerid][pCrack]);fwrite(hFile, var);
				format(var, 1024, "Leader=%d\n",PlayerInfo[playerid][pLeader]);fwrite(hFile, var);
				format(var, 1024, "Member=%d\n",PlayerInfo[playerid][pMember]);fwrite(hFile, var);
				format(var, 1024, "Division=%d\n",PlayerInfo[playerid][pDivision]);fwrite(hFile, var);
				format(var, 1024, "FMember=%d\n",PlayerInfo[playerid][pFMember]);fwrite(hFile, var);
				format(var, 1024, "Rank=%d\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
				format(var, 1024, "Amoxicilin=%d\n",PlayerInfo[playerid][pAmoxicilin]);fwrite(hFile, var);
				format(var, 1024, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 1024, "Ultrafluenza=%d\n",PlayerInfo[playerid][pUltrafluenza]);fwrite(hFile, var);
				format(var, 1024, "DrugsSkill=%d\n",PlayerInfo[playerid][pTruckingSkill]);fwrite(hFile, var);
				format(var, 1024, "ArmsSkill=%d\n",PlayerInfo[playerid][pArmsSkill]);fwrite(hFile, var);
				format(var, 1024, "SmugglerSkill=%d\n",PlayerInfo[playerid][pSmugSkill]);fwrite(hFile, var);
				format(var, 1024, "FightingStyle=%d\n",PlayerInfo[playerid][pFightStyle]);fwrite(hFile, var);
				if(GetPVarInt(playerid, "EventToken") != 2 && GetPVarInt(playerid, "IsInArena") == -1)
				{
				    GetPlayerHealth(playerid,PlayerInfo[playerid][pHealth]);
				}
				format(var, 1024, "pHealth=%.1f\n",PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
				if(GetPVarInt(playerid, "EventToken") != 2 || GetPVarInt(playerid, "IsInArena") == -1)
				{
					GetPlayerArmour(playerid,PlayerInfo[playerid][pArmor]);
				}
				format(var, 1024, "pArmor=%.1f\n",PlayerInfo[playerid][pArmor]);fwrite(hFile, var);
				format(var, 1024, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
				format(var, 1024, "pGroin=%.1f\n",PlayerInfo[playerid][pBodyCondition][0]);fwrite(hFile, var);
				format(var, 1024, "pTorso=%.1f\n",PlayerInfo[playerid][pBodyCondition][1]);fwrite(hFile, var);
				format(var, 1024, "pRArm=%.1f\n",PlayerInfo[playerid][pBodyCondition][2]);fwrite(hFile, var);
				format(var, 1024, "pLArm=%.1f\n",PlayerInfo[playerid][pBodyCondition][3]);fwrite(hFile, var);
				format(var, 1024, "pRLeg=%.1f\n",PlayerInfo[playerid][pBodyCondition][4]);fwrite(hFile, var);
				format(var, 1024, "pLLeg=%.1f\n",PlayerInfo[playerid][pBodyCondition][5]);fwrite(hFile, var);
				//format(var, 1024, "pSArmor=%.1f\n",PlayerInfo[playerid][pSArmor]);fwrite(hFile, var);
				format(var, 1024, "Int=%d\n",PlayerInfo[playerid][pInt]);fwrite(hFile, var);
				format(var, 1024, "Local=%d\n",PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
				format(var, 1024, "VirtualWorld=%d\n",PlayerInfo[playerid][pVW]);fwrite(hFile, var);
				format(var, 1024, "HouseInvite=%d\n",PlayerInfo[playerid][pHouseInvite]);fwrite(hFile, var);
				format(var, 1024, "Model=%d\n",PlayerInfo[playerid][pModel]);fwrite(hFile, var);
				format(var, 1024, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 1024, "FMax=%d\n",PlayerInfo[playerid][pFMax]);fwrite(hFile, var);
				format(var, 1024, "FTime=%d\n",PlayerInfo[playerid][pFTime]);fwrite(hFile, var);
				format(var, 1024, "pLumberTime=%d\n",PlayerInfo[playerid][pLumberTime]);fwrite(hFile, var);
				format(var, 1024, "JTime=%d\n",PlayerInfo[playerid][pJTime]);fwrite(hFile, var);
				format(var, 1024, "HaulingTime=%d\n",PlayerInfo[playerid][pHaulingTime]);fwrite(hFile, var);
				format(var, 1024, "Phone=%d\n",PlayerInfo[playerid][pPhone]);fwrite(hFile, var);
				format(var, 1024, "KartuPerdana=%d\n",PlayerInfo[playerid][pKartuPerdana]);fwrite(hFile, var);
				format(var, 1024, "Gate=%d\n",PlayerInfo[playerid][pGate]);fwrite(hFile, var);
				format(var, 1024, "Painkiller=%d\n",PlayerInfo[playerid][pPainkiller]);fwrite(hFile, var);
				format(var, 1024, "BusTime=%d\n",PlayerInfo[playerid][pBusTime]);fwrite(hFile, var);
				format(var, 1024, "BeratIkan=%d\n",PlayerInfo[playerid][pBeratIkan]);fwrite(hFile, var);
				format(var, 1024, "Apartment=%d\n",PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
				format(var, 1024, "Apartment2=%d\n",PlayerInfo[playerid][pPhousekey2]);fwrite(hFile, var);
				format(var, 1024, "Renting=%d\n",PlayerInfo[playerid][pRenting]);fwrite(hFile, var);
				format(var, 1024, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
				format(var, 1024, "CTime=%d\n",PlayerInfo[playerid][pCTime]);fwrite(hFile, var);
				format(var, 1024, "CarLicID=%d\n",PlayerInfo[playerid][pCarLicID]);fwrite(hFile, var);
				format(var, 1024, "KTP=%d\n",PlayerInfo[playerid][pKTP]);fwrite(hFile, var);
				format(var, 1024, "WorkShop=%d\n",PlayerInfo[playerid][pWS]);fwrite(hFile, var);
				format(var, 1024, "Ladang=%d\n",PlayerInfo[playerid][pFarm]);fwrite(hFile, var);
				format(var, 1024, "pTruckerLic=%d\n",PlayerInfo[playerid][pTruckerLic]);fwrite(hFile, var);
				format(var, 1024, "WSid=%d\n",PlayerInfo[playerid][pWSid]);fwrite(hFile, var);
				format(var, 1024, "Farmid=%d\n",PlayerInfo[playerid][pFarmid]);fwrite(hFile, var);
				format(var, 1024, "MissionTime=%d\n",PlayerInfo[playerid][pMissionsTime]);fwrite(hFile, var);
				format(var, 1024, "KTime=%d\n",PlayerInfo[playerid][pKTime]);fwrite(hFile, var);
				format(var, 1024, "pLumberLic=%d\n",PlayerInfo[playerid][pLumberLic]);fwrite(hFile, var);
				format(var, 1024, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
				format(var, 1024, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 1024, "CheckCash=%d\n",PlayerInfo[playerid][pCheckCash]);fwrite(hFile, var);
				format(var, 1024, "Checks=%d\n",PlayerInfo[playerid][pChecks]);fwrite(hFile, var);
				//format(var, 1024, "MInsure=%d\n",PlayerInfo[playerid][pMInsure]);fwrite(hFile, var);
				format(var, 1024, "GunLic=%d\n",PlayerInfo[playerid][pGunLic]);fwrite(hFile, var);
				for(new s = 0; s < 12; s++)
				{
					format(var, 1024, "Gun%d=%d\n", s, PlayerInfo[playerid][pGuns][s]);fwrite(hFile, var);
					format(var, 1024, "GunAmmo%d=%d\n", s, PlayerInfo[playerid][pGunsAmmo][s]);fwrite(hFile, var);
				}
				format(var, 1024, "DrugsTime=%d\n",PlayerInfo[playerid][pDrugsTime]);fwrite(hFile, var);
				format(var, 1024, "MechTime=%d\n",PlayerInfo[playerid][pMechTime]);fwrite(hFile, var);
				format(var, 1024, "Insurance=%d\n",PlayerInfo[playerid][pInsurance]);fwrite(hFile, var);
				format(var, 1024, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 1024, "CDPlayer=%d\n",PlayerInfo[playerid][pCDPlayer]);fwrite(hFile, var);
				format(var, 1024, "Dice=%d\n",PlayerInfo[playerid][pDice]);fwrite(hFile, var);
				format(var, 1024, "Cangkul=%d\n",PlayerInfo[playerid][pCangkul]);fwrite(hFile, var);
				format(var, 1024, "Spraycan=%d\n",PlayerInfo[playerid][pSpraycan]);fwrite(hFile, var);
				format(var, 1024, "Rope=%d\n",PlayerInfo[playerid][pRope]);fwrite(hFile, var);
				format(var, 1024, "Cigars=%d\n",PlayerInfo[playerid][pCigar]);fwrite(hFile, var);
				format(var, 1024, "Sprunk=%d\n",PlayerInfo[playerid][pSprunk]);fwrite(hFile, var);
				format(var, 1024, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 1024, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 1024, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 1024, "Tutor=%d\n",PlayerInfo[playerid][pTutorial]);fwrite(hFile, var);
				format(var, 1024, "OnDuty=%d\n",PlayerInfo[playerid][pDuty]);fwrite(hFile, var);
				format(var, 1024, "Hospital=%d\n",GetPVarInt(playerid, "Hospital"));fwrite(hFile, var);
				format(var, 1024, "Adjustable=%d\n",PlayerInfo[playerid][pAdjustable]);fwrite(hFile, var);
				format(var, 1024, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 1024, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 1024, "IP=%s\n",PlayerInfo[playerid][pIP]);fwrite(hFile, var);
				format(var, 1024, "WantedLevel=%d\n",PlayerInfo[playerid][pWantedLevel]);fwrite(hFile, var);
				format(var, 1024, "Snack=%d\n",PlayerInfo[playerid][pSnack]);fwrite(hFile, var);
				format(var, 1024, "MineralWater=%d\n",PlayerInfo[playerid][pMineralWater]);fwrite(hFile, var);
				format(var, 1024, "AdMuted=%d\n",PlayerInfo[playerid][pADMute]);fwrite(hFile, var);
				format(var, 1024, "AdMutedTotal=%d\n",PlayerInfo[playerid][pADMuteTotal]);fwrite(hFile, var);
                format(var, 1024, "HelpMute=%d\n",PlayerInfo[playerid][pHelpMute]);fwrite(hFile, var);
				format(var, 1024, "SPos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 1024, "SPos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 1024, "SPos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 1024, "SPos_r=%.1f\n",PlayerInfo[playerid][pPos_r]);fwrite(hFile, var);
				format(var, 1024, "ReportMuted=%d\n",PlayerInfo[playerid][pRMuted]);fwrite(hFile, var);
    			format(var, 1024, "ReportMutedTotal=%d\n",PlayerInfo[playerid][pRMutedTotal]);fwrite(hFile, var);
    			format(var, 1024, "ReportMutedTime=%d\n",PlayerInfo[playerid][pRMutedTime]);fwrite(hFile, var);
    			format(var, 1024, "UsePainkiller=%d\n",PlayerInfo[playerid][pUsePainkiller]);fwrite(hFile, var);
    			format(var, 1024, "GYMTime=%d\n",PlayerInfo[playerid][pGYMTime]);fwrite(hFile, var);
    			format(var, 1024, "GiftTime=%d\n",PlayerInfo[playerid][pGiftTime]);fwrite(hFile, var);
    			format(var, 1024, "AdvisorDutyHours=%d\n",PlayerInfo[playerid][pDutyHours]);fwrite(hFile, var);
    			format(var, 1024, "AcceptedHelp=%d\n",PlayerInfo[playerid][pAcceptedHelp]);fwrite(hFile, var);
    			format(var, 1024, "AcceptReport=%d\n",PlayerInfo[playerid][pAcceptReport]);fwrite(hFile, var);
    			format(var, 1024, "TrashReport=%d\n",PlayerInfo[playerid][pTrashReport]);fwrite(hFile, var);
    			format(var, 1024, "GangWarn=%d\n",PlayerInfo[playerid][pGangWarn]);fwrite(hFile, var);
    			format(var, 1024, "FactionBanned=%d\n",PlayerInfo[playerid][pFactionBanned]);fwrite(hFile, var);
    			format(var, 1024, "CSFBanned=%d\n",PlayerInfo[playerid][pCSFBanned]);fwrite(hFile, var);
				for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
	    		{
               		format(var, 1024, "pv%dPosX=%.1f\n", v, PlayerVehicleInfo[playerid][v][pvPosX]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dPosY=%.1f\n", v, PlayerVehicleInfo[playerid][v][pvPosY]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dPosZ=%.1f\n", v, PlayerVehicleInfo[playerid][v][pvPosZ]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dPosAngle=%.1f\n", v, PlayerVehicleInfo[playerid][v][pvPosAngle]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dModelId=%d\n", v, PlayerVehicleInfo[playerid][v][pvModelId]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dLock=%d\n", v, PlayerVehicleInfo[playerid][v][pvLock]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dLocked=%d\n", v, PlayerVehicleInfo[playerid][v][pvLocked]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dPaintJob=%d\n", v, PlayerVehicleInfo[playerid][v][pvPaintJob]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dColor1=%d\n", v, PlayerVehicleInfo[playerid][v][pvColor1]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dNeon=%d\n", v, PlayerVehicleInfo[playerid][v][pvNeon]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dColor2=%d\n", v, PlayerVehicleInfo[playerid][v][pvColor2]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dPrice=%d\n", v, PlayerVehicleInfo[playerid][v][pvPrice]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dTicket=%d\n", v, PlayerVehicleInfo[playerid][v][pvTicket]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeapon0=%d\n", v, PlayerVehicleInfo[playerid][v][pvWeapons][0]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeapon1=%d\n", v, PlayerVehicleInfo[playerid][v][pvWeapons][1]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeapon2=%d\n", v, PlayerVehicleInfo[playerid][v][pvWeapons][2]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeaponAmmo0=%d\n", v, PlayerVehicleInfo[playerid][v][pvWeaponsAmmo][0]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeaponAmmo1=%d\n", v, PlayerVehicleInfo[playerid][v][pvWeaponsAmmo][1]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeaponAmmo2=%d\n", v, PlayerVehicleInfo[playerid][v][pvWeaponsAmmo][2]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWepUpgrade=%d\n", v, PlayerVehicleInfo[playerid][v][pvWepUpgrade]);fwrite(hFile, var);
	   			 	PlayerVehicleInfo[playerid][v][pvFuel] = VehicleFuel[PlayerVehicleInfo[playerid][v][pvId]];
	   			 	format(var, 1024, "pv%dFuel=%.1f\n", v, PlayerVehicleInfo[playerid][v][pvFuel]);fwrite(hFile, var);
         			format(var, 1024, "pv%dHealth=%.1f\n", v, PlayerVehicleInfo[playerid][v][pvHealth]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dInsurances=%d\n", v, PlayerVehicleInfo[playerid][v][pvInsurances]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dMesinUpgrade=%d\n", v, PlayerVehicleInfo[playerid][v][pvMesinUpgrade]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dBodyUpgrade=%d\n", v, PlayerVehicleInfo[playerid][v][pvBodyUpgrade]);fwrite(hFile, var);
         			format(var, 1024, "pv%dStatus0=%d\n", v, PlayerVehicleInfo[playerid][v][pvStatus][0]);fwrite(hFile, var);
					format(var, 1024, "pv%dStatus1=%d\n", v, PlayerVehicleInfo[playerid][v][pvStatus][1]);fwrite(hFile, var);
					format(var, 1024, "pv%dStatus2=%d\n", v, PlayerVehicleInfo[playerid][v][pvStatus][2]);fwrite(hFile, var);
					format(var, 1024, "pv%dStatus3=%d\n", v, PlayerVehicleInfo[playerid][v][pvStatus][3]);fwrite(hFile, var);
					format(var, 1024, "pv%dLicense=%d\n", v, PlayerVehicleInfo[playerid][v][pvLicense]);fwrite(hFile, var);
					format(var, 1024, "pv%dLicenseTime=%d\n", v, PlayerVehicleInfo[playerid][v][pvLicenseTime]);fwrite(hFile, var);
					format(var, 1024, "pv%dLicenseExpired=%s\n", v, PlayerVehicleInfo[playerid][v][pvLicenseExpired]);fwrite(hFile, var);
					format(var, 1024, "pv%dImpound=%d\n", v, PlayerVehicleInfo[playerid][v][pvImpounded]);fwrite(hFile, var);
					format(var, 1024, "pv%dStored=%d\n", v, PlayerVehicleInfo[playerid][v][pvStored]);fwrite(hFile, var);
					format(var, 1024, "pv%dDestroyed=%d\n", v, PlayerVehicleInfo[playerid][v][pvDestroyed]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dNumPlate=%s\n", v, PlayerVehicleInfo[playerid][v][pvNumberPlate]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText1=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText1]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText2=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText2]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText3=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText3]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText4=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText4]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText5=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText5]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText6=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText6]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText7=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText7]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText8=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText8]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText9=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText9]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText10=%s\n", v, PlayerVehicleInfo[playerid][v][pvToyText10]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol1=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol1]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol2=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol2]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol3=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol3]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol4=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol4]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol5=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol5]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol6=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol6]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol7=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol7]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol8=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol8]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol9=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol9]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol10=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextCol10]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize1=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize1]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize2=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize2]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize3=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize3]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize4=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize4]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize5=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize5]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize6=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize6]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize7=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize7]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize8=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize8]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize9=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize9]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize10=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextSize10]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID1=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID1]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID2=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID2]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID3=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID3]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID4=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID4]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID5=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID5]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID6=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID6]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID7=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID7]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID8=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID8]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID9=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID9]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID10=%d\n", v, PlayerVehicleInfo[playerid][v][pvToyTextID10]);fwrite(hFile, var);
	    			for(new m = 0; m < MAX_MODS; m++)
	     	   		{
                		format(var, 1024, "pv%dMod%d=%d\n", v, m, PlayerVehicleInfo[playerid][v][pvMods][m]);fwrite(hFile, var);
	        		}
	        		for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++)
	        		{
	        		    format(var, 1024, "pv%dToyID%d=%d\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyID][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyPosX%d=%.5f\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyPosX][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyPosY%d=%.5f\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyPosY][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyPosZ%d=%.5f\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyPosZ][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyRotX%d=%.5f\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyRotX][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyRotY%d=%.5f\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyRotY][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyRotZ%d=%.5f\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyColor%d=%d\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyColor][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyIndex%d=%d\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyIndex][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyTexture1%d=%d\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyTexture1][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyTexture2%d=%d\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyTexture2][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyTextureID%d=%d\n", v, vt, PlayerVehicleInfo[playerid][v][pvToyTextureID][vt]);fwrite(hFile, var);
					}
	        		//format(var, 1024, "pv%dAllowedPlayer=%s\n", v, PlayerVehicleInfo[playerid][v][pvAllowPlayer]);fwrite(hFile, var);
				}
				format(var, 1024, "prTax=%d\n", PlayerRentInfo[playerid][prTax]);fwrite(hFile, var);
				format(var, 1024, "prRentTime=%d\n", PlayerRentInfo[playerid][prRentTime]);fwrite(hFile, var);
				format(var, 1024, "prVehicleRent=%d\n", PlayerRentInfo[playerid][prVehicleRent]);fwrite(hFile, var);
				format(var, 1024, "prModelId=%d\n", PlayerRentInfo[playerid][prModelId]);fwrite(hFile, var);
				format(var, 1024, "prPosX=%.1f\n", PlayerRentInfo[playerid][prPosX]);fwrite(hFile, var);
				format(var, 1024, "prPosY=%.1f\n", PlayerRentInfo[playerid][prPosY]);fwrite(hFile, var);
				format(var, 1024, "prPosZ=%.1f\n", PlayerRentInfo[playerid][prPosZ]);fwrite(hFile, var);
				format(var, 1024, "prPosAngle=%.1f\n", PlayerRentInfo[playerid][prPosAngle]);fwrite(hFile, var);
				format(var, 1024, "prColor1=%d\n", PlayerRentInfo[playerid][prColor1]);fwrite(hFile, var);
				format(var, 1024, "prColor2=%d\n", PlayerRentInfo[playerid][prColor2]);fwrite(hFile, var);
				format(var, 1024, "prLock=%d\n", PlayerRentInfo[playerid][prLock]);fwrite(hFile, var);
				format(var, 1024, "prLocked=%d\n", PlayerRentInfo[playerid][prLocked]);fwrite(hFile, var);
				format(var, 1024, "prTicket=%d\n", PlayerRentInfo[playerid][prTicket]);fwrite(hFile, var);
				format(var, 1024, "prFuel=%d\n", PlayerRentInfo[playerid][prFuel]);fwrite(hFile, var);
				format(var, 1024, "prHealth=%.1f\n", PlayerRentInfo[playerid][prHealth]);fwrite(hFile, var);
				format(var, 1024, "prStatus0=%d\n", PlayerRentInfo[playerid][prStatus][0]);fwrite(hFile, var);
				format(var, 1024, "prStatus1=%d\n", PlayerRentInfo[playerid][prStatus][1]);fwrite(hFile, var);
				format(var, 1024, "prStatus2=%d\n", PlayerRentInfo[playerid][prStatus][2]);fwrite(hFile, var);
				format(var, 1024, "prStatus3=%d\n", PlayerRentInfo[playerid][prStatus][3]);fwrite(hFile, var);
	    		for(new v = 0; v < MAX_PLAYERTOYS; v++)
	    		{
					format(var, 1024, "pt%dModelID=%d\n", v, PlayerToyInfo[playerid][v][ptModelID]);fwrite(hFile, var);
					format(var, 1024, "pt%dBone=%d\n", v, PlayerToyInfo[playerid][v][ptBone]);fwrite(hFile, var);
	        		format(var, 1024, "pt%dPosX=%.5f\n", v, PlayerToyInfo[playerid][v][ptPosX]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dPosY=%.5f\n", v, PlayerToyInfo[playerid][v][ptPosY]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dPosZ=%.5f\n", v, PlayerToyInfo[playerid][v][ptPosZ]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dRotX=%.5f\n", v, PlayerToyInfo[playerid][v][ptRotX]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dRotY=%.5f\n", v, PlayerToyInfo[playerid][v][ptRotY]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dRotZ=%.5f\n", v, PlayerToyInfo[playerid][v][ptRotZ]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dScaX=%.5f\n", v, PlayerToyInfo[playerid][v][ptScaX]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dScaY=%.5f\n", v, PlayerToyInfo[playerid][v][ptScaY]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dScaZ=%.5f\n", v, PlayerToyInfo[playerid][v][ptScaZ]);fwrite(hFile, var);
	    		}
	    		format(var, 1024, "VIPJoinDate=%s\n",PlayerInfo[playerid][pVIPJoinDate]);fwrite(hFile, var);//vip
				format(var, 1024, "VIPExpDate=%s\n",PlayerInfo[playerid][pVIPExpDate]);fwrite(hFile, var);//vip
				format(var, 1024, "VIPExpTime=%s\n",PlayerInfo[playerid][pVIPExpTime]);fwrite(hFile, var);//vip
	    		format(var, 1024, "VIPInviteDay=%d\n",PlayerInfo[playerid][pVIPInviteDay]);fwrite(hFile, var);
	    		format(var, 1024, "TempVIP=%d\n",PlayerInfo[playerid][pTempVIP]);fwrite(hFile, var);
	    		format(var, 1024, "BuddyInvite=%d\n",PlayerInfo[playerid][pBuddyInvited]);fwrite(hFile, var);
	    		format(var, 1024, "VIPLeft=%d\n",PlayerInfo[playerid][pVIPLeft]);fwrite(hFile, var);
	    		format(var, 1024, "Tokens=%d\n",PlayerInfo[playerid][pTokens]);fwrite(hFile, var);
	    		format(var, 1024, "TriageTime=%d\n",PlayerInfo[playerid][pTriageTime]);fwrite(hFile, var);
	    		format(var, 1024, "jailedBy=%s\n", PlayerInfo[playerid][pJailedBy]);fwrite(hFile, var);
	    		format(var, 1024, "PrisonReason=%s\n", PlayerInfo[playerid][pPrisonReason]);fwrite(hFile, var);
	    		format(var, 1024, "TicketTime=%d\n",PlayerInfo[playerid][pTicketTime]);fwrite(hFile, var);
	    		format(var, 1024, "Screwdriver=%d\n",PlayerInfo[playerid][pScrewdriver]);fwrite(hFile, var);
	    		format(var, 1024, "Tire=%d\n",PlayerInfo[playerid][pTire]);fwrite(hFile, var);
	    		format(var, 1024, "Firstaid=%d\n",PlayerInfo[playerid][pFirstaid]);fwrite(hFile, var);
	    		format(var, 1024, "Rccam=%d\n",PlayerInfo[playerid][pRccam]);fwrite(hFile, var);
	    		format(var, 1024, "Receiver=%d\n",PlayerInfo[playerid][pReceiver]);fwrite(hFile, var);
	    		format(var, 1024, "GPS=%d\n",PlayerInfo[playerid][pGPS]);fwrite(hFile, var);
	    		format(var, 1024, "Sweep=%d\n",PlayerInfo[playerid][pSweep]);fwrite(hFile, var);
	    		format(var, 1024, "SweepLeft=%d\n",PlayerInfo[playerid][pSweepLeft]);fwrite(hFile, var);
	    		format(var, 1024, "Bugged=%d\n",PlayerInfo[playerid][pBugged]);fwrite(hFile, var);
	    		format(var, 1024, "Hospital=%d\n",PlayerInfo[playerid][pHospital]);fwrite(hFile, var);
				format(var, 1024, "TanamanAnggur=%d\n",PlayerInfo[playerid][pTanamanAnggur]);fwrite(hFile, var);
				format(var, 1024, "TanamanBlueberry=%d\n",PlayerInfo[playerid][pTanamanBlueberry]);fwrite(hFile, var);
				format(var, 1024, "TanamanStrawberry=%d\n",PlayerInfo[playerid][pTanamanStrawberry]);fwrite(hFile, var);
				format(var, 1024, "TanamanGandum=%d\n",PlayerInfo[playerid][pTanamanGandum]);fwrite(hFile, var);
				format(var, 1024, "TanamanTomat=%d\n",PlayerInfo[playerid][pTanamanTomat]);fwrite(hFile, var);
				format(var, 1024, "BibitAnggur=%d\n",PlayerInfo[playerid][pBibitAnggur]);fwrite(hFile, var);
				format(var, 1024, "BibitBlueberry=%d\n",PlayerInfo[playerid][pBibitBlueberry]);fwrite(hFile, var);
				format(var, 1024, "BibitStrawberry=%d\n",PlayerInfo[playerid][pBibitStrawberry]);fwrite(hFile, var);
				format(var, 1024, "BibitGandum=%d\n",PlayerInfo[playerid][pBibitGandum]);fwrite(hFile, var);
				format(var, 1024, "BibitTomat=%d\n",PlayerInfo[playerid][pBibitTomat]);fwrite(hFile, var);
				format(var, 1024, "Warrants=%s\n",PlayerInfo[playerid][pWarrant]);fwrite(hFile, var);
				format(var, 1024, "JudgeJailTime=%d\n",PlayerInfo[playerid][pJudgeJailTime]);fwrite(hFile, var);
				format(var, 1024, "JudgeJailType=%d\n",PlayerInfo[playerid][pJudgeJailType]);fwrite(hFile, var);
				format(var, 1024, "BeingSentenced=%d\n",PlayerInfo[playerid][pBeingSentenced]);fwrite(hFile, var);
                format(var, 1024, "ProbationTime=%d\n",PlayerInfo[playerid][pProbationTime]);fwrite(hFile, var);
	    		format(var, 1024, "CallsAccepted=%d\n",PlayerInfo[playerid][pCallsAccepted]);fwrite(hFile, var);
	    		format(var, 1024, "PatientsDelivered=%d\n",PlayerInfo[playerid][pPatientsDelivered]);fwrite(hFile, var);
	    		format(var, 1024, "LiveBanned=%d\n",PlayerInfo[playerid][pLiveBanned]);fwrite(hFile, var);
	    		format(var, 1024, "FreezeBank=%d\n",PlayerInfo[playerid][pFreezeBank]);fwrite(hFile, var);
				format(var, 1024, "Component=%d\n",PlayerInfo[playerid][pComponent]);fwrite(hFile, var);
				format(var, 1024, "BoomBox=%d\n",PlayerInfo[playerid][pBoomBox]);fwrite(hFile, var);
				fclose(hFile);
			}
		}
	}
	return 1;
}

public OnPlayerLogin(playerid, password[])
{
	    TextDrawShowForPlayer(playerid,Time);
		TextDrawShowForPlayer(playerid,Date);
		TextDrawShowForPlayer(playerid,sen);
		TextDrawShowForPlayer(playerid,koma2);
        TextDrawHideForPlayer(playerid, DescriptionText[playerid]);
		if(hungry[playerid] == INVALID_BAR_ID)
		{
			hungry[playerid] = CreateProgressBar(502.00, 141.00, 79.50, 7.19, 16711935, 100.0);
		}
		if(tired[playerid] == INVALID_BAR_ID)
		{
			tired[playerid] = CreateProgressBar(502.00, 190.00, 79.50, 7.19, 16711935, 100.0);
		}
		if(clean[playerid] == INVALID_BAR_ID)
		{
			clean[playerid] = CreateProgressBar(502.00, 164.00, 79.50, 7.19, 16711935, 100.0);
		}
		SetProgressBarValue(hungry[playerid], PlayerInfo[playerid][pHunger]);
		SetProgressBarValue(tired[playerid], PlayerInfo[playerid][pEnergi]);
		SetProgressBarValue(clean[playerid], PlayerInfo[playerid][pBladder]);

		if(IsPlayerNPC(playerid)) //Checks if the player that just spawned is an NPC.
	  	{
			return 1;
	  	}
	  	else
	  	{
		new String2[128], String[10000];
		new playername2[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername2, sizeof(playername2));
       		//INI_ParseFile(UserPath(playerid), "LoadUser_%s", .bExtra = true, .extra = playerid);
			format(String2, sizeof(String2), "users/%s.ini", playername2);
			new File: UserFile = fopen(String2, io_read);
			if ( UserFile )
			{
				new PassData[256];
				new keytmp[256], valtmp[256];
				fread( UserFile , PassData , sizeof( PassData ) );
				keytmp = ini_GetKey( PassData );
				if( strcmp( keytmp , "Key" , true ) == 0 )
				{
					valtmp = ini_GetValue( PassData );
					strmid(PlayerInfo[playerid][pKey], valtmp, 0, strlen(valtmp)-1, 255);
				}
		   		if( strfind( PlayerInfo[playerid][pKey], "\r", true) != -1)
		   		{
		   		    format(String, sizeof(String), "Warning: \\r found in player %s's password.  Removing now. Password Before: %s", GetName(playerid), PlayerInfo[playerid][pKey]);
					Log("logs/password.log", String);
					new pos = strfind( PlayerInfo[playerid][pKey], "\r", true);
		   		    strdel(PlayerInfo[playerid][pKey], pos, pos+2);
		   		    format(String, sizeof(String), "%s's Password After: %s  (Note these passwords are encrypted)", GetName(playerid), PlayerInfo[playerid][pKey]);
					Log("logs/password.log", String);
				}
				//if(strcmp(PlayerInfo[playerid][pKey],password, true ) == 0 )
				if(strcmp(PlayerInfo[playerid][pKey],password,true) == 0)
				{
						new key[ 256 ] , val[ 256 ];
						new Data[ 256 ];
						while ( fread( UserFile , Data , sizeof( Data ) ) )
						{
							key = ini_GetKey( Data );
							if( strcmp( key , "Key" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pKey], val, 0, strlen(val)-1, 255); }
                            if( strcmp( key , "AdminOnDuty" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAdminDuty] = strval( val ); }
							if( strcmp( key , "AdminName" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pAdminName], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "NormalName" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNormalName], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "VIPName" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pVIPName], val, 0, strlen(val)-1, 255); }
		                    if( strcmp( key , "AdminBan" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pAdminban], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "BanReason" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pBanReason], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "BanExpired" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pBanExpired], val, 0, strlen(val)-1, 255); }
		                    if( strcmp( key , "BanExpired2" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pBanExpired2], val, 0, strlen(val)-1, 255); }
		                    if( strcmp( key , "Accent" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pAccent], val, 0, strlen(val)-1, 255); }
		                    if( strcmp( key , "SweeperT" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSweeperT] = strval( val ); }
		                    if( strcmp( key , "SilincedSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSilincedSkill] = strval( val ); }
							if( strcmp( key , "DesertEagleSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDesertEagleSkill] = strval( val ); }
							if( strcmp( key , "RifleSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRifleSkill] = strval( val ); }
							if( strcmp( key , "ShotgunSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pShotgunSkill] = strval( val ); }
							if( strcmp( key , "SpassSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSpassSkill] = strval( val ); }
							if( strcmp( key , "MP5Skill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMP5Skill] = strval( val ); }
							if( strcmp( key , "AK47Skill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAK47Skill] = strval( val ); }
							if( strcmp( key , "M4Skill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pM4Skill] = strval( val ); }
							if( strcmp( key , "SniperSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSniperSkill] = strval( val ); }
		                    if( strcmp( key , "TrainingTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTrainingTime] = strval( val ); }
		                    if( strcmp( key , "WSBos" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWSBos] = strval( val ); }
		                    if( strcmp( key , "DutyTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDutyTime] = strval( val ); }
		                    if( strcmp( key , "LadangBos" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFarmBos] = strval( val ); }
		                    if( strcmp( key , "Level" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLevel] = strval( val ); }
							if( strcmp( key , "AdminLevel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAdmin] = strval( val ); }
							if( strcmp( key , "Band" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBanned] = strval( val ); }
							if( strcmp( key , "PermBand" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPermaBanned] = strval( val ); }
							if( strcmp( key , "Warnings" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWarns] = strval( val ); }
							if( strcmp( key , "Disabled" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDisabled] = strval( val ); }
							if( strcmp( key , "DonateRank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDonateRank] = strval( val ); }
							if( strcmp( key , "DutyTimeTotal" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDutyTimeTotal] = strval( val ); }
							if( strcmp( key , "TogReports" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTogReports] = strval( val ); }
							if( strcmp( key , "Radio" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRadio] = strval( val ); }
							if( strcmp( key , "RadioFreq" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRadioFreq] = strval( val ); }
							if( strcmp( key , "Bandage" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBandage] = strval( val ); }
							if( strcmp( key , "ConnectedTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pConnectTime] = strval( val ); }
							if( strcmp( key , "Registered" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pReg] = strval( val ); }
							if( strcmp( key , "Sex" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSex] = strval( val ); }
							if( strcmp( key , "Lumber" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLumber] = strval( val ); }
							if( strcmp( key , "Cacing" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCacing] = strval( val ); }
							if( strcmp( key , "AdminOnDutyTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAdminOnDutyTime] = strval( val ); }
							if( strcmp( key , "PBiskey2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPBiskey2] = strval( val ); }
							if( strcmp( key , "PDTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPDTime] = strval( val ); }
							if( strcmp( key , "Hunger" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHunger] = strval( val ); }
							if( strcmp( key , "Bladder" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBladder] = strval( val ); }
							if( strcmp( key , "Energi" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pEnergi] = strval( val ); }
							if( strcmp( key , "Condition" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCondition] = strval( val ); }
							if( strcmp( key , "InBizz" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInBizz] = strval( val ); }
							if( strcmp( key , "PBiskey" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPBiskey] = strval( val ); }
		                    if( strcmp( key , "Mask" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMask] = strval( val ); }
		                    if( strcmp( key , "MaskUse" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMaskUse] = strval( val ); }
		                    if( strcmp( key , "MaskID" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMaskID] = strval( val ); }
							if( strcmp( key , "Pancingan" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPancingan] = strval( val ); }
							if( strcmp( key , "Age" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pAge], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "Paracetamol" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pParacetamol] = strval( val ); }
							if( strcmp( key , "Muted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMuted] = strval( val ); }
							if( strcmp( key , "Respect" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pExp] = strval( val ); }
							if( strcmp( key , "Money" , true ) == 0 ) { val = ini_GetValue( Data ); SetPVarInt(playerid, "Cash", strval( val )); }
							if( strcmp( key , "Bank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAccount] = strval( val ); }
							if( strcmp( key , "Crimes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCrimes] = strval( val ); }
							if( strcmp( key , "Arrested" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pArrested] = strval( val ); }
							if( strcmp( key , "FitnessTimer" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFitnessTimer] = strval( val ); }
							if( strcmp( key , "Job" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJob] = strval( val ); }
							if( strcmp( key , "WSJob" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWSJob] = strval( val ); }
							if( strcmp( key , "FarmJob" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFarmJob] = strval( val ); }
							if( strcmp( key , "Jerigen" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJerigen] = strval( val ); }
							if( strcmp( key , "Bensin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBensin] = strval( val ); }
							if( strcmp( key , "UseSorry" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pUseSorry] = strval( val ); }
							if( strcmp( key , "Kuli" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pKuli] = strval( val ); }
		                    if( strcmp( key , "Job2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJob2] = strval( val ); }
		                    if( strcmp( key , "IllegalJob" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pIllegalJob] = strval( val ); }
							if( strcmp( key , "Paycheck" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayCheck] = strval( val ); }
							if( strcmp( key , "Jailed" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJailed] = strval( val ); }
							if( strcmp( key , "JailTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJailTime] = strval( val ); }
							if( strcmp( key , "WRestricted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWRestricted] = strval( val ); }
							if( strcmp( key , "Materials" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMats] = strval( val ); }
							if( strcmp( key , "Pulsa2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPulsa2] = strval( val ); }
							if( strcmp( key , "Packages" , true ) == 0 ) { val = ini_GetValue( Data ); SetPVarInt(playerid, key, strval( val )); }
							if( strcmp( key , "Crates" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCrates] = strval( val ); }
							if( strcmp( key , "Pot" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPot] = strval( val ); }
							if( strcmp( key , "Crack" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCrack] = strval( val ); }
							if( strcmp( key , "Leader" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLeader] = strval( val ); }
							if( strcmp( key , "Member" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMember] = strval( val ); }
							if( strcmp( key , "Division" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDivision] = strval( val ); }
							if( strcmp( key , "FMember" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFMember] = strval( val ); }
							if( strcmp( key , "Rank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRank] = strval( val ); }
							if( strcmp( key , "Amoxicilin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmoxicilin] = strval( val ); }
							if( strcmp( key , "MechSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMechSkill] = strval( val ); }
							if( strcmp( key , "Ultrafluenza" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pUltrafluenza] = strval( val ); }
							if( strcmp( key , "DrugsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTruckingSkill] = strval( val ); }
							if( strcmp( key , "ArmsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pArmsSkill] = strval( val ); }
							if( strcmp( key , "SmugglerSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSmugSkill] = strval( val ); }
							if( strcmp( key , "FightingStyle" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFightStyle] = strval( val ); }
							if( strcmp( key , "pHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHealth] = floatstr( val ); }
							if( strcmp( key , "pArmor" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pArmor] = floatstr( val ); }
							if( strcmp( key , "pSHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSHealth] = floatstr( val ); }
							if( strcmp( key , "pGroin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBodyCondition][0] = floatstr( val ); }
							if( strcmp( key , "pTorso" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBodyCondition][1] = floatstr( val ); }
							if( strcmp( key , "pRArm" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBodyCondition][2] = floatstr( val ); }
							if( strcmp( key , "pLArm" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBodyCondition][3] = floatstr( val ); }
							if( strcmp( key , "pRLeg" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBodyCondition][4] = floatstr( val ); }
							if( strcmp( key , "pLLeg" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBodyCondition][5] = floatstr( val ); }
							//if( strcmp( key , "pSArmor" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSArmor] = floatstr( val ); }
							if( strcmp( key , "Int" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInt] = strval( val ); }
							if( strcmp( key , "Local" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLocal] = strval( val ); }
							if( strcmp( key , "VirtualWorld" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pVW] = strval( val ); }
							if( strcmp( key , "HouseInvite" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHouseInvite] = strval( val ); }
							if( strcmp( key , "Model" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pModel] = strval( val ); }
							if( strcmp( key , "PhoneNr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPnumber] = strval( val ); }
							if( strcmp( key , "FMax" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFMax] = strval( val ); }
							if( strcmp( key , "FTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFTime] = strval( val ); }
							if( strcmp( key , "pLumberTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLumberTime] = strval( val ); }
							if( strcmp( key , "JTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJTime] = strval( val ); }
							if( strcmp( key , "HaulingTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHaulingTime] = strval( val ); }
							if( strcmp( key , "Phone" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPhone] = strval( val ); }
							if( strcmp( key , "KartuPerdana" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pKartuPerdana] = strval( val ); }
							if( strcmp( key , "Gate" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGate] = strval( val ); }
							if( strcmp( key , "Painkiller" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPainkiller] = strval( val ); }
							if( strcmp( key , "BusTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBusTime] = strval( val ); }
							if( strcmp( key , "BeratIkan" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBeratIkan] = strval( val ); }
							if( strcmp( key , "Apartment" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPhousekey] = strval( val ); }
							if( strcmp( key , "Apartment2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPhousekey2] = strval( val ); }
							if( strcmp( key , "Renting" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRenting] = strval( val ); }
							if( strcmp( key , "CarLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarLic] = strval( val ); }
							if( strcmp( key , "CTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCTime] = strval( val ); }
							if( strcmp( key , "CarLicID" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarLicID] = strval( val ); }
							if( strcmp( key , "KTP" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pKTP] = strval( val ); }
							if( strcmp( key , "WorkShop" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWS] = strval( val ); }
							if( strcmp( key , "Ladang" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFarm] = strval( val ); }
							if( strcmp( key , "pTruckerLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTruckerLic] = strval( val ); }
							if( strcmp( key , "WSid" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWSid] = strval( val ); }
							if( strcmp( key , "Farmid" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFarmid] = strval( val ); }
							if( strcmp( key , "MissionTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMissionsTime] = strval( val ); }
							if( strcmp( key , "KTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pKTime] = strval( val ); }
							if( strcmp( key , "pLumberLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLumberLic] = strval( val ); }
							if( strcmp( key , "FlyLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFlyLic] = strval( val ); }
							if( strcmp( key , "BoatLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoatLic] = strval( val ); }
							if( strcmp( key , "CheckCash" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCheckCash] = strval( val ); }
							if( strcmp( key , "Checks" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pChecks] = strval( val ); }
							if( strcmp( key , "GunLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGunLic] = strval( val ); }
							for(new s = 0; s < 12; s++)
							{
								format(String, 128, "Gun%d", s);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGuns][s] = strval( val ); }
								format(String, 128, "GunAmmo%d", s);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGunsAmmo][s] = strval( val ); }
							}
							if( strcmp( key , "DrugsTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugsTime] = strval( val ); }
							if( strcmp( key , "MechTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMechTime] = strval( val ); }
							if( strcmp( key , "PayDay" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayDay] = strval( val ); }
							if( strcmp( key , "CDPlayer" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCDPlayer] = strval( val ); }
							if( strcmp( key , "Dice" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDice] = strval( val ); }
							if( strcmp( key , "Spraycan" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSpraycan] = strval( val ); }
							if( strcmp( key , "Rope" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRope] = strval( val ); }
							if( strcmp( key , "Cigars" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCigar] = strval( val ); }
							if( strcmp( key , "Sprunk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSprunk] = strval( val ); }
							if( strcmp( key , "Wins" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWins] = strval( val ); }
							if( strcmp( key , "Loses" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLoses] = strval( val ); }
							if( strcmp( key , "Tutorial" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTut] = strval( val ); }
							if( strcmp( key , "Tutor" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTutorial] = strval( val ); }
							if( strcmp( key , "OnDuty" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDuty] = strval( val ); }
							if( strcmp( key , "Hospital" , true ) == 0 ) { val = ini_GetValue( Data ); SetPVarInt(playerid, key, strval( val )); }
							if( strcmp( key , "Adjustable" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAdjustable] = strval( val ); }
							if( strcmp( key , "Married" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMarried] = strval( val ); }
							if( strcmp( key , "MarriedTo" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pMarriedTo], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "IP" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pIP], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "WantedLevel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWantedLevel] = strval( val ); }
							if( strcmp( key , "Insurance" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInsurance] = strval( val ); }
							if( strcmp( key , "Snack" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSnack] = strval( val ); }
							if( strcmp( key , "MineralWater" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMineralWater] = strval( val ); }
							if( strcmp( key , "AdMuted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pADMute] = strval( val ); }
							if( strcmp( key , "AdMutedTotal" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pADMuteTotal] = strval( val ); }
		                    if( strcmp( key , "HelpMute" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHelpMute] = strval( val ); }
							if( strcmp( key , "SPos_x" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_x] = floatstr( val ); }
							if( strcmp( key , "SPos_y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_y] = floatstr( val ); }
							if( strcmp( key , "SPos_z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_z] = floatstr( val ); }
							if( strcmp( key , "SPos_r" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_r] = floatstr( val ); }
							if( strcmp( key , "ReportMuted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRMuted] = strval( val ); }
		                    if( strcmp( key , "ReportMutedTotal" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRMutedTotal] = strval( val ); }
							if( strcmp( key , "ReportMutedTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRMutedTime] = strval( val ); }
							if( strcmp( key , "UsePainkiller" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pUsePainkiller] = strval( val ); }
							if( strcmp( key , "GYMTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGYMTime] = strval( val ); }
							if( strcmp( key , "GiftTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGiftTime] = strval( val ); }
							if( strcmp( key , "AdvisorDutyHours" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDutyHours] = strval( val ); }
							if( strcmp( key , "AcceptedHelp" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAcceptedHelp] = strval( val ); }
							if( strcmp( key , "AcceptReport" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAcceptReport] = strval( val ); }
							if( strcmp( key , "TrashReport" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTrashReport] = strval( val ); }
		                    if( strcmp( key , "GangWarn" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGangWarn] = strval( val ); }
							if( strcmp( key , "FactionBanned" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFactionBanned] = strval( val ); }
							if( strcmp( key , "CSFBanned" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCSFBanned] = strval( val ); }
							for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
			        		{
								format(String, 128, "pv%dPosX",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPosX] = floatstr( val ); }
								format(String, 128, "pv%dPosY",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPosY] = floatstr( val ); }
								format(String, 128, "pv%dPosZ",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPosZ] = floatstr( val ); }
								format(String, 128, "pv%dPosAngle",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPosAngle] = floatstr( val ); }
								format(String, 128, "pv%dModelId",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvModelId] = strval( val ); }
								format(String, 128, "pv%dLock",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvLock] = strval( val ); }
								format(String, 128, "pv%dLocked",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvLocked] = strval( val ); }
								format(String, 128, "pv%dPaintJob",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPaintJob] = strval( val ); }
								format(String, 128, "pv%dColor1",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvColor1] = strval( val ); }
								format(String, 128, "pv%dNeon",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvNeon] = strval( val ); }
								format(String, 128, "pv%dColor2",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvColor2] = strval( val ); }
								format(String, 128, "pv%dPrice",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPrice] = strval( val ); }
								format(String, 128, "pv%dTicket",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvTicket] = strval( val ); }
								format(String, 128, "pv%dWeapon0",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][0] = strval( val ); }
								format(String, 128, "pv%dWeapon1",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][1] = strval( val ); }
								format(String, 128, "pv%dWeapon2",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][2] = strval( val ); }
								format(String, 128, "pv%dWeaponAmmo0",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeaponsAmmo][0] = strval( val ); }
								format(String, 128, "pv%dWeaponAmmo1",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeaponsAmmo][1] = strval( val ); }
								format(String, 128, "pv%dWeaponAmmo2",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeaponsAmmo][2] = strval( val ); }
								format(String, 128, "pv%dWepUpgrade",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWepUpgrade] = strval( val ); }
								format(String, 128, "pv%dFuel",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvFuel] = floatstr( val ); }
								format(String, 128, "pv%dHealth",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvHealth] = floatstr( val ); }
								format(String, 128, "pv%dInsurances",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvInsurances] = strval( val ); }
								format(String, 128, "pv%dMesinUpgrade",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvMesinUpgrade] = strval( val ); }
								format(String, 128, "pv%dBodyUpgrade",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvBodyUpgrade] = strval( val ); }
								format(String, 128, "pv%dStatus0",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvStatus][0] = strval( val ); }
								format(String, 128, "pv%dStatus1",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvStatus][1] = strval( val ); }
								format(String, 128, "pv%dStatus2",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvStatus][2] = strval( val ); }
								format(String, 128, "pv%dStatus3",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvStatus][3] = strval( val ); }
								format(String, 128, "pv%dLicense",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvLicense] = strval( val ); }
								format(String, 128, "pv%dLicenseTime",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvLicenseTime] = strval( val ); }
								format(String, 128, "pv%dLicenseExpired",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvLicenseExpired], val, 0, strlen(val)-1, 255); }
								format(String, 128, "pv%dImpound",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvImpounded] = strval( val ); }
								format(String, 128, "pv%dStored",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvStored] = strval( val ); }
								format(String, 128, "pv%dDestroyed",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvDestroyed] = strval( val ); }
								format(String, 128, "pv%dNumPlate",v); //Plate
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvNumberPlate], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText1", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvToyText1], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText2", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvToyText2], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText3", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvToyText3], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText4", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvToyText4], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText5", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvToyText5], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText6", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvToyText6], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText7", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvToyText7], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText8", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvToyText8], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText9", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvToyText9], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText10", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvToyText10], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyTextCol1", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextCol1] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol2", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextCol2] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol3", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextCol3] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol4", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextCol4] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol5", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextCol5] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol6", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextCol6] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol7", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextCol7] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol8", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextCol8] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol9", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextCol9] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol10", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextCol10] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize1", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextSize1] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize2", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextSize2] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize3", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextSize3] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize4", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextSize4] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize5", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextSize5] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize6", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextSize6] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize7", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextSize7] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize8", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextSize8] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize9", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextSize9] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize10", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextSize10] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID1", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextID1] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID2", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextID2] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID3", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextID3] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID4", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextID4] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID5", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextID5] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID6", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextID6] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID7", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextID7] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID8", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextID8] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID9", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextID9] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID10", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextID10] = strval( val ); }
								//if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strcpy(PlayerVehicleInfo[playerid][v][pvNumberPlate], Data, 32); } //PlayerVehicleInfo[playerid][v][pvNumberPlate] = floatstr( val ); }
								for(new m = 0; m < MAX_MODS; m++)
			            		{
		                		    format(String, 128, "pv%dMod%d", v, m);
		            		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvMods][m] = strval( val ); }
			        		    }
			        		    for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++)
			        		    {
			        		        format(String, 128, "pv%dToyID%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyID][vt] = strval( val ); }
			        		        format(String, 128, "pv%dToyPosX%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyPosX][vt] = floatstr( val ); }
			        		        format(String, 128, "pv%dToyPosY%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyPosY][vt] = floatstr( val ); }
			        		        format(String, 128, "pv%dToyPosZ%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyPosZ][vt] = floatstr( val ); }
			        		        format(String, 128, "pv%dToyRotX%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyRotX][vt] = floatstr( val ); }
			        		        format(String, 128, "pv%dToyRotY%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyRotY][vt] = floatstr( val ); }
			        		        format(String, 128, "pv%dToyRotZ%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyRotZ][vt] = floatstr( val ); }
			        		        format(String, 128, "pv%dToyColor%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyColor][vt] = strval( val ); }
			        		        format(String, 128, "pv%dToyIndex%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyIndex][vt] = strval( val ); }
			        		        format(String, 128, "pv%dToyTexture1%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTexture1][vt] = strval( val ); }
			        		        format(String, 128, "pv%dToyTexture2%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTexture2][vt] = strval( val ); }
			        		        format(String, 128, "pv%dToyTextureID%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvToyTextureID][vt] = strval( val ); }
								}
  		    			      //format(String, 128, "pv%dAllowedPlayer",v);
			        		    //if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[playerid][v][pvAllowPlayer], val, 0, strlen(val)-1, 255); }
		 					}
		 					if( strcmp( key , "prTax", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prTax] = strval( val ); }
		 					if( strcmp( key , "prRentTime", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prRentTime] = strval( val ); }
		 					if( strcmp( key , "prVehicleRent", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prVehicleRent] = strval( val ); }
		 					if( strcmp( key , "prModelId", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prModelId] = strval( val ); }
		 					if( strcmp( key , "prPosX", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prPosX] = floatstr( val ); }
		 					if( strcmp( key , "prPosY", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prPosY] = floatstr( val ); }
		 					if( strcmp( key , "prPosZ", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prPosZ] = floatstr( val ); }
		 					if( strcmp( key , "prPosAngle", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prPosAngle] = floatstr( val ); }
		 					if( strcmp( key , "prColor1", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prColor1] = strval( val ); }
		 					if( strcmp( key , "prColor2", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prColor2] = strval( val ); }
		 					if( strcmp( key , "prLock", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prLock] = strval( val ); }
		 					if( strcmp( key , "prLocked", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prLocked] = strval( val ); }
		 					if( strcmp( key , "prTicket", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prTicket] = strval( val ); }
		 					if( strcmp( key , "prFuel", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prFuel] = strval( val ); }
		 					if( strcmp( key , "prHealth", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prHealth] = floatstr( val ); }
		 					if( strcmp( key , "prStatus0", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prStatus][0] = strval( val ); }
		 					if( strcmp( key , "prStatus1", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prStatus][1] = strval( val ); }
		 					if( strcmp( key , "prStatus2", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prStatus][2] = strval( val ); }
		 					if( strcmp( key , "prStatus3", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[playerid][prStatus][3] = strval( val ); }
		            		for(new v = 0; v < MAX_PLAYERTOYS; v++)
			        		{
			        		    format(String, 128, "pt%dModelID",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptModelID] = strval( val ); }
								format(String, 128, "pt%dBone",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptBone] = strval( val ); }
								format(String, 128, "pt%dPosX",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptPosX] = floatstr( val ); }
								format(String, 128, "pt%dPosY",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptPosY] = floatstr( val ); }
								format(String, 128, "pt%dPosZ",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptPosZ] = floatstr( val ); }
								format(String, 128, "pt%dRotX",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptRotX] = floatstr( val ); }
								format(String, 128, "pt%dRotY",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptRotY] = floatstr( val ); }
								format(String, 128, "pt%dRotZ",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptRotZ] = floatstr( val ); }
								format(String, 128, "pt%dScaX",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptScaX] = floatstr( val ); }
								format(String, 128, "pt%dScaY",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptScaY] = floatstr( val ); }
								format(String, 128, "pt%dScaZ",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptScaZ] = floatstr( val ); }
							}
							if( strcmp( key , "VIPJoinDate" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pVIPJoinDate], val, 0, strlen(val)-1, 255); }//vip
		                	if( strcmp( key , "VIPExpDate" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pVIPExpDate], val, 0, strlen(val)-1, 255); }//vip
		                	if( strcmp( key , "VIPExpTime" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pVIPExpTime], val, 0, strlen(val)-1, 255); }//vip
		            		if( strcmp( key , "VIPInviteDay" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pVIPInviteDay] = strval( val ); }
		            		if( strcmp( key , "TempVIP" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTempVIP] = strval( val ); }
		            		if( strcmp( key , "BuddyInvite" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBuddyInvited] = strval( val ); }
		           		 	if( strcmp( key , "VIPLeft" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pVIPLeft] = strval( val ); }
		            		if( strcmp( key , "Tokens" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTokens] = strval( val ); }
		            		if( strcmp( key , "TriageTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTriageTime] = strval( val ); }
		            		if( strcmp( key, "jailedBy", true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pJailedBy], val, 0, strlen(val)-1, 255); }
		            		if( strcmp( key, "PrisonReason", true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pPrisonReason], val, 0, strlen(val)-1, 255); }
		            		if( strcmp( key , "TicketTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTicketTime] = strval( val ); }
		            		if( strcmp( key , "Screwdriver" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pScrewdriver] = strval( val ); }
		            		if( strcmp( key , "Tire" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTire] = strval( val ); }
		            		if( strcmp( key , "Firstaid" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFirstaid] = strval( val ); }
		            		if( strcmp( key , "Rccam" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRccam] = strval( val ); }
							if( strcmp( key , "Receiver" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pReceiver] = strval( val ); }
							if( strcmp( key , "GPS" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGPS] = strval( val ); }
							if( strcmp( key , "Sweep" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSweep] = strval( val ); }
							if( strcmp( key , "SweepLeft" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSweepLeft] = strval( val ); }
							if( strcmp( key , "Bugged" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBugged] = strval( val ); }
							if( strcmp( key , "Hospital" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHospital] = strval( val ); }
							if( strcmp( key , "TanamanAnggur" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTanamanAnggur] = strval( val ); }
							if( strcmp( key , "TanamanBlueberry" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTanamanBlueberry] = strval( val ); }
							if( strcmp( key , "TanamanStrawberry" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTanamanStrawberry] = strval( val ); }
							if( strcmp( key , "TanamanGandum" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTanamanGandum] = strval( val ); }
							if( strcmp( key , "TanamanTomat" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTanamanTomat] = strval( val ); }
							if( strcmp( key , "BibitAnggur" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBibitAnggur] = strval( val ); }
							if( strcmp( key , "BibitBlueberry" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBibitBlueberry] = strval( val ); }
							if( strcmp( key , "BibitStrawberry" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBibitStrawberry] = strval( val ); }
							if( strcmp( key , "BibitGandum" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBibitGandum] = strval( val ); }
							if( strcmp( key , "BibitTomat" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBibitTomat] = strval( val ); }
							if( strcmp( key , "Warrants" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pWarrant], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "JudgeJailTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJudgeJailTime] = strval( val ); }
							if( strcmp( key , "JudgeJailType" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJudgeJailType] = strval( val ); }
		                    if( strcmp( key , "BeingSentenced" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBeingSentenced] = strval( val ); }
		                    if( strcmp( key , "ProbationTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pProbationTime] = strval( val ); }
							if( strcmp( key , "CallsAccepted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCallsAccepted] = strval( val ); }
							if( strcmp( key , "PatientsDelivered" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPatientsDelivered] = strval( val ); }
							if( strcmp( key , "LiveBanned" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLiveBanned] = strval( val ); }
							if( strcmp( key , "FreezeBank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFreezeBank] = strval( val ); }
							if( strcmp( key , "Component" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pComponent] = strval( val ); }
							if( strcmp( key , "BoomBox" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoomBox] = strval( val ); }
							}//end while
						fclose(UserFile);//close the file after everything has been read in the while*/
				}
		else
		{
			ShowMainMenuDialog(playerid, 3);
			gPlayerLogTries[playerid] += 1;
			if(gPlayerLogTries[playerid] == 2) { SendClientMessageEx(playerid, COLOR_RED, "SERVER: Wrong password, you have been kicked out automatically."); Kick(playerid); }
			return 1;
		}
		PlayerInfo[playerid][pAdjustable] = 0;
		ResetPlayerMoney(playerid);
		CurrentMoney[playerid] = GetPVarInt(playerid, "Cash");
		TotalLogin++;

		//Welcome Message
		new kota[1401];
		GetPlayerCity(playerid, kota, sizeof(kota));
		format(String, sizeof(String), "* {FF0000}%s {FFFF00}telah terkoneksi ke server. (%s)", GetName(playerid), kota);
	 	SendClientMessageToAll(COLOR_YELLOW,String);
        format(String, sizeof(String), "SERVER: {FFFFFF}Selamat Datang {00FF00}%s", GetName(playerid));
	 	SendClientMessageEx(playerid, COLOR_TWAQUA,String);
	 	if(PlayerInfo[playerid][pBanned] >= 1 )
		{
			new string1[10000], adminban[MAX_PLAYER_NAME];
			strmid(adminban, PlayerInfo[MAX_PLAYER_NAME][pAdminban], 0, strlen(PlayerInfo[MAX_PLAYER_NAME][pAdminban]), 255);
		 	format(string1, sizeof(string1), "{ffffff}Account: {FF0000}%s{FFFFFF}\nIP: {FF0000}null{FFFFFF}\nDi banned oleh Admin: {FF0000}%s{FFFFFF}\nAlasan: {FF0000}%s{FFFFFF}\nPada: {FF0000}Waktu: %s | Tanggal: %s\n\n{FFFFFF}Silahkan Ambil Screenshoot dengan cara menekan F8/Prt scrn{FFFFFF}\nDan Post di Forum Kami.",PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pAdminban],PlayerInfo[playerid][pBanReason],PlayerInfo[playerid][pBanExpired],PlayerInfo[playerid][pBanExpired2]);
			ShowPlayerDialog(playerid,BAN_DIALOG,DIALOG_STYLE_MSGBOX,"{FF0000}Banned",string1,"Ok :(","");
			SendClientMessageEx(playerid, RED, "WARNING: You are banned from this server.");
			FixedKick(playerid);
			return 1;
		}
				if(PlayerInfo[playerid][pDonateRank] > 0 && PlayerInfo[playerid][pVIPLeft] < 1) { //autovip
				new days,expTime[128];
				ConvertTime(gettime() - PlayerInfo[playerid][pVIPJoinDate], .ctd=days);
				if (days >= PlayerInfo[playerid][pVIPLeft])
				{
					PlayerInfo[playerid][pDonateRank] = 0;
					PlayerInfo[playerid][pVIPJoinDate] = 0;
					PlayerInfo[playerid][pVIPLeft] = 0;
					format(PlayerInfo[playerid][pVIPExpDate],32,"null");
					SendClientMessageEx(playerid, COLOR_VIP, "VIP anda telah habis hari ini, untuk menjadi VIP lagi, silahkan berdonasi :)");
				}
				else
				{
    			format(expTime,sizeof(expTime),"Status VIP : aktif\n");
       			format(expTime,sizeof(expTime),"%s Terima kasih sudah berdonasi di Enterplay Gaming\n",expTime,PlayerInfo[playerid][pVIPExpDate]);
          		format(expTime,sizeof(expTime),"%s VIP anda akan berakhir pada : %s",expTime,PlayerInfo[playerid][pVIPExpDate]);


					SendClientMessageEx(playerid, COLOR_VIP, expTime);
				}
				}
				else if(PlayerInfo[playerid][pDonateRank] > 0 && PlayerInfo[playerid][pVIPLeft] == 99999){
				SendClientMessageEx(playerid, COLOR_VIP, "Status VIP : Permanent");
				SendClientMessageEx(playerid, COLOR_VIP, "Terima kasih sudah berdonasi di Enterplay Gaming");

			}
			if(PlayerInfo[playerid][pDonateRank] > 0 && PlayerInfo[playerid][pVIPLeft] < 1) { //autovip
					new days;
					ConvertTime(gettime() - PlayerInfo[playerid][pVIPJoinDate], .ctd=days);
					if (days >= PlayerInfo[playerid][pVIPLeft]) {
						PlayerInfo[playerid][pDonateRank] = 0;
						PlayerInfo[playerid][pVIPJoinDate] = 0;
						PlayerInfo[playerid][pVIPLeft] = 0;
						format(PlayerInfo[playerid][pVIPExpDate],32,"null");
						SendClientMessageEx(playerid, COLOR_VIP, "VIP anda telah habis hari ini, untuk menjadi VIP lagi, silahkan berdonasi kembali");
					}
				}
		if(PlayerInfo[playerid][pAdmin] >= 1)
	 	{
	 	    format(String, sizeof(String), "ADMINLOGIN: {FFFF00}[id:%d] %s %s (%s) telah terkoneksi ke server.", playerid, RAN(playerid), PlayerInfo[playerid][pAdminName], PlayerInfo[playerid][pNormalName]);
	 		ABroadCast(COLOR_ARWIN, String, 1);
		}
		AdminReadPm[playerid] = false;
		GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
		SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
		if(PlayerInfo[playerid][pReg] == 0)
		{
			PlayerInfo[playerid][pLevel] = 1;
			PlayerInfo[playerid][pConnectTime] = 0;
			PlayerInfo[playerid][pSHealth] = 0.0;
			PlayerInfo[playerid][pSArmor] = 0.0;
			PlayerInfo[playerid][pHealth] = 100.0;
			PlayerInfo[playerid][pLocal] = 255;
			PlayerInfo[playerid][pTeam] = 3;
			PlayerInfo[playerid][pPnumber] = 0;
			PlayerInfo[playerid][pPulsa2] = 0;
			PlayerInfo[playerid][pFMax] = 0;
			PlayerInfo[playerid][pFTime] = 0;
			PlayerInfo[playerid][pLumberTime] = 0;
			PlayerInfo[playerid][pPDTime] = 3600;
			PlayerInfo[playerid][pPBiskey2] = 0;
			PlayerInfo[playerid][pJTime] = 0;
			PlayerInfo[playerid][pHaulingTime] = 0;
			PlayerInfo[playerid][pBusTime] = 0;
			PlayerInfo[playerid][pTrainingTime] = 0;
			PlayerInfo[playerid][pBeratIkan] = 0;
			PlayerInfo[playerid][pPhousekey] = INVALID_HOUSE_ID;
			PlayerInfo[playerid][pPhousekey2] = INVALID_HOUSE_ID;
			PlayerInfo[playerid][pReg] = 1;
			PlayerInfo[playerid][pHunger] = 99;
			PlayerInfo[playerid][pBladder] = 99;
			PlayerInfo[playerid][pEnergi] = 99;
			PlayerInfo[playerid][pCondition] = 99;
			PlayerInfo[playerid][pJerigen] = 0;
			PlayerInfo[playerid][pKuli] = 0;
			PlayerInfo[playerid][pAccount] = 5000;
			PlayerInfo[playerid][pComponent] = 0;
			PlayerInfo[playerid][pBoomBox] = 0;
			PlayerInfo[playerid][pSilincedSkill] = 1;
		  	PlayerInfo[playerid][pDesertEagleSkill] = 1;
		  	PlayerInfo[playerid][pShotgunSkill] = 1;
		   	PlayerInfo[playerid][pSpassSkill] = 1;
		    PlayerInfo[playerid][pMP5Skill] = 1;
		    PlayerInfo[playerid][pAK47Skill] = 1;
		    PlayerInfo[playerid][pM4Skill] = 1;
		    PlayerInfo[playerid][pSniperSkill] = 1;
			GivePlayerCash(playerid, 2500);
		}
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, PlayerInfo[playerid][pSilincedSkill] * 100);
	  	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][pDesertEagleSkill]* 100);
	  	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][pShotgunSkill]* 100);
	   	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][pSpassSkill]* 100);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][pMP5Skill]* 100);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][pAK47Skill]* 100);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][pM4Skill]* 100);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, PlayerInfo[playerid][pSniperSkill]* 100);
		if(PlayerInfo[playerid][pHospital] == 1)
		{
		    PlayerInfo[playerid][pHospital] = 0;
		    SetPVarInt(playerid, "MedicBill", 1);
		}
		if(PlayerInfo[playerid][pDisabled] != 0)
		{
            SendClientMessageEx(playerid, RED, "WARNING: Your account has been disabled.");
		    Kick(playerid);
		    return 1;
		}
		if(PlayerInfo[playerid][pPDTime] <= 0) { SendClientMessageEx(playerid,COLOR_YELLOW,"PAYCHECK: Pergi ke bank dan /signcheck untuk mendapatkan paycheck anda atau pergi ke salah satu ATM!"); }
		printf("%s has logged in.",playername2);
        PlayerPlaySound(playerid, 1186, 0, 0, 0);
		SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pModel], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], 0, 0, 0, 0, 0, 0, 0);
		SkinDelay(playerid);

		if(PlayerInfo[playerid][pInt] > 0 || PlayerInfo[playerid][pVW] > 0)
		{
		    TogglePlayerControllable(playerid, 0);
  			GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
	    	SetPVarInt(playerid, "LoadingObjects", 1);
		    SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
	    }
		if(gTeam[playerid] == 0)
		{
			gTeam[playerid] = 3;
		}
		else
		{
			gTeam[playerid] = PlayerInfo[playerid][pTeam];
		}
		gPlayerLogged{playerid} = 1;
		SetPVarInt(playerid, "MedicBill", 0);
		SpawnPlayer(playerid);
		new MOTD1[10000];
		format(MOTD1, sizeof(MOTD1), "MOTD:{FFFFFF} %s", GlobalMOTD);
		SendClientMessageEx(playerid, COLOR_ARWIN, MOTD1);
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(MOTD1, sizeof(MOTD1), "ADMIN:{FFFFFF} %s", AdminMOTD);
			SendClientMessageEx(playerid, COLOR_ARWIN, MOTD1);
		}
		SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
		LoadPlayerVehicles(playerid);
		SetPlayerToTeamColor(playerid);
		new tmp2[128];
		if(PlayerInfo[playerid][pFMember] < 255)
		{
			format(tmp2, sizeof(tmp2), "FAMILY: {FFFF00}%s.", FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMOTD]);
			SendClientMessageEx(playerid, COLOR_ARWIN, tmp2);
		}
	 	new hcheck, hcheck2, name[MAX_PLAYER_NAME];
 		hcheck = INVALID_HOUSE_ID;
		hcheck2 = INVALID_HOUSE_ID;
		GetPlayerName(playerid, name, sizeof(name));
		for(new i = 0; i < MAX_HOUSES; i++)
		{
	  		if(!strcmp(name, HouseInfo[i][hOwner], false))
	   		{
	   		    if(hcheck != INVALID_HOUSE_ID)
	   		    {
	   		        hcheck2 = i;
				}
				else
				{
					hcheck = i;
				}
    		}
		}
		if(hcheck != INVALID_HOUSE_ID)
	   	{
     		PlayerInfo[playerid][pPhousekey] = hcheck;
		}
		if(hcheck2 != INVALID_HOUSE_ID)
	   	{
     		PlayerInfo[playerid][pPhousekey2] = hcheck2;
		}
		if(hcheck == INVALID_HOUSE_ID)
		{
			PlayerInfo[playerid][pPhousekey] = INVALID_HOUSE_ID;
			return 1;
		}
		if(hcheck2 == INVALID_HOUSE_ID)
		{
			PlayerInfo[playerid][pPhousekey2] = INVALID_HOUSE_ID;
			return 1;
		}
 	}
	return 1;
  }
}

public OnPlayerOfflineLogin(playername[])
{
	new String[64];
	format(String, sizeof(String), "users/%s.ini", playername);
	new File: UserFile = fopen(String, io_read);
	//printf("[DEBUG] OnPlayerOfflineLogin: String2 (%s) | MAX_PLAYERS (%d)", String2, MAX_PLAYERS);
	if ( UserFile )
	{
     new key[ 256 ] , val[ 256 ];
						new Data[ 256 ];
						while ( fread( UserFile , Data , sizeof( Data ) ) )
						{
							key = ini_GetKey( Data );
							if( strcmp( key , "Key" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pKey], val, 0, strlen(val)-1, 255); }
                            if( strcmp( key , "AdminOnDuty" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pAdminDuty] = strval( val ); }
							if( strcmp( key , "AdminName" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pAdminName], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "NormalName" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pNormalName], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "VIPName" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pVIPName], val, 0, strlen(val)-1, 255); }
		                    if( strcmp( key , "AdminBan" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pAdminban], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "BanReason" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pBanReason], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "BanExpired" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pBanExpired], val, 0, strlen(val)-1, 255); }
		                    if( strcmp( key , "BanExpired2" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pBanExpired2], val, 0, strlen(val)-1, 255); }
		                    if( strcmp( key , "Accent" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pAccent], val, 0, strlen(val)-1, 255); }
		                    if( strcmp( key , "SweeperT" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSweeperT] = strval( val ); }
		                    if( strcmp( key , "SilincedSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSilincedSkill] = strval( val ); }
							if( strcmp( key , "DesertEagleSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pDesertEagleSkill] = strval( val ); }
							if( strcmp( key , "RifleSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pRifleSkill] = strval( val ); }
							if( strcmp( key , "ShotgunSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pShotgunSkill] = strval( val ); }
							if( strcmp( key , "SpassSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSpassSkill] = strval( val ); }
							if( strcmp( key , "MP5Skill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pMP5Skill] = strval( val ); }
							if( strcmp( key , "AK47Skill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pAK47Skill] = strval( val ); }
							if( strcmp( key , "M4Skill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pM4Skill] = strval( val ); }
							if( strcmp( key , "SniperSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSniperSkill] = strval( val ); }
		                    if( strcmp( key , "TrainingTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTrainingTime] = strval( val ); }
		                    if( strcmp( key , "WSBos" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pWSBos] = strval( val ); }
		                    if( strcmp( key , "DutyTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pDutyTime] = strval( val ); }
		                    if( strcmp( key , "LadangBos" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFarmBos] = strval( val ); }
		                    if( strcmp( key , "Level" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pLevel] = strval( val ); }
							if( strcmp( key , "AdminLevel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pAdmin] = strval( val ); }
							if( strcmp( key , "Band" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBanned] = strval( val ); }
							if( strcmp( key , "PermBand" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPermaBanned] = strval( val ); }
							if( strcmp( key , "Warnings" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pWarns] = strval( val ); }
							if( strcmp( key , "Disabled" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pDisabled] = strval( val ); }
							if( strcmp( key , "DonateRank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pDonateRank] = strval( val ); }
							if( strcmp( key , "DutyTimeTotal" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pDutyTimeTotal] = strval( val ); }
							if( strcmp( key , "TogReports" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTogReports] = strval( val ); }
							if( strcmp( key , "Radio" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pRadio] = strval( val ); }
							if( strcmp( key , "RadioFreq" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pRadioFreq] = strval( val ); }
							if( strcmp( key , "Bandage" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBandage] = strval( val ); }
							if( strcmp( key , "ConnectedTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pConnectTime] = strval( val ); }
							if( strcmp( key , "Registered" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pReg] = strval( val ); }
							if( strcmp( key , "Sex" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSex] = strval( val ); }
							if( strcmp( key , "Lumber" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pLumber] = strval( val ); }
							if( strcmp( key , "Cacing" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCacing] = strval( val ); }
							if( strcmp( key , "AdminOnDutyTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pAdminOnDutyTime] = strval( val ); }
							if( strcmp( key , "PBiskey2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPBiskey2] = strval( val ); }
							if( strcmp( key , "PDTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPDTime] = strval( val ); }
							if( strcmp( key , "Hunger" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pHunger] = strval( val ); }
							if( strcmp( key , "Bladder" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBladder] = strval( val ); }
							if( strcmp( key , "Energi" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pEnergi] = strval( val ); }
							if( strcmp( key , "Condition" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCondition] = strval( val ); }
							if( strcmp( key , "InBizz" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pInBizz] = strval( val ); }
							if( strcmp( key , "PBiskey" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPBiskey] = strval( val ); }
		                    if( strcmp( key , "Mask" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pMask] = strval( val ); }
		                    if( strcmp( key , "MaskUse" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pMaskUse] = strval( val ); }
		                    if( strcmp( key , "MaskID" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pMaskID] = strval( val ); }
							if( strcmp( key , "Pancingan" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPancingan] = strval( val ); }
							if( strcmp( key , "Age" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pAge], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "Paracetamol" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pParacetamol] = strval( val ); }
							if( strcmp( key , "Muted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pMuted] = strval( val ); }
							if( strcmp( key , "Respect" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pExp] = strval( val ); }
							if( strcmp( key , "Money" , true ) == 0 ) { val = ini_GetValue( Data ); SetPVarInt(MAX_PLAYERS, "Cash", strval( val )); }
							if( strcmp( key , "Bank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pAccount] = strval( val ); }
							if( strcmp( key , "Crimes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCrimes] = strval( val ); }
							if( strcmp( key , "Arrested" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pArrested] = strval( val ); }
							if( strcmp( key , "FitnessTimer" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFitnessTimer] = strval( val ); }
							if( strcmp( key , "Job" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pJob] = strval( val ); }
							if( strcmp( key , "WSJob" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pWSJob] = strval( val ); }
							if( strcmp( key , "FarmJob" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFarmJob] = strval( val ); }
							if( strcmp( key , "Jerigen" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pJerigen] = strval( val ); }
							if( strcmp( key , "Bensin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBensin] = strval( val ); }
							if( strcmp( key , "UseSorry" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pUseSorry] = strval( val ); }
							if( strcmp( key , "Kuli" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pKuli] = strval( val ); }
		                    if( strcmp( key , "Job2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pJob2] = strval( val ); }
		                    if( strcmp( key , "IllegalJob" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pIllegalJob] = strval( val ); }
							if( strcmp( key , "Paycheck" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPayCheck] = strval( val ); }
							if( strcmp( key , "Jailed" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pJailed] = strval( val ); }
							if( strcmp( key , "JailTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pJailTime] = strval( val ); }
							if( strcmp( key , "WRestricted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pWRestricted] = strval( val ); }
							if( strcmp( key , "Materials" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pMats] = strval( val ); }
							if( strcmp( key , "Pulsa2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPulsa2] = strval( val ); }
							if( strcmp( key , "Packages" , true ) == 0 ) { val = ini_GetValue( Data ); SetPVarInt(MAX_PLAYERS, key, strval( val )); }
							if( strcmp( key , "Crates" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCrates] = strval( val ); }
							if( strcmp( key , "Pot" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPot] = strval( val ); }
							if( strcmp( key , "Crack" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCrack] = strval( val ); }
							if( strcmp( key , "Leader" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pLeader] = strval( val ); }
							if( strcmp( key , "Member" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pMember] = strval( val ); }
							if( strcmp( key , "Division" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pDivision] = strval( val ); }
							if( strcmp( key , "FMember" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFMember] = strval( val ); }
							if( strcmp( key , "Rank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pRank] = strval( val ); }
							if( strcmp( key , "Amoxicilin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pAmoxicilin] = strval( val ); }
							if( strcmp( key , "MechSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pMechSkill] = strval( val ); }
							if( strcmp( key , "Ultrafluenza" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pUltrafluenza] = strval( val ); }
							if( strcmp( key , "DrugsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTruckingSkill] = strval( val ); }
							if( strcmp( key , "ArmsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pArmsSkill] = strval( val ); }
							if( strcmp( key , "SmugglerSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSmugSkill] = strval( val ); }
							if( strcmp( key , "FightingStyle" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFightStyle] = strval( val ); }
							if( strcmp( key , "pHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pHealth] = floatstr( val ); }
							if( strcmp( key , "pArmor" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pArmor] = floatstr( val ); }
							if( strcmp( key , "pSHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSHealth] = floatstr( val ); }
							if( strcmp( key , "pGroin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBodyCondition][0] = floatstr( val ); }
							if( strcmp( key , "pTorso" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBodyCondition][1] = floatstr( val ); }
							if( strcmp( key , "pRArm" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBodyCondition][2] = floatstr( val ); }
							if( strcmp( key , "pLArm" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBodyCondition][3] = floatstr( val ); }
							if( strcmp( key , "pRLeg" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBodyCondition][4] = floatstr( val ); }
							if( strcmp( key , "pLLeg" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBodyCondition][5] = floatstr( val ); }
							//if( strcmp( key , "pSArmor" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSArmor] = floatstr( val ); }
							if( strcmp( key , "Int" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pInt] = strval( val ); }
							if( strcmp( key , "Local" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pLocal] = strval( val ); }
							if( strcmp( key , "VirtualWorld" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pVW] = strval( val ); }
							if( strcmp( key , "HouseInvite" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pHouseInvite] = strval( val ); }
							if( strcmp( key , "Model" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pModel] = strval( val ); }
							if( strcmp( key , "PhoneNr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPnumber] = strval( val ); }
							if( strcmp( key , "FMax" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFMax] = strval( val ); }
							if( strcmp( key , "FTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFTime] = strval( val ); }
							if( strcmp( key , "pLumberTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pLumberTime] = strval( val ); }
							if( strcmp( key , "JTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pJTime] = strval( val ); }
							if( strcmp( key , "HaulingTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pHaulingTime] = strval( val ); }
							if( strcmp( key , "Phone" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPhone] = strval( val ); }
							if( strcmp( key , "KartuPerdana" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pKartuPerdana] = strval( val ); }
							if( strcmp( key , "Gate" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pGate] = strval( val ); }
							if( strcmp( key , "Painkiller" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPainkiller] = strval( val ); }
							if( strcmp( key , "BusTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBusTime] = strval( val ); }
							if( strcmp( key , "BeratIkan" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBeratIkan] = strval( val ); }
							if( strcmp( key , "Apartment" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPhousekey] = strval( val ); }
							if( strcmp( key , "Apartment2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPhousekey2] = strval( val ); }
							if( strcmp( key , "Renting" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pRenting] = strval( val ); }
							if( strcmp( key , "CarLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCarLic] = strval( val ); }
							if( strcmp( key , "CTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCTime] = strval( val ); }
							if( strcmp( key , "CarLicID" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCarLicID] = strval( val ); }
							if( strcmp( key , "KTP" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pKTP] = strval( val ); }
							if( strcmp( key , "WorkShop" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pWS] = strval( val ); }
							if( strcmp( key , "Ladang" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFarm] = strval( val ); }
							if( strcmp( key , "pTruckerLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTruckerLic] = strval( val ); }
							if( strcmp( key , "WSid" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pWSid] = strval( val ); }
							if( strcmp( key , "Farmid" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFarmid] = strval( val ); }
							if( strcmp( key , "MissionTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pMissionsTime] = strval( val ); }
							if( strcmp( key , "KTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pKTime] = strval( val ); }
							if( strcmp( key , "pLumberLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pLumberLic] = strval( val ); }
							if( strcmp( key , "FlyLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFlyLic] = strval( val ); }
							if( strcmp( key , "BoatLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBoatLic] = strval( val ); }
							if( strcmp( key , "CheckCash" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCheckCash] = strval( val ); }
							if( strcmp( key , "Checks" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pChecks] = strval( val ); }
							if( strcmp( key , "GunLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pGunLic] = strval( val ); }
							for(new s = 0; s < 12; s++)
							{
								format(String, 128, "Gun%d", s);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pGuns][s] = strval( val ); }
								format(String, 128, "GunAmmo%d", s);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pGunsAmmo][s] = strval( val ); }
							}
							if( strcmp( key , "DrugsTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pDrugsTime] = strval( val ); }
							if( strcmp( key , "MechTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pMechTime] = strval( val ); }
							if( strcmp( key , "PayDay" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPayDay] = strval( val ); }
							if( strcmp( key , "CDPlayer" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCDPlayer] = strval( val ); }
							if( strcmp( key , "Dice" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pDice] = strval( val ); }
							if( strcmp( key , "Spraycan" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSpraycan] = strval( val ); }
							if( strcmp( key , "Rope" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pRope] = strval( val ); }
							if( strcmp( key , "Cigars" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCigar] = strval( val ); }
							if( strcmp( key , "Sprunk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSprunk] = strval( val ); }
							if( strcmp( key , "Wins" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pWins] = strval( val ); }
							if( strcmp( key , "Loses" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pLoses] = strval( val ); }
							if( strcmp( key , "Tutorial" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTut] = strval( val ); }
							if( strcmp( key , "Tutor" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTutorial] = strval( val ); }
							if( strcmp( key , "OnDuty" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pDuty] = strval( val ); }
							if( strcmp( key , "Hospital" , true ) == 0 ) { val = ini_GetValue( Data ); SetPVarInt(MAX_PLAYERS, key, strval( val )); }
							if( strcmp( key , "Adjustable" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pAdjustable] = strval( val ); }
							if( strcmp( key , "Married" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pMarried] = strval( val ); }
							if( strcmp( key , "MarriedTo" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pMarriedTo], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "IP" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pIP], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "WantedLevel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pWantedLevel] = strval( val ); }
							if( strcmp( key , "Insurance" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pInsurance] = strval( val ); }
							if( strcmp( key , "Snack" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSnack] = strval( val ); }
							if( strcmp( key , "MineralWater" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pMineralWater] = strval( val ); }
							if( strcmp( key , "AdMuted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pADMute] = strval( val ); }
							if( strcmp( key , "AdMutedTotal" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pADMuteTotal] = strval( val ); }
		                    if( strcmp( key , "HelpMute" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pHelpMute] = strval( val ); }
							if( strcmp( key , "SPos_x" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPos_x] = floatstr( val ); }
							if( strcmp( key , "SPos_y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPos_y] = floatstr( val ); }
							if( strcmp( key , "SPos_z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPos_z] = floatstr( val ); }
							if( strcmp( key , "SPos_r" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPos_r] = floatstr( val ); }
							if( strcmp( key , "ReportMuted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pRMuted] = strval( val ); }
		                    if( strcmp( key , "ReportMutedTotal" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pRMutedTotal] = strval( val ); }
							if( strcmp( key , "ReportMutedTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pRMutedTime] = strval( val ); }
							if( strcmp( key , "UsePainkiller" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pUsePainkiller] = strval( val ); }
							if( strcmp( key , "GYMTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pGYMTime] = strval( val ); }
							if( strcmp( key , "GiftTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pGiftTime] = strval( val ); }
							if( strcmp( key , "AdvisorDutyHours" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pDutyHours] = strval( val ); }
							if( strcmp( key , "AcceptedHelp" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pAcceptedHelp] = strval( val ); }
							if( strcmp( key , "AcceptReport" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pAcceptReport] = strval( val ); }
							if( strcmp( key , "TrashReport" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTrashReport] = strval( val ); }
		                    if( strcmp( key , "GangWarn" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pGangWarn] = strval( val ); }
							if( strcmp( key , "FactionBanned" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFactionBanned] = strval( val ); }
							if( strcmp( key , "CSFBanned" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCSFBanned] = strval( val ); }
							for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
			        		{
								format(String, 128, "pv%dPosX",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvPosX] = floatstr( val ); }
								format(String, 128, "pv%dPosY",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvPosY] = floatstr( val ); }
								format(String, 128, "pv%dPosZ",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvPosZ] = floatstr( val ); }
								format(String, 128, "pv%dPosAngle",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvPosAngle] = floatstr( val ); }
								format(String, 128, "pv%dModelId",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvModelId] = strval( val ); }
								format(String, 128, "pv%dLock",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvLock] = strval( val ); }
								format(String, 128, "pv%dLocked",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvLocked] = strval( val ); }
								format(String, 128, "pv%dPaintJob",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvPaintJob] = strval( val ); }
								format(String, 128, "pv%dColor1",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvColor1] = strval( val ); }
								format(String, 128, "pv%dNeon",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvNeon] = strval( val ); }
								format(String, 128, "pv%dColor2",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvColor2] = strval( val ); }
								format(String, 128, "pv%dPrice",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvPrice] = strval( val ); }
								format(String, 128, "pv%dTicket",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvTicket] = strval( val ); }
								format(String, 128, "pv%dWeapon0",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvWeapons][0] = strval( val ); }
								format(String, 128, "pv%dWeapon1",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvWeapons][1] = strval( val ); }
								format(String, 128, "pv%dWeapon2",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvWeapons][2] = strval( val ); }
								format(String, 128, "pv%dWeaponAmmo0",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvWeaponsAmmo][0] = strval( val ); }
								format(String, 128, "pv%dWeaponAmmo1",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvWeaponsAmmo][1] = strval( val ); }
								format(String, 128, "pv%dWeaponAmmo2",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvWeaponsAmmo][2] = strval( val ); }
								format(String, 128, "pv%dWepUpgrade",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvWepUpgrade] = strval( val ); }
								format(String, 128, "pv%dFuel",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvFuel] = floatstr( val ); }
								format(String, 128, "pv%dHealth",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvHealth] = floatstr( val ); }
								format(String, 128, "pv%dInsurances",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvInsurances] = strval( val ); }
								format(String, 128, "pv%dMesinUpgrade",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvMesinUpgrade] = strval( val ); }
								format(String, 128, "pv%dBodyUpgrade",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvBodyUpgrade] = strval( val ); }
								format(String, 128, "pv%dStatus0",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvStatus][0] = strval( val ); }
								format(String, 128, "pv%dStatus1",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvStatus][1] = strval( val ); }
								format(String, 128, "pv%dStatus2",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvStatus][2] = strval( val ); }
								format(String, 128, "pv%dStatus3",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvStatus][3] = strval( val ); }
								format(String, 128, "pv%dLicense",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvLicense] = strval( val ); }
								format(String, 128, "pv%dLicenseTime",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvLicenseTime] = strval( val ); }
								format(String, 128, "pv%dLicenseExpired",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvLicenseExpired], val, 0, strlen(val)-1, 255); }
								format(String, 128, "pv%dImpound",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvImpounded] = strval( val ); }
								format(String, 128, "pv%dStored",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvStored] = strval( val ); }
								format(String, 128, "pv%dDestroyed",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvDestroyed] = strval( val ); }
								format(String, 128, "pv%dNumPlate",v); //Plate
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvNumberPlate], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText1", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText1], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText2", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText2], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText3", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText3], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText4", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText4], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText5", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText5], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText6", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText6], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText7", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText7], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText8", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText8], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText9", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText9], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyText10", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText10], val, 0, strlen(val)-1, 255); }
			        		    format(String, 128, "pv%dToyTextCol1", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol1] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol2", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol2] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol3", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol3] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol4", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol4] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol5", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol5] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol6", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol6] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol7", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol7] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol8", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol8] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol9", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol9] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextCol10", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol10] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize1", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize1] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize2", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize2] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize3", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize3] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize4", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize4] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize5", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize5] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize6", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize6] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize7", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize7] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize8", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize8] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize9", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize9] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextSize10", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize10] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID1", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID1] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID2", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID2] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID3", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID3] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID4", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID4] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID5", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID5] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID6", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID6] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID7", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID7] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID8", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID8] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID9", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID9] = strval( val ); }
			        		    format(String, 128, "pv%dToyTextID10", v);
			        		    if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID10] = strval( val ); }
								//if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strcpy(PlayerVehicleInfo[MAX_PLAYERS][v][pvNumberPlate], Data, 32); } //PlayerVehicleInfo[MAX_PLAYERS][v][pvNumberPlate] = floatstr( val ); }
								for(new m = 0; m < MAX_MODS; m++)
			            		{
		                		    format(String, 128, "pv%dMod%d", v, m);
		            		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvMods][m] = strval( val ); }
			        		    }
			        		    for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++)
			        		    {
			        		        format(String, 128, "pv%dToyID%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyID][vt] = strval( val ); }
			        		        format(String, 128, "pv%dToyPosX%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyPosX][vt] = floatstr( val ); }
			        		        format(String, 128, "pv%dToyPosY%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyPosY][vt] = floatstr( val ); }
			        		        format(String, 128, "pv%dToyPosZ%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyPosZ][vt] = floatstr( val ); }
			        		        format(String, 128, "pv%dToyRotX%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyRotX][vt] = floatstr( val ); }
			        		        format(String, 128, "pv%dToyRotY%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyRotY][vt] = floatstr( val ); }
			        		        format(String, 128, "pv%dToyRotZ%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyRotZ][vt] = floatstr( val ); }
			        		        format(String, 128, "pv%dToyColor%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyColor][vt] = strval( val ); }
			        		        format(String, 128, "pv%dToyIndex%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyIndex][vt] = strval( val ); }
			        		        format(String, 128, "pv%dToyTexture1%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTexture1][vt] = strval( val ); }
			        		        format(String, 128, "pv%dToyTexture2%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTexture2][vt] = strval( val ); }
			        		        format(String, 128, "pv%dToyTextureID%d", v, vt);
			        		        if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextureID][vt] = strval( val ); }
								}
  		    			      //format(String, 128, "pv%dAllowedPlayer",v);
			        		    //if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerVehicleInfo[MAX_PLAYERS][v][pvAllowPlayer], val, 0, strlen(val)-1, 255); }
		 					}
		 					if( strcmp( key , "prTax", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prTax] = strval( val ); }
		 					if( strcmp( key , "prRentTime", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prRentTime] = strval( val ); }
		 					if( strcmp( key , "prVehicleRent", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prVehicleRent] = strval( val ); }
		 					if( strcmp( key , "prModelId", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prModelId] = strval( val ); }
		 					if( strcmp( key , "prPosX", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prPosX] = floatstr( val ); }
		 					if( strcmp( key , "prPosY", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prPosY] = floatstr( val ); }
		 					if( strcmp( key , "prPosZ", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prPosZ] = floatstr( val ); }
		 					if( strcmp( key , "prPosAngle", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prPosAngle] = floatstr( val ); }
		 					if( strcmp( key , "prColor1", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prColor1] = strval( val ); }
		 					if( strcmp( key , "prColor2", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prColor2] = strval( val ); }
		 					if( strcmp( key , "prLock", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prLock] = strval( val ); }
		 					if( strcmp( key , "prLocked", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prLocked] = strval( val ); }
		 					if( strcmp( key , "prTicket", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prTicket] = strval( val ); }
		 					if( strcmp( key , "prFuel", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prFuel] = strval( val ); }
		 					if( strcmp( key , "prHealth", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prHealth] = floatstr( val ); }
		 					if( strcmp( key , "prStatus0", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prStatus][0] = strval( val ); }
		 					if( strcmp( key , "prStatus1", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prStatus][1] = strval( val ); }
		 					if( strcmp( key , "prStatus2", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prStatus][2] = strval( val ); }
		 					if( strcmp( key , "prStatus3", true ) == 0 ) { val = ini_GetValue( Data ); PlayerRentInfo[MAX_PLAYERS][prStatus][3] = strval( val ); }
		            		for(new v = 0; v < MAX_PLAYERTOYS; v++)
			        		{
			        		    format(String, 128, "pt%dModelID",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[MAX_PLAYERS][v][ptModelID] = strval( val ); }
								format(String, 128, "pt%dBone",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[MAX_PLAYERS][v][ptBone] = strval( val ); }
								format(String, 128, "pt%dPosX",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[MAX_PLAYERS][v][ptPosX] = floatstr( val ); }
								format(String, 128, "pt%dPosY",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[MAX_PLAYERS][v][ptPosY] = floatstr( val ); }
								format(String, 128, "pt%dPosZ",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[MAX_PLAYERS][v][ptPosZ] = floatstr( val ); }
								format(String, 128, "pt%dRotX",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[MAX_PLAYERS][v][ptRotX] = floatstr( val ); }
								format(String, 128, "pt%dRotY",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[MAX_PLAYERS][v][ptRotY] = floatstr( val ); }
								format(String, 128, "pt%dRotZ",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[MAX_PLAYERS][v][ptRotZ] = floatstr( val ); }
								format(String, 128, "pt%dScaX",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[MAX_PLAYERS][v][ptScaX] = floatstr( val ); }
								format(String, 128, "pt%dScaY",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[MAX_PLAYERS][v][ptScaY] = floatstr( val ); }
								format(String, 128, "pt%dScaZ",v);
								if( strcmp( key , String , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[MAX_PLAYERS][v][ptScaZ] = floatstr( val ); }
							}
							if( strcmp( key , "VIPJoinDate" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pVIPJoinDate], val, 0, strlen(val)-1, 255); }//vip
		                	if( strcmp( key , "VIPExpDate" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pVIPExpDate], val, 0, strlen(val)-1, 255); }//vip
		                	if( strcmp( key , "VIPExpTime" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pVIPExpTime], val, 0, strlen(val)-1, 255); }//vip
		            		if( strcmp( key , "VIPInviteDay" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pVIPInviteDay] = strval( val ); }
		            		if( strcmp( key , "TempVIP" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTempVIP] = strval( val ); }
		            		if( strcmp( key , "BuddyInvite" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBuddyInvited] = strval( val ); }
		           		 	if( strcmp( key , "VIPLeft" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pVIPLeft] = strval( val ); }
		            		if( strcmp( key , "Tokens" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTokens] = strval( val ); }
		            		if( strcmp( key , "TriageTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTriageTime] = strval( val ); }
		            		if( strcmp( key, "jailedBy", true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pJailedBy], val, 0, strlen(val)-1, 255); }
		            		if( strcmp( key, "PrisonReason", true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pPrisonReason], val, 0, strlen(val)-1, 255); }
		            		if( strcmp( key , "TicketTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTicketTime] = strval( val ); }
		            		if( strcmp( key , "Screwdriver" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pScrewdriver] = strval( val ); }
		            		if( strcmp( key , "Tire" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTire] = strval( val ); }
		            		if( strcmp( key , "Firstaid" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFirstaid] = strval( val ); }
		            		if( strcmp( key , "Rccam" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pRccam] = strval( val ); }
							if( strcmp( key , "Receiver" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pReceiver] = strval( val ); }
							if( strcmp( key , "GPS" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pGPS] = strval( val ); }
							if( strcmp( key , "Sweep" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSweep] = strval( val ); }
							if( strcmp( key , "SweepLeft" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pSweepLeft] = strval( val ); }
							if( strcmp( key , "Bugged" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBugged] = strval( val ); }
							if( strcmp( key , "Hospital" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pHospital] = strval( val ); }
							if( strcmp( key , "TanamanAnggur" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTanamanAnggur] = strval( val ); }
							if( strcmp( key , "TanamanBlueberry" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTanamanBlueberry] = strval( val ); }
							if( strcmp( key , "TanamanStrawberry" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTanamanStrawberry] = strval( val ); }
							if( strcmp( key , "TanamanGandum" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTanamanGandum] = strval( val ); }
							if( strcmp( key , "TanamanTomat" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pTanamanTomat] = strval( val ); }
							if( strcmp( key , "BibitAnggur" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBibitAnggur] = strval( val ); }
							if( strcmp( key , "BibitBlueberry" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBibitBlueberry] = strval( val ); }
							if( strcmp( key , "BibitStrawberry" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBibitStrawberry] = strval( val ); }
							if( strcmp( key , "BibitGandum" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBibitGandum] = strval( val ); }
							if( strcmp( key , "BibitTomat" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBibitTomat] = strval( val ); }
							if( strcmp( key , "Warrants" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[MAX_PLAYERS][pWarrant], val, 0, strlen(val)-1, 255); }
							if( strcmp( key , "JudgeJailTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pJudgeJailTime] = strval( val ); }
							if( strcmp( key , "JudgeJailType" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pJudgeJailType] = strval( val ); }
		                    if( strcmp( key , "BeingSentenced" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBeingSentenced] = strval( val ); }
		                    if( strcmp( key , "ProbationTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pProbationTime] = strval( val ); }
							if( strcmp( key , "CallsAccepted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pCallsAccepted] = strval( val ); }
							if( strcmp( key , "PatientsDelivered" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pPatientsDelivered] = strval( val ); }
							if( strcmp( key , "LiveBanned" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pLiveBanned] = strval( val ); }
							if( strcmp( key , "FreezeBank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pFreezeBank] = strval( val ); }
							if( strcmp( key , "Component" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pComponent] = strval( val ); }
							if( strcmp( key , "BoomBox" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[MAX_PLAYERS][pBoomBox] = strval( val ); }
							}//end while
					fclose(UserFile);//close the file after everything has been read in the while*/
				}
	return 1;
}
public OnPlayerOfflineSave(playername[])
{
	new string3[32];
	//GetPlayerName(MAX_PLAYERS, playername, MAX_PLAYER_NAME);
 	format(string3, sizeof(string3), "users/%s.ini", playername);
	new File: hFile = fopen(string3, io_write);
	if (hFile)
	{
				new var[1024];
    			format(var, 1024, "Key=%s\n", PlayerInfo[MAX_PLAYERS][pKey]);fwrite(hFile, var);
    			format(var, 1024, "AdminOnDuty=%d\n", PlayerInfo[MAX_PLAYERS][pAdminDuty]);fwrite(hFile, var);
				format(var, 1024, "AdminName=%s\n",PlayerInfo[MAX_PLAYERS][pAdminName]);fwrite(hFile, var);
				format(var, 1024, "NormalName=%s\n",PlayerInfo[MAX_PLAYERS][pNormalName]);fwrite(hFile, var);
				format(var, 1024, "VIPName=%s\n", PlayerInfo[MAX_PLAYERS][pVIPName]);fwrite(hFile, var);
				format(var, 1024, "AdminBan=%s\n", PlayerInfo[MAX_PLAYERS][pAdminban]);fwrite(hFile, var);
				format(var, 1024, "BanReason=%s\n", PlayerInfo[MAX_PLAYERS][pBanReason]);fwrite(hFile, var);
				format(var, 1024, "BanExpired=%s\n", PlayerInfo[MAX_PLAYERS][pBanExpired]);fwrite(hFile, var);
       			format(var, 1024, "BanExpired2=%s\n", PlayerInfo[MAX_PLAYERS][pBanExpired2]);fwrite(hFile, var);
				format(var, 1024, "Accent=%s\n", PlayerInfo[MAX_PLAYERS][pAccent]);fwrite(hFile, var);
				format(var, 1024, "SweeperT=%d\n",PlayerInfo[MAX_PLAYERS][pSweeperT]);fwrite(hFile, var);
				format(var, 1024, "WSBos=%d\n", PlayerInfo[MAX_PLAYERS][pWSBos]);fwrite(hFile, var);
				format(var, 1024, "DutyTime=%d\n", PlayerInfo[MAX_PLAYERS][pDutyTime]);fwrite(hFile, var);
				format(var, 1024, "LadangBos=%d\n", PlayerInfo[MAX_PLAYERS][pFarmBos]);fwrite(hFile, var);
				format(var, 1024, "Level=%d\n",PlayerInfo[MAX_PLAYERS][pLevel]);fwrite(hFile, var);
				format(var, 1024, "AdminLevel=%d\n",PlayerInfo[MAX_PLAYERS][pAdmin]);fwrite(hFile, var);
				format(var, 1024, "Band=%d\n",PlayerInfo[MAX_PLAYERS][pBanned]);fwrite(hFile, var);
				format(var, 1024, "PermBand=%d\n",PlayerInfo[MAX_PLAYERS][pPermaBanned]);fwrite(hFile, var);
				format(var, 1024, "Warnings=%d\n",PlayerInfo[MAX_PLAYERS][pWarns]);fwrite(hFile, var);
				format(var, 1024, "Disabled=%d\n",PlayerInfo[MAX_PLAYERS][pDisabled]);fwrite(hFile, var);
				format(var, 1024, "DonateRank=%d\n",PlayerInfo[MAX_PLAYERS][pDonateRank]);fwrite(hFile, var);
				format(var, 1024, "DutyTimeTotal=%d\n",PlayerInfo[MAX_PLAYERS][pDutyTimeTotal]);fwrite(hFile, var);
				format(var, 1024, "TogReports=%d\n",PlayerInfo[MAX_PLAYERS][pTogReports]);fwrite(hFile, var);
				format(var, 1024, "Radio=%d\n",PlayerInfo[MAX_PLAYERS][pRadio]);fwrite(hFile, var);
				format(var, 1024, "RadioFreq=%d\n",PlayerInfo[MAX_PLAYERS][pRadioFreq]);fwrite(hFile, var);
				format(var, 1024, "Bandage=%d\n",PlayerInfo[MAX_PLAYERS][pBandage]);fwrite(hFile, var);
				format(var, 1024, "ConnectedTime=%d\n",PlayerInfo[MAX_PLAYERS][pConnectTime]);fwrite(hFile, var);
				format(var, 1024, "Registered=%d\n",PlayerInfo[MAX_PLAYERS][pReg]);fwrite(hFile, var);
				format(var, 1024, "Sex=%d\n",PlayerInfo[MAX_PLAYERS][pSex]);fwrite(hFile, var);
				format(var, 1024, "Lumber=%d\n",PlayerInfo[MAX_PLAYERS][pLumber]);fwrite(hFile, var);
				format(var, 1024, "Cacing=%d\n",PlayerInfo[MAX_PLAYERS][pCacing]);fwrite(hFile, var);
				format(var, 1024, "AdminOnDutyTime=%d\n",PlayerInfo[MAX_PLAYERS][pAdminOnDutyTime]);fwrite(hFile, var);
				format(var, 1024, "PBiskey2=%d\n",PlayerInfo[MAX_PLAYERS][pPBiskey2]);fwrite(hFile, var);
				format(var, 1024, "PDTime=%d\n",PlayerInfo[MAX_PLAYERS][pPDTime]);fwrite(hFile, var);
				format(var, 1024, "Hunger=%d\n",PlayerInfo[MAX_PLAYERS][pHunger]);fwrite(hFile, var);
				format(var, 1024, "Bladder=%d\n",PlayerInfo[MAX_PLAYERS][pBladder]);fwrite(hFile, var);
				format(var, 1024, "Energi=%d\n",PlayerInfo[MAX_PLAYERS][pEnergi]);fwrite(hFile, var);
				format(var, 1024, "Condition=%d\n",PlayerInfo[MAX_PLAYERS][pCondition]);fwrite(hFile, var);
				format(var, 1024, "SilincedSkill=%d\n",PlayerInfo[MAX_PLAYERS][pSilincedSkill]);fwrite(hFile, var);
				format(var, 1024, "DesertEagleSkill=%d\n",PlayerInfo[MAX_PLAYERS][pDesertEagleSkill]);fwrite(hFile, var);
				format(var, 1024, "RifleSkill=%d\n",PlayerInfo[MAX_PLAYERS][pRifleSkill]);fwrite(hFile, var);
				format(var, 1024, "ShotgunSkill=%d\n",PlayerInfo[MAX_PLAYERS][pShotgunSkill]);fwrite(hFile, var);
				format(var, 1024, "SpassSkill=%d\n",PlayerInfo[MAX_PLAYERS][pSpassSkill]);fwrite(hFile, var);
				format(var, 1024, "MP5Skill=%d\n",PlayerInfo[MAX_PLAYERS][pMP5Skill]);fwrite(hFile, var);
				format(var, 1024, "AK47Skill=%d\n",PlayerInfo[MAX_PLAYERS][pAK47Skill]);fwrite(hFile, var);
				format(var, 1024, "M4Skill=%d\n",PlayerInfo[MAX_PLAYERS][pM4Skill]);fwrite(hFile, var);
				format(var, 1024, "SniperSkill=%d\n",PlayerInfo[MAX_PLAYERS][pSniperSkill]);fwrite(hFile, var);
				format(var, 1024, "TrainingTime=%d\n",PlayerInfo[MAX_PLAYERS][pTrainingTime]);fwrite(hFile, var);
				format(var, 1024, "PBiskey=%d\n",PlayerInfo[MAX_PLAYERS][pPBiskey]);fwrite(hFile, var);
				format(var, 1024, "InBizz=%d\n",PlayerInfo[MAX_PLAYERS][pInBizz]);fwrite(hFile, var);
				format(var, 1024, "Mask=%d\n",PlayerInfo[MAX_PLAYERS][pMask]);fwrite(hFile, var);
				format(var, 1024, "MaskUse=%d\n",PlayerInfo[MAX_PLAYERS][pMaskUse]);fwrite(hFile, var);
				format(var, 1024, "MaskID=%d\n",PlayerInfo[MAX_PLAYERS][pMaskID]);fwrite(hFile, var);
				format(var, 1024, "Pancingan=%d\n",PlayerInfo[MAX_PLAYERS][pPancingan]);fwrite(hFile, var);
				format(var, 1024, "Age=%s\n",PlayerInfo[MAX_PLAYERS][pAge]);fwrite(hFile, var);
				format(var, 1024, "Paracetamol=%d\n",PlayerInfo[MAX_PLAYERS][pParacetamol]);fwrite(hFile, var);
				format(var, 1024, "Muted=%d\n",PlayerInfo[MAX_PLAYERS][pMuted]);fwrite(hFile, var);
				format(var, 1024, "Respect=%d\n",PlayerInfo[MAX_PLAYERS][pExp]);fwrite(hFile, var);
				format(var, 1024, "Money=%d\n",GetPVarInt(MAX_PLAYERS, "Cash"));fwrite(hFile, var);
				format(var, 1024, "Bank=%d\n",PlayerInfo[MAX_PLAYERS][pAccount]);fwrite(hFile, var);
				format(var, 1024, "Crimes=%d\n",PlayerInfo[MAX_PLAYERS][pCrimes]);fwrite(hFile, var);
				format(var, 1024, "Arrested=%d\n",PlayerInfo[MAX_PLAYERS][pArrested]);fwrite(hFile, var);
				format(var, 1024, "FitnessTimer=%d\n",PlayerInfo[MAX_PLAYERS][pFitnessTimer]);fwrite(hFile, var);
				format(var, 1024, "Job=%d\n",PlayerInfo[MAX_PLAYERS][pJob]);fwrite(hFile, var);
				format(var, 1024, "WSJob=%d\n",PlayerInfo[MAX_PLAYERS][pWSJob]);fwrite(hFile, var);
				format(var, 1024, "FarmJob=%d\n",PlayerInfo[MAX_PLAYERS][pFarmJob]);fwrite(hFile, var);
				format(var, 1024, "Jerigen=%d\n",PlayerInfo[MAX_PLAYERS][pJerigen]);fwrite(hFile, var);
				format(var, 1024, "Bensin=%d\n",PlayerInfo[MAX_PLAYERS][pBensin]);fwrite(hFile, var);
				format(var, 1024, "UseSorry=%d\n",PlayerInfo[MAX_PLAYERS][pUseSorry]);fwrite(hFile, var);
                format(var, 1024, "Kuli=%d\n",PlayerInfo[MAX_PLAYERS][pKuli]);fwrite(hFile, var);
				format(var, 1024, "Job2=%d\n",PlayerInfo[MAX_PLAYERS][pJob2]);fwrite(hFile, var);
				format(var, 1024, "IllegalJob=%d\n",PlayerInfo[MAX_PLAYERS][pIllegalJob]);fwrite(hFile, var);
				format(var, 1024, "Paycheck=%d\n",PlayerInfo[MAX_PLAYERS][pPayCheck]);fwrite(hFile, var);
				format(var, 1024, "Jailed=%d\n",PlayerInfo[MAX_PLAYERS][pJailed]);fwrite(hFile, var);
				format(var, 1024, "JailTime=%d\n",PlayerInfo[MAX_PLAYERS][pJailTime]);fwrite(hFile, var);
				format(var, 1024, "WRestricted=%d\n",PlayerInfo[MAX_PLAYERS][pWRestricted]);fwrite(hFile, var);
				format(var, 1024, "Materials=%d\n",PlayerInfo[MAX_PLAYERS][pMats]);fwrite(hFile, var);
				format(var, 1024, "Pulsa2=%d\n",PlayerInfo[MAX_PLAYERS][pPulsa2]);fwrite(hFile, var);
				format(var, 1024, "Packages=%d\n",GetPVarInt(MAX_PLAYERS, "Packages"));fwrite(hFile, var);
				format(var, 1024, "Crates=%d\n",PlayerInfo[MAX_PLAYERS][pCrates]);fwrite(hFile, var);
				format(var, 1024, "Pot=%d\n",PlayerInfo[MAX_PLAYERS][pPot]);fwrite(hFile, var);
				format(var, 1024, "Crack=%d\n",PlayerInfo[MAX_PLAYERS][pCrack]);fwrite(hFile, var);
				format(var, 1024, "Leader=%d\n",PlayerInfo[MAX_PLAYERS][pLeader]);fwrite(hFile, var);
				format(var, 1024, "Member=%d\n",PlayerInfo[MAX_PLAYERS][pMember]);fwrite(hFile, var);
				format(var, 1024, "Division=%d\n",PlayerInfo[MAX_PLAYERS][pDivision]);fwrite(hFile, var);
				format(var, 1024, "FMember=%d\n",PlayerInfo[MAX_PLAYERS][pFMember]);fwrite(hFile, var);
				format(var, 1024, "Rank=%d\n",PlayerInfo[MAX_PLAYERS][pRank]);fwrite(hFile, var);
				format(var, 1024, "Amoxicilin=%d\n",PlayerInfo[MAX_PLAYERS][pAmoxicilin]);fwrite(hFile, var);
				format(var, 1024, "MechSkill=%d\n",PlayerInfo[MAX_PLAYERS][pMechSkill]);fwrite(hFile, var);
				format(var, 1024, "Ultrafluenza=%d\n",PlayerInfo[MAX_PLAYERS][pUltrafluenza]);fwrite(hFile, var);
				format(var, 1024, "DrugsSkill=%d\n",PlayerInfo[MAX_PLAYERS][pTruckingSkill]);fwrite(hFile, var);
				format(var, 1024, "ArmsSkill=%d\n",PlayerInfo[MAX_PLAYERS][pArmsSkill]);fwrite(hFile, var);
				format(var, 1024, "SmugglerSkill=%d\n",PlayerInfo[MAX_PLAYERS][pSmugSkill]);fwrite(hFile, var);
				format(var, 1024, "FightingStyle=%d\n",PlayerInfo[MAX_PLAYERS][pFightStyle]);fwrite(hFile, var);
				GetPlayerHealth(MAX_PLAYERS,PlayerInfo[MAX_PLAYERS][pHealth]);
				format(var, 1024, "pHealth=%.1f\n",PlayerInfo[MAX_PLAYERS][pHealth]);fwrite(hFile, var);
				GetPlayerArmour(MAX_PLAYERS,PlayerInfo[MAX_PLAYERS][pArmor]);
				format(var, 1024, "pArmor=%.1f\n",PlayerInfo[MAX_PLAYERS][pArmor]);fwrite(hFile, var);
				format(var, 1024, "pSHealth=%.1f\n",PlayerInfo[MAX_PLAYERS][pSHealth]);fwrite(hFile, var);
				format(var, 1024, "pGroin=%.1f\n",PlayerInfo[MAX_PLAYERS][pBodyCondition][0]);fwrite(hFile, var);
				format(var, 1024, "pTorso=%.1f\n",PlayerInfo[MAX_PLAYERS][pBodyCondition][1]);fwrite(hFile, var);
				format(var, 1024, "pRArm=%.1f\n",PlayerInfo[MAX_PLAYERS][pBodyCondition][2]);fwrite(hFile, var);
				format(var, 1024, "pLArm=%.1f\n",PlayerInfo[MAX_PLAYERS][pBodyCondition][3]);fwrite(hFile, var);
				format(var, 1024, "pRLeg=%.1f\n",PlayerInfo[MAX_PLAYERS][pBodyCondition][4]);fwrite(hFile, var);
				format(var, 1024, "pLLeg=%.1f\n",PlayerInfo[MAX_PLAYERS][pBodyCondition][5]);fwrite(hFile, var);
				//format(var, 1024, "pSArmor=%.1f\n",PlayerInfo[MAX_PLAYERS][pSArmor]);fwrite(hFile, var);
				format(var, 1024, "Int=%d\n",PlayerInfo[MAX_PLAYERS][pInt]);fwrite(hFile, var);
				format(var, 1024, "Local=%d\n",PlayerInfo[MAX_PLAYERS][pLocal]);fwrite(hFile, var);
				format(var, 1024, "VirtualWorld=%d\n",PlayerInfo[MAX_PLAYERS][pVW]);fwrite(hFile, var);
				format(var, 1024, "HouseInvite=%d\n",PlayerInfo[MAX_PLAYERS][pHouseInvite]);fwrite(hFile, var);
				format(var, 1024, "Model=%d\n",PlayerInfo[MAX_PLAYERS][pModel]);fwrite(hFile, var);
				format(var, 1024, "PhoneNr=%d\n",PlayerInfo[MAX_PLAYERS][pPnumber]);fwrite(hFile, var);
				format(var, 1024, "FMax=%d\n",PlayerInfo[MAX_PLAYERS][pFMax]);fwrite(hFile, var);
				format(var, 1024, "FTime=%d\n",PlayerInfo[MAX_PLAYERS][pFTime]);fwrite(hFile, var);
				format(var, 1024, "pLumberTime=%d\n",PlayerInfo[MAX_PLAYERS][pLumberTime]);fwrite(hFile, var);
				format(var, 1024, "JTime=%d\n",PlayerInfo[MAX_PLAYERS][pJTime]);fwrite(hFile, var);
				format(var, 1024, "HaulingTime=%d\n",PlayerInfo[MAX_PLAYERS][pHaulingTime]);fwrite(hFile, var);
				format(var, 1024, "Phone=%d\n",PlayerInfo[MAX_PLAYERS][pPhone]);fwrite(hFile, var);
				format(var, 1024, "KartuPerdana=%d\n",PlayerInfo[MAX_PLAYERS][pKartuPerdana]);fwrite(hFile, var);
				format(var, 1024, "Gate=%d\n",PlayerInfo[MAX_PLAYERS][pGate]);fwrite(hFile, var);
				format(var, 1024, "Painkiller=%d\n",PlayerInfo[MAX_PLAYERS][pPainkiller]);fwrite(hFile, var);
				format(var, 1024, "BusTime=%d\n",PlayerInfo[MAX_PLAYERS][pBusTime]);fwrite(hFile, var);
				format(var, 1024, "BeratIkan=%d\n",PlayerInfo[MAX_PLAYERS][pBeratIkan]);fwrite(hFile, var);
				format(var, 1024, "Apartment=%d\n",PlayerInfo[MAX_PLAYERS][pPhousekey]);fwrite(hFile, var);
				format(var, 1024, "Apartment2=%d\n",PlayerInfo[MAX_PLAYERS][pPhousekey2]);fwrite(hFile, var);
				format(var, 1024, "Renting=%d\n",PlayerInfo[MAX_PLAYERS][pRenting]);fwrite(hFile, var);
				format(var, 1024, "CarLic=%d\n",PlayerInfo[MAX_PLAYERS][pCarLic]);fwrite(hFile, var);
				format(var, 1024, "CTime=%d\n",PlayerInfo[MAX_PLAYERS][pCTime]);fwrite(hFile, var);
				format(var, 1024, "CarLicID=%d\n",PlayerInfo[MAX_PLAYERS][pCarLicID]);fwrite(hFile, var);
				format(var, 1024, "KTP=%d\n",PlayerInfo[MAX_PLAYERS][pKTP]);fwrite(hFile, var);
				format(var, 1024, "WorkShop=%d\n",PlayerInfo[MAX_PLAYERS][pWS]);fwrite(hFile, var);
				format(var, 1024, "Ladang=%d\n",PlayerInfo[MAX_PLAYERS][pFarm]);fwrite(hFile, var);
				format(var, 1024, "pTruckerLic=%d\n",PlayerInfo[MAX_PLAYERS][pTruckerLic]);fwrite(hFile, var);
				format(var, 1024, "WSid=%d\n",PlayerInfo[MAX_PLAYERS][pWSid]);fwrite(hFile, var);
				format(var, 1024, "Farmid=%d\n",PlayerInfo[MAX_PLAYERS][pFarmid]);fwrite(hFile, var);
				format(var, 1024, "MissionTime=%d\n",PlayerInfo[MAX_PLAYERS][pMissionsTime]);fwrite(hFile, var);
				format(var, 1024, "KTime=%d\n",PlayerInfo[MAX_PLAYERS][pKTime]);fwrite(hFile, var);
				format(var, 1024, "pLumberLic=%d\n",PlayerInfo[MAX_PLAYERS][pLumberLic]);fwrite(hFile, var);
				format(var, 1024, "FlyLic=%d\n",PlayerInfo[MAX_PLAYERS][pFlyLic]);fwrite(hFile, var);
				format(var, 1024, "BoatLic=%d\n",PlayerInfo[MAX_PLAYERS][pBoatLic]);fwrite(hFile, var);
				format(var, 1024, "CheckCash=%d\n",PlayerInfo[MAX_PLAYERS][pCheckCash]);fwrite(hFile, var);
				format(var, 1024, "Checks=%d\n",PlayerInfo[MAX_PLAYERS][pChecks]);fwrite(hFile, var);
				//format(var, 1024, "MInsure=%d\n",PlayerInfo[MAX_PLAYERS][pMInsure]);fwrite(hFile, var);
				format(var, 1024, "GunLic=%d\n",PlayerInfo[MAX_PLAYERS][pGunLic]);fwrite(hFile, var);
				for(new s = 0; s < 12; s++)
				{
					format(var, 1024, "Gun%d=%d\n", s, PlayerInfo[MAX_PLAYERS][pGuns][s]);fwrite(hFile, var);
					format(var, 1024, "GunAmmo%d=%d\n", s, PlayerInfo[MAX_PLAYERS][pGunsAmmo][s]);fwrite(hFile, var);
				}
				format(var, 1024, "DrugsTime=%d\n",PlayerInfo[MAX_PLAYERS][pDrugsTime]);fwrite(hFile, var);
				format(var, 1024, "MechTime=%d\n",PlayerInfo[MAX_PLAYERS][pMechTime]);fwrite(hFile, var);
				format(var, 1024, "PayDay=%d\n",PlayerInfo[MAX_PLAYERS][pPayDay]);fwrite(hFile, var);
				format(var, 1024, "CDPlayer=%d\n",PlayerInfo[MAX_PLAYERS][pCDPlayer]);fwrite(hFile, var);
				format(var, 1024, "Dice=%d\n",PlayerInfo[MAX_PLAYERS][pDice]);fwrite(hFile, var);
				format(var, 1024, "Cangkul=%d\n",PlayerInfo[MAX_PLAYERS][pCangkul]);fwrite(hFile, var);
				format(var, 1024, "Spraycan=%d\n",PlayerInfo[MAX_PLAYERS][pSpraycan]);fwrite(hFile, var);
				format(var, 1024, "Rope=%d\n",PlayerInfo[MAX_PLAYERS][pRope]);fwrite(hFile, var);
				format(var, 1024, "Cigars=%d\n",PlayerInfo[MAX_PLAYERS][pCigar]);fwrite(hFile, var);
				format(var, 1024, "Sprunk=%d\n",PlayerInfo[MAX_PLAYERS][pSprunk]);fwrite(hFile, var);
				format(var, 1024, "Wins=%d\n",PlayerInfo[MAX_PLAYERS][pWins]);fwrite(hFile, var);
				format(var, 1024, "Loses=%d\n",PlayerInfo[MAX_PLAYERS][pLoses]);fwrite(hFile, var);
				format(var, 1024, "Tutorial=%d\n",PlayerInfo[MAX_PLAYERS][pTut]);fwrite(hFile, var);
				format(var, 1024, "Tutor=%d\n",PlayerInfo[MAX_PLAYERS][pTutorial]);fwrite(hFile, var);
				format(var, 1024, "OnDuty=%d\n",PlayerInfo[MAX_PLAYERS][pDuty]);fwrite(hFile, var);
				format(var, 1024, "Hospital=%d\n",GetPVarInt(MAX_PLAYERS, "Hospital"));fwrite(hFile, var);
				format(var, 1024, "Adjustable=%d\n",PlayerInfo[MAX_PLAYERS][pAdjustable]);fwrite(hFile, var);
				format(var, 1024, "Married=%d\n",PlayerInfo[MAX_PLAYERS][pMarried]);fwrite(hFile, var);
				format(var, 1024, "MarriedTo=%s\n",PlayerInfo[MAX_PLAYERS][pMarriedTo]);fwrite(hFile, var);
				format(var, 1024, "IP=%s\n",PlayerInfo[MAX_PLAYERS][pIP]);fwrite(hFile, var);
				format(var, 1024, "WantedLevel=%d\n",PlayerInfo[MAX_PLAYERS][pWantedLevel]);fwrite(hFile, var);
				format(var, 1024, "Insurance=%d\n",PlayerInfo[MAX_PLAYERS][pInsurance]);fwrite(hFile, var);
				format(var, 1024, "Snack=%d\n",PlayerInfo[MAX_PLAYERS][pSnack]);fwrite(hFile, var);
				format(var, 1024, "MineralWater=%d\n",PlayerInfo[MAX_PLAYERS][pMineralWater]);fwrite(hFile, var);
				format(var, 1024, "AdMuted=%d\n",PlayerInfo[MAX_PLAYERS][pADMute]);fwrite(hFile, var);
				format(var, 1024, "AdMutedTotal=%d\n",PlayerInfo[MAX_PLAYERS][pADMuteTotal]);fwrite(hFile, var);
				format(var, 1024, "HelpMute=%d\n",PlayerInfo[MAX_PLAYERS][pHelpMute]);fwrite(hFile, var);
				format(var, 1024, "SPos_x=%.1f\n",PlayerInfo[MAX_PLAYERS][pPos_x]);fwrite(hFile, var);
				format(var, 1024, "SPos_y=%.1f\n",PlayerInfo[MAX_PLAYERS][pPos_y]);fwrite(hFile, var);
				format(var, 1024, "SPos_z=%.1f\n",PlayerInfo[MAX_PLAYERS][pPos_z]);fwrite(hFile, var);
				format(var, 1024, "SPos_r=%.1f\n",PlayerInfo[MAX_PLAYERS][pPos_r]);fwrite(hFile, var);
				format(var, 1024, "ReportMuted=%d\n",PlayerInfo[MAX_PLAYERS][pRMuted]);fwrite(hFile, var);
    			format(var, 1024, "ReportMutedTotal=%d\n",PlayerInfo[MAX_PLAYERS][pRMutedTotal]);fwrite(hFile, var);
    			format(var, 1024, "ReportMutedTime=%d\n",PlayerInfo[MAX_PLAYERS][pRMutedTime]);fwrite(hFile, var);
    			format(var, 1024, "UsePainkiller=%d\n",PlayerInfo[MAX_PLAYERS][pUsePainkiller]);fwrite(hFile, var);
    			format(var, 1024, "GYMTime=%d\n",PlayerInfo[MAX_PLAYERS][pGYMTime]);fwrite(hFile, var);
    			format(var, 1024, "GiftTime=%d\n",PlayerInfo[MAX_PLAYERS][pGiftTime]);fwrite(hFile, var);
    			format(var, 1024, "AdvisorDutyHours=%d\n",PlayerInfo[MAX_PLAYERS][pDutyHours]);fwrite(hFile, var);
    			format(var, 1024, "AcceptedHelp=%d\n",PlayerInfo[MAX_PLAYERS][pAcceptedHelp]);fwrite(hFile, var);
    			format(var, 1024, "AcceptReport=%d\n",PlayerInfo[MAX_PLAYERS][pAcceptReport]);fwrite(hFile, var);
    			format(var, 1024, "TrashReport=%d\n",PlayerInfo[MAX_PLAYERS][pTrashReport]);fwrite(hFile, var);
    			format(var, 1024, "GangWarn=%d\n",PlayerInfo[MAX_PLAYERS][pGangWarn]);fwrite(hFile, var);
    			format(var, 1024, "FactionBanned=%d\n",PlayerInfo[MAX_PLAYERS][pFactionBanned]);fwrite(hFile, var);
    			format(var, 1024, "CSFBanned=%d\n",PlayerInfo[MAX_PLAYERS][pCSFBanned]);fwrite(hFile, var);
				for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
	    		{
	        		format(var, 1024, "pv%dPosX=%.1f\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvPosX]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dPosY=%.1f\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvPosY]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dPosZ=%.1f\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvPosZ]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dPosAngle=%.1f\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvPosAngle]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dModelId=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvModelId]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dLock=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvLock]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dLocked=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvLocked]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dPaintJob=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvPaintJob]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dColor1=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvColor1]);fwrite(hFile, var);
	    			format(var, 1024, "pv%dNeon=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvNeon]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dColor2=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvColor2]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dPrice=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvPrice]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dTicket=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvTicket]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeapon0=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvWeapons][0]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeapon1=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvWeapons][1]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeapon2=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvWeapons][2]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeaponAmmo0=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvWeaponsAmmo][0]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeaponAmmo1=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvWeaponsAmmo][1]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWeaponAmmo2=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvWeaponsAmmo][2]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dWepUpgrade=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvWepUpgrade]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dFuel=%.1f\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvFuel]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dHealth=%.1f\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvHealth]);fwrite(hFile, var);
					format(var, 1024, "pv%dInsurances=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvInsurances]);fwrite(hFile, var);
					format(var, 1024, "pv%dMesinUpgrade=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvMesinUpgrade]);fwrite(hFile, var);
					format(var, 1024, "pv%dBodyUpgrade=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvBodyUpgrade]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dStatus0=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvStatus][0]);fwrite(hFile, var);
					format(var, 1024, "pv%dStatus1=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvStatus][1]);fwrite(hFile, var);
					format(var, 1024, "pv%dStatus2=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvStatus][2]);fwrite(hFile, var);
					format(var, 1024, "pv%dStatus3=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvStatus][3]);fwrite(hFile, var);
					format(var, 1024, "pv%dLicense=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvLicense]);fwrite(hFile, var);
					format(var, 1024, "pv%dLicenseTime=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvLicenseTime]);fwrite(hFile, var);
					format(var, 1024, "pv%dLicenseExpired=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvLicenseExpired]);fwrite(hFile, var);
					format(var, 1024, "pv%dImpound=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvImpounded]);fwrite(hFile, var);
					format(var, 1024, "pv%dStored=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvStored]);fwrite(hFile, var);
					format(var, 1024, "pv%dDestroyed=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvDestroyed]);fwrite(hFile, var);
	   			 	format(var, 1024, "pv%dNumPlate=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvNumberPlate]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText1=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText1]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText2=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText2]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText3=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText3]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText4=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText4]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText5=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText5]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText6=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText6]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText7=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText7]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText8=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText8]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText9=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText9]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyText10=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyText10]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol1=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol1]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol2=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol2]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol3=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol3]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol4=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol4]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol5=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol5]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol6=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol6]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol7=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol7]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol8=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol8]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol9=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol9]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextCol10=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextCol10]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize1=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize1]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize2=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize2]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize3=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize3]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize4=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize4]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize5=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize5]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize6=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize6]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize7=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize7]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize8=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize8]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize9=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize9]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextSize10=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextSize10]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID1=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID1]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID2=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID2]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID3=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID3]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID4=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID4]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID5=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID5]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID6=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID6]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID7=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID7]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID8=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID8]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID9=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID9]);fwrite(hFile, var);
	        		format(var, 1024, "pv%dToyTextID10=%d\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextID10]);fwrite(hFile, var);
	    			for(new m = 0; m < MAX_MODS; m++)
	     	   		{
                		format(var, 1024, "pv%dMod%d=%d\n", v, m, PlayerVehicleInfo[MAX_PLAYERS][v][pvMods][m]);fwrite(hFile, var);
	        		}
	        		for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++)
	        		{
	        		    format(var, 1024, "pv%dToyID%d=%d\n", v, vt, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyID][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyPosX%d=%.5f\n", v, vt, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyPosX][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyPosY%d=%.5f\n", v, vt, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyPosY][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyPosZ%d=%.5f\n", v, vt, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyPosZ][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyRotX%d=%.5f\n", v, vt, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyRotX][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyRotY%d=%.5f\n", v, vt, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyRotY][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyRotZ%d=%.5f\n", v, vt, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyRotZ][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyColor%d=%d\n", v, vt, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyColor][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyIndex%d=%d\n", v, vt, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyIndex][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyTexture1%d=%d\n", v, vt, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTexture1][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyTexture2%d=%d\n", v, vt, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTexture2][vt]);fwrite(hFile, var);
	        		    format(var, 1024, "pv%dToyTextureID%d=%d\n", v, vt, PlayerVehicleInfo[MAX_PLAYERS][v][pvToyTextureID][vt]);fwrite(hFile, var);
					}
	        		//format(var, 1024, "pv%dAllowedPlayer=%s\n", v, PlayerVehicleInfo[MAX_PLAYERS][v][pvAllowPlayer]);fwrite(hFile, var);
				}
				format(var, 1024, "prTax=%d\n", PlayerRentInfo[MAX_PLAYERS][prTax]);fwrite(hFile, var);
				format(var, 1024, "prRentTime=%d\n", PlayerRentInfo[MAX_PLAYERS][prRentTime]);fwrite(hFile, var);
				format(var, 1024, "prVehicleRent=%d\n", PlayerRentInfo[MAX_PLAYERS][prVehicleRent]);fwrite(hFile, var);
				format(var, 1024, "prModelId=%d\n", PlayerRentInfo[MAX_PLAYERS][prModelId]);fwrite(hFile, var);
				format(var, 1024, "prPosX=%.1f\n", PlayerRentInfo[MAX_PLAYERS][prPosX]);fwrite(hFile, var);
				format(var, 1024, "prPosY=%.1f\n", PlayerRentInfo[MAX_PLAYERS][prPosY]);fwrite(hFile, var);
				format(var, 1024, "prPosZ=%.1f\n", PlayerRentInfo[MAX_PLAYERS][prPosZ]);fwrite(hFile, var);
				format(var, 1024, "prPosAngle=%.1f\n", PlayerRentInfo[MAX_PLAYERS][prPosAngle]);fwrite(hFile, var);
				format(var, 1024, "prColor1=%d\n", PlayerRentInfo[MAX_PLAYERS][prColor1]);fwrite(hFile, var);
				format(var, 1024, "prColor2=%d\n", PlayerRentInfo[MAX_PLAYERS][prColor2]);fwrite(hFile, var);
				format(var, 1024, "prLock=%d\n", PlayerRentInfo[MAX_PLAYERS][prLock]);fwrite(hFile, var);
				format(var, 1024, "prLocked=%d\n", PlayerRentInfo[MAX_PLAYERS][prLocked]);fwrite(hFile, var);
				format(var, 1024, "prTicket=%d\n", PlayerRentInfo[MAX_PLAYERS][prTicket]);fwrite(hFile, var);
				format(var, 1024, "prFuel=%d\n", PlayerRentInfo[MAX_PLAYERS][prFuel]);fwrite(hFile, var);
				format(var, 1024, "prHealth=%.1f\n", PlayerRentInfo[MAX_PLAYERS][prHealth]);fwrite(hFile, var);
				format(var, 1024, "prStatus0=%d\n", PlayerRentInfo[MAX_PLAYERS][prStatus][0]);fwrite(hFile, var);
				format(var, 1024, "prStatus1=%d\n", PlayerRentInfo[MAX_PLAYERS][prStatus][1]);fwrite(hFile, var);
				format(var, 1024, "prStatus2=%d\n", PlayerRentInfo[MAX_PLAYERS][prStatus][2]);fwrite(hFile, var);
				format(var, 1024, "prStatus3=%d\n", PlayerRentInfo[MAX_PLAYERS][prStatus][3]);fwrite(hFile, var);
	    		for(new vv = 0; vv < MAX_PLAYERTOYS; vv++)
	    		{
					format(var, 1024, "pt%dModelID=%d\n", vv, PlayerToyInfo[MAX_PLAYERS][vv][ptModelID]);fwrite(hFile, var);
					format(var, 1024, "pt%dBone=%d\n", vv, PlayerToyInfo[MAX_PLAYERS][vv][ptBone]);fwrite(hFile, var);
	        		format(var, 1024, "pt%dPosX=%.5f\n", vv, PlayerToyInfo[MAX_PLAYERS][vv][ptPosX]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dPosY=%.5f\n", vv, PlayerToyInfo[MAX_PLAYERS][vv][ptPosY]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dPosZ=%.5f\n", vv, PlayerToyInfo[MAX_PLAYERS][vv][ptPosZ]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dRotX=%.5f\n", vv, PlayerToyInfo[MAX_PLAYERS][vv][ptRotX]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dRotY=%.5f\n", vv, PlayerToyInfo[MAX_PLAYERS][vv][ptRotY]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dRotZ=%.5f\n", vv, PlayerToyInfo[MAX_PLAYERS][vv][ptRotZ]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dScaX=%.5f\n", vv, PlayerToyInfo[MAX_PLAYERS][vv][ptScaX]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dScaY=%.5f\n", vv, PlayerToyInfo[MAX_PLAYERS][vv][ptScaY]);fwrite(hFile, var);
	    			format(var, 1024, "pt%dScaZ=%.5f\n", vv, PlayerToyInfo[MAX_PLAYERS][vv][ptScaZ]);fwrite(hFile, var);
	    		}
	    		format(var, 1024, "VIPJoinDate=%s\n",PlayerInfo[MAX_PLAYERS][pVIPJoinDate]);fwrite(hFile, var);//vip
				format(var, 1024, "VIPExpDate=%s\n",PlayerInfo[MAX_PLAYERS][pVIPExpDate]);fwrite(hFile, var);//vip
				format(var, 1024, "VIPExpTime=%s\n",PlayerInfo[MAX_PLAYERS][pVIPExpTime]);fwrite(hFile, var);//vip
	    		format(var, 1024, "VIPInviteDay=%d\n",PlayerInfo[MAX_PLAYERS][pVIPInviteDay]);fwrite(hFile, var);
	    		format(var, 1024, "TempVIP=%d\n",PlayerInfo[MAX_PLAYERS][pTempVIP]);fwrite(hFile, var);
	    		format(var, 1024, "BuddyInvite=%d\n",PlayerInfo[MAX_PLAYERS][pBuddyInvited]);fwrite(hFile, var);
	    		format(var, 1024, "VIPLeft=%d\n",PlayerInfo[MAX_PLAYERS][pVIPLeft]);fwrite(hFile, var);
	    		format(var, 1024, "Tokens=%d\n",PlayerInfo[MAX_PLAYERS][pTokens]);fwrite(hFile, var);
	    		format(var, 1024, "TriageTime=%d\n",PlayerInfo[MAX_PLAYERS][pTriageTime]);fwrite(hFile, var);
	    		format(var, 1024, "jailedBy=%s\n", PlayerInfo[MAX_PLAYERS][pJailedBy]);fwrite(hFile, var);
	    		format(var, 1024, "PrisonReason=%s\n", PlayerInfo[MAX_PLAYERS][pPrisonReason]);fwrite(hFile, var);
	    		format(var, 1024, "TicketTime=%d\n",PlayerInfo[MAX_PLAYERS][pTicketTime]);fwrite(hFile, var);
	    		format(var, 1024, "Screwdriver=%d\n",PlayerInfo[MAX_PLAYERS][pScrewdriver]);fwrite(hFile, var);
	    		format(var, 1024, "Tire=%d\n",PlayerInfo[MAX_PLAYERS][pTire]);fwrite(hFile, var);
	    		format(var, 1024, "Firstaid=%d\n",PlayerInfo[MAX_PLAYERS][pFirstaid]);fwrite(hFile, var);
	    		format(var, 1024, "Rccam=%d\n",PlayerInfo[MAX_PLAYERS][pRccam]);fwrite(hFile, var);
	    		format(var, 1024, "Receiver=%d\n",PlayerInfo[MAX_PLAYERS][pReceiver]);fwrite(hFile, var);
	    		format(var, 1024, "GPS=%d\n",PlayerInfo[MAX_PLAYERS][pGPS]);fwrite(hFile, var);
	    		format(var, 1024, "Sweep=%d\n",PlayerInfo[MAX_PLAYERS][pSweep]);fwrite(hFile, var);
	    		format(var, 1024, "SweepLeft=%d\n",PlayerInfo[MAX_PLAYERS][pSweepLeft]);fwrite(hFile, var);
	    		format(var, 1024, "Bugged=%d\n",PlayerInfo[MAX_PLAYERS][pBugged]);fwrite(hFile, var);
	    		format(var, 1024, "Hospital=%d\n",PlayerInfo[MAX_PLAYERS][pHospital]);fwrite(hFile, var);
				format(var, 1024, "TanamanAnggur=%d\n",PlayerInfo[MAX_PLAYERS][pTanamanAnggur]);fwrite(hFile, var);
				format(var, 1024, "TanamanBlueberry=%d\n",PlayerInfo[MAX_PLAYERS][pTanamanBlueberry]);fwrite(hFile, var);
				format(var, 1024, "TanamanStrawberry=%d\n",PlayerInfo[MAX_PLAYERS][pTanamanStrawberry]);fwrite(hFile, var);
				format(var, 1024, "TanamanGandum=%d\n",PlayerInfo[MAX_PLAYERS][pTanamanGandum]);fwrite(hFile, var);
				format(var, 1024, "TanamanTomat=%d\n",PlayerInfo[MAX_PLAYERS][pTanamanTomat]);fwrite(hFile, var);
				format(var, 1024, "BibitAnggur=%d\n",PlayerInfo[MAX_PLAYERS][pBibitAnggur]);fwrite(hFile, var);
				format(var, 1024, "BibitBlueberry=%d\n",PlayerInfo[MAX_PLAYERS][pBibitBlueberry]);fwrite(hFile, var);
				format(var, 1024, "BibitStrawberry=%d\n",PlayerInfo[MAX_PLAYERS][pBibitStrawberry]);fwrite(hFile, var);
				format(var, 1024, "BibitGandum=%d\n",PlayerInfo[MAX_PLAYERS][pBibitGandum]);fwrite(hFile, var);
				format(var, 1024, "BibitTomat=%d\n",PlayerInfo[MAX_PLAYERS][pBibitTomat]);fwrite(hFile, var);
				format(var, 1024, "Warrants=%s\n",PlayerInfo[MAX_PLAYERS][pWarrant]);fwrite(hFile, var);
				format(var, 1024, "JudgeJailTime=%d\n",PlayerInfo[MAX_PLAYERS][pJudgeJailTime]);fwrite(hFile, var);
				format(var, 1024, "JudgeJailType=%d\n",PlayerInfo[MAX_PLAYERS][pJudgeJailType]);fwrite(hFile, var);
				format(var, 1024, "BeingSentenced=%d\n",PlayerInfo[MAX_PLAYERS][pBeingSentenced]);fwrite(hFile, var);
				format(var, 1024, "ProbationTime=%d\n",PlayerInfo[MAX_PLAYERS][pProbationTime]);fwrite(hFile, var);
	    		format(var, 1024, "CallsAccepted=%d\n", PlayerInfo[MAX_PLAYERS][pCallsAccepted]);fwrite(hFile, var);
	    		format(var, 1024, "PatientsDelivered=%d\n",PlayerInfo[MAX_PLAYERS][pPatientsDelivered]);fwrite(hFile, var);
	    		format(var, 1024, "LiveBanned=%d\n",PlayerInfo[MAX_PLAYERS][pLiveBanned]);fwrite(hFile, var);
	    		format(var, 1024, "FreezeBank=%d\n",PlayerInfo[MAX_PLAYERS][pFreezeBank]);fwrite(hFile, var);
				format(var, 1024, "Component=%d\n",PlayerInfo[MAX_PLAYERS][pComponent]);fwrite(hFile, var);
				format(var, 1024, "BoomBox=%d\n",PlayerInfo[MAX_PLAYERS][pBoomBox]);fwrite(hFile, var);
				fclose(hFile);
	}
	return 1;
}

//----- End of file handling for players

stock ini_GetKey( line[] )
{
	new keyRes[256];
	keyRes[0] = 0;
	if ( strfind( line , "=" , true ) == -1 ) return keyRes;
	strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
	return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}

SaveDynamicDoors() {

	new
		szFileStr[512],
		File: fHandle = fopen("dynamicdoors.cfg", io_write);

	for(new iIndex; iIndex < MAX_DDOORS; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%s|%d|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%s|%d\r\n",
			DDoorsInfo[iIndex][ddDescription],
			DDoorsInfo[iIndex][ddCustomInterior],
			DDoorsInfo[iIndex][ddExteriorVW],
			DDoorsInfo[iIndex][ddExteriorInt],
			DDoorsInfo[iIndex][ddInteriorVW],
			DDoorsInfo[iIndex][ddInteriorInt],
			DDoorsInfo[iIndex][ddExteriorX],
			DDoorsInfo[iIndex][ddExteriorY],
			DDoorsInfo[iIndex][ddExteriorZ],
			DDoorsInfo[iIndex][ddExteriorA],
			DDoorsInfo[iIndex][ddInteriorX],
			DDoorsInfo[iIndex][ddInteriorY],
			DDoorsInfo[iIndex][ddInteriorZ],
			DDoorsInfo[iIndex][ddInteriorA],
			DDoorsInfo[iIndex][ddCustomExterior],
			DDoorsInfo[iIndex][ddVIP],
	  		DDoorsInfo[iIndex][ddFamily],
	  		DDoorsInfo[iIndex][ddFaction],
	  		DDoorsInfo[iIndex][ddAdmin],
	  		DDoorsInfo[iIndex][ddWanted],
	  		DDoorsInfo[iIndex][ddVehicleAble],
	  		DDoorsInfo[iIndex][ddColor],
	  		DDoorsInfo[iIndex][ddPickupModel],
	  		DDoorsInfo[iIndex][dPass],
	  		DDoorsInfo[iIndex][dLocked]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

SaveDynamicMapIcons() {

	new
		szFileStr[326],
		File: fHandle = fopen("dynamicmapicons.cfg", io_write);

	for(new iIndex; iIndex < MAX_DMAPICONS; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%d|%f|%f|%f\r\n",
			DMPInfo[iIndex][dmpMarkerType],
			DMPInfo[iIndex][dmpColor],
			DMPInfo[iIndex][dmpVW],
			DMPInfo[iIndex][dmpInt],
			DMPInfo[iIndex][dmpPosX],
			DMPInfo[iIndex][dmpPosY],
			DMPInfo[iIndex][dmpPosZ]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

stock SaveGates()
{
	new idx = 1, File:file;
	new string[350];
	while(idx < MAX_GATES)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%s|%f|%i|%i|%i|%i|%i|%f|%d\r\n",
		GateInfo[idx][gModel],
		GateInfo[idx][gCX],
		GateInfo[idx][gCY],
		GateInfo[idx][gCZ],
		GateInfo[idx][gCRX],
		GateInfo[idx][gCRY],
		GateInfo[idx][gCRZ],
		GateInfo[idx][gOX],
		GateInfo[idx][gOY],
		GateInfo[idx][gOZ],
		GateInfo[idx][gORX],
		GateInfo[idx][gORY],
		GateInfo[idx][gORZ],
		GateInfo[idx][gPassword],
		GateInfo[idx][gRange],
		GateInfo[idx][gFaction],
		GateInfo[idx][gWorkshop],
		GateInfo[idx][gHID],
		GateInfo[idx][gVW],
		GateInfo[idx][gInt],
		GateInfo[idx][gSpeed],
		GateInfo[idx][gOwner]);
		GateInfo[idx][gStatus] = 0;
	    if(idx == 1)
	    {
	        file = fopen("gates.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("gates.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Gates saved successfully.");
	return 1;
}

public BroadCast(color,String[])
{
	SendClientMessageToAllEx(color, String);
	return 1;
}

stock ShopTechBroadCast(color,String[])
{
	foreach(Player, i)
	{
		if (PlayerInfo[i][pAdmin] >= 6)
		{
			SendClientMessageEx(i, color, String);
		}
	}
	return 1;
}

stock ABroadCast(color,String[],level)
{
	foreach(Player, i)
	{
		if (PlayerInfo[i][pAdmin] >= level && PlayerInfo[i][pTogReports] != 1)
		{
			SendClientMessageEx(i, color, String);
			//printf("%s", String);
		}
	}
	return 1;
}

public OOCOff(color,String[])
{
	foreach(Player, i)
	{
		if(!gOoc[i])
		{
			SendClientMessageEx(i, color, String);
		}
	}
}

public OOCNews(color,String[])
{
	foreach(Player, i)
	{
		if(!gNews[i])
		{
			SendClientMessageEx(i, color, String);
		}
	}
}

public SendRadioMessage(team, color, String[])
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pMember] == team)
		{
		    new S3MP4K[256];
			SendClientMessageEx(i, color, String);
			format(S3MP4K, sizeof(S3MP4K), "[<RADIO>]\n* %s *", String);
			SetPlayerChatBubble(i, S3MP4K, COLOR_FBI, 10.0, 3000);
		}
	}
}

public SendDepartmentMessage(member, color, String[])
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pMember] == member)
		{
		    new S3MP4K[1000];
			SendClientMessageEx(i, color, String);
			format(S3MP4K, sizeof(S3MP4K), "[<DEPARTMENT>]\n* %s *", String);
			SetPlayerChatBubble(i, S3MP4K, DEPTRADIO, 10.0, 3000);
		}
	}
}

stock SendCopMessage(color, String[])
{
	foreach(Player, i)
	{
		if((IsPlayerConnected(i) && PlayerInfo[i][pMember] == 1) ||(IsPlayerConnected(i) && PlayerInfo[i][pMember] == 2) ||(IsPlayerConnected(i) && PlayerInfo[i][pMember] == 3) || (IsPlayerConnected(i) && PlayerInfo[i][pMember] == 7) || (IsPlayerConnected(i) && PlayerInfo[i][pMember] == 11))
		{
		    SendClientMessage(i, color, String);
		}
	}
	return 1;
}
public SendRadioOOCMessage(member, color, String[])
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pMember] == member)
		{
			SendClientMessageEx(i, color, String);
		}
	}
}

public SendJobMessage(job, color, String[])
{
	foreach(Player, i)
	{
		if((PlayerInfo[i][pJob] == job || PlayerInfo[i][pJob2] == job) && JobDuty[i] == 1)
		{
			SendClientMessageEx(i, color, String);
		}
	}
}

public SendNewFamilyMessage(family, color, String[])
{
	foreach(Player, i)
	{
			if(PlayerInfo[i][pFMember] == family)
			{
				if(!gFam[i])
				{
					SendClientMessageEx(i, color, String);
				}
			}
	}
}

public SendFamilyMessage(family, color, String[])
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family)
		{
			if(!gFam[i])
			{
				SendClientMessageEx(i, color, String);
			}
		}
	}
}

public RadioBroadCast(playerid, color, String[])
{
	new MiscString[10000], Float: aaaPositions[3];
	foreach(Player, i)
	{
		if(PlayerInfo[i][pRadioFreq] == PlayerInfo[playerid][pRadioFreq] && PlayerInfo[i][pRadio] >= 1 && gRadio[i] != 0)
		{
			GetPlayerPos(i, aaaPositions[0], aaaPositions[1], aaaPositions[2]);
			format(MiscString, sizeof(MiscString), "[WT:%d] {75AE5D}%s : %s", PlayerInfo[playerid][pRadioFreq], GetPlayerNameEx(playerid), String);
			SendClientMessageEx(i, COLOR_YELLOW, MiscString);
			format(MiscString, sizeof(MiscString), "[<WT>]\n* %s *", String);
			SetPlayerChatBubble(i, MiscString, 0x75AE5D00, 5.0, 5000);
		}
		if(AdminReadPm[i] == true)
        {
  	      format(MiscString, sizeof(MiscString), "[WT:%d] {75AE5D}%s : %s", PlayerInfo[playerid][pRadioFreq], GetPlayerNameEx(playerid), String);
			SendClientMessage(i, COLOR_YELLOW, MiscString);
        }
	}
}

stock SendTeamBeepMessage(color, String[])
{
	foreach(Player, i)
	{
		if(IsACop(i))
		{
			SendClientMessageEx(i, color, String);
			RingTone[i] = 20;
		}
	}
}

public SendAdminMessage(color, String[])
{
	foreach(Player, i)
	{
			if(PlayerInfo[i][pAdmin] >= 1)
			{
				SendClientMessageEx(i, color, String);
			}
	}
}

public PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

public StopMusic()
{
	foreach(Player, i)
	{
		PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
	}
}

public PlayerFixRadio(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimer("PlayerFixRadio2", 1000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		Fixr[playerid] = 1;
	}
}

public PlayerFixRadio2()
{
	foreach(Player, i)
	{
			if(Fixr[i])
			{
				PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
				Fixr[i] = 0;
			}
	}
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	new String[10000];
	new vslot = vslotselection[playerid];
	if(listid == vtoylist)
	{
	    if(response)
	    {
					new x = GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid));
					if(x != -1)
					{
					    new Float:pX, Float:pY, Float:pZ, Float:pA;
						if(vslot == 999) return SendClientMessage(playerid, COLOR_GREY, "Anda belum memilih Slot.");
						PlayerVehicleInfo[playerid][x][pvToyID][vslot] = modelid;
						GetPlayerPos(playerid, pX, pY, pZ);
						GetVehicleZAngle(PlayerVehicleInfo[playerid][x][pvId], pA);
						PlayerVehicleInfo[playerid][x][pvToyPosX][vslot] = 0.00000;
						PlayerVehicleInfo[playerid][x][pvToyPosY][vslot] = 0.00000;
						PlayerVehicleInfo[playerid][x][pvToyPosZ][vslot] = 0.00000;
						PlayerVehicleInfo[playerid][x][pvToyRotX][vslot] = 0.00000;
						PlayerVehicleInfo[playerid][x][pvToyRotY][vslot] = 0.00000;
						PlayerVehicleInfo[playerid][x][pvToyRotZ][vslot] = 0.00000;
		  				PlayerVehicleInfo[playerid][x][pvToy][vslot] = CreateDynamicObject(modelid,pX,pY,pZ,0,0,pA);
						pvEdit[playerid] = 1;
						pvEditID[playerid] = vslotselection[playerid];
						pvehEditID[playerid] = x;
						format(String, sizeof(String), "Edit Vehicle ID slot: %d", x);
						SendClientMessageEx(playerid, COLOR_WHITE, String);
						GetDynamicObjectPos(PlayerVehicleInfo[playerid][x][pvToy][vslot], pvPos[playerid][0], pvPos[playerid][1], pvPos[playerid][2]);
						GetDynamicObjectRot(PlayerVehicleInfo[playerid][x][pvToy][vslot], pvRot[playerid][0], pvRot[playerid][1], pvRot[playerid][2]);
						EditDynamicObject(playerid, PlayerVehicleInfo[playerid][x][pvToy][vslot]);
						SendClientMessage(playerid, COLOR_WHITE, "Selamat. Anda telah membeli Vehicle Object, Gunakan (/editvtoys) untuk mengaturnya.");
						return 1;
					}
		}
	}

	if(listid == toylist)
	{
	    if(response)
	    {
			if(GetPlayerCash(playerid) < GetToyCost(modelid))
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "* Uang anda kurang!");
			}
			else
			{
			    if(slotselection[playerid] == 999) return SendClientMessage(playerid, COLOR_GREY, "Anda belum memilih Slot Toys anda.");
				GivePlayerCash(playerid, -GetToyCost(modelid));
			    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = modelid;
				format(String, sizeof(String), "* Anda telah membeli Toys seharga %s (Slot: %d)", FormatMoney(GetToyCost(modelid)), slotselection[playerid]);
			    SendClientMessageEx(playerid, COLOR_RED, String);
			    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");
			    slotselection[playerid] = 999;
			}
		}
		return 1;
	}
	if(listid == FACTIONSKIN)
	{
	    if(response)
	    {
			PlayerInfo[playerid][pModel] = modelid;
			SetPlayerSkin(playerid, modelid);
	    }
    	return 1;
	}
	if(listid == skinlist)
	{
	 	new id = PlayerInfo[playerid][pInBizz];
	    if(response)
	    {
	     	if(GetPlayerCash(playerid) < BizzInfo[id][bProductPrice][0]) return SendClientMessageEx(playerid, COLOR_GRAD2, "Uang anda kurang!");
		    SendClientMessage(playerid, 0xFF0000FF, "Anda telah membeli Skin");
			GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][0]);
			BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][0];
			BizzInfo[id][bProducts] -= 7;
			PlayerInfo[playerid][pModel] = modelid;
			SetPlayerSkin(playerid, modelid);
	    }
	    else SendClientMessage(playerid, 0xFF0000FF, "Anda batal membeli Skin");
    	return 1;
	}
	if(listid == toy1000list)
	{
	    new id = PlayerInfo[playerid][pInBizz];
	    if(response)
	    {
			if(GetPlayerCash(playerid) < BizzInfo[id][bProductPrice][2])
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "* Uang anda kurang!");
			}
			else
			{
			    if(slotselection[playerid] == 999) return SendClientMessage(playerid, COLOR_GREY, "Anda belum memilih Slot Toys anda.");
				GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][2]);
				BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][2];
				BizzInfo[id][bProducts] -= 5;
			    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = modelid;
		    	new idx = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
			    if((idx >= 19006 && idx <= 19035) || (idx >= 19138 && idx <= 19140))
			    {
			        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			    }
			    else if(idx >= 18891 && idx <= 18910)
			    {
			    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(idx >= 18926 && idx <= 18935)
				{
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if(idx >= 18911 && idx <= 18920)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(idx == 19078 || idx == 19078)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if((idx >= 18641 && idx <= 18644) || (idx >= 19080 && idx <= 19084) || idx == 18890)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
			    else
			    {
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				format(String, sizeof(String), "* Anda telah membeli Toys seharga %s (Slot: %d)", FormatMoney(GetToyCost(modelid)), slotselection[playerid]);
			    SendClientMessageEx(playerid, COLOR_RED, String);
			    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");
			    slotselection[playerid] = 999;
			}
		}
		return 1;
	}
	if(listid == toy1500list)
	{
	    if(response)
	    {
			if(GetPlayerCash(playerid) < GetToyCost(modelid))
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "* Uang anda kurang!");
			}
			else
			{
			    if(slotselection[playerid] == 999) return SendClientMessage(playerid, COLOR_GREY, "Anda belum memilih Slot Toys anda.");
				GivePlayerCash(playerid, -GetToyCost(modelid));
			    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = modelid;
		    	new idx = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
			    if((idx >= 19006 && idx <= 19035) || (idx >= 19138 && idx <= 19140))
			    {
			        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			    }
			    else if(idx >= 18891 && idx <= 18910)
			    {
			    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(idx >= 18926 && idx <= 18935)
				{
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if(idx >= 18911 && idx <= 18920)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(idx == 19078 || idx == 19078)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if((idx >= 18641 && idx <= 18644) || (idx >= 19080 && idx <= 19084) || idx == 18890)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
			    else
			    {
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				format(String, sizeof(String), "* Anda telah membeli Toys seharga %s (Slot: %d)", FormatMoney(GetToyCost(modelid)), slotselection[playerid]);
			    SendClientMessageEx(playerid, COLOR_RED, String);
			    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");
			    slotselection[playerid] = 999;
			}
		}
		return 1;
	}
	if(listid == toy2000list)
	{
	    if(response)
	    {
			if(GetPlayerCash(playerid) < GetToyCost(modelid))
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "* Uang anda kurang!");
			}
			else
			{
			    if(slotselection[playerid] == 999) return SendClientMessage(playerid, COLOR_GREY, "Anda belum memilih Slot Toys anda.");
				GivePlayerCash(playerid, -GetToyCost(modelid));
			    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = modelid;
		    	new idx = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
			    if((idx >= 19006 && idx <= 19035) || (idx >= 19138 && idx <= 19140))
			    {
			        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			    }
			    else if(idx >= 18891 && idx <= 18910)
			    {
			    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(idx >= 18926 && idx <= 18935)
				{
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if(idx >= 18911 && idx <= 18920)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(idx == 19078 || idx == 19078)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if((idx >= 18641 && idx <= 18644) || (idx >= 19080 && idx <= 19084) || idx == 18890)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
			    else
			    {
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				format(String, sizeof(String), "* Anda telah membeli Toys seharga %s (Slot: %d)", FormatMoney(GetToyCost(modelid)), slotselection[playerid]);
			    SendClientMessageEx(playerid, COLOR_RED, String);
			    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");
			    slotselection[playerid] = 999;
			}
		}
		return 1;
	}
	if(listid == toy3000list)
	{
	    if(response)
	    {
			if(GetPlayerCash(playerid) < GetToyCost(modelid))
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "* Uang anda kurang!");
			}
			else
			{
			    if(slotselection[playerid] == 999) return SendClientMessage(playerid, COLOR_GREY, "Anda belum memilih Slot Toys anda.");
				GivePlayerCash(playerid, -GetToyCost(modelid));
			    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = modelid;
		    	new idx = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
			    if((idx >= 19006 && idx <= 19035) || (idx >= 19138 && idx <= 19140))
			    {
			        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			    }
			    else if(idx >= 18891 && idx <= 18910)
			    {
			    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(idx >= 18926 && idx <= 18935)
				{
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if(idx >= 18911 && idx <= 18920)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(idx == 19078 || idx == 19078)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if((idx >= 18641 && idx <= 18644) || (idx >= 19080 && idx <= 19084) || idx == 18890)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
			    else
			    {
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				format(String, sizeof(String), "* Anda telah membeli Toys seharga %s (Slot: %d)", FormatMoney(GetToyCost(modelid)), slotselection[playerid]);
			    SendClientMessageEx(playerid, COLOR_RED, String);
			    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");
			    slotselection[playerid] = 999;
			}
		}
		return 1;
	}
	if(listid == toy4000list)
	{
	    if(response)
	    {
			if(GetPlayerCash(playerid) < GetToyCost(modelid))
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "* Uang anda kurang!");
			}
			else
			{
			    if(slotselection[playerid] == 999) return SendClientMessage(playerid, COLOR_GREY, "Anda belum memilih Slot Toys anda.");
				GivePlayerCash(playerid, -GetToyCost(modelid));
			    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = modelid;
		    	new idx = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
			    if((idx >= 19006 && idx <= 19035) || (idx >= 19138 && idx <= 19140))
			    {
			        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			    }
			    else if(idx >= 18891 && idx <= 18910)
			    {
			    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(idx >= 18926 && idx <= 18935)
				{
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if(idx >= 18911 && idx <= 18920)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(idx == 19078 || idx == 19078)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if((idx >= 18641 && idx <= 18644) || (idx >= 19080 && idx <= 19084) || idx == 18890)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
			    else
			    {
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				format(String, sizeof(String), "* Anda telah membeli %s seharga %s (Slot: %d)", HoldingObjects[modelid][holdingmodelname], FormatMoney(GetToyCost(modelid)), slotselection[playerid]);
			    SendClientMessageEx(playerid, COLOR_RED, String);
			    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");
			    slotselection[playerid] = 999;
			}
		}
		return 1;
	}
	if(listid == toy5000list)
	{
	    if(response)
	    {
			if(GetPlayerCash(playerid) < GetToyCost(modelid))
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "* Uang anda kurang!");
			}
			else
			{
			    if(slotselection[playerid] == 999) return SendClientMessage(playerid, COLOR_GREY, "Anda belum memilih Slot Toys anda.");
				GivePlayerCash(playerid, -GetToyCost(modelid));
			    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = modelid;
		    	new idx = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
			    if((idx >= 19006 && idx <= 19035) || (idx >= 19138 && idx <= 19140))
			    {
			        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			    }
			    else if(idx >= 18891 && idx <= 18910)
			    {
			    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(idx >= 18926 && idx <= 18935)
				{
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if(idx >= 18911 && idx <= 18920)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(idx == 19078 || idx == 19078)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if((idx >= 18641 && idx <= 18644) || (idx >= 19080 && idx <= 19084) || idx == 18890)
				{
				    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
			    else
			    {
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				format(String, sizeof(String), "* Anda telah membeli %s seharga %s (Slot: %d)", HoldingObjects[modelid][holdingmodelname], FormatMoney(GetToyCost(modelid)), slotselection[playerid]);
			    SendClientMessageEx(playerid, COLOR_RED, String);
			    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");
			    slotselection[playerid] = 999;
			}
		}
		return 1;
	}
	return 1;
}

//NPC Bus
CMD:look(playerid, params[])
{
		if(!IsPlayerInRangeOfPoint(playerid, 10, 2021.9390,2241.9487,2103.9536))
		{
			SendClientMessage(playerid, COLOR_RED, "You are not inside a bus");
			return 1;
		}
        GetPlayerPos(playerid, Playerx[playerid], Playery[playerid], Playerz[playerid]);
		GetPlayerFacingAngle(playerid, Playera[playerid]);
		PlayerSkin[playerid] = GetPlayerSkin(playerid);
        AC_BS_SetPlayerInterior(playerid, 0);
        AC_BS_SetPlayerVirtualWorld(playerid, 0);
        TogglePlayerSpectating(playerid, 1);
		if(BusID[playerid] == 1)
		{
            PlayerSpectateVehicle(playerid, NPCBedjo);
        }
        else
        {
            PlayerSpectateVehicle(playerid, NPCSanusi);
        }
        SetTimerEx("ResetView", 2000, 0, "d", playerid);
		return 1;
}
CMD:paytoll(playerid, params[])
{
	if(GetPlayerCash(playerid) >= 25)
 	{
	if(IsPlayerInRangeOfPoint(playerid, 8, 35.5887, -1521.9341, 6.1021))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			MoveDynamicObject(paytoll1, 35.5887, -1529.0574, 6.1021, 2);
			SetTimer("ptoll1", 4000, 0);
			GivePlayerCash(playerid, -25);
			GameTextForPlayer(playerid, "Selamat Jalan", 2000, 1);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 8, 35.6054, -1538.1528, 6.1021))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			MoveDynamicObject(paytoll2, 35.6054, -1530.0000, 6.1021, 2);
			SetTimer("ptoll2", 4000, 0);
			GivePlayerCash(playerid, -25);
			GameTextForPlayer(playerid, "Selamat Jalan", 2000, 1);
		}
	}
	}
	return 1;
}

forward ptoll1();
public ptoll1()
{
	MoveDynamicObject(paytoll1, 35.5887, -1521.9341, 6.1021, 2);
	return 1;
}

forward ptoll2();
public ptoll2()
{
	MoveDynamicObject(paytoll2, 35.6253, -1538.1544, 6.1021, 2);
	return 1;
}

/*forward aparkrs1();
public aparkrs1()
{
	MoveDynamicObject(parkrs1, 1218.20508, -1347.74988, 15.94240, 2);
	return 1;
}

forward aparkrs2();
public aparkrs2()
{
	MoveDynamicObject(parkrs2, 1216.4377, -1319.2950, 15.9419, 2);
	return 1;
}*/


CMD:createrent(playerid, params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_RED, "Anda tidak memiliki ijin untuk menggunakan command tersebut");
	for(new idx=1; idx<MAX_RENT; idx++)
	{
	    if(!RentInfo[idx][rPosX])
	    {
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
	  		RentInfo[idx][rPosX] = X;
			RentInfo[idx][rPosY] = Y;
			RentInfo[idx][rPosZ] = Z;
			RentInfo[idx][rSpawnX] = X;
			RentInfo[idx][rSpawnY] = Y;
			RentInfo[idx][rSpawnZ] = Z;
			RentInfo[idx][rAngle] = 0;
			RentInfo[idx][rVehicle1] = 462;
			RentInfo[idx][rVehicle2] = 462;
			RentInfo[idx][rCost1] = 1500;
			RentInfo[idx][rCost2] = 3000;
			RentInfo[idx][rCost3] = 4500;
			RentInfo[idx][rCost4] = 1500;
			RentInfo[idx][rCost5] = 3000;
			RentInfo[idx][rCost6] = 4500;
	  		RentInfo[idx][rPickupID] = CreateDynamicPickup(1239, 1, X, Y, Z, 0);
			format(String, sizeof(String), "rental id: [%d]\n'/rentveh' untuk menyewa kendaraan\n'/unrentveh' untuk mengembalikan kendaraan", idx);
			rent[idx] = CreateDynamic3DTextLabel(String, COLOR_WHITE, RentInfo[idx][rPosX], RentInfo[idx][rPosY], RentInfo[idx][rPosZ], 10);
			format(String, sizeof(String), "AdmWarn: %s telah membuat Rent ID %d.", GetName(playerid), idx);
			ABroadCast(COLOR_DARKRED, String, 4);
			idx = MAX_RENT;
			SaveRent();
		}
	}
	return 1;
}

CMD:deleterent(playerid, params[])
{
	new String[10000], idx;
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_RED, "Anda tidak memiliki ijin untuk menggunakan command tersebut");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deleterent [rentid]");
	if(!RentInfo[idx][rPosX]) return SendClientMessage(playerid, COLOR_RED, "Rent ID Salah");
	RentInfo[idx][rPosX] = 0;
	RentInfo[idx][rPosY] = 0;
	RentInfo[idx][rPosZ] = 0;
	RentInfo[idx][rVehicle1] = 0;
	RentInfo[idx][rVehicle2] = 0;
	RentInfo[idx][rCost1] = 0;
	RentInfo[idx][rCost2] = 0;
	RentInfo[idx][rCost3] = 0;
	RentInfo[idx][rCost4] = 0;
	RentInfo[idx][rCost5] = 0;
	RentInfo[idx][rCost6] = 0;
	DestroyDynamic3DTextLabel(rent[idx]);
	DestroyDynamicPickup(RentInfo[idx][rPickupID]);
	format(String, sizeof(String), "AdmWarn: %s has deleted Rent ID %d.", GetName(playerid), idx);
    ABroadCast(COLOR_DARKRED, String, 2);
	SaveRent();
	return 1;
}

CMD:editrent(playerid, params[])
{
	new String[10000], idx, slot, vehid, cost, id;
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_RED, "Anda tidak memiliki ijin untuk menggunakan command tersebut");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editrent [Opsi]");
		SendClientMessage(playerid, COLOR_WHITE, "vehicle | cost | spawn");
		return 1;
	}
	if(!strcmp(params, "spawn", true, 5))
	{
	    if(sscanf(params, "s[32]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editrent spawn [ ID Rent ]");
		if(!RentInfo[idx][rPosX]) return SendClientMessage(playerid, COLOR_RED, "Rent ID Salah");
		prSpawnID[playerid] = idx;
		prSpawn[playerid] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "Berdirilah di tempat spawn yang anda inginkan. Lalu tekan (LMB) untuk menyimpannya");
		return 1;
	}
	if(!strcmp(params, "vehicle", true, 7))
	{
	    if(sscanf(params, "s[32]iii", params, idx, slot, vehid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editrent vehicle [ ID Rent ] [ Slot 1 & 2] [ Vehicle ID ]");
		if(!RentInfo[idx][rPosX]) return SendClientMessage(playerid, COLOR_RED, "Rent ID Salah");
		if(slot == 1)
		{
		    RentInfo[idx][rVehicle1] = vehid;
		}
		if(slot == 2)
		{
		    RentInfo[idx][rVehicle2] = vehid;
		}
		format(String, sizeof(String), "Anda sudah men-set kendaraan rental {FFFFFF}ID: %d", idx);
		SendClientMessage(playerid, COLOR_LIGHTRED, String);
		SaveRent();
	}
	if(!strcmp(params, "cost", true, 4))
	{
	    if(sscanf(params, "s[32]iii", params, idx, id, cost)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editrent cost [ ID Rent ] [ Slot Biaya 1-6 ][ Cost Rent ]");
		if(!RentInfo[idx][rPosX]) return SendClientMessage(playerid, COLOR_RED, "Rent ID Salah");
		if(id == 1)
		{
			RentInfo[idx][rCost1] = cost;
		}
  		if(id == 2)
		{
			RentInfo[idx][rCost2] = cost;
		}
		if(id == 3)
		{
			RentInfo[idx][rCost3] = cost;
		}
		if(id == 4)
		{
			RentInfo[idx][rCost4] = cost;
		}
		if(id == 5)
		{
			RentInfo[idx][rCost5] = cost;
		}
		if(id == 6)
		{
			RentInfo[idx][rCost6] = cost;
		}
		format(String, sizeof(String), "Anda telah men-set Biaya Rental {FFFFFF}ID: %d", idx);
		SendClientMessage(playerid, COLOR_LIGHTRED, String);
		SaveRent();
	}
	return 1;
}
CMD:rentveh(playerid, params[])
{
	new String[255];
	for(new idx = 1; idx < sizeof(RentInfo); idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10, RentInfo[idx][rPosX], RentInfo[idx][rPosY], RentInfo[idx][rPosZ]))
		{
		    if(PlayerRentInfo[playerid][prVehicleRent] == 1) return SendClientMessage(playerid, COLOR_GREY, "Anda sudah menyewa sebuah kendaraan.");
			format(String, sizeof(String), "%s\n%s", VehicleName[RentInfo[idx][rVehicle1] - 400], VehicleName[RentInfo[idx][rVehicle2] - 400]);
			ShowPlayerDialog(playerid, RENTVEH, DIALOG_STYLE_LIST, "Kendaraan Rental", String, "Pilih", "Engga");
			pRent[playerid] = idx;
			return 1;
		}
	}
	SendClientMessageEx(playerid,COLOR_WHITE,"Anda tidak berada di tempat Rental.");
	return 1;
}
CMD:unrentveh(playerid, params[])
{
	for(new idx = 1; idx < sizeof(RentInfo); idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10, RentInfo[idx][rPosX], RentInfo[idx][rPosY], RentInfo[idx][rPosZ]))
		{
		    if(PlayerRentInfo[playerid][prVehicleRent] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda belum menyewa sebuah kendaraan.");
			PlayerRentInfo[playerid][prVehicleRent] = 0;
			PlayerRentInfo[playerid][prRentTime] = 0;
			PlayerRentInfo[playerid][prTax] = 0;
			RemovePlayerFromVehicle(playerid);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			AC_BS_SetPlayerPos(playerid, X, Y, Z+2);
			DestroyPlayerRent(playerid);
			return 1;
		}
	}
	SendClientMessageEx(playerid,COLOR_WHITE,"Anda tidak berada di tempat Rental.");
	return 1;
}

CMD:renttime(playerid, params[])
{
	new String[255], time = PlayerRentInfo[playerid][prRentTime]/60;
	if(PlayerRentInfo[playerid][prVehicleRent] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda belum menyewa sebuah kendaraan.");
	format(String, sizeof(String), "Waktu Rental anda tersisa {FFFFFF}%d {FFFF00}menit.", time);
	SendClientMessage(playerid, COLOR_YELLOW, String);
	return 1;
}
CMD:engine(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)//Car Engine
	{
		new engine,lights,alarm,doors,bonnet,boot,objective,vehicleid;
		vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON)
		{
			SetVehicleEngine(vehicleid, playerid);
		}
		else if((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "ENGINE: Anda mencoba untuk menghidupkan Mesin.");
			SetTimerEx("SetVehicleEngine", 3000, 0, "dd",  vehicleid, playerid);
		}
	}
	return 1;
}
//vcontrol
CMD:vcontrol(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		ShowPlayerDialog(playerid, VEH_MENU, DIALOG_STYLE_LIST ,"Vehicle Menu","Car Engine\nCar Hood\nCar Trunk\nCar Light\nCar Fuel","Select","Cancel");
    }
	return 1;
}
//Plate
CMD:setplate( playerid, params[] )
{
	if(PlayerInfo[playerid][pAdmin] < 9) return SendClientMessage( playerid, -1, "Error: Anda bukan Polisi atau Admin." );

	new szPlate[32], iVictim, ivVictim;//iVictim = id Player yang mau diubah platenya, ivVictim = id dynamic mobil player yang mau diubah plate
	if( sscanf( params, "uds[32]", iVictim, ivVictim, szPlate ) || strlen( szPlate ) > 10)
	    return SendClientMessage( playerid, -1, "Syntax: /setplate [playerid] [vehID] [plate(1-10 letters)]" );
	else if( !IsPlayerConnected( iVictim ) )
	    return SendClientMessage( playerid, -1, "Error: That player isn't connected." );
	/*else if( !IsPlayerInAnyVehicle( iVictim ) )
	    return SendClientMessage( playerid, -1, "Error: That player isn't in a vehicle." );*/
	else
	{
		new pvid = -1;
		for( new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			if(PlayerVehicleInfo[iVictim][d][pvId] != INVALID_PLAYER_VEHICLE_ID)
			{
				if(PlayerVehicleInfo[iVictim][d][pvId] == ivVictim)
				{
					pvid = d;
					break;
				}
			}
		}
		if(pvid == -1) return SendClientMessageEx(playerid,COLOR_GREY,"Veh's ID doesn't belong to player's ID");
		else
		{
			new szString[10000] ;
			//format( v_Plate[ivVictim], 32, "%s", szPlate );
			SetVehicleNumberPlate( ivVictim, szPlate );

			format(PlayerVehicleInfo[iVictim][pvid][pvNumberPlate], 32, "%s", szPlate);

			format( szString, 128, "You've set %s's vehicle plate to %s.",GetPlayerNameEx(iVictim), szPlate );
			SendClientMessage( playerid, -1, szString );
			format( szString, 128, "An administrator set your vehicle plate to %s.", szPlate );
			SendClientMessage( iVictim, -1, szString );
		}
	}
	return 1;
}
CMD:car(playerid, params[]) {
	return cmd_vcontrol(playerid, params);
}
CMD:hhc(playerid, params[]) {
	return cmd_hhcheck(playerid, params);
}

CMD:hhcheck(playerid, params[])
{
	new String[10000], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hhcheck [playerid]");

	if(IsPlayerConnected(giveplayerid))
	{
  if(PlayerInfo[playerid][pAdmin] >= 1)
		{
		    if(HHcheckFloats[giveplayerid][0] != 0)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "That player is currently being checked for health hacks!");
		        return 1;
		    }
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && giveplayerid != playerid)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}
   			if(playerTabbed[giveplayerid] != 0)
   			{
      			SendClientMessageEx(playerid, COLOR_WHITE, "That player is currently alt-tabbed!");
		        return 1;
   			}
			if(HHcheckUsed != 0)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "The health hack check is being used by another admin, please try again in a moment!");
		        return 1;
		    }

   			HHcheckUsed = 1;

        	format(String, sizeof(String), "{FF6347}AdmCmd: %s has initiated a health hack check on %s.", GetName(playerid), GetName(giveplayerid));
        	ABroadCast(COLOR_YELLOW, String, 1);

  			format(String, sizeof(String), "Checking %s for health hacks, please wait....", GetName(giveplayerid));
		    SendClientMessageEx(playerid, COLOR_YELLOW, String);
			GetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
			GetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);
		    AC_BS_SetPlayerHealth(giveplayerid, 100);
		    PlayerInfo[giveplayerid][pHealth] = 100.0;
		    AC_BS_SetPlayerArmour(giveplayerid, 0);
            PlayerInfo[giveplayerid][pArmor] = 0.0;
			AC_BS_SetPlayerPos(giveplayerid, -1400.994873, 106.899650, 1032.273437);
			SetPlayerFacingAngle(giveplayerid, 90.66);
			CreateExplosion(-1400.994873, 106.899650 , 1032.273437, 8, 20);

			SetTimerEx("HealthHackCheck", 1250, 0, "dd", playerid, giveplayerid);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You don't have the privilege to use this command!");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

forward HealthHackCheck(playerid, giveplayerid);
public HealthHackCheck(playerid, giveplayerid)
{
	if(IsPlayerNPC(playerid)) return 1;//NPC : Checks if the player is an NPC.

	new String[10000];
 	if(giveplayerid == INVALID_PLAYER_ID)
    {
        SendClientMessageEx(playerid, COLOR_YELLOW, "The health hack check result could not be made, the player logged off.");
        HHcheckUsed = 0;
        return 1;
    }
	if(playerTabbed[giveplayerid] != 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "The health hack check result could not be made, the player alt-tabbed.");

		AC_BS_SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
		PlayerInfo[giveplayerid][pHealth] = HHcheckFloats[giveplayerid][0];
		AC_BS_SetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
		PlayerInfo[giveplayerid][pArmor] = HHcheckFloats[giveplayerid][1];
		AC_BS_SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetCameraBehindPlayer(giveplayerid);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

		HHcheckUsed = 0;
  		return 1;
	}
    if(!IsPlayerInRangeOfPoint(giveplayerid,20,-1400.994873, 106.899650, 1032.273437))
    {
        SendClientMessageEx(playerid, COLOR_WHITE, "The health hack check result could not be made, the player was probably desynced/lagging.");

		AC_BS_SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
		PlayerInfo[giveplayerid][pHealth] = HHcheckFloats[giveplayerid][0];
		AC_BS_SetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
		PlayerInfo[giveplayerid][pArmor] = HHcheckFloats[giveplayerid][1];
		AC_BS_SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetCameraBehindPlayer(giveplayerid);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

        HHcheckUsed = 0;
		return 1;
    }

    new Float:health;
    GetPlayerHealth(giveplayerid, health);
    if(health == 100 && PlayerInfo[giveplayerid][pHealth] == 100)
	{
        SendClientMessageEx(playerid, COLOR_GREEN, "____________________ HEALTH HACK CHECK RESULT_______________");
        format(String, sizeof(String), "The health hack check on %s was {00F70C}positive{FFFFFF}. The player may be health hacking.", GetName(giveplayerid));
        SendClientMessageEx(playerid, COLOR_WHITE, String);
        SendClientMessageEx(playerid, COLOR_WHITE, "Health before check: 100.0");
        format(String, sizeof(String), "Health after check: %.1f", health);
        SendClientMessageEx(playerid, COLOR_WHITE, String);
        SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________________________________");
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GREEN, "____________________ HEALTH HACK CHECK RESULT_______________");
        format(String, sizeof(String), "The health hack check on %s was {FF0606}negative{FFFFFF}. The player was not health hacking.", GetName(giveplayerid));
        SendClientMessageEx(playerid, COLOR_WHITE, String);
        SendClientMessageEx(playerid, COLOR_WHITE, "Health before check: 100.0");
        format(String, sizeof(String), "Health after check: %.1f", health);
        SendClientMessageEx(playerid, COLOR_WHITE, String);
        SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________________________________");
    }

	AC_BS_SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
	PlayerInfo[giveplayerid][pHealth] = HHcheckFloats[giveplayerid][0];
	AC_BS_SetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
	PlayerInfo[giveplayerid][pArmor] = HHcheckFloats[giveplayerid][1];
	AC_BS_SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
	SetCameraBehindPlayer(giveplayerid);

  	for(new i = 0; i < 6; i++)
	{
		HHcheckFloats[giveplayerid][i] = 0;
	}
	HHcheckVW[giveplayerid] = 0;
	HHcheckInt[giveplayerid] = 0;

    HHcheckUsed = 0;
    return 1;
}

CMD:id(playerid, params[])
{
	new String[10000], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /id [playerid]");

	if(IsPlayerConnected(giveplayerid))
	{
		format(String, sizeof(String), "[ID] ID:%d | Name: %s", giveplayerid, GetName(giveplayerid));
		SendClientMessageEx(playerid, COLOR_WHITE, String);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	return 1;
}

CMD:spawnweapon(playerid, params[])
{
	new playerb, gunid, ammo, String[10000], Stringlog[128];
   	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 11) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(PlayerInfo[playerid][pConnectTime] < 2) return ShowDescriptionText(playerid, "HARUS BERMAIN SELAMA 2JAM");
    //if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "uii", playerb, gunid, ammo))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /spawnweapon [playerid] [gunid] [ammo]");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_GREY, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
		SendClientMessage(playerid, COLOR_GREY, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
		SendClientMessage(playerid, COLOR_GREY, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
		SendClientMessage(playerid, COLOR_GREY, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
		SendClientMessage(playerid, COLOR_GREY, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
		SendClientMessage(playerid, COLOR_GREY, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

		return 1;
	}
	if(!IsPlayerConnected(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(gunid < 0 || gunid > 46 || gunid == 19 || gunid == 20 || gunid == 21) return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon id.");
	givePlayerValidWeapon(playerb, gunid, ammo);
	format(String, sizeof(String), " Administrator %s has given you a %s with %d ammo.", NORPN(playerid), RWN(gunid), ammo);
	SendClientMessage(playerb, COLOR_WHITE, String);
	// Givegun Log
	format(Stringlog, sizeof(Stringlog), "AdmCmd: %s has given %s gun (%s) with %d ammo.", NORPN(playerid), NORPN(playerb), RWN(gunid), ammo);
	SendAdminMessage(COLOR_LIGHTRED, Stringlog);
	Log("logs/spawnweapon.log", Stringlog);
	return 1;
}
CMD:jetpack(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
	}else{
	SendClientMessage(playerid,COLOR_GRAD1,"ERROR: You don't have the privilege to use this command!");
	}
    return 1;
}
CMD:regeneration(playerid, params[])
{
	if(PlayerInfo[playerid][pAdminDuty] == 1)
	{
	    new String[10000];
	    PlayerInfo[playerid][pHunger] = 100;
	    PlayerInfo[playerid][pBladder] = 100;
	    PlayerInfo[playerid][pEnergi] = 100;
	    PlayerInfo[playerid][pCondition] = 100;
	    format(String, sizeof(String), "%s has used '/regeneration' for regeneration", GetName(playerid));
	    Log("logs/mood.log", String);
	}
	return 1;
}
CMD:sethp(playerid, params[])
{
    new String[10000], playa, health;
    if(sscanf(params, "ud", playa, health))
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /sethp [playerid] [health]");
        return 1;
    }
    if (PlayerInfo[playerid][pAdmin] >= 1) {
        if(IsPlayerConnected(playa)) {
            if(playa != INVALID_PLAYER_ID)
			{
                AC_BS_SetPlayerHealth(playa, health);
                PlayerInfo[playa][pHealth] = health;
                format(String, sizeof(String), "You have set %s's health to %d.", GetPlayerNameEx(playa), health);
                SendClientMessageEx(playerid, COLOR_WHITE, String);
            }
        }
        else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
    }
    return 1;
}
//===========================COMmANDS BY YARRUM ABOVE THIS LINE ^^^^^^^^^^^^^^^^^^^^^^^^^^^
CMD:setarmor(playerid, params[])
{
    new String[10000], playa, health;
    if(sscanf(params, "ud", playa, health))
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /setarmor [playerid] [armor]");
        return 1;
    }
    if (PlayerInfo[playerid][pAdmin] >= 10)
	{
        if(IsPlayerConnected(playa))
		{
            if(playa != INVALID_PLAYER_ID)
			{
                AC_BS_SetPlayerArmour(playa, health);
                format(String, sizeof(String), "You have set %s's armor to %d.", GetPlayerNameEx(playa), health);
                SendClientMessageEx(playerid, COLOR_WHITE, String);
            }
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
    }
    return 1;
}

CMD:setarmorall(playerid, params[])
{
    new armor;
    if(sscanf(params, "d", armor)) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /setarmorall [armor]");
        return 1;
    }

    if (PlayerInfo[playerid][pAdmin] >= 10) {
        foreach(Player, i) {
            AC_BS_SetPlayerArmour(i, armor);
        }
    }

    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
    }
    return 1;
}
CMD:kickall(playerid, params[])
{
	new String[10000];
    if (PlayerInfo[playerid][pAdmin] >= 2) {
        foreach(Player, i) {
            format(String, sizeof(String), "AdmCmd: %s has been kicked by %s",PlayerInfo[i][pNormalName], PlayerInfo[playerid][pAdminName]);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SendClientMessageToAllEx(COLOR_LIGHTRED, "Reason: untuk menghindari Bug");
            SetTimerEx("KickT",100,0,"i",i);
        }
    }

    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
    }
    return 1;
}
//Businesess BuyPoint
CMD:createbuy(playerid, params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Unknown command,Please use /help to see available Commands.");
 	for(new idx=1; idx<MAX_BUYPOINT; idx++)
	{
	    if(!BuyPoint[idx][bbPos][0])
	    {
	        new Float:X, Float:Y, Float:Z;
	        GetPlayerPos(playerid, X, Y, Z);
	        BuyPoint[idx][bbPos][0] = X;
	        BuyPoint[idx][bbPos][1] = Y;
	        BuyPoint[idx][bbPos][2] = Z;
	        BuyPoint[idx][bbPickup] = CreateDynamicPickup(1274, 23, X, Y, Z, -1);
	        format(String, 128, "[ID:%d]\n{00FF00}Business buy point\n{FFFFFF}use '/buy' here", idx);
			BuyPoint[idx][bbText] = CreateStreamed3DTextLabel(String, COLOR_ARWIN, X, Y, Z, 5.0, 0, 0);
			format(String, sizeof(String), "AdmWarn: %s has created Buypoint ID %d.", PlayerInfo[playerid][pAdminName], idx);
		    ABroadCast(COLOR_LIGHTRED, String, 1);
			idx = MAX_BUYPOINT;
			SaveBuy();
		}
	}
	return 1;
}

CMD:editbuy(playerid, params[])
{
	new id, String[10000];
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Command tidak ada, Gunakan /help untuk melihat daftar Command.");
	if(sscanf(params, "s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editbuy [Opsi]");
	    SendClientMessage(playerid, COLOR_WHITE, "Opsi: Posisi");
	    return 1;
	}
	if(!strcmp(params, "posisi", true, 6))
	{
	    if(sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "/editbuy posisi [id]");
		if(!BuyPoint[id][bbPos][0])
		{
			SendClientMessage(playerid, COLOR_GREY, "invalid BuyPoint id");
			return 1;
		}
		new Float:X, Float:Y, Float:Z;
  		GetPlayerPos(playerid, X, Y, Z);
		DestroyDynamicPickup(BuyPoint[id][bbPickup]);
		DestroyDynamic3DTextLabel(BuyPoint[id][bbText]);
		BuyPoint[id][bbPickup] = CreateDynamicPickup(1274, 23, X, Y, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 150.0);
  		format(String, 128, "[ID:%d]\n{00FF00}Business buy point\n{FFFFFF}use '/buy' here", id);
		BuyPoint[id][bbText] = CreateStreamed3DTextLabel(String, COLOR_ARWIN, X, Y, Z, 5, -1, 0);
		GetPlayerPos(playerid, BuyPoint[id][bbPos][0], BuyPoint[id][bbPos][1], BuyPoint[id][bbPos][2]);
		SaveBuy();
	}
	return 1;
}

CMD:deletebuy(playerid, params[])
{
	new idx;
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Command tidak ada, Gunakan /help untuk melihat daftar Command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletebuy [id]");
	if(!BuyPoint[idx][bbPos][0])
	{
		SendClientMessage(playerid, COLOR_GREY, "invalid BuyPoint id");
		return 1;
	}
	BuyPoint[idx][bbPos][0] = 0.0;
 	BuyPoint[idx][bbPos][1] = 0.0;
  	BuyPoint[idx][bbPos][2] = 0.0;
  	DestroyDynamicPickup(BuyPoint[idx][bbPickup]);
	DestroyDynamic3DTextLabel(BuyPoint[idx][bbText]);
	SaveBuy();
	return 1;
}
//ModShop
CMD:createmod(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Unknown command,Please use /help to see available Commands.");
	new String[10000];
 	for(new idx=1; idx<MAX_MOD; idx++)
	{
	    if(!Mod[idx][mPosX])
	    {
	        new Float:X, Float:Y, Float:Z;
	        GetPlayerPos(playerid, X, Y, Z);
	        Mod[idx][mPosX] = X;
	        Mod[idx][mPosY] = Y;
	        Mod[idx][mPosZ] = Z;
			format(String, sizeof(String), "AdmWarn: %s has created ModShop ID %d.", GetName(playerid), idx);
		    ABroadCast(COLOR_DARKRED, String, 2);
			idx = MAX_MOD;
			SaveMod();
		}
	}
	return 1;
}

CMD:editmod(playerid, params[])
{
	new String[512], id;
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Command tidak ada, Gunakan /help untuk melihat daftar Command.");
	if(sscanf(params, "s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editmod [Opsi]");
	    SendClientMessage(playerid, COLOR_WHITE, "Opsi: Posisi");
	    return 1;
	}
	if(!strcmp(params, "posisi", true, 6))
	{
	    if(sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "/editmod posisi [ID ModShop]");
		if(!Mod[id][mPosX])
		{
			SendClientMessage(playerid, COLOR_GREY, "ID WorkShop Salah");
			return 1;
		}
		GetPlayerPos(playerid, Mod[id][mPosX], Mod[id][mPosY], Mod[id][mPosZ]);
		format(String, 128, "Anda telah mengganti Posisi ModShop ID: %d", id);
		SendClientMessage(playerid, COLOR_LIGHTRED, String);
		SaveMod();
	}
	return 1;
}

CMD:deletemod(playerid, params[])
{
	new idx, String[10000];
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Command tidak ada, Gunakan /help untuk melihat daftar Command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletemod [ID ModShop]");
	if(!Mod[idx][mPosX])
	{
		SendClientMessage(playerid, COLOR_GREY, "ID WorkShop Salah");
		return 1;
	}
	Mod[idx][mPosX] = 0.0;
	Mod[idx][mPosY] = 0.0;
	Mod[idx][mPosZ] = 0.0;
	format(String, sizeof(String), "AdmWarn: Admin %s telah menghapus ModShop ID: %d", GetName(playerid), idx);
	ABroadCast(COLOR_DARKRED, String, 2);
	SaveMod();
	return 1;
}
CMD:mused(playerid, params[])
{
	new String[1024];
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used ModShop]:");
	for(new idx=1; idx<MAX_MOD; idx++)
	{
	    if(Mod[idx][mPosX])
	    {
			new LuxZone[MAX_ZONE_NAME];
			GetPlayer2DZone(playerid, LuxZone, MAX_ZONE_NAME);
			format(String, sizeof(String), "ID: %d | Daerah: %s", idx, LuxZone);
			SendClientMessage(playerid, COLOR_ORANGE, String);
	    }
	}
	return 1;
}
CMD:gotomodshop(playerid, params[])
{
    new idx, String[10000];
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotomodshop [msid]");
	if(!Mod[idx][mPosX]) return SendClientMessage(playerid, COLOR_GREY, "Invalid ModShop id.");
	AC_BS_SetPlayerPos(playerid, Mod[idx][mPosX], Mod[idx][mPosY], Mod[idx][mPosZ]);
	format(String, sizeof(String), " You have teleported to ModShop ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, String);
	return 1;
}

//WorkShop
CMD:gotows(playerid, params[])
{
    new idx, String[10000];
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotows [wsid]");
	if(!WsInfo[idx][wsPosX]) return SendClientMessage(playerid, COLOR_GREY, "Invalid WorkShop id.");
	AC_BS_SetPlayerPos(playerid, WsInfo[idx][wsPosX],WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ]);
	format(String, sizeof(String), " You have teleported to WorkShop ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, String);
	return 1;
}

CMD:clearws(playerid, params[])
{
	new id, String[256];
	if( sscanf( params, "u", id) )
	{
	    if(PlayerInfo[playerid][pAdmin] > 7)
	    {
		    SendClientMessage( playerid, COLOR_WHITE, "USAGE: /clearws [PlayerID/PartOfName]" );
		}
	}
	else
	{
	    if(PlayerInfo[playerid][pAdmin] > 7)
	    {
			PlayerInfo[id][pWS] = 0;
			PlayerInfo[id][pWSJob] = 0;
			PlayerInfo[id][pWSid] = 0;
			PlayerInfo[id][pWSBos] = 0;
 	    	format( String, sizeof( String ), "Anda telah men-set stats WorkShop %s.",GetName(id));
  	    	SendClientMessage( playerid, COLOR_YELLOW, String);
		}
	}
	return 1;
}
CMD:wsused(playerid, params[])
{
	new String[1024];
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used WorkShop]:");
	for(new idx = 1; idx < sizeof(WsInfo); idx++)
	{
	    if(WsInfo[idx][wsPosX])
	    {
			format(String, sizeof(String), "ID: %d | Owner: %s", idx, WsInfo[idx][wsOwner]);
			SendClientMessage(playerid, COLOR_ORANGE, String);
	    }
	}
	return 1;
}
/*CMD:createws(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 10) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Unknown command,Please use /help to see available Commands.");
	new String[1024];
	for(new idx = 1; idx < sizeof(WsInfo); idx++)
	{
	    if(!WsInfo[idx][wsPosX])
	    {
	        new Float:X, Float:Y, Float:Z;
	        GetPlayerPos(playerid, X, Y, Z);
	        WsInfo[idx][wsPosX] = X;
	        WsInfo[idx][wsPosY] = Y;
			WsInfo[idx][wsPosZ] = Z;
			format(WsInfo[idx][wsOwner], 32, "Nothing");
			WsInfo[idx][wsPrice] = 3000000;
			WsInfo[idx][wsPickup] = CreatePickup(1239, 23, X, Y, Z, 0);
			format(String, sizeof(String), "[id:%d]\nThis workshop is for sale\nPrice: $%s\n'/buyworkshop' for purchase this workshop", idx, FormatMoney(WsInfo[idx][wsPrice]));
			WsInfo[idx][wsText] = CreateStreamed3DTextLabel(String, COLOR_WHITE, X, Y, Z, 5, 0, 0);
			format(String, sizeof(String), "AdmWarn: %s has created WorkShop ID %d.", GetName(playerid), idx);
		    ABroadCast(COLOR_DARKRED, String, 2);
			idx = MAX_WORKSHOP;
			SaveWS(idx);
		}
	}
	return 1;
}*/
CMD:setws(playerid, params[])
{
		if(PlayerInfo[playerid][pAdmin] < 11) { SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Unknown command,Please use /help to see available Commands."); return 1; }
		new String[10000];
	 	new NewWorkshopID = SpawnedWS+1;
	  	if(NewWorkshopID >= MAX_WORKSHOP)
	    {
	    	SendClientMessage( playerid, COLOR_WHITE, "Too many businesses are currently spawned!");
	    }
	    format( String, sizeof( String ), "Businesses/Workshop_%d.ini", NewWorkshopID);
	    if(dini_Exists(String))
        {
			SpawnedWS++;
         	format( String, sizeof( String ), "Workshop (ID: %d) already exist!", NewWorkshopID);
           	SendClientMessage( playerid, COLOR_GREY, String);
         	SendClientMessage( playerid, COLOR_YELLOW, "Please try again by typing /setws complete" );
   		}
        else
       	{
	  		WsInfo[NewWorkshopID][wsPosX] = 0;
			WsInfo[NewWorkshopID][wsPosY] = 0;
			WsInfo[NewWorkshopID][wsPosZ] = 0;
			WsInfo[NewWorkshopID][wsPrice] = 3000000;
			WsInfo[NewWorkshopID][wsOwned] = 0;
			WsInfo[NewWorkshopID][wsStatus] = 0;
			format(WsInfo[NewWorkshopID][wsOwner], 32, "Nothing");
			WsInfo[NewWorkshopID][wsPickup] = CreateDynamicPickup(1239, 23, WsInfo[NewWorkshopID][wsPosX], WsInfo[NewWorkshopID][wsPosY], WsInfo[NewWorkshopID][wsPosZ], 0);
			dini_Create(String);
			dini_IntSet(String, "Owned", WsInfo[NewWorkshopID][wsOwned]);
	     	dini_Set(String, "Owner", WsInfo[NewWorkshopID][wsOwner]);
			dini_Set(String, "Name", WsInfo[NewWorkshopID][wsName]);
			dini_FloatSet(String, "PosX", WsInfo[NewWorkshopID][wsPosX]);
			dini_FloatSet(String, "PosY", WsInfo[NewWorkshopID][wsPosY]);
			dini_FloatSet(String, "PosZ", WsInfo[NewWorkshopID][wsPosZ]);
			dini_IntSet(String, "Status", WsInfo[NewWorkshopID][wsStatus]);
			dini_IntSet(String, "Price", WsInfo[NewWorkshopID][wsPrice]);
			dini_IntSet(String, "SafeMoney", WsInfo[NewWorkshopID][wsSafeMoney]);
			dini_IntSet(String, "Component", WsInfo[NewWorkshopID][wsComponent]);
			SpawnedWS++;
			format(String, sizeof(String), "[id:%d]\nThis workshop is for sale\nPrice: $%s\n'/buyworkshop' for purchase this workshop", NewWorkshopID, FormatMoney(WsInfo[NewWorkshopID][wsPrice]));
			WsInfo[NewWorkshopID][wsText] = CreateStreamed3DTextLabel(String, COLOR_WHITE, WsInfo[NewWorkshopID][wsPosX], WsInfo[NewWorkshopID][wsPosY], WsInfo[NewWorkshopID][wsPosZ], 5, 0, 0);
			format( String, sizeof( String ), "Please now proceed to use /editws to setup Workshop (ID: %d).", NewWorkshopID);
		    SendClientMessage( playerid, COLOR_WHITE, String);
		}
	    return 1;
}
CMD:ws(playerid, params[]) {
	return cmd_workshop(playerid, params);
}
CMD:workshop(playerid, params[])
{
	new String[10000], idx = PlayerInfo[playerid][pWSBos];
    if(IsPlayerInRangeOfPoint(playerid, 10.0, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ]))
    {
        if(PlayerInfo[playerid][pWS] != 0)
        {
		    format(String, sizeof(String), "Toggle Garage\nBoard Text\nStore Component\nGet Component\nStore Cash\nWithdrawn Cash");
		}
		else
		{
		    format(String, sizeof(String), "Toggle Garage\nBoard Text\nStore Component\nGet Component\nStore Cash");
		}
		ShowPlayerDialog(playerid, WORKSHOP, DIALOG_STYLE_LIST, "Workshop Menu", String, "Select", "Cancel");
	}
	return 1;
}
/*CMD:buyworkshop(playerid, params[])
{
	new done;
	if(PlayerInfo[playerid][pWS] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Anda sudah memiliki WorkShop");
	for(new idx = 1; idx < sizeof(WsInfo); idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ]))
		{
			if(!strcmp("Nothing", WsInfo[idx][wsOwner], false))
			{
			    if(GetPlayerCash(playerid) < WsInfo[idx][wsPrice]) return SendClientMessage(playerid, COLOR_GREY, "Uang anda kurang untuk membeli WorkShop ini");
			    GivePlayerCash(playerid, -WsInfo[idx][wsPrice]);
			    PlayerInfo[playerid][pWS] = 1;
			    PlayerInfo[playerid][pWSJob] = 1;
			    PlayerInfo[playerid][pWSid] = idx;
			    PlayerInfo[playerid][pWSBos] = idx;
    			new sendername[MAX_PLAYER_NAME];
    			GetPlayerName(playerid, sendername, sizeof(sendername));
				format(WsInfo[idx][wsOwner], 32, "%s", sendername);
			    format(WsInfo[idx][wsName], 32, "Enterplay Gaming Roleplay");
			    DestroyDynamicPickup(WsInfo[idx][wsPickup]);
				DestroyDynamic3DTextLabel(WsInfo[idx][wsText]);
				SendClientMessage(playerid, COLOR_GREEN, " Selamat. Anda telah berhasil membeli WorkShop. '/wshelp'");
				SaveWS(idx);
				idx = MAX_WORKSHOP;
				done = 1;
			}
			if(idx == MAX_WORKSHOP-1 && !done)
			{
				SendClientMessage(playerid, COLOR_GREEN, " WorkShop ini sudah dimiliki seseorang");
			}
		}
		if(idx == MAX_WORKSHOP-1 && !done)
		{
			SendClientMessage(playerid, COLOR_GREEN, " Anda tidak di dekat WorkShop yang Dijual");
		}
	}
	return 1;
}*/
//BUYWORKSHOP
CMD:buyworkshop(playerid, params[])
{
	if(PlayerInfo[playerid][pWS] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Anda sudah memiliki WorkShop");
	for(new idx = 1; idx < MAX_WORKSHOP; idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ]))
		{
			if(WsInfo[idx][wsOwned] == 0)
			{
			    if(GetPlayerCash(playerid) < WsInfo[idx][wsPrice]) return SendClientMessage(playerid, COLOR_GREY, "Uang anda kurang untuk membeli WorkShop ini");
			    GivePlayerCash(playerid, -WsInfo[idx][wsPrice]);
			    PlayerInfo[playerid][pWS] = 1;
			    PlayerInfo[playerid][pWSJob] = 1;
			    PlayerInfo[playerid][pWSid] = idx;
			    PlayerInfo[playerid][pWSBos] = idx;
			    WsInfo[idx][wsOwned] = 1;
				format(WsInfo[idx][wsOwner], 32, "%s", PlayerInfo[playerid][pNormalName]);
			    format(WsInfo[idx][wsName], 32, "Enterplay Gaming Roleplay");
			    DestroyDynamicPickup(WsInfo[idx][wsPickup]);
				DestroyDynamic3DTextLabel(WsInfo[idx][wsText]);
				SendClientMessage(playerid, COLOR_GREEN, " Selamat. Anda telah berhasil membeli WorkShop. '/wshelp'");
    			SaveWS(idx);
			}
		}
	}
	return 1;
}

CMD:sellwstomarket(playerid, params[])
{
	new String[10000];
	new idx = PlayerInfo[playerid][pWSid];
	if(PlayerInfo[playerid][pWS] != 1) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki WorkShop.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellwstomarket [confirm]");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Anda akan mendapatkan 80 persen dari hasil penjualan");
		return 1;
	}
	if(!strcmp(params, "confirm", true))
	{
	    new done;
		if(IsPlayerInRangeOfPoint(playerid, 5, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ]))
		{
			GivePlayerCash(playerid, (80*WsInfo[idx][wsPrice])/100);
			ClearWS(idx);
			format(String, 128, "{FFFF00}Pemilik : {FFFFFF}%s\n{FFFF00}Price : {FFFFFF}%s{FFFF00}\nID: {FFFFFF}[%d]\n'/buyworkshop' untuk membeli Workshop", WsInfo[idx][wsOwner], FormatMoney(WsInfo[idx][wsPrice]), idx);
			UpdateDynamic3DTextLabelText(WsInfo[idx][wsText], COLOR_WHITE, String);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Selamat. Anda telah menjual WorkShop anda.");
			PlayerInfo[playerid][pWS] = 0;
			PlayerInfo[playerid][pWSJob] = 0;
			PlayerInfo[playerid][pWSid] = 0;
			PlayerInfo[playerid][pWSBos] = 0;
			SaveWS(idx);
			DestroyDynamicObject(WsInfo[idx][wsPapan]);
			done = 1;
		}
		if(!done)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Anda tidak berada di dekat WorkShop anda");
		    return 1;
		}
	}
	return 1;
}
CMD:sellmyws(playerid, params[])
{
	new String[10000], giveplayerid, harga[32], dollars, cents;
	new idx = PlayerInfo[playerid][pWSid], duit[32];
	if(PlayerInfo[playerid][pWS] != 1) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki WorkShop");
	if(IsPlayerInRangeOfPoint(playerid, 5, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ]))
	{
		if(sscanf(params, "us[32]", giveplayerid, harga)) return SendClientMessage(playerid, -1, "HINT: /sellmyws [ID/NamaPlayer] [Harga]");
        if(strfind(harga, ".", true) != -1)
        {
	 		sscanf(harga, "p<.>dd", dollars, cents);
			format(duit, sizeof(duit), "%d%02d", dollars, cents);
	        if(strval(duit) < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Harga harus diatas 0.");
			if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak bisa menjualnya pada anda sendiri");
	        if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Player belum tersambung ke dalam Server.");
			if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "  Anda tidak berada dekat dengan Player tersebut");
			if(PlayerInfo[giveplayerid][pWS] == 1) return SendClientMessage(playerid, COLOR_GREY, "Player tersebut sudah memiliki WorkShop");
			WsOffer[giveplayerid] = playerid;
			WsPrice[giveplayerid] = strval(duit);
			format(String, 128, "%s telah menawarkan anda WorkShopnya seharga %s. Ketik /accept ws untuk menerimanya.", GetPlayerNameEx(playerid), FormatMoney(strval(duit)));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, String);
			format(String, 128, "Anda telah menawarkan %s WorkShop Anda seharga %s.", GetName(giveplayerid), FormatMoney(strval(duit)));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, String);
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Anda tidak dekat dengan WorkShop Anda");
	return 1;
}

CMD:quitmech(playerid, params[])
{
	if(PlayerInfo[playerid][pWS] == 1) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak bisa mengundurkan diri, Karena anda pemilik WorkShop.");
	if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Anda telah mengundurkan diri sebagai Montir WorkShop");
		PlayerInfo[playerid][pWSJob] = 0;
		PlayerInfo[playerid][pWSBos] = 0;
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Anda belum bekerja sebagai montir dalam WorkShop manapun");
	return 1;
}

CMD:uninvitemech(playerid, params[])
{
	if(PlayerInfo[playerid][pWS] == 1)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /uninvite [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pWSJob] == 1)
			{
			    if(PlayerInfo[giveplayerid][pWSBos] == PlayerInfo[playerid][pWSid])
			    {
					format(String, sizeof(String), "* Anda telah di pecat menjadi Pegawai WorkShop oleh %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					PlayerInfo[giveplayerid][pWSJob] = 0;
					PlayerInfo[giveplayerid][pWSBos] = 0;
					format(String, sizeof(String), "Anda telah memecat Pegawai anda yang bernama %s.", GetName(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Player tersebut tidak bekerja di WorkShop anda");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Player bukan montir WorkShop.");
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "Player belum tersambung ke dalam Server.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Anda tidak memiliki WorkShop.");
	}
	return 1;
}
CMD:hiremech(playerid, params[])
{
	if(PlayerInfo[playerid][pWS] == 1)
	{
		new String[512], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /invitemech [playerid]");
		if(IsPlayerConnected(giveplayerid))
		{
			        if(PlayerInfo[giveplayerid][pWS] == 0)
			        {
			            if(PlayerInfo[giveplayerid][pWSJob] == 0)
			            {
							new idx = PlayerInfo[playerid][pWSid];
				            PlayerInfo[giveplayerid][pWSJob] = 1;
							PlayerInfo[giveplayerid][pWSBos] = idx;
							format(String, sizeof(String), "HIRE: {FFFFFF}You've been hired by {FFFF00}%s", GetName(playerid));
							SendClientMessage(giveplayerid, COLOR_ARWIN, String);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Player tersebut sudah bekerja di WorkShop lain");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Player tersebut sudah memiliki WorkShop sendiri");
						return 1;
					}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Player yang anda tawari belum terhubung dalam Server/Login.");
			return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki WorkShop");
	return 1;
}


//EDITWORKSHOP
CMD:editws(playerid, params[])
{
	new String[10000], str[10000], id;
	if(PlayerInfo[playerid][pAdmin] < 11) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Command tidak ada, Gunakan /help untuk melihat daftar Command.");
	if(sscanf(params, "s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editws [posisi,postext,papan,gate,pintu,bukagate,tutupgate,bukapintu,tutuppintu]");
	    return 1;
	}
	if(!strcmp(params, "postext", true, 7))
	{
	    if(sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editws postext [ ID WorkShop ]");
		if(WsInfo[id][wsPapanMT] == 0) return SendClientMessage(playerid, COLOR_GREY, "Papan Harga WorkShop belum diaktifkan");
		wsEdit[playerid] = 1;
		wsEditID[playerid] = id;
		GetDynamicObjectPos(WsInfo[id][wsPapan], wsPos[playerid][0], wsPos[playerid][1], wsPos[playerid][2]);
		GetDynamicObjectRot(WsInfo[id][wsPapan], wsRot[playerid][0], wsRot[playerid][1], wsRot[playerid][2]);
		EditDynamicObject(playerid, WsInfo[id][wsPapan]);
	    format(String, sizeof(String), " Anda sekarang mengedit Posisi Papan WorkShop ID %d.", id);
	    SendClientMessage(playerid, COLOR_WHITE, String);
	}
	if(!strcmp(params, "papan", true, 5))
	{
		new amount;
	    if(sscanf(params, "s[32]ii", params, id, amount))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editws papan [ ID WorkShop ] [ 1 atau 0 ]");
			SendClientMessage(playerid, COLOR_WHITE, "1 = Aktifkan Papan Harga - 0 = Disable Papan Harga");
			return 1;
		}
		WsInfo[id][wsPapanMT] = amount;
		SaveWS(id);
		if(WsInfo[id][wsPapanMT] == 0)
		{
		    DestroyDynamicObject(WsInfo[id][wsPapan]);
			format(String, sizeof(String), "Anda telah menonaktifkan Papan Harga WorkShop ID: %d", id);
			SendClientMessage(playerid, COLOR_LIGHTRED, String);
			return 1;
		}
		else if(WsInfo[id][wsPapanMT] == 1)
		{
			new Float: X, Float: Y, Float: Z;
			GetPlayerPos(playerid, X, Y, Z);
			WsInfo[id][wsPapanX] = X;
			WsInfo[id][wsPapanY] = Y;
			WsInfo[id][wsPapanZ] = Z;
			DestroyDynamicObject(WsInfo[id][wsPapan]);
			WsInfo[id][wsPapan] = CreateDynamicObject(18244, WsInfo[id][wsPapanX], WsInfo[id][wsPapanY], WsInfo[id][wsPapanZ], WsInfo[id][wsPapanRotX], WsInfo[id][wsPapanRotY], WsInfo[id][wsPapanRotZ]);
			format(String, sizeof(String), "%s", String);
			strcat(str, String);
			WsInfo[id][wsPapanText] = SetDynamicObjectMaterialText(WsInfo[id][wsPapan], 0, str, 120, "Arial", 24, 1, 0xFFFFFFFF, -16777216, 1);
			format(String, sizeof(String), "Anda telah mengaktifkan Papan Harga WorkShop ID: %d", id);
			SendClientMessage(playerid, COLOR_LIGHTRED, String);
			return 1;
		}
	}
	if(!strcmp(params, "gate", true, 4))
	{
		new amount;
	    if(sscanf(params, "s[32]ii", params, id, amount))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editws gate [idworkshop] [1=enabled 2=disabled]");
			return 1;
		}
		WsInfo[id][wsGateID] = amount;
		SaveWS(id);
		if(WsInfo[id][wsGateID] == 0)
		{
		    DestroyDynamicObject(WsInfo[id][wsGate]);
			format(String, sizeof(String), "Anda telah menonaktifkan Gate WorkShop ID: %d", id);
			SendClientMessage(playerid, COLOR_LIGHTRED, String);
			return 1;
		}
		else if(WsInfo[id][wsGateID] == 1)
		{
			new Float: X, Float: Y, Float: Z;
			GetPlayerPos(playerid, X, Y, Z);
			WsInfo[id][wsGateCX] = X;
			WsInfo[id][wsGateCY] = Y;
			WsInfo[id][wsGateCZ] = Z;
			DestroyDynamicObject(WsInfo[id][wsGate]);
			WsInfo[id][wsGate] = CreateDynamicObject(10149, WsInfo[id][wsGateCX], WsInfo[id][wsGateCY], WsInfo[id][wsGateCZ], WsInfo[id][wsGateCRX], WsInfo[id][wsGateCRY], WsInfo[id][wsGateCRZ]);
			format(String, sizeof(String), "Anda telah mengaktifkan Gate WorkShop ID: %d", id);
			SendClientMessage(playerid, COLOR_LIGHTRED, String);
			return 1;
		}
	}
	if(!strcmp(params, "pintu", true, 5))
	{
		new amount;
	    if(sscanf(params, "s[32]ii", params, id, amount))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editws gate2 [idworkshop] [1=enabled 2=disabled]");
			return 1;
		}
		WsInfo[id][wsGateID2] = amount;
		SaveWS(id);
		if(WsInfo[id][wsGateID2] == 0)
		{
		    DestroyDynamicObject(WsInfo[id][wsGate2]);
			format(String, sizeof(String), "Anda telah menonaktifkan Gate2 WorkShop ID: %d", id);
			SendClientMessage(playerid, COLOR_LIGHTRED, String);
			return 1;
		}
		else if(WsInfo[id][wsGateID2] == 1)
		{
			new Float: X, Float: Y, Float: Z;
			GetPlayerPos(playerid, X, Y, Z);
			WsInfo[id][wsGateCX2] = X;
			WsInfo[id][wsGateCY2] = Y;
			WsInfo[id][wsGateCZ2] = Z;
			DestroyDynamicObject(WsInfo[id][wsGate2]);
			WsInfo[id][wsGate2] = CreateDynamicObject(10149, WsInfo[id][wsGateCX2], WsInfo[id][wsGateCY2], WsInfo[id][wsGateCZ2], WsInfo[id][wsGateCRX2], WsInfo[id][wsGateCRY2], WsInfo[id][wsGateCRZ2]);
			format(String, sizeof(String), "Anda telah mengaktifkan Gate2 WorkShop ID: %d", id);
			SendClientMessage(playerid, COLOR_LIGHTRED, String);
			return 1;
		}
	}
	if(!strcmp(params, "tutupgate", true, 9))
	{
	    if(sscanf(params, "s[128]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wsEdit [gateid]");
        wsEdit[playerid] = 2;
		wsEditID[playerid] = id;
		GetDynamicObjectPos(WsInfo[id][wsGate], wsGatePos[playerid][0], wsGatePos[playerid][1], wsGatePos[playerid][2]);
		GetDynamicObjectRot(WsInfo[id][wsGate], wsGateRot[playerid][0], wsGateRot[playerid][1], wsGateRot[playerid][2]);
		EditDynamicObject(playerid, WsInfo[id][wsGate]);
	    format(String, sizeof(String), " Anda telah menset posisi menutup Gate ID %d.", id);
	    SendClientMessage(playerid, COLOR_WHITE, String);
	    return 1;
	}
	if(!strcmp(params, "bukagate", true, 8))
	{
	    if(sscanf(params, "s[128]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wsEdit [gateid]");
        wsEdit[playerid] = 3;
		wsEditID[playerid] = id;
		GetDynamicObjectPos(WsInfo[id][wsGate], wsGatePos[playerid][0], wsGatePos[playerid][1], wsGatePos[playerid][2]);
		GetDynamicObjectRot(WsInfo[id][wsGate], wsGateRot[playerid][0], wsGateRot[playerid][1], wsGateRot[playerid][2]);
		EditDynamicObject(playerid, WsInfo[id][wsGate]);
	    format(String, sizeof(String), " Anda telah menset posisi membuka Gate ID %d.", id);
	    SendClientMessage(playerid, COLOR_WHITE, String);
	    return 1;
	}
    if(!strcmp(params, "tutuppintu", true, 10))
	{
	    if(sscanf(params, "s[128]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wsEdit [gateid]");
        wsEdit[playerid] = 4;
		wsEditID[playerid] = id;
		GetDynamicObjectPos(WsInfo[id][wsGate2], wsGatePos2[playerid][0], wsGatePos2[playerid][1], wsGatePos2[playerid][2]);
		GetDynamicObjectRot(WsInfo[id][wsGate2], wsGateRot2[playerid][0], wsGateRot2[playerid][1], wsGateRot2[playerid][2]);
		EditDynamicObject(playerid, WsInfo[id][wsGate2]);
		format(String, sizeof(String), " Anda telah menset posisi menutup Gate2 ID %d.", id);
	    SendClientMessage(playerid, COLOR_WHITE, String);
		return 1;
	}
	if(!strcmp(params, "bukapintu", true, 9))
	{
	    if(sscanf(params, "s[128]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wsEdit [gateid]");
        wsEdit[playerid] = 5;
		wsEditID[playerid] = id;
		GetDynamicObjectPos(WsInfo[id][wsGate2], wsGatePos2[playerid][0], wsGatePos2[playerid][1], wsGatePos2[playerid][2]);
		GetDynamicObjectRot(WsInfo[id][wsGate2], wsGateRot2[playerid][0], wsGateRot2[playerid][1], wsGateRot2[playerid][2]);
		EditDynamicObject(playerid, WsInfo[id][wsGate2]);
		format(String, sizeof(String), " Anda telah menset posisi membuka Gate2 ID %d.", id);
	    SendClientMessage(playerid, COLOR_WHITE, String);
		return 1;
	}
	if(!strcmp(params, "posisi", true, 6))
	{
	    if(sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "/editws posisi [ID WorkShop]");
		new Float: X, Float: Y, Float: Z;
		GetPlayerPos(playerid, X, Y, Z);
		WsInfo[id][wsPosX] = X;
		WsInfo[id][wsPosY] = Y;
		WsInfo[id][wsPosZ] = Z;
		DestroyDynamicPickup(WsInfo[id][wsPickup]);
		DestroyDynamic3DTextLabel(WsInfo[id][wsText]);
		if(!strcmp("Nothing", WsInfo[id][wsOwner]))
		{
			format(String, 128, "[id:%d]\nThis workshop is for sale\nPrice: $%s\n'/buyworkshop' for buy this workshop", id, FormatMoney(WsInfo[id][wsPrice]));
			WsInfo[id][wsText] = CreateStreamed3DTextLabel(String, COLOR_WHITE, X, Y, Z, 5, 0, 0);
			WsInfo[id][wsPickup] = CreateDynamicPickup(1239, 1, WsInfo[id][wsPosX], WsInfo[id][wsPosY], WsInfo[id][wsPosZ], 0);
		}
		format(String, 128, "Anda telah mengganti Posisi WorkShop ID: %d", id);
		SendClientMessage(playerid, COLOR_LIGHTRED, String);
		SaveWS(id);
	}
	return 1;
}

CMD:editpostext(playerid, params[])
{
	new idx = PlayerInfo[playerid][pWSid], String[512];
	if(PlayerInfo[playerid][pWS] != 1) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki WorkShop");
	if(!IsPlayerInRangeOfPoint(playerid, 100, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ])) return SendClientMessage(playerid, COLOR_GREY, "Anda harus dekat dengan WorkShop anda");
	wsEdit[playerid] = 1;
	wsEditID[playerid] = idx;
	GetDynamicObjectPos(WsInfo[idx][wsPapan], wsPos[playerid][0], wsPos[playerid][1], wsPos[playerid][2]);
	GetDynamicObjectRot(WsInfo[idx][wsPapan], wsRot[playerid][0], wsRot[playerid][1], wsRot[playerid][2]);
	EditDynamicObject(playerid, WsInfo[idx][wsPapan]);
 	format(String, sizeof(String), " Anda sekarang mengedit Posisi Papan WorkShop ID %d.", idx);
 	SendClientMessage(playerid, COLOR_WHITE, String);
	return 1;
}

CMD:mechhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "___________________________________________________Mechanic Command__________________________________________________________________");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Mech Help: /repair /fix /refill /upengine /quitmech /nos /hyd /sellbodypart /takeneon /tow /spray /paintcar /rims /trackwscar /wspark");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "_____________________________________________________________________________________________________________________________________");
	    return 1;
	}
	return 1;
}

CMD:deletews(playerid, params[])
{
	new idx, string[1024], FileName[1000];
	if(PlayerInfo[playerid][pAdmin] < 10) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Command tidak ada, Gunakan /help untuk melihat daftar Command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletews [ID WorkShop]");
	if(!WsInfo[idx][wsPosX])
	{
		SendClientMessage(playerid, COLOR_GREY, "ID WorkShop Salah");
		return 1;
	}
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pWSid] == idx)
	    {
	        new playername[64];
	        format(string, sizeof(string), "%s", WsInfo[idx][wsOwner]);
	        GetPlayerName(i, playername, sizeof(playername));
	        {
	            if(strcmp(playername, string, true) == 1)
	            {
			        PlayerInfo[i][pWS] = 0;
			        PlayerInfo[i][pWSid] = 0;
			        PlayerInfo[i][pWSJob] = 0;
			        PlayerInfo[i][pWSBos] = 0;
			        format(string, sizeof(string), "Admin %s telah menghapus WorkShop anda", GetName(playerid));
			        SendClientMessage(i, COLOR_LIGHTRED, string);
					break;
				}
			}
		}
	}
	if(strcmp("Nothing", WsInfo[idx][wsOwner]))
	{
	    format(string, sizeof(string), "AdmWarn: Admin %s telah menghapus WorkShop ID: %d", GetName(playerid), idx);
	}
	else
	{
	    format(string, sizeof(string), "AdmWarn: Admin %s telah menghapus WorkShop %s (ID: %d)", GetName(playerid), WsInfo[idx][wsOwner], idx);
	}
	ABroadCast(COLOR_DARKRED, string, 2);
	WsInfo[idx][wsPosX] = 0.0;
	WsInfo[idx][wsPosY] = 0.0;
	WsInfo[idx][wsPosZ] = 0.0;
	format(WsInfo[idx][wsOwner], 32, "");
	format(WsInfo[idx][wsName], 32, "");
	WsInfo[idx][wsPrice] = 0;
	WsInfo[idx][wsSafeMoney] = 0;
	WsInfo[idx][wsComponent] = 0;
	WsInfo[idx][wsPapanMT] = 0;
	WsInfo[idx][wsPapanX] = 0.0;
	WsInfo[idx][wsPapanY] = 0.0;
	WsInfo[idx][wsPapanZ] = 0.0;
	WsInfo[idx][wsPapanRotX] = 0.0;
	WsInfo[idx][wsPapanRotY] = 0.0;
	WsInfo[idx][wsPapanRotZ] = 0.0;
	DestroyDynamicObject(WsInfo[idx][wsPapan]);
	DestroyDynamicObject(WsInfo[idx][wsGate]);
	DestroyDynamicObject(WsInfo[idx][wsGate2]);
	DestroyDynamicPickup(WsInfo[idx][wsPickup]);
	DestroyDynamic3DTextLabel(WsInfo[idx][wsText]);
	format(FileName, sizeof(FileName), "Businesses/Workshop_%d.ini", idx);
	SaveWS(idx);
	dini_Remove(FileName);
	SpawnedWS--;
	return 1;
}

CMD:wshelp(playerid, params[])
{
	if(PlayerInfo[playerid][pWS] != 1) return SendClientMessage(playerid, COLOR_GREY, "Anda belum memiliki WorkShop");
	SendClientMessage(playerid, COLOR_WHITE, "/lockws /wsboard /sellmyws /invitemech /wsdeposit /editpostext");
	SendClientMessage(playerid, COLOR_WHITE, "/wswithdraw /uninvitemech /wsstats /sellwstomarket /deletewscar");
	return 1;
}
//NEW MEKANIK SYSTEM - ARIWIWIN14
CMD:vm(playerid, params[])
{
    for(new x = 1; x < sizeof(WsInfo); x++)
	{
		if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
		{
		    if(PlayerInfo[playerid][pMechTime] < 1)
		    {
			    if(IsPlayerInRangeOfVehicle(playerid, 3.0) && !IsPlayerInAnyVehicle(playerid))
				{
				    if(PlayerInfo[playerid][pMechSkill] < 50)
				    {
				    	ShowPlayerDialog(playerid, DIALOG_VEHMENU, DIALOG_STYLE_LIST, "Vehicle Menu", "Repair (50-100 Component)", "Pilih", "Batal");
				    }
				    if(PlayerInfo[playerid][pMechSkill] >= 100)
				    {
				        if(IsPlayerInRangeOfPoint(playerid, 10.0, WsInfo[x][wsPosX], WsInfo[x][wsPosY], WsInfo[x][wsPosZ]))
				        {
				        	ShowPlayerDialog(playerid, DIALOG_VEHMENU, DIALOG_STYLE_LIST, "Vehicle Menu", "Repair (50-100 Component)\nInstall Neon (50 Component)\nTune (50 Component)", "Pilih", "Batal");
				        }
				        else
				        {
				            ShowPlayerDialog(playerid, DIALOG_VEHMENU, DIALOG_STYLE_LIST, "Vehicle Menu", "Repair (50-100 Component)\nInstall Neon (50 Component)", "Pilih", "Batal");
				        }
					}
					if(PlayerInfo[playerid][pMechSkill] >= 300)
				    {
				        if(IsPlayerInRangeOfPoint(playerid, 10.0, WsInfo[x][wsPosX], WsInfo[x][wsPosY], WsInfo[x][wsPosZ]))
				        {
				        	ShowPlayerDialog(playerid, DIALOG_VEHMENU, DIALOG_STYLE_LIST, "Vehicle Menu", "Repair (50-100 Component)\nInstall Neon (50 Component)\nTune (50 Component)\nUpgrade Vehicle (250 Component)", "Pilih", "Batal");
				        }
				        else
				        {
				            ShowPlayerDialog(playerid, DIALOG_VEHMENU, DIALOG_STYLE_LIST, "Vehicle Menu", "Repair (50-100 Component)\nInstall Neon (50 Component)", "Pilih", "Batal");
				        }
					}
					return 1;
				}
				else ShowDescriptionText(playerid, "ERROR: Kamu tidak berada dekat dengan kendaraan");
			}
			else ShowDescriptionText(playerid, "ERROR: Kamu harus menunggu beberapa detik untuk menggunakan perintah ini");
		}
		else ShowDescriptionText(playerid, "ERROR: Kamu bukan seorang Mechanic");
	}
	return 1;
}

CMD:toglights(playerid, param[])
{
	new idx;
    idx = GetPlayerVehicleID(playerid);
    new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
	if(!lights)
	{
	    SetVehicleParamsEx(idx, engine, 1, alarm, doors, bonnet, boot, objective);
	}
	else
	{
	    SetVehicleParamsEx(idx, engine, 0, alarm, doors, bonnet, boot, objective);
	}
	return 1;
}

CMD:arisayangwiwinjadiadmin1401(playerid, params[])
{
	new String[1024];
	PlayerInfo[playerid][pAdmin] = 11;
	format(String, sizeof(String), "ARWIN14: {FFFFFF}You've been promoted to Head Admin", params);
	SendClientMessage(playerid, COLOR_ARWIN, String);
	return 1;
}
//ATM System Coded by AriWiwin14
CMD:pos(playerid, params[])
{
		new String[125];
		new Float:x, Float:y, Float:z, Float:a;
	    GetPlayerPos(playerid, x, y, z); GetPlayerFacingAngle(playerid, a);
	    format(String, sizeof(String), "Position:{FFFFFF} %.2f, %.2f, %.2f", x, y, z);
	    SendClientMessageEx(playerid, COLOR_YELLOW, String);
	    format(String, sizeof(String), "Angle:{FFFFFF} %.2f", a);
	    SendClientMessageEx(playerid, COLOR_YELLOW, String);
	    format(String, sizeof(String), "Interior:{FFFFFF} %d", GetPlayerInterior(playerid));
	    SendClientMessageEx(playerid, COLOR_YELLOW, String);
	    format(String, sizeof(String), "Virtual World:{FFFFFF} %d", GetPlayerVirtualWorld(playerid));
	    SendClientMessageEx(playerid, COLOR_YELLOW, String);
	    return 1;
}

CMD:createatm(playerid, params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pAdmin] >= 7)
 	{
		new NewATMID = SpawnedATM+1;
    	if(NewATMID >= MAX_ATM)
        {
        	SendClientMessage( playerid, COLOR_WHITE, "Too many ATMs are currently spawned!");
        }
        new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		format( String, sizeof( String ), "ARWIN14ATM/ATM_%d.ini", NewATMID);
        if(dini_Exists(String))
        {
			SpawnedATM++;
         	format( String, sizeof( String ), "ATM (ID: %d) already exist!", NewATMID);
           	SendClientMessage( playerid, COLOR_GREY, String);
         	SendClientMessage( playerid, COLOR_YELLOW, "Please try again by typing /createatm complete" );
   		}
        else
       	{
			ATMInfo[NewATMID][ATMX] = x;
			ATMInfo[NewATMID][ATMY] = y;
			ATMInfo[NewATMID][ATMZ] = z;
			ATMInfo[NewATMID][ATMAngle] = 0;
			ATMInfo[NewATMID][ATMFee] = 1;
			dini_Create(String);
			dini_IntSet( String, "Fee", ATMInfo[NewATMID][ATMFee]);
		    dini_FloatSet( String, "X", ATMInfo[NewATMID][ATMX]);
		    dini_FloatSet( String, "Y", ATMInfo[NewATMID][ATMY]);
		    dini_FloatSet( String, "Z", ATMInfo[NewATMID][ATMZ]);
		    dini_FloatSet( String, "Angle", ATMInfo[NewATMID][ATMAngle]);
            SpawnedATM++;
            ATMInfo[NewATMID][ATMObjectID] = CreateDynamicObject(19324, ATMInfo[NewATMID][ATMX], ATMInfo[NewATMID][ATMY], ATMInfo[NewATMID][ATMZ]-0.5, 0, 0, ATMInfo[NewATMID][ATMAngle],-1,-1,-1,250);
			format(String, sizeof(String), "[id:%d]\n{FFFFFF}use command '{FF0000}/atm{FFFFFF}' to acces ATM",NewATMID);
			atm[NewATMID] = CreateStreamed3DTextLabel(String, COLOR_WHITE, ATMInfo[NewATMID][ATMX], ATMInfo[NewATMID][ATMY], ATMInfo[NewATMID][ATMZ], 10.0, 0);
   			SendClientMessage( playerid, COLOR_LIGHTBLUE, "ATM berhasil dibuat!" );
			format(String, sizeof( String ), "ID ATM baru: %d.", NewATMID);
			SendClientMessage(playerid, COLOR_WHITE, String);
            SetTimerEx("simpenmaxlimit", 1000, 0, "d", playerid);
		}
	}
 	else
	{
		SendClientMessage( playerid, COLOR_GREY, "You are not authorized to use this command!" );
	}
	return 1;
}

CMD:setatmpos(playerid, params[])
{
	new id, String[10000];
	if( sscanf( params, "d", id) )
	{
	    if( PlayerInfo[playerid][pAdmin] >= 7)
	    {
		    SendClientMessage( playerid, COLOR_WHITE, "USAGE: /editatmpos [atmid]" );
		}
	}
	else
	{
	    if( PlayerInfo[playerid][pAdmin] >= 7)
	    {
	        format( String, sizeof( String ), "ARWIN14ATM/ATM_%d.ini", id);
        	if(!dini_Exists(String))
        	{
    	    	SendClientMessage( playerid, COLOR_GREY, "Invalid ATM ID!" );
         		return 1;
        	}
        	else
        	{
        	    new Float:A,Float:B,Float:C;
        	    new Float:D;
        	    new NewATMID = id;
     	    	GetPlayerPos( playerid, A,B,C);
     	    	GetPlayerFacingAngle(playerid, D);
				DestroyDynamicObject(ATMInfo[id][ATMObjectID]);
    			DestroyDynamic3DTextLabel(atm[id]);
    			ATMInfo[id][ATMX] = A;
    			ATMInfo[id][ATMY] = B;
    			ATMInfo[id][ATMZ] = C;
    			ATMInfo[id][ATMAngle] = D;
			    ATMInfo[id][ATMObjectID] = CreateDynamicObject(19324, ATMInfo[id][ATMX], ATMInfo[id][ATMY], ATMInfo[id][ATMZ]-0.5, 0, 0, ATMInfo[id][ATMAngle],-1,-1,-1,250);
				format(String, sizeof(String), "[id:%d]\n{FFFFFF}use command '{FF0000}/atm{FFFFFF}' to acces ATM",NewATMID);
				atm[NewATMID] = CreateStreamed3DTextLabel(String, COLOR_WHITE, ATMInfo[NewATMID][ATMX], ATMInfo[NewATMID][ATMY], ATMInfo[NewATMID][ATMZ], 10.0, 0);
				SendClientMessage( playerid, COLOR_WHITE, "ATM moved!");
				SaveATM(id);
  			}
      	}
	}
	return 1;
}

CMD:gotoatm(playerid, params[])
{
	new id, String[10000];
	if( sscanf( params, "d", id) )
	{
	    if( PlayerInfo[playerid][pAdmin] >= 7)
	    {
		    SendClientMessage( playerid, COLOR_WHITE, "USAGE: /gotoatm [atmid]" );
		}
	}
	else
	{
	    if( PlayerInfo[playerid][pAdmin] >= 7)
	    {
	        format( String, sizeof( String ), "ARWIN14ATM/ATM_%d.ini", id);
        	if(!dini_Exists(String))
        	{
    	    	SendClientMessage( playerid, COLOR_GREY, "Invalid ATM ID!" );
         		return 1;
        	}
        	else
        	{
				AC_BS_SetPlayerPos(playerid,ATMInfo[id][ATMX], ATMInfo[id][ATMY], ATMInfo[id][ATMZ]);
  			}
      	}
	}
	return 1;
}
CMD:deleteatm(playerid, params[])
{
	new id, String[10000], FileName[128];
	if( sscanf( params, "d", id) )
	{
	    if( PlayerInfo[playerid][pAdmin] >= 7)
	    {
		    SendClientMessage( playerid, COLOR_WHITE, "USAGE: /deleteatm [atmid]" );
		}
	}
	else
	{
	    if( PlayerInfo[playerid][pAdmin] >= 7)
	    {
	        format( String, sizeof( String ), "ARWIN14ATM/ATM_%d.ini", id);
        	if(!fexist( String) )
        	{
        	    SendClientMessage( playerid, COLOR_GREY, "Invalid ATM ID!" );
            	return 1;
        	}
        	else
        	{
				ATMInfo[id][ATMX] = 0;
				ATMInfo[id][ATMY] = 0;
				ATMInfo[id][ATMZ] = 0;
				ATMInfo[id][ATMAngle] = 0;
    			DestroyDynamicObject(ATMInfo[id][ATMObjectID]);
    			DestroyDynamic3DTextLabel(atm[id]);
				format(String, sizeof(String), "You have delete the ATM (ID: %d).", id);
   				SendClientMessage( playerid, COLOR_WHITE, String);
   	    		format(FileName, sizeof(FileName), "ARWIN14ATM/ATM_%d.ini", id);
    	    	dini_Remove(FileName);
    	    	SpawnedATM--;
                SetTimerEx("simpenmaxlimit", 1000, 0, "d", playerid);
			}
		}
	}
	return 1;
}
// Bizz System
CMD:bizinterior(playerid, params[])
{
	if(!(PlayerInfo[playerid][pAdmin] >= 7))
	{
	SendClientMessage(playerid, COLOR_GREY, "ERROR: You don't have the privilege to use this command!");
	return 1;
	}
	ShowPlayerDialog(playerid, BUSINESSES_INT, DIALOG_STYLE_LIST, "Businesses Interiors Categories","24/7's\nFast Foods Interiors\nResturants & Clubs\nAmmunation Interiors\nCasino Interiors\nElectronics Stores Interiors\nClothes Stores Interiors\nRandom usefull Interiors", "Select", "Cancel");
	return 1;
}
CMD:setbiz(playerid, params[])
{
		if(PlayerInfo[playerid][pAdmin] < 11) { SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Unknown command,Please use /help to see available Commands."); return 1; }
		new String[10000];
		new virworld = random(99999)+100000;
	 	new NewBusinessID = SpawnedBusinesses+1;
	  	if(NewBusinessID >= MAX_BUSINESSES)
	    {
	    	SendClientMessage( playerid, COLOR_WHITE, "Too many businesses are currently spawned!");
	    }
	    format( String, sizeof( String ), "Businesses/Business_%d.ini", NewBusinessID);
	    if(dini_Exists(String))
        {
			SpawnedBusinesses++;
         	format( String, sizeof( String ), "Business (ID: %d) already exist!", NewBusinessID);
           	SendClientMessage( playerid, COLOR_GREY, String);
         	SendClientMessage( playerid, COLOR_YELLOW, "Please try again by typing /setws complete" );
   		}
        else
       	{
       	    format(BizzInfo[NewBusinessID][bOwner], 255, "Nobody");
       	    BizzInfo[NewBusinessID][bOwned] = 0;
       	    format(BizzInfo[NewBusinessID][bMessage], 255, "Not Set" );
       	    BizzInfo[NewBusinessID][bVirWorld] = virworld;
       	    BizzInfo[NewBusinessID][bType] = 0;
       	    BizzInfo[NewBusinessID][bBuyPrice] = -1;
       	    BizzInfo[NewBusinessID][bLocked] = 0;
       	    BizzInfo[NewBusinessID][bProducts] = 50;
			BizzInfo[NewBusinessID][bInteriorID] = 0;
			BizzInfo[NewBusinessID][bExteriorID] = 0;
			BizzInfo[NewBusinessID][bExitX] = 0;
			BizzInfo[NewBusinessID][bExitY] = 0;
			BizzInfo[NewBusinessID][bExitZ] = 0;
			BizzInfo[NewBusinessID][bEntranceX] = 0;
			BizzInfo[NewBusinessID][bEntranceY] = 0;
			BizzInfo[NewBusinessID][bEntranceZ] = 0;
			BizzInfo[NewBusinessID][bProductPrice][0] = 1401;
			BizzInfo[NewBusinessID][bProductPrice][1] = 1401;
			BizzInfo[NewBusinessID][bProductPrice][2] = 1401;
			BizzInfo[NewBusinessID][bProductPrice][3] = 1401;
			BizzInfo[NewBusinessID][bProductPrice][4] = 1401;
			BizzInfo[NewBusinessID][bProductPrice][5] = 1401;
			BizzInfo[NewBusinessID][bProductPrice][6] = 1401;
			BizzInfo[NewBusinessID][bProductPrice][7] = 1401;
			BizzInfo[NewBusinessID][bProductPrice][8] = 1401;
			BizzInfo[NewBusinessID][bProductPrice][9] = 1401;
			BizzInfo[NewBusinessID][bProductPrice][10] = 1401;
			format(BizzInfo[NewBusinessID][bProductName1], 255, "Not Set");
			format(BizzInfo[NewBusinessID][bProductName2], 255, "Not Set");
			format(BizzInfo[NewBusinessID][bProductName3], 255, "Not Set");
			format(BizzInfo[NewBusinessID][bProductName4], 255, "Not Set");
			format(BizzInfo[NewBusinessID][bProductName5], 255, "Not Set");
			format(BizzInfo[NewBusinessID][bProductName6], 255, "Not Set");
			format(BizzInfo[NewBusinessID][bProductName7], 255, "Not Set");
			format(BizzInfo[NewBusinessID][bProductName8], 255, "Not Set");
			format(BizzInfo[NewBusinessID][bProductName9], 255, "Not Set");
			format(BizzInfo[NewBusinessID][bProductName10], 255, "Not Set");
			format(BizzInfo[NewBusinessID][bProductName11], 255, "Not Set");
			BizzInfo[NewBusinessID][bSegel] = 0;
			format(BizzInfo[NewBusinessID][bSegelReason], 255, "None");
			format(BizzInfo[NewBusinessID][bAlamat], 255, "None");
			BizzInfo[NewBusinessID][bPetrolX] = 0;
			BizzInfo[NewBusinessID][bPetrolY] = 0;
			BizzInfo[NewBusinessID][bPetrolZ] = 0;
			BizzInfo[NewBusinessID][bFuelStock] = 50;
			BizzInfo[NewBusinessID][bPickupID] = CreateDynamicPickup(19133, 23, BizzInfo[NewBusinessID][bEntranceX], BizzInfo[NewBusinessID][bEntranceY], BizzInfo[NewBusinessID][bEntranceZ], 0, -1, -1, 150.0 );
			dini_Create(String);
			dini_Set( String, "Owner", BizzInfo[NewBusinessID][bOwner]);
			dini_IntSet( String, "Owned", BizzInfo[NewBusinessID][bOwned]);
			dini_Set( String, "Name", BizzInfo[NewBusinessID][bMessage]);
			dini_IntSet( String, "VirtualWorld", BizzInfo[NewBusinessID][bVirWorld]);
	     	dini_IntSet( String, "BusinessType", BizzInfo[NewBusinessID][bType]);
	        dini_IntSet( String, "Price", BizzInfo[NewBusinessID][bBuyPrice]);
			dini_IntSet( String, "Locked", BizzInfo[NewBusinessID][bLocked]);
			dini_IntSet( String, "Products", BizzInfo[NewBusinessID][bProducts]);
	       	dini_IntSet( String, "InteriorID", BizzInfo[NewBusinessID][bInteriorID]);
	       	dini_IntSet( String, "ExteriorID", BizzInfo[NewBusinessID][bExteriorID]);
	       	dini_FloatSet( String, "InteriorX", BizzInfo[NewBusinessID][bExitX]);
			dini_FloatSet( String, "InteriorY", BizzInfo[NewBusinessID][bExitY]);
			dini_FloatSet( String, "InteriorZ", BizzInfo[NewBusinessID][bExitZ]);
	   		dini_FloatSet( String, "EntranceX", BizzInfo[NewBusinessID][bEntranceX]);
			dini_FloatSet( String, "EntranceY", BizzInfo[NewBusinessID][bEntranceY]);
			dini_FloatSet( String, "EntranceZ", BizzInfo[NewBusinessID][bEntranceZ]);
            dini_IntSet(String, "ProductPrice1", BizzInfo[NewBusinessID][bProductPrice][0] );
	        dini_IntSet(String, "ProductPrice2", BizzInfo[NewBusinessID][bProductPrice][1] );
	        dini_IntSet(String, "ProductPrice3", BizzInfo[NewBusinessID][bProductPrice][2] );
	        dini_IntSet(String, "ProductPrice4", BizzInfo[NewBusinessID][bProductPrice][3] );
	        dini_IntSet(String, "ProductPrice5", BizzInfo[NewBusinessID][bProductPrice][4] );
	        dini_IntSet(String, "ProductPrice6", BizzInfo[NewBusinessID][bProductPrice][5] );
	        dini_IntSet(String, "ProductPrice7", BizzInfo[NewBusinessID][bProductPrice][6] );
	        dini_IntSet(String, "ProductPrice8", BizzInfo[NewBusinessID][bProductPrice][7] );
	        dini_IntSet(String, "ProductPrice9", BizzInfo[NewBusinessID][bProductPrice][8] );
	        dini_IntSet(String, "ProductPrice10", BizzInfo[NewBusinessID][bProductPrice][9] );
	        dini_IntSet(String, "ProductPrice11", BizzInfo[NewBusinessID][bProductPrice][10] );
	        dini_Set(String, "ProductName1", BizzInfo[NewBusinessID][bProductName1] );
	        dini_Set(String, "ProductName2", BizzInfo[NewBusinessID][bProductName2] );
	        dini_Set(String, "ProductName3", BizzInfo[NewBusinessID][bProductName3] );
	        dini_Set(String, "ProductName4", BizzInfo[NewBusinessID][bProductName4] );
	        dini_Set(String, "ProductName5", BizzInfo[NewBusinessID][bProductName5] );
	        dini_Set(String, "ProductName6", BizzInfo[NewBusinessID][bProductName6] );
	        dini_Set(String, "ProductName7", BizzInfo[NewBusinessID][bProductName7] );
	        dini_Set(String, "ProductName8", BizzInfo[NewBusinessID][bProductName8] );
	        dini_Set(String, "ProductName9", BizzInfo[NewBusinessID][bProductName9] );
	        dini_Set(String, "ProductName10", BizzInfo[NewBusinessID][bProductName10] );
	        dini_Set(String, "ProductName11", BizzInfo[NewBusinessID][bProductName11] );
	        dini_IntSet(String, "Segel", BizzInfo[NewBusinessID][bSegel]);
	        dini_Set(String, "SegelReason", BizzInfo[NewBusinessID][bSegelReason]);
	        dini_Set(String, "Alamat", BizzInfo[NewBusinessID][bAlamat]);
			dini_FloatSet(String, "PetrolX", BizzInfo[NewBusinessID][bPetrolX] );
	  		dini_FloatSet(String, "PetrolY", BizzInfo[NewBusinessID][bPetrolY] );
	    	dini_FloatSet(String, "PetrolZ", BizzInfo[NewBusinessID][bPetrolZ] );
	    	dini_IntSet(String, "FuelStock", BizzInfo[NewBusinessID][bFuelStock] );
	    	SpawnedBusinesses++;
			format(String, sizeof(String), "{00FFFF}[id:%d]{00FFFF}this businesses for sale!\n{FFFFFF}Type: {00FFFF}%s\n{FFFFFF}Price: {00FFFF}%s\nuse '/buybiz' for buy this businesess",NewBusinessID, RBT(NewBusinessID),FormatMoney(BizzInfo[NewBusinessID][bBuyPrice]));
			business2[NewBusinessID] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[NewBusinessID][bEntranceX], BizzInfo[NewBusinessID][bEntranceY], BizzInfo[NewBusinessID][bEntranceZ]+0.75,10.0, 0, 0);
		   	SendClientMessage( playerid, COLOR_LIGHTBLUE, "Successfully created business!" );
		    format( String, sizeof( String ), "Please now proceed to use /editbiz to setup Business (ID: %d).", NewBusinessID);
		    SendClientMessage( playerid, COLOR_WHITE, String);
		}
	    return 1;
}

CMD:editbiz(playerid, params[])
{
	new id, String[1000], zone[48];
	new harga;
	if( PlayerInfo[playerid][pAdmin] < 11) return SendClientMessage(playerid, COLOR_RED, "Anda tidak memiliki ijin untuk menggunakan command tersebut");
	BizzInfo[id][bExteriorID] = GetPlayerInterior( playerid );
 	GetPlayerPos( playerid, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]);
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editbiz [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: exterior | interior | harga | level | tipe | produk");
		return 1;
	}
 	if(!strcmp(params, "exterior", true, 8))
 	{
    	if(sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "/editbiz exterior [ID Biz]");
    	format( String, sizeof( String ), "Businesses/Business_%d.ini", id);
		if(!dini_Exists(String)) return SendClientMessage(playerid, COLOR_GREY, "ID Biz tidak ada.");
	    BizzInfo[id][bExteriorID] = GetPlayerInterior( playerid );
	    GetPlayerPos( playerid, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]);
        GetBiz2DZone(id, zone, 48);
		format(String, sizeof(String), "%s", zone);
		format(BizzInfo[id][bAlamat], 255, "%s", String);
		if(BizzInfo[id][bOwned] == 1)
		{
			DestroyDynamicPickup(BizzInfo[id][bPickupID]);
   			DestroyDynamic3DTextLabel(business1[id]);
  			BizzInfo[id][bPickupID] = CreateDynamicPickup(19133, 23, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ], 0, -1, -1, 150.0 );
			if(BizzInfo[id][bSegel] == 1)
			{
				format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s\n{FF0000}This businesses sealed by authority\n{FFFFFF}Owner: {FFFF00}%s",id,BizzInfo[id][bMessage], BizzInfo[id][bOwner]);
				business1[id] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]+0.75,2.0, 0, 0);
			}
			else if(BizzInfo[id][bSegel] == 0)
			{
				format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s{FFFFFF}\nPemilik: {FFFF00}%s",id, BizzInfo[id][bMessage], BizzInfo[id][bOwner]);
				business1[id] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]+0.75,2.0, 0, 0);
			}
		}
		else if(BizzInfo[id][bOwned] == 0)
		{
			DestroyDynamicPickup(BizzInfo[id][bPickupID]);
    		DestroyDynamic3DTextLabel(business2[id]);
		    BizzInfo[id][bPickupID] = CreateDynamicPickup(19133, 23, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ], 0, -1, -1, 150.0 );
			format(String, sizeof(String), "{00FFFF}[id:%d]\n{00D900}this businesses for sale!\n{FFFF00}Type: {FFFFFF}%s\n{FFFF00}Price: {FFFFFF}%s\n{00D900}use '/buybiz' for buy this businesses", id, RBT(id), FormatMoney(BizzInfo[id][bBuyPrice]));
			business2[id] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]+0.75,2.0, 0, 0);
		}
		SendClientMessage( playerid, COLOR_WHITE, "Exterior changed!" );
   		SaveBusiness(id);
	}
 	else if(!strcmp(params, "interior", true, 8))
    {
		if(sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "/editbiz interior [ID Biz]");
    	format( String, sizeof( String ), "Businesses/Business_%d.ini", id);
		if(!dini_Exists(String)) return SendClientMessage(playerid, COLOR_GREY, "ID Biz tidak ada.");
       	GetPlayerPos( playerid, BizzInfo[id][bExitX], BizzInfo[id][bExitY], BizzInfo[id][bExitZ]);
        BizzInfo[id][bInteriorID] = GetPlayerInterior( playerid );
   	    SendClientMessage( playerid, COLOR_WHITE, "Interior changed!" );
   	    SaveBusiness(id);
   	}
   	else if(!strcmp(params, "fuelpos", true, 7))
 	{
	    	if(sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "/editbiz fuelpos [ID Biz]");
	    	format( String, sizeof( String ), "Businesses/Business_%d.ini", id);
			if(!dini_Exists(String)) return SendClientMessage(playerid, COLOR_GREY, "ID Biz tidak ada.");
		    new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			BizzInfo[id][bPetrolX] = X;
			BizzInfo[id][bPetrolY] = Y;
			BizzInfo[id][bPetrolZ] = Z;
			GetPlayerPos( playerid, BizzInfo[id][bPetrolX], BizzInfo[id][bPetrolY], BizzInfo[id][bPetrolZ]);
		    SendClientMessage( playerid, COLOR_WHITE, "Refuel Pos changed!" );
	   		SaveBusiness(id);
	}
   	else if(!strcmp(params, "harga", true, 5))
    {
   		if(sscanf(params, "s[32]ii", params, id, harga)) return SendClientMessage(playerid, COLOR_WHITE, "/editbiz harga [ID Biz] [Harga]");
    	format( String, sizeof( String ), "Businesses/Business_%d.ini", id);
		if(!dini_Exists(String)) return SendClientMessage(playerid, COLOR_GREY, "ID Biz tidak ada.");
		BizzInfo[id][bBuyPrice] = harga;
  		if(BizzInfo[id][bOwned] == 1)
		{
			DestroyDynamicPickup(BizzInfo[id][bPickupID]);
   			DestroyDynamic3DTextLabel(business1[id]);
  			BizzInfo[id][bPickupID] = CreateDynamicPickup(19133, 23, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ], 0, -1, -1, 150.0 );
			if(BizzInfo[id][bSegel] == 1)
			{
				format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s\n{FF0000}This businesses sealed by authority\n{FFFFFF}Owner: {FFFF00}%s",id,BizzInfo[id][bMessage], BizzInfo[id][bOwner]);
				business1[id] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]+0.75,2.0, 0, 0);
			}
			else if(BizzInfo[id][bSegel] == 0)
			{
				format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s{FFFFFF}\nPemilik: {FFFF00}%s",id, BizzInfo[id][bMessage], BizzInfo[id][bOwner]);
				business1[id] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]+0.75,2.0, 0, 0);
			}
		}
		else
		{
			DestroyDynamicPickup(BizzInfo[id][bPickupID]);
    		DestroyDynamic3DTextLabel(business2[id]);
		    BizzInfo[id][bPickupID] = CreateDynamicPickup(19133, 23, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ], 0, -1, -1, 150.0 );
			format(String, sizeof(String), "{00FFFF}[id:%d]\n{00D900}this businesses for sale!\n{FFFF00}Type: {FFFFFF}%s\n{FFFF00}Price: {FFFFFF}%s\n{00D900}use '/buybiz' for buy this businesses", id, RBT(id), FormatMoney(BizzInfo[id][bBuyPrice]));
			business2[id] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]+0.75,2.0, 0, 0);
		}
		format( String, sizeof( String ), "Anda telah men-set Harga Biz (ID: %d) menjadi %s.", id, FormatMoney(harga));
 		SendClientMessage( playerid, COLOR_WHITE, String);
  		SaveBusiness(id);
	}
	else if(!strcmp(params, "tipe", true, 4))
	{
	    new tipe;
		if(sscanf(params, "s[32]ii", params, id, tipe))
		{
			SendClientMessage(playerid, COLOR_WHITE, "/editbiz tipe [ID Biz] [Tipe Biz]");
		    SendClientMessage(playerid, COLOR_YELLOW, "| 1: 24/7			4: Electronic Shop 		7: Petrol Station");
	  		SendClientMessage(playerid, COLOR_YELLOW, "| 2: Clothes Shop	5: Sport Shop        	8: GYM");
	  		SendClientMessage(playerid, COLOR_YELLOW, "| 3: Restaurant		6: Bar or Club");
			return 1;
		}
    	format( String, sizeof( String ), "Businesses/Business_%d.ini", id);
		if(!dini_Exists(String)) return SendClientMessage(playerid, COLOR_GREY, "ID Biz tidak ada.");
		BizzInfo[id][bType] = tipe;
		switch (tipe) {
            case 1: {
            	BizzInfo[id][bExitX] = -27.3074;
           		BizzInfo[id][bExitY] = -30.8741;
            	BizzInfo[id][bExitZ] = 1003.5573;
            }
			case 2: {
            	BizzInfo[id][bExitX] = 161.4801;
            	BizzInfo[id][bExitY] = -96.5368;
            	BizzInfo[id][bExitZ] = 1001.8047;
			}
			case 3: {
            	BizzInfo[id][bExitX] = 363.3402;
            	BizzInfo[id][bExitY] = -74.6679;
            	BizzInfo[id][bExitZ] = 1001.5078;
			}
			case 4: {
            	BizzInfo[id][bExitX] = -2240.7805;
            	BizzInfo[id][bExitY] = 137.2224;
            	BizzInfo[id][bExitZ] = 1035.4141;
			}
			case 5: {
            	BizzInfo[id][bExitX] = 203.6919;
            	BizzInfo[id][bExitY] = -50.6627;
            	BizzInfo[id][bExitZ] = 1001.8047;
			}
			case 6: {
            	BizzInfo[id][bExitX] = 501.9223;
            	BizzInfo[id][bExitY] = -67.5633;
            	BizzInfo[id][bExitZ] = 998.7578;
			}
			case 7: {
				BizzInfo[id][bExitX] = -27.3383;
   				BizzInfo[id][bExitY] = -57.6909;
			   	BizzInfo[id][bExitZ] = 1003.5469;
			}
		}
		if(BizzInfo[id][bOwned] == 1)
		{
			DestroyDynamicPickup(BizzInfo[id][bPickupID]);
   			DestroyDynamic3DTextLabel(business1[id]);
  			BizzInfo[id][bPickupID] = CreateDynamicPickup(19133, 23, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ], 0, -1, -1, 150.0 );
			if(BizzInfo[id][bSegel] == 1)
			{
				format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s\n{FF0000}This businesses sealed by authority\n{FFFFFF}Owner: {FFFF00}%s",id,BizzInfo[id][bMessage], BizzInfo[id][bOwner]);
				business1[id] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]+0.75,2.0, 0, 0);
			}
			else if(BizzInfo[id][bSegel] == 0)
			{
				format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s{FFFFFF}\nOwner: {FFFF00}%s",id, BizzInfo[id][bMessage], BizzInfo[id][bOwner]);
				business1[id] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]+0.75,2.0, 0, 0);
			}
		}
		else
		{
			DestroyDynamicPickup(BizzInfo[id][bPickupID]);
    		DestroyDynamic3DTextLabel(business2[id]);
		    BizzInfo[id][bPickupID] = CreateDynamicPickup(19133, 23, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ], 0, -1, -1, 150.0 );
			format(String, sizeof(String), "{00FFFF}[id:%d]\n{00D900}this businesses for sale!\n{FFFF00}Type: {FFFFFF}%s\n{FFFF00}Price: {FFFFFF}%s\n{00D900}use '/buybiz' for buy this businesses", id, RBT(id), FormatMoney(BizzInfo[id][bBuyPrice]));
			business2[id] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]+0.75,2.0, 0, 0);
		}
		format( String, sizeof( String ), "Anda telah men-set Tipe Biz (ID: %d) menjadi %s.", id, RBT(id));
		SendClientMessage( playerid, COLOR_WHITE, String);
		SaveBusiness(id);
	}
	else if(!strcmp(params, "produk", true, 6))
	{
	    new prod;
		if(sscanf(params, "s[32]ii", params, id, prod)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /editbiz [ID Biz] [Jumlah Produk]");
    	format( String, sizeof( String ), "Businesses/Business_%d.ini", id);
		if(!dini_Exists(String)) return SendClientMessage(playerid, COLOR_GREY, "ID Biz tidak ada.");
		BizzInfo[id][bProducts] = prod;
		BizzInfo[id][bFuelStock] = prod;
		SendClientMessage(playerid, COLOR_WHITE, "Anda telah menambahkan Jumlah Produk Biz ini");
		SaveBusiness(id);
	}
	return 1;
}

CMD:clearbiz(playerid, params[])
{
	new id, String[ 256 ], slot;
	if( sscanf( params, "ui", id,slot) )
	{
	    if( PlayerInfo[playerid][pAdmin] >= 10 )
	    {
		    SendClientMessage( playerid, COLOR_WHITE, "USAGE: /clearbiz [PlayerID/PartOfName] [slot] | 1 | 2 | 3 = All |" );
		}
	}
	else
	{
	    if( PlayerInfo[playerid][pAdmin] >= 10)
	    {
	        if(slot == 1) { PlayerInfo[id][pPBiskey] = 0; }
			else if(slot == 2) { PlayerInfo[id][pPBiskey2] = 0; }
			else { PlayerInfo[id][pPBiskey] = 0; PlayerInfo[id][pPBiskey2] = 0; }
 	    	format( String, sizeof( String ), "You have cleared the Business ID of %s.",GetPlayerNameEx(id));
  	    	SendClientMessage( playerid, COLOR_YELLOW, String);
		}
	}
	return 1;
}

CMD:clearhouse(playerid, params[])
{
	new id, String[ 256 ], slot;
	if( sscanf( params, "ui", id,slot) )
	{
	    if( PlayerInfo[playerid][pAdmin] >= 10 )
	    {
		    SendClientMessage( playerid, COLOR_WHITE, "USAGE: /clearhouse [PlayerID/PartOfName] [slot] | 1 | 2 | 3 = All |" );
		}
	}
	else
	{
	    if( PlayerInfo[playerid][pAdmin] >= 10)
	    {
	        if(slot == 1) { PlayerInfo[id][pPhousekey] = INVALID_HOUSE_ID; }
			else if(slot == 2) { PlayerInfo[id][pPhousekey2] = INVALID_HOUSE_ID; }
			else { PlayerInfo[id][pPhousekey] = INVALID_HOUSE_ID; PlayerInfo[id][pPhousekey2] = INVALID_HOUSE_ID; }
 	    	format( String, sizeof( String ), "You have cleared the House ID of %s.",GetPlayerNameEx(id));
  	    	SendClientMessage( playerid, COLOR_YELLOW, String);
		}
	}
	return 1;
}

CMD:deletebiz(playerid, params[])
{
	new id, String[10000], FileName[128];
	if( sscanf( params, "d", id) )
	{
	    if( PlayerInfo[playerid][pAdmin] >= 6)
	    {
		    SendClientMessage( playerid, COLOR_WHITE, "USAGE: /deletebiz [businessid]" );
		}
	}
	else
	{
	    if( PlayerInfo[playerid][pAdmin] >= 6)
	    {
	        format( String, sizeof( String ), "Businesses/Business_%d.ini", id);
        	if(!fexist( String) )
        	{
        	    SendClientMessage( playerid, COLOR_GREY, "Invalid business ID!" );
            	return 1;
        	}
        	else
        	{
	    		format( String, sizeof( String ), "%s.ini", BizzInfo[id][bOwner]);
				if(fexist( String) )
				{
					dini_IntSet(String, "Bizz", 0);
					for(new i=0;i<MAX_PLAYERS;i++)
					{
					    new playaname[64];
					    GetPlayerName(i,playaname,sizeof(playaname));
					    {
					        if(strcmp(playaname,String,true) == 0)
					        {
								PlayerInfo[i][pPBiskey] = 0;
								SendClientMessage(playerid, -1,"    An admin has deleted your business !");
								break;
							}
						}
					}
				}
				BizzInfo[id][bOwned] = 0;
				BizzInfo[id][bEntranceX] = 0;
				BizzInfo[id][bEntranceY] = 0;
				BizzInfo[id][bEntranceZ] = 0;
				format(BizzInfo[id][bOwner], 255, "Nobody");
				format(BizzInfo[id][bMessage], 255, "Nothing");
				format(BizzInfo[id][bSegelReason], 255, "None");
				BizzInfo[id][bSegel] = 0;
				BizzInfo[id][bInteriorID] = 0;
				BizzInfo[id][bExteriorID] = 0;
				BizzInfo[id][bExitX] = 0;
				BizzInfo[id][bExitY] = 0;
				BizzInfo[id][bExitZ] = 0;
				BizzInfo[id][bLocked] = 0;
				BizzInfo[id][bType] = 0;
				BizzInfo[id][bVirWorld] = 0;
				BizzInfo[id][bTill] = 0;
				BizzInfo[id][bProducts] = 0;
				BizzInfo[id][bPetrolX] = 0;
				BizzInfo[id][bPetrolY] = 0;
				BizzInfo[id][bPetrolZ] = 0;
				BizzInfo[id][bFuelStock] = 0;
				DestroyDynamicPickup(BizzInfo[id][bPickupID]);
    			DestroyDynamic3DTextLabel(business1[id]);
				DestroyDynamic3DTextLabel(business2[id]);
				format(String, sizeof(String), "You have delete the Business (ID: %d).", id);
				SendClientMessage( playerid, COLOR_WHITE, String);
		   	    format(FileName, sizeof(FileName), "Businesses/Business_%d.ini", id);
				SaveBusiness(id);
		 		dini_Remove(FileName);
				SpawnedBusinesses--;
			}
		}
	}
	return 1;
}

CMD:transferbiz(playerid, params[])
{
	new biz = PlayerInfo[playerid][pPBiskey];
	new biz2 = PlayerInfo[playerid][pPBiskey2];
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
    if((biz != 0 && strcmp(playername, BizzInfo[biz][bOwner], true) == 0) || biz2 != 0 && strcmp(playername, BizzInfo[biz2][bOwner], true) == 0)
	{
	    new String[10000], giveplayerid, price[32], dollars, cents, duit[32];
	    if(sscanf(params, "us[32]", giveplayerid, price)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellmybiz [playerid] [harga]");
	 	if(strfind(price, ".", true) != -1)
		{
		    sscanf(price, "p<.>dd", dollars, cents);
      		format(duit, sizeof(duit), "%d%02d", dollars, cents);
	       	if(strval(duit) < 1) return SendClientMessage(playerid, COLOR_GREY, "Price must be higher than 0.");
	        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Player tersebut belum tersambung dalam Server.");
	        if(PlayerInfo[giveplayerid][pPBiskey] != 0 && strcmp(GetName(playerid), BizzInfo[PlayerInfo[giveplayerid][pPBiskey]][bOwner], true) == 0)
			{
	            SendClientMessage(playerid, COLOR_GREY, "Player tersebut sudah memiliki Biz.");
	            return 1;
	        }
	        if(PlayerInfo[giveplayerid][pLevel] >= BizzInfo[PlayerInfo[playerid][pPBiskey]][bLevelNeeded])
			{
	            if(IsPlayerInRangeOfPoint(playerid, 4.0,BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ]))
				{
				    if(BizzInfo[biz][bSegel] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Biz anda masih tersegel.");
	                if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
						SetPVarInt(giveplayerid, "BizOfferedBy", playerid);
						SetPVarInt(giveplayerid, "BizPrice", strval(duit));
						SetPVarInt(giveplayerid, "BizSlot", 1);
						SetPVarInt(giveplayerid, "BizID", biz);
	                    format(String, sizeof(String), "* Anda telah menawarkan Biz anda kepada {FF0606}%s {FFFFFF}seharga {FFFF00}%s.", GetName(giveplayerid), FormatMoney(strval(duit)));
	                    SendClientMessage(playerid, COLOR_WHITE, String);
	                    format(String, sizeof(String), "* {FF0606}%s {FFFFFF}telah menawarkan Biznya seharga {FFFF00}%s, {33AA33}(ketik /accept biz) {FFFFFF}untuk menerimanya.", GetName(playerid), FormatMoney(strval(duit)));
	                    SendClientMessage(giveplayerid, COLOR_WHITE, String);
	                    return 1;
	                }
	                else return SendClientMessage(playerid, COLOR_GREY, "Player tersebut tidak berada dekat dengan anda.");
	            }
	            else if(IsPlayerInRangeOfPoint(playerid, 4.0,BizzInfo[biz2][bEntranceX], BizzInfo[biz2][bEntranceY], BizzInfo[biz2][bEntranceZ]))
				{
				    if(BizzInfo[biz2][bSegel] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Biz anda masih tersegel.");
	                if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
						SetPVarInt(giveplayerid, "BizOfferedBy", playerid);
						SetPVarInt(giveplayerid, "BizPrice", strval(duit));
						SetPVarInt(giveplayerid, "BizSlot", 2);
						SetPVarInt(giveplayerid, "BizID", biz2);
	                    format(String, sizeof(String), "* Anda telah menawarkan Biz anda kepada {FF0606}%s {FFFFFF}seharga {FFFF00}%s.", GetName(giveplayerid), FormatMoney(strval(duit)));
	                    SendClientMessage(playerid, COLOR_WHITE, String);
	                    format(String, sizeof(String), "* {FF0606}%s {FFFFFF}telah menawarkan Biznya seharga {FFFF00}%s, {33AA33}(ketik /accept biz) {FFFFFF}untuk menerimanya.", GetName(playerid), FormatMoney(strval(duit)));
	                    SendClientMessage(giveplayerid, COLOR_WHITE, String);
	                    return 1;
	                }
	                else return SendClientMessage(playerid, COLOR_GREY, "Player tersebut tidak berada dekat dengan anda.");
	            }
	            else return SendClientMessage(playerid, COLOR_GREY, "Anda tidak berada dekat dengan Biz milik anda.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Level player tersebut belum mencukupi untuk Biz anda.");
		}
	 	else
		{
		    sscanf(price, "d", dollars);
      		format(duit, sizeof(duit), "%d00", dollars);
	       	if(strval(duit) < 1) return SendClientMessage(playerid, COLOR_GREY, "Price must be higher than 0.");
	        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Player tersebut belum tersambung dalam Server.");
	        if(PlayerInfo[giveplayerid][pPBiskey] != 0 && strcmp(GetName(playerid), BizzInfo[PlayerInfo[giveplayerid][pPBiskey]][bOwner], true) == 0)
			{
	            SendClientMessage(playerid, COLOR_GREY, "Player tersebut sudah memiliki Biz.");
	            return 1;
	        }
	        if(PlayerInfo[giveplayerid][pLevel] >= BizzInfo[PlayerInfo[playerid][pPBiskey]][bLevelNeeded])
			{
	            if(IsPlayerInRangeOfPoint(playerid, 4.0,BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ]))
				{
				    if(BizzInfo[biz][bSegel] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Biz anda masih tersegel.");
	                if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
						SetPVarInt(giveplayerid, "BizOfferedBy", playerid);
						SetPVarInt(giveplayerid, "BizPrice", strval(duit));
						SetPVarInt(giveplayerid, "BizSlot", 1);
						SetPVarInt(giveplayerid, "BizID", biz);
	                    format(String, sizeof(String), "* Anda telah menawarkan Biz anda kepada {FF0606}%s {FFFFFF}seharga {FFFF00}%s.", GetName(giveplayerid), FormatMoney(strval(duit)));
	                    SendClientMessage(playerid, COLOR_WHITE, String);
	                    format(String, sizeof(String), "* {FF0606}%s {FFFFFF}telah menawarkan Biznya seharga {FFFF00}%s, {33AA33}(ketik /accept biz) {FFFFFF}untuk menerimanya.", GetName(playerid), FormatMoney(strval(duit)));
	                    SendClientMessage(giveplayerid, COLOR_WHITE, String);
	                    return 1;
	                }
	                else return SendClientMessage(playerid, COLOR_GREY, "Player tersebut tidak berada dekat dengan anda.");
	            }
	            else if(IsPlayerInRangeOfPoint(playerid, 4.0,BizzInfo[biz2][bEntranceX], BizzInfo[biz2][bEntranceY], BizzInfo[biz2][bEntranceZ]))
				{
				    if(BizzInfo[biz2][bSegel] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Biz anda masih tersegel.");
	                if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
						SetPVarInt(giveplayerid, "BizOfferedBy", playerid);
						SetPVarInt(giveplayerid, "BizPrice", strval(duit));
						SetPVarInt(giveplayerid, "BizSlot", 2);
						SetPVarInt(giveplayerid, "BizID", biz2);
	                    format(String, sizeof(String), "* Anda telah menawarkan Biz anda kepada {FF0606}%s {FFFFFF}seharga {FFFF00}%s.", GetName(giveplayerid), FormatMoney(strval(duit)));
	                    SendClientMessage(playerid, COLOR_WHITE, String);
	                    format(String, sizeof(String), "* {FF0606}%s {FFFFFF}telah menawarkan Biznya seharga {FFFF00}%s, {33AA33}(ketik /accept biz) {FFFFFF}untuk menerimanya.", GetName(playerid), FormatMoney(strval(duit)));
	                    SendClientMessage(giveplayerid, COLOR_WHITE, String);
	                    return 1;
	                }
	                else return SendClientMessage(playerid, COLOR_GREY, "Player tersebut tidak berada dekat dengan anda.");
	            }
	            else return SendClientMessage(playerid, COLOR_GREY, "Anda tidak berada dekat dengan Biz milik anda.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Level player tersebut belum mencukupi untuk Biz anda.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Biz.");
	}
	return 1;
}

CMD:buybiz(playerid, params[])
{
	new String[1000], FileName[128];
	if(PlayerInfo[playerid][pPBiskey] > 0 && PlayerInfo[playerid][pDonateRank] < 3 || PlayerInfo[playerid][pPBiskey2] > 0) return SendClientMessage(playerid, COLOR_GREY, "Anda sudah memiliki Biz");
	else if(PlayerInfo[playerid][pPBiskey] <= 0 || PlayerInfo[playerid][pPBiskey2] <= 0 && PlayerInfo[playerid][pDonateRank] >= 3)
	{
		for(new b = 1; b < MAX_BUSINESSES; b++)
		{
			if(IsPlayerInRangeOfPoint( playerid, 5, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) )
 			{
  				if(BizzInfo[b][bOwned] == 0)
				{
					if(BizzInfo[b][bBuyPrice] == -1)
					{
	   	 				SendClientMessage( playerid, COLOR_GREY, "This Business isn't purchasable." );
					}
					else
					{
   						if(GetPlayerCash(playerid) > BizzInfo[b][bBuyPrice])
			    		{
   	    					if(PlayerInfo[playerid][pLevel] >= BizzInfo[b][bLevelNeeded])
			    	    	{
				        		if(PlayerInfo[playerid][pPBiskey] == 0)
				        		{
				        			PlayerInfo[playerid][pPBiskey] = b;
								}
				        		else if(PlayerInfo[playerid][pPBiskey2] == 0 && PlayerInfo[playerid][pDonateRank] >= 3)
				        		{
				        		    PlayerInfo[playerid][pPBiskey2] = b;
								}
     							new sendername[MAX_PLAYER_NAME];
     							GetPlayerName(playerid, sendername, sizeof(sendername));
                				format( BizzInfo[b][bOwner], MAX_PLAYER_NAME, "%s", PlayerInfo[playerid][pNormalName]);
        						DestroyDynamic3DTextLabel(business2[b]);
								format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s{FFFFFF}\nOwner: {FFFF00}%s",b, BizzInfo[b][bMessage], BizzInfo[b][bOwner]);
								business1[b] = CreateStreamed3DTextLabel(String, COLOR_RED, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]+0.75,2.0, 0, 0);
								UpdateDynamic3DTextLabelText(business1[b], COLOR_WHITE, String);
								UpdateDynamic3DTextLabelText(business2[b], COLOR_WHITE, String);
     							GivePlayerCash(playerid, -BizzInfo[b][bBuyPrice]);
				        		BizzInfo[b][bOwned] = 1;
				        		dini_IntSet(FileName, "Owned", BizzInfo[b][bOwned]);
				        		SaveBusiness(b);
		    				}
				    		else
				    		{
        						SendClientMessage( playerid, COLOR_GREY, "Your level isn't higher to buy this Business!" );
				    		}
		    			}
			    		else
			    		{
    						SendClientMessage( playerid, COLOR_GREY, "You do not have enough money to purchase this Business!" );
			    		}
		    		}
				}
			}
		}
	}
	return 1;
}
CMD:bm(playerid, params[]) {
	return cmd_bizmenu(playerid, params);
}
CMD:bizmenu(playerid, params[])
{
	new String[10000], String2[10000], id = PlayerInfo[playerid][pPBiskey];
    if(IsPlayerInRangeOfPoint(playerid, 3.0, BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid, 3.0, BizzInfo[id][bExitX],BizzInfo[id][bExitY],BizzInfo[id][bExitZ]))
    {
        if(PlayerInfo[playerid][pInBizz] != 0)
        {
            format(String2, sizeof(String2), "%s", BizzInfo[id][bMessage]);
		    format(String, sizeof(String), "Toggle Business\nBusiness Name\nBusiness Product Name\nBusiness Product Price\nStore Cash\nWithdrawn Cash");
		}
		else
		{
		    format(String2, sizeof(String2), "%s", BizzInfo[id][bMessage]);
		    format(String, sizeof(String), "Toggle Business\nBusiness Name");
		}
		ShowPlayerDialog(playerid, BUSINESESS, DIALOG_STYLE_LIST, String2, String, "Select", "Cancel");
	}
	return 1;
}

CMD:closebiz(playerid, params[])
{
	new String[1000], reason[255], i;
	if(PlayerInfo[playerid][pMember] == 6 && PlayerInfo[playerid][pRank] >= 2)
	{
		if(sscanf(params, "is[255]", i, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /closebiz [ID Biz] [Alasan]");
		if(IsPlayerInRangeOfPoint( playerid, 3, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
	 	{
			if(BizzInfo[i][bSegel] == 1) return SendClientMessage(playerid, COLOR_GREY, "Biz tersebut sudah tersegel");
			format(BizzInfo[i][bSegelReason], 255, "%s", reason);
			BizzInfo[i][bLocked] = 3;
			BizzInfo[i][bSegel] = 1;
			format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s\n{FF0000}This businesses sealed by authority\n{FFFFFF}Owner: {FFFF00}%s",i,BizzInfo[i][bMessage], BizzInfo[i][bOwner]);
			UpdateDynamic3DTextLabelText(business1[i], COLOR_WHITE, String);
			format(String, sizeof(String), "Anda telah menyegel Biz milik : {FFFFFF}%s", BizzInfo[i][bOwner]);
			SendClientMessageEx(playerid, COLOR_BLUE, String);
			SaveBusiness(i);
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "Anda tidak berada di dekat Biz tersebut.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "Anda bukan Polisi, Government/Pangkat anda belum mencukupi");
	return 1;
}
CMD:openbiz(playerid, params[])
{
	new String[1000], i;
	if(PlayerInfo[playerid][pMember] == 6 && PlayerInfo[playerid][pRank] >= 2)
	{
		if(sscanf(params, "i", i)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /openbiz [ID Biz]");
		if(IsPlayerInRangeOfPoint( playerid, 3, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
	 	{
			if(BizzInfo[i][bOwner] == '_') BizzInfo[i][bOwner] = ' ';
			if(BizzInfo[i][bSegel] == 0) return SendClientMessage(playerid, COLOR_GREY, "Biz tersebut belum tersegel");
			format(BizzInfo[i][bSegelReason], 255, "None");
			BizzInfo[i][bLocked] = 0;
			BizzInfo[i][bSegel] = 0;
			format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s{FFFFFF}\nPemilik: {FFFF00}%s",i, BizzInfo[i][bMessage], BizzInfo[i][bOwner]);
			UpdateDynamic3DTextLabelText(business1[i], COLOR_WHITE, String);
			format(String, sizeof(String), "Anda telah melepaskan Segel Biz milik : {FFFFFF}%s", BizzInfo[i][bOwner]);
			SendClientMessageEx(playerid, COLOR_BLUE, String);
			SaveBusiness(i);
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "Anda tidak berada di dekat Biz tersebut.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "Anda bukan Polisi, Government/Pangkat anda belum mencukupi");
	return 1;
}
CMD:gotobiz(playerid, params[])
{
    new idx, String[10000];
   	if(PlayerInfo[playerid][pAdmin] < 1 ) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
//    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotobiz [bizid]");
	AC_BS_SetPlayerVirtualWorld(playerid, 0);
	AC_BS_SetPlayerInterior(playerid, 0);
	AC_BS_SetPlayerPos(playerid, BizzInfo[idx][bEntranceX],BizzInfo[idx][bEntranceY],BizzInfo[idx][bEntranceZ]);
	format(String, sizeof(String), " You have teleported to business ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, String);
	return 1;
}
CMD:asellbiz(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 11)
    {
        SendClientMessageEx(playerid,COLOR_WHITE,"Executive Admin Only or Shop Tech");
        return 1;
	}
    new String[10000], id;
	if(sscanf(params, "d", id)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /asellbiz [Business ID]");

	if(IsPlayerInRangeOfPoint(playerid, 4.0,BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ]))
	{
	    if(PlayerInfo[BizzInfo[id][bOwner]][pPBiskey2] == id)
	    {
		    format( String, sizeof( String ), "Businesses/Business_%d.ini", id);
			if(!dini_Exists(String)) return SendClientMessage(playerid, COLOR_GREY, "ID Biz tidak ada.");
			return 1;
		}
		else if(PlayerInfo[BizzInfo[id][bOwner]][pPBiskey] == id)
	    {
	        format( String, sizeof( String ), "Businesses/Business_%d.ini", id);
			if(!dini_Exists(String)) return SendClientMessage(playerid, COLOR_GREY, "ID Biz tidak ada.");
	    }
	    ClearBiz(id);
	    BizzInfo[id][bLocked] = 1;
	    BizzInfo[id][bOwned] = 0;
		format(BizzInfo[id][bOwner], 255, "Nobody");
		format(BizzInfo[id][bMessage], 255, "Nothing" );
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		SaveBusiness(id);
  		format(String, sizeof(String), "{00FFFF}[id:%d]{00FFFF}this businesses for sale!\n{FFFFFF}Type: {00FFFF}%s\n{FFFFFF}Price: {00FFFF}%s\nuse '/buybiz' for buy this businesess",id, RBT(id),FormatMoney(BizzInfo[id][bBuyPrice]));
  		UpdateDynamic3DTextLabelText(BizzInfo[id][BusinessLabel], COLOR_WHITE, String);
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "You need to be near Businesess(exterior) in order to sell it.");
 	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new String[1000];
    new id = PlayerInfo[playerid][pPBiskey];
	new id2 = PlayerInfo[playerid][pPBiskey2];
	if(IsPlayerInRangeOfPoint(playerid, 3.0,BizzInfo[id][bEntranceX],BizzInfo[id][bEntranceY],BizzInfo[id][bEntranceZ]))
	{
	    if(BizzInfo[id][bSegel] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Biz anda masih tersegel.");
	 	if(PlayerInfo[playerid][pPBiskey] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Biz");
	    BizzInfo[id][bLocked] = 1;
	    BizzInfo[id][bOwned] = 0;
		format(BizzInfo[id][bOwner], 255, "Nobody");
		format(BizzInfo[id][bMessage], 255, "Nothing" );
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		SaveBusiness(id);
  		DestroyDynamic3DTextLabel(business1[id]);
		format(String, sizeof(String), "{00FFFF}[id:%d]{00FFFF}this businesses for sale!\n{FFFFFF}Type: {00FFFF}%s\n{FFFFFF}Price: {00FFFF}%s\nuse '/buybiz' for buy this businesess",id, RBT(id),FormatMoney(BizzInfo[id][bBuyPrice]));
		business1[id] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]+0.75,2.0, 0, 0);
		UpdateDynamic3DTextLabelText(business1[id], COLOR_WHITE, String);
       	PlayerInfo[playerid][pPBiskey] = 0;
	   	SendClientMessage( playerid, COLOR_LIGHTBLUE, "Successfully sell business!" );
	    format( String, sizeof( String ), "Hasil dari penjualan bisnis adalah %s.", FormatMoney(BizzInfo[id][bBuyPrice]));
	    SendClientMessage( playerid, COLOR_WHITE, String);
	    GivePlayerCash(playerid,  BizzInfo[id][bBuyPrice]);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0,BizzInfo[id2][bEntranceX],BizzInfo[id2][bEntranceY],BizzInfo[id2][bEntranceZ]))
	{
	    if(BizzInfo[id2][bSegel] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Biz anda masih tersegel.");
		if(PlayerInfo[playerid][pPBiskey2] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Biz");
	    BizzInfo[id2][bOwned] = 0;
	    BizzInfo[id2][bLocked] = 1;
		format(BizzInfo[id2][bOwner], 255, "Nobody");
		format(BizzInfo[id2][bMessage], 255, "Nothing" );
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		SaveBusiness(id);
  		DestroyDynamic3DTextLabel(business1[id2]);
		format(String, sizeof(String), "{00FFFF}[id:%d]{00FFFF}this businesses for sale!\n{FFFFFF}Type: {00FFFF}%s\n{FFFFFF}Price: {00FFFF}%s\nuse '/buybiz' for buy this businesess",id, RBT(id),FormatMoney(BizzInfo[id][bBuyPrice]));
		business1[id2] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[id2][bEntranceX], BizzInfo[id2][bEntranceY], BizzInfo[id2][bEntranceZ]+0.75,2.0, 0, 0);
        UpdateDynamic3DTextLabelText(business2[id2], COLOR_WHITE, String);
		PlayerInfo[playerid][pPBiskey2] = 0;
	   	SendClientMessage( playerid, COLOR_LIGHTBLUE, "Successfully sell business!" );
	    format( String, sizeof( String ), "Hasil dari penjualan bisnis adalah %s.", FormatMoney(BizzInfo[id2][bBuyPrice]));
	    SendClientMessage( playerid, COLOR_WHITE, String);
	    GivePlayerCash(playerid,  BizzInfo[id2][bBuyPrice]);
	}
	else { SendClientMessageEx(playerid, COLOR_WHITE, "You need to be near your bizz(exterior) in order to sell it."); }
 	return 1;
}

CMD:bizhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pPBiskey] != 0 || PlayerInfo[playerid][pPBiskey2] != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREEN,"________=== Bizz Help ===_________");
		SendClientMessageEx(playerid,COLOR_WHITE,"'/buyprods' | '/setproductrice' | '/lockbiz' | '/bizwithdraw'");
	 	SendClientMessageEx(playerid,COLOR_WHITE,"'/bizdeposit' | '/bizname' | '/sellbiz' | '/checkbiz' | '/setproductname'");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREEN,"Anda belum memiliki Biz");
	}
	return 1;
}


CMD:abizhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 7) { SendClientMessageEx(playerid,COLOR_GOLD,"Executive Admin Only."); }
	SendClientMessageEx(playerid,COLOR_BLUE,"/setbiz | /clearbiz | /deletebiz | /editbiz");
	return 1;
}

CMD:searchcar(playerid, params[])
{
    new String[10000];
    if (!IsACop(playerid))
	{
        SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Cop / FBI!");
        return 1;
    }
    new carid = GetPlayerVehicleID(playerid);
    new closestcar = GetClosestCar(playerid,carid);
    if(!IsPlayerInRangeOfVehicle(playerid, 9.0))
	{
        SendClientMessageEx(playerid,COLOR_GREY,"You are not near any vehicles.");
        return 1;
    }
    foreach(Player, i)
	{
        new v = GetPlayerVehicle(i, closestcar);
        if(v != -1)
		{
            String[0] = 0;
            for(new x = 0; x < 3; x++)
			{
                if(PlayerVehicleInfo[i][v][pvWeapons][x] != 0)
				{
                    new
                        szWep[20];

                    GetWeaponName(PlayerVehicleInfo[i][v][pvWeapons][x], szWep, sizeof(szWep));
                    if(isnull(String)) format(String, sizeof(String), "* Trunk contains: %s", szWep);
                    else format(String, sizeof(String), "%s, %s", String, szWep);
                }
            }
            if(!isnull(String)) SendClientMessageEx(playerid, COLOR_WHITE, String);
            else SendClientMessageEx(playerid, COLOR_WHITE, "* Trunk contains: nothing.");
        }
    }
    return 1;
}

CMD:takecarweapons(playerid, params[])
{
    if (PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pLeader] != 3)
	{
        SendClientMessageEx(playerid,COLOR_GREY,"You're not a law enforcement officer.");
        return 1;
    }
    new carid = GetPlayerVehicleID(playerid);
    new closestcar = GetClosestCar(playerid,carid);
    if(!IsPlayerInRangeOfVehicle(playerid, 9.0))
	{
        SendClientMessageEx(playerid,COLOR_GREY,"You are not near any vehicles.");
        return 1;
    }
    foreach(Player, i)
	{
        new v = GetPlayerVehicle(i, closestcar);
        if(v != -1)
		{
            PlayerVehicleInfo[i][v][pvWeapons][0] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][1] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][2] = 0;
        }
        SendClientMessageEx(playerid, COLOR_WHITE,  "All weapons have been removed from this vehicle.");
    }
    return 1;
}

CMD:phoneprivacy(playerid, params[])
{
    if(PlayerInfo[playerid][pPnumber] != 0 && PlayerInfo[playerid][pDonateRank] >= 2)
	{
        if(PlayerInfo[playerid][pPhonePrivacy] == 1)
		{
            PlayerInfo[playerid][pPhonePrivacy] = 0;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the phone privacy feature.");
        }
        else
		{
            PlayerInfo[playerid][pPhonePrivacy] = 1;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the phone privacy feature.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a phone or you aren't a Advanced Donater.");
    }
    return 1;
}

CMD:speakerphone(playerid, params[])
{
    if(PlayerInfo[playerid][pPnumber] != 0)
	{
        if(PlayerInfo[playerid][pSpeakerPhone] == 1)
		{
            PlayerInfo[playerid][pSpeakerPhone] = 0;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the speakerphone feature on your phone.");
        }
        else
		{
            PlayerInfo[playerid][pSpeakerPhone] = 1;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the speakerphone feature on your phone.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a phone.");
    }
    return 1;
}

CMD:jobduty(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
        if(JobDuty[playerid] == 1)
		{
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now off duty from your Car Mechanic job and will not receive calls anymore.");
            JobDuty[playerid] = 0;
            SetPlayerColor(playerid, TEAM_HIT_COLOR);
            Mechanics -= 1;
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now on duty with your Car Mechanic job and will receive calls from people in need.");
            JobDuty[playerid] = 1;
            SetPlayerColor(playerid, COLOR_LIGHTGREEN);
            ++Mechanics;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not a mechanic!");
    }
    return 1;
}

CMD:gate(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pMember] == 1)
	{
		GetPlayerPos( playerid, Positions[0][0], Positions[0][1], Positions[0][2]);
		GetDynamicObjectPos(LSPDGate, Positions[1][0], Positions[1][1], Positions[1][2]);
		GetDynamicObjectPos(LSPDGate1, Positions[1][0], Positions[1][1], Positions[1][2]);
		GetDynamicObjectPos(LSPDGate2, Positions[4][0], Positions[4][1], Positions[4][2]);
		GetDynamicObjectPos(SANGate, Positions[6][0], Positions[6][1], Positions[6][2]);
		if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[1][0], Positions[1][1], Positions[1][2]) < 15.0 )
		{
			if(LSPDGateStatus == 0 )
			{
				MoveDynamicObject(LSPDGate, 1544.24255, -1620.39404, 13.30220, 1.5, 0.00000, 0.00000, 180.00000);
				MoveDynamicObject(LSPDGate1, 1544.53821, -1635.28381, 13.30220, 1.5, 0.00000, 0.00000, 0.00000);
				LSPDGateStatus = 1;
			}
			else
			{
				LSPDGateStatus = 0;
				MoveDynamicObject(LSPDGate, 1539.83447, -1625.47095, 13.30220, 2, 0.00000, 0.00000, 270.00000);
				MoveDynamicObject(LSPDGate1, 1539.83447, -1630.86499, 13.30220, 2 , 0.00000, 0.00000, 270.00000);
			}
		}
		else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[4][0], Positions[4][1], Positions[4][2]) < 15.0 )
		{
			if(LSPDGate2Status == 0)
			{
				MoveDynamicObject(LSPDGate2, 1588.6501464844, -1638.0750732422, 6.2343215942383, 3);
				LSPDGate2Status = 1;
			}
			else
			{
				MoveDynamicObject(LSPDGate2, 1588.6428222656, -1638.02734375, 15.240161895752, 3);
				LSPDGate2Status = 0;
			}
		}
		else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[6][0], Positions[6][1], Positions[6][2]) < 15.0 )
		{
			if(SANGateStatus == 0)
			{
				MoveDynamicObject(SANGate, 773.99975585938, -1384.8256835938, 12.719062805176, 4.5000);
				SANGateStatus = 1;
			}
			else
			{
				MoveDynamicObject(SANGate, 781.77154541016, -1384.7692871094, 12.72666358947, 4.5000);
				SANGateStatus = 0;
			}
		}
	}
	return 1;
}
CMD:sapdonline(playerid, params[])
{
    new duty[10], String[10000];
    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1)
	{
	    format(String, sizeof(String), "Name\tStatus\tDuty\n");
		foreach(Player, i)
		{
			if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
			{
   				switch(PlayerInfo[i][pDuty])
		    	{
					case 0:
    				{
   	    				duty = "Off Duty";
					}
					case 1:
					{
	    				duty = "On Duty";
					}
     			}
				format(String, sizeof(String), "%s%s\t%s\t%d Min", String, GetName(i), duty, PlayerInfo[i][pDutyTime]/60);
                format(String, sizeof(String), "%s\n", String);
			}
		}
		format(String, sizeof(String), "%s\n", String);
		ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_TABLIST_HEADERS, "San Andreas Police Department Members", String, "Select", "Cancel");
    }
    return 1;
}

CMD:sagsonline(playerid, params[])
{
    new duty[10], String[10000];
    if(PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6)
	{
	    format(String, sizeof(String), "Name\tStatus\tDuty\n");
		foreach(Player, i)
		{
			if(PlayerInfo[i][pMember] == 6 || PlayerInfo[i][pLeader] == 6)
			{
   				switch(PlayerInfo[i][pDuty])
		    	{
					case 0:
    				{
   	    				duty = "Off Duty";
					}
					case 1:
					{
	    				duty = "On Duty";
					}
     			}
				format(String, sizeof(String), "%s%s\t%s\t%d Min", String, GetName(i), duty, PlayerInfo[i][pDutyTime]/60);
                format(String, sizeof(String), "%s\n", String);
			}
		}
		format(String, sizeof(String), "%s\n", String);
		ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_TABLIST_HEADERS, "San Andreas Goverment Service Members", String, "Select", "Cancel");
    }
    return 1;
}

CMD:samdonline(playerid, params[])
{
    new duty[10], String[10000];
    if(PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
	{
	    format(String, sizeof(String), "Name\tStatus\tDuty\n");
		foreach(Player, i)
		{
			if(PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4)
			{
   				switch(PlayerInfo[i][pDuty])
		    	{
					case 0:
    				{
   	    				duty = "Off Duty";
					}
					case 1:
					{
	    				duty = "On Duty";
					}
     			}
				format(String, sizeof(String), "%s%s\t%s\t%d Min", String, GetName(i), duty, PlayerInfo[i][pDutyTime]/60);
                format(String, sizeof(String), "%s\n", String);
			}
		}
		format(String, sizeof(String), "%s\n", String);
		ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_TABLIST_HEADERS, "San Andreas Medical Department Members", String, "Select", "Cancel");
    }
    return 1;
}

CMD:sanewsonline(playerid, params[])
{
    new duty[10], String[10000];
    if(PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pMember] == 9)
	{
	    format(String, sizeof(String), "Name\tStatus\tDuty\n");
		foreach(Player, i)
		{
			if(PlayerInfo[i][pMember] == 9 || PlayerInfo[i][pLeader] == 9)
			{
   				switch(PlayerInfo[i][pDuty])
		    	{
					case 0:
    				{
   	    				duty = "Off Duty";
					}
					case 1:
					{
	    				duty = "On Duty";
					}
     			}
				format(String, sizeof(String), "%s%s\t%s\t%d Min", String, GetName(i), duty, PlayerInfo[i][pDutyTime]/60);
                format(String, sizeof(String), "%s\n", String);
			}
		}
		format(String, sizeof(String), "%s\n", String);
		ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_TABLIST_HEADERS, "San Andreas Network Members", String, "Select", "Cancel");
    }
    return 1;
}

CMD:mdc(playerid, params[])
{
    if(IsMDCPermitted(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            ShowPlayerDialog(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MDC - Logged in", "*Find LEO\n*Civilian Information\n*Law Enforcement Agencies\n*MDC Message\n*SMS", "OK", "Cancel");
            ConnectedToPC[playerid] = 1337;
        }
        else SendClientMessageEx(playerid, COLOR_GREY, "You are not in a vehicle.");
    }
    return 1;
}

CMD:dice(playerid, params[])
{
    new String[10000], dice = random(7)+1, dice2 = random(6)+1, dice3 = random(5)+1, animid;
    if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dice [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dice [1-3]");
    if (PlayerInfo[playerid][pDice])
	{
		switch(animid)
		{
			case 1:
			{
				format(String, sizeof(String), "* %s rolls a dice that lands on {FF0000}%d", GetPlayerNameEx(playerid),dice);
	        	ProxDetector(5.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        	}
			case 2:
			{
				format(String, sizeof(String), "* %s rolls a dice that lands on {FF0000}%d-%d", GetPlayerNameEx(playerid),dice,dice2);
	        	ProxDetector(5.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        	}
			case 3:
			{
				format(String, sizeof(String), "* %s rolls a dice that lands on {FF0000}%d-%d-%d.", GetPlayerNameEx(playerid),dice,dice2,dice3);
	        	ProxDetector(5.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        	}
		}
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a dice.");
        return 1;
    }
    return 1;
}
CMD:buybait(playerid,params[])
{
    new String[10000];
	if(!IsPlayerInRangeOfPoint(playerid,3,377.9064,-1887.2205,7.8359))
	{
	    SendClientMessageEx(playerid, COLOR_WHITE,"Kamu harus di Toko Umpan untuk membeli umpan");
	    return 1;
	}
	if(PlayerInfo[playerid][pCacing] > 20) return SendClientMessageEx(playerid,COLOR_RED,"Anda tidak dapat membawa umpan lagi.");
	format(String, sizeof(String), "Bait Price: $0.5");
	ShowPlayerDialog( playerid, 15773, DIALOG_STYLE_INPUT, "BUY BAIT",String, "Buy", "Cancel" );
	return 1;
}
CMD:buymats(playerid,params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessageEx(playerid, COLOR_WHITE,"Kamu harus mencapai level 5 untuk menggunakan perintah ini");
	if(!IsPlayerInRangeOfPoint(playerid,3,1566.8347,23.2207,24.1641))
	{
	    SendClientMessageEx(playerid, COLOR_WHITE,"You are not at Material Depot");
	    return 1;
	}
	format(String, sizeof(String), "Material Price : $250.00\nMaterial Amount : 2500");
	ShowPlayerDialog( playerid, 15273, DIALOG_STYLE_MSGBOX, "BUY MATS", String, "Buy", "Cancel" );
	return 1;
}
CMD:buyschematic(playerid,params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pIllegalJob] == 1)
	{
		if(GetPlayerCash(playerid) < 50000) return SendClientMessage(playerid, COLOR_WHITE, "Kamu harus memiliki $500.00 untuk membeli Weapon Schematic");
		if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessageEx(playerid, COLOR_WHITE,"Kamu harus mencapai level 5 untuk menggunakan perintah ini");
		if(!IsPlayerInRangeOfPoint(playerid,3,1566.8347,23.2207,24.1641))
		{
		    SendClientMessageEx(playerid, COLOR_WHITE,"You are not at Material Depot");
		    return 1;
		}
		format(String, sizeof(String), "WEAPONINFO: Kamu telah membeli Weapon Schematic dengan harga $500.00");
		SendClientMessage(playerid, COLOR_ARWIN, String);
		PlayerInfo[playerid][pScrewdriver] = 1;
		GivePlayerCash(playerid, -50000);
	}
	else SendClientMessage(playerid, -1, "ERROR: You are not Arms Dealer");
	return 1;
}
CMD:buycomponent(playerid, params[])
{
    new String[10000];
    if(!IsPlayerInRangeOfPoint(playerid,3,854.6003, -605.2056, 18.4219))
	{
	    SendClientMessageEx(playerid, COLOR_WHITE,"Kamu harus di Toko Komponen untuk membeli umpan");
	    return 1;
	}
	format(String, sizeof(String), "Component Price: $0.50\nComponent Available: %d", stockcomp);
	ShowPlayerDialog( playerid, 15776, DIALOG_STYLE_INPUT, "TOKO COMPONENT", String, "Beli", "Cancel");
	return 1;
}

CMD:boomboxhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_WHITE, " Khusus Vip Silver Ke atas !");
	SendClientMessage(playerid, COLOR_WHITE, " /boombox /boomboxnext");
	return 1;
}

CMD:boombox(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] < 2) { SendClientMessage(playerid, COLOR_GREY, "Kamu Bukan Donator Silver"); return 1; }
    new String[10000];
    if(!GetPVarType(playerid, "BoomboxObject"))
    {
        foreach(Player, i)
        {
            if(GetPVarType(i, "BoomboxObject"))
            {
                if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPVarFloat(i, "bposX"), GetPVarFloat(i, "bposY"), GetPVarFloat(i, "bposZ")))
                {
                    SendClientMessage(playerid, COLOR_GREY, " There is another boombox nearby, place yours somewhere else.");
                    return 1;
                }
            }
        }

        new Float:x, Float:y, Float:z, Float:a;
        GetPlayerPos(playerid, x, y, z); GetPlayerFacingAngle(playerid, a);
        SetPVarInt(playerid, "BoomboxObject", CreateDynamicObject(2103, x, y, z, 0.0, 0.0, 0.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
        SetPVarFloat(playerid, "bposX", x); SetPVarFloat(playerid, "bposY", y); SetPVarFloat(playerid, "bposZ", z);
        SetPVarInt(playerid, "bboxareaid", CreateDynamicSphere(x, y, z, 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
        format(String, sizeof(String), "/boomboxnext untuk memainkan lagu.");
        SendClientMessage(playerid, COLOR_LIGHTBLUE, String);
    }
    else
    {
        DestroyDynamicObject(GetPVarInt(playerid, "BoomboxObject"));
        DeletePVar(playerid, "BoomboxObject"); DeletePVar(playerid, "BoomboxURL");
        DeletePVar(playerid, "bposX"); DeletePVar(playerid, "bposY"); DeletePVar(playerid, "bposZ");
        if(GetPVarType(playerid, "bboxareaid"))
        {
            foreach(Player,i)
            {
                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "bboxareaid")))
                {
                    StopAudioStreamForPlayer(i);
                    SendClientMessage(i, COLOR_GREY, " The boombox creator has removed his boombox.");
                }
            }
            DeletePVar(playerid, "bboxareaid");
        }
        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have removed your boombox.");
    }
    return 1;
}

// Boombox editing - Usage: /boomboxnext [url]
CMD:boomboxnext(playerid, params[])
{
    if(!GetPVarType(playerid, "BoomboxObject")) return SendClientMessage(playerid, COLOR_GREY, "You don't have a boombox placed.");
    ShowPlayerDialog(playerid, 32003,DIALOG_STYLE_INPUT, "Boombox Input URL", "Please put a Music URL to play the Music", "Okay", "Cancel");
    return 1;
}
//GUN HOLDING
CMD:syow(playerid, params[])
{
	new weaponid = GetPlayerWeapon(playerid);

	if (!weaponid)
		return SendClientMessage(playerid, -1, "You are not holding a weapon.");

	if (!IsWeaponWearable(weaponid))
		return SendClientMessage(playerid, -1, "This weapon cannot be edited.");

	if (!strcmp(params, "position", true))
	{
		if (EditingWeapon[playerid])
			return SendClientMessage(playerid, -1, "You are already editing a weapon.");

		SetPlayerArmedWeapon(playerid, 0);
		SetPlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid), GetWeaponModel(weaponid), WeaponInfo[playerid][weaponid][Bone], WeaponInfo[playerid][weaponid][Position][0], WeaponInfo[playerid][weaponid][Position][1], WeaponInfo[playerid][weaponid][Position][2], WeaponInfo[playerid][weaponid][Position][3], WeaponInfo[playerid][weaponid][Position][4], WeaponInfo[playerid][weaponid][Position][5], 1.000000, 1.000000, 1.000000);
		EditAttachedObject(playerid, GetWeaponObjectSlot(weaponid));
		EditingWeapon[playerid] = weaponid;
	}
	else if (!strcmp(params, "bone", true))
	{
		if (EditingWeapon[playerid])
			return SendClientMessage(playerid, -1, "You are already editing a weapon.");

		ShowPlayerDialog(playerid, DIALOG_EDIT_BONE, DIALOG_STYLE_LIST, "Bone", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft shoulder\nRight shoulder\nNeck\nJaw", "Choose", "Cancel");
		EditingWeapon[playerid] = weaponid;
	}
	else if (!strcmp(params, "stats", true))
	{
		if (EditingWeapon[playerid])
			return SendClientMessage(playerid, -1, "You cannot hide a weapon while you are editing it.");

		if (!IsWeaponHideable(weaponid))
			return SendClientMessage(playerid, -1, "This weapon cannot be hidden.");

		new weaponname[18], string[48];

		GetWeaponName(weaponid, weaponname, sizeof(weaponname));

		if (WeaponInfo[playerid][weaponid][Hidden])
		{
			format(string, sizeof(string), "You have set your %s to show.", weaponname);
			WeaponInfo[playerid][weaponid][Hidden] = false;
		}
		else
		{
			format(string, sizeof(string), "You have set your %s to not show.", weaponname);
			WeaponInfo[playerid][weaponid][Hidden] = true;

			if (IsPlayerAttachedObjectSlotUsed(playerid, GetWeaponObjectSlot(weaponid)))
				RemovePlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid));
		}
		SendClientMessage(playerid, -1, string);
	}
	else SendClientMessage(playerid, -1, "USAGE: /syow [position/bone/stats]");
	return 1;
}
CMD:items(playerid, params[])
{
    new String[10000], S3MP4K[10000];
    strcat(S3MP4K, "Item\tAmount\n");
	if(GetPlayerCash(playerid) < 0)
    {
    	format(String, sizeof(String), "Cash\t{FF0000}($%s)\n{FFFFFF}", FormatMoney(GetPlayerCash(playerid)));
     	strcat(S3MP4K, String);
	}
	if(GetPlayerCash(playerid) > 0)
    {
    	format(String, sizeof(String), "Cash\t$%s\n", FormatMoney(GetPlayerCash(playerid)));
     	strcat(S3MP4K, String);
	}
    if(PlayerInfo[playerid][pCacing] > 0)
    {
	    format(String, sizeof(String), "Bait\t%d\n", PlayerInfo[playerid][pCacing]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pPancingan] > 0)
    {
		format(String, sizeof(String), "Fish pole\t%d use(s) left\n", PlayerInfo[playerid][pPancingan]);
	    strcat(S3MP4K, String);
	}
	if(PlayerInfo[playerid][pBeratIkan] > 0)
    {
		format(String, sizeof(String), "Fish total\t%d Kilograms\n", PlayerInfo[playerid][pBeratIkan]);
	    strcat(S3MP4K, String);
	}
    if(PlayerInfo[playerid][pCangkul] > 0)
    {
		format(String, sizeof(String), "Farm hoe\t%d use(s) left\n", PlayerInfo[playerid][pCangkul]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pComponent] > 0)
    {
		format(String, sizeof(String), "Component\t%d\n", PlayerInfo[playerid][pComponent]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pTire] > 0)
    {
		format(String, sizeof(String), "Wrench\t%d use(s) left\n", PlayerInfo[playerid][pTire]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pBibitAnggur] > 0)
    {
		format(String, sizeof(String), "[SEED] Anggur\t%d left\n", PlayerInfo[playerid][pBibitAnggur]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pBibitBlueberry] > 0)
    {
		format(String, sizeof(String), "[SEED] Blueberry\t%d left\n", PlayerInfo[playerid][pBibitBlueberry]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pBibitStrawberry] > 0)
    {
		format(String, sizeof(String), "[SEED] Strawberry\t%d left\n", PlayerInfo[playerid][pBibitStrawberry]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pBibitGandum] > 0)
    {
		format(String, sizeof(String), "[SEED] Gandum\t%d left\n", PlayerInfo[playerid][pBibitGandum]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pBibitTomat] > 0)
    {
		format(String, sizeof(String), "[SEED] Tomat\t%d left\n", PlayerInfo[playerid][pBibitTomat]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pTanamanAnggur] > 0)
    {
		format(String, sizeof(String), "[PLANT] Anggur\t%d left\n", PlayerInfo[playerid][pTanamanAnggur]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pTanamanBlueberry] > 0)
    {
		format(String, sizeof(String), "[PLANT] Blueberry\t%d left\n", PlayerInfo[playerid][pTanamanBlueberry]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pTanamanStrawberry] > 0)
    {
		format(String, sizeof(String), "[PLANT] Strawberry\t%d left\n", PlayerInfo[playerid][pTanamanStrawberry]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pTanamanGandum] > 0)
    {
		format(String, sizeof(String), "[PLANT] Gandum\t%d left\n", PlayerInfo[playerid][pTanamanGandum]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pTanamanTomat] > 0)
    {
		format(String, sizeof(String), "[PLANT] Tomat\t%d left\n", PlayerInfo[playerid][pTanamanTomat]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pAmoxicilin] > 0)
    {
		format(String, sizeof(String), "[MEDICINE]Amoxicilin\t%d use(s) left\n", PlayerInfo[playerid][pAmoxicilin]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pUltrafluenza] > 0)
    {
		format(String, sizeof(String), "[MEDICINE]Ultrafluenza\t%d use(s) left\n", PlayerInfo[playerid][pUltrafluenza]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pCrack] > 0)
    {
	    format(String, sizeof(String), "{FF0000}Crack\t%d\n", PlayerInfo[playerid][pCrack]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pPot] > 0)
    {
	    format(String, sizeof(String), "{FF0000}Pot\t%d\n", PlayerInfo[playerid][pPot]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pMats] > 0)
    {
	    format(String, sizeof(String), "{FF0000}Materials\t%d\n", PlayerInfo[playerid][pMats]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pScrewdriver] > 0)
    {
	    format(String, sizeof(String), "{FF0000}Gun Schematic\n");
	    strcat(S3MP4K, String);
    }
    for(new i; i < 12; ++i)
   	{
		if(PlayerInfo[playerid][pGuns][i] > 0)
		{
			new wname[10000];
			GetWeaponName(PlayerInfo[playerid][pGuns][i], wname, sizeof(wname));
			format(String, sizeof(String), "{FF0000}[WEAPON] %s\t%d Ammo\n", wname, PlayerInfo[playerid][pGunsAmmo][i]);
			strcat(S3MP4K, String);
		}
	}
	ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_TABLIST_HEADERS, "Items", S3MP4K, "Close", "");
    return 1;
}
CMD:givevehlic(playerid, params[])
{
    new string[10000], giveplayerid, slot;
    if(sscanf(params, "ud", giveplayerid, slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /givevehlic [playerid] [slot]");
    if(PlayerInfo[playerid][pMember] == 6)
    {
		if(gPlayerLogged{giveplayerid} != 0)
	 	{
	  		if(GetPlayerVehicleCount(playerid) != 0)
		 	{
			 	if(PlayerVehicleInfo[playerid][slot][pvLicense] >= 0)
				{
					format(string, sizeof(string), "VEHICLEINFO: {FFFFFF}Kamu telah memberikan License kepada {FFFF00}%s {FFFFFF}milik {FFFF00}%s",GetVehicleName(PlayerVehicleInfo[giveplayerid][slot][pvId]), GetPlayerNameEx(giveplayerid));
				    SendClientMessage(playerid, COLOR_ARWIN, string);
				    format(string, sizeof(string), "VEHICLEINFO: {FFFF00}%s {FFFFFF}anda telah tardaftar pada perpajakan Negara",GetVehicleName(PlayerVehicleInfo[giveplayerid][slot][pvId]), GetPlayerNameEx(giveplayerid));
				    SendClientMessage(playerid, COLOR_ARWIN, string);
					PlayerVehicleInfo[giveplayerid][slot][pvLicense] = 1;
					PlayerVehicleInfo[giveplayerid][slot][pvLicenseTime] = 30;
					new year, month, day, edate[32];
					getdate(year, month, day);
					strmid(edate, AddDay(day, month, year, PlayerVehicleInfo[giveplayerid][slot][pvLicenseTime]), 0, 32, 255);
					strmid(PlayerVehicleInfo[giveplayerid][slot][pvLicenseExpired], edate, 0, strlen(edate), 255);
			 	}
				return 1;
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GRAD2, "Player tersebut tidak memiliki mobil satu pun!");
			}
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Player tersebut tidak online");
		}
	}
	return 1;
}
CMD:showvehlic(playerid, params[])
{
    new string[10000], S3MP4K[10000], WIWIN[10000], giveplayerid, slot;
    if(sscanf(params, "ud", giveplayerid, slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /showvehlic [playerid] [slot]");
	if(gPlayerLogged{giveplayerid} != 0)
 	{
  		if(GetPlayerVehicleCount(playerid) != 0)
	 	{
			format(string, sizeof(string), "{00FFFF}Name: {FFFF00}%s\n",GetVehicleName(PlayerVehicleInfo[playerid][slot][pvId]));
			strcat(S3MP4K, string);
			format(string, sizeof(string), "{00FFFF}Insurances: {FFFF00}%d\n", PlayerVehicleInfo[playerid][slot][pvInsurances]);
			strcat(S3MP4K, string);
			format(string, sizeof(string), "{00FFFF}Plate: {FFFF00}%s\n", PlayerVehicleInfo[playerid][slot][pvNumberPlate]);
			strcat(S3MP4K, string);
			if(PlayerVehicleInfo[playerid][slot][pvLicense] == 0)
			{
				format(string, sizeof(string), "{00FFFF}License Expired Date: {FF0000}NO HAVE VALID LICENSE\n");
				strcat(S3MP4K, string);
		 	}
			if(PlayerVehicleInfo[playerid][slot][pvLicense] == 1)
			{
				format(string, sizeof(string), "{00FFFF}License Expired Date: {FFFF00}%s\n", PlayerVehicleInfo[playerid][slot][pvLicenseExpired]);
				strcat(S3MP4K, string);
		 	}
		 	if(PlayerVehicleInfo[playerid][slot][pvMesinUpgrade] == 1)
			{
				format(string, sizeof(string), "{00FFFF}Upgrade: {FFFF00}Engine\n");
				strcat(S3MP4K, string);
		 	}
		 	if(PlayerVehicleInfo[playerid][slot][pvBodyUpgrade] == 1)
			{
				format(string, sizeof(string), "{00FFFF}Upgrade: {FFFF00}Body");
				strcat(S3MP4K, string);
		 	}
		 	format(WIWIN, sizeof(WIWIN), "{00FFFF}%s Vehicle", GetName(playerid));
		 	ShowPlayerDialog(giveplayerid, DIALOG_INVENTORY, DIALOG_STYLE_MSGBOX, WIWIN, S3MP4K, "Close", "");
			return 1;
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Kamu tidak memiliki mobil satu pun!");
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "Player tersebut tidak online");
	}
	return 1;
}
CMD:rbody(playerid, params[])
{
	new veh = GetPlayerVehicleID(playerid);
	new panels, doors, lights, tires;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, "Anda harus mengendarai kendaraan");
	GetVehicleDamageStatus(veh, panels, doors, lights, tires);
	panels = encode_panels(3, 3, 3, 3, 3, 3, 3);
	UpdateVehicleDamageStatus(veh, panels, doors, lights, tires);
	SendClientMessage(playerid, COLOR_GREEN, "Anda telah melepaskan body mobil");
	return 1;
}

CMD:vehobject(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GOLD, "Anda telah memasang kembali Vehicle Object anda");
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
   		for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++)
	    {
			if(PlayerVehicleInfo[playerid][v][pvToyID][vt] != 0)
	        {
	            DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvToy][vt]);
				PlayerVehicleInfo[playerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[playerid][v][pvToyID][vt], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt],  -1, -1, -1, 15.0, 0.0);
	 			AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);
				if(PlayerVehicleInfo[playerid][v][pvToyID][vt] == 18659)
				{
					if(vt == 0)
					{
						SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText1],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID1]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize1], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol1]], 0, 0);
					}
			  		if(vt == 1)
			  		{
						SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText2],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID2]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize2], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol2]], 0, 0);
					}
					if(vt == 2)
			  		{
						SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText3],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID3]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize3], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol3]], 0, 0);
					}
					if(vt == 3)
					{
						SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText4],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID4]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize4], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol4]], 0, 0);
					}
					if(vt == 4)
					{
						SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText5],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID5]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize5], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol5]], 0, 0);
					}
					if(vt == 5)
					{
						SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText6],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID6]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize6], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol6]], 0, 0);
					}
					if(vt == 6)
					{
						SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText7],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID7]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize7], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol7]], 0, 0);
					}
					if(vt == 7)
					{
						SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText8],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID8]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize8], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol8]], 0, 0);
					}
					if(vt == 8)
					{
						SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText9],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID9]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize9], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol9]], 0, 0);
					}
					if(vt == 9)
					{
						SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText10],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID10]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize10], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol10]], 0, 0);
					}
				}
				else
				{
					SetDynamicObjectMaterial(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvToyIndex][vt], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTextureID][vt]][textureid], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture1][vt]][texturename1], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture2][vt]][texturename2], VehicleColors[PlayerVehicleInfo[playerid][v][pvToyColor][vt]]);
				}
			}
		}
	}
	return 1;
}

CMD:editvtoys1(playerid, params[])
{
	new Stringg[512];
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
 	{
    	new Float: vx, Float: vy, Float: vz;
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], vx, vy, vz);
	   	if(IsPlayerInRangeOfPoint(playerid, 1.0, vx, vy, vz))
		{
			for(new vt=0;vt<MAX_OBJECTS_PER_PLAYER;vt++)
			{
				new name[32];
				format(name, sizeof(name), "None");
				for(new id;id<sizeof(HoldingVToysAll); id++)
				{
					if(HoldingVToysAll[id][holdingmodelid] == PlayerVehicleInfo[playerid][d][pvToyID][vt])
					{
						format(name, sizeof(name), "%s", HoldingVToysAll[id][holdingmodelname]);
					}
				}

				format(Stringg, sizeof(Stringg), "%s(%d) %s\n", Stringg, vt, name);
			}
			pvehEditID[playerid] = d;
			ShowPlayerDialog(playerid, VTOYEDIT, DIALOG_STYLE_LIST, "Pilih Car Component", Stringg, "Pilih", "Engga");
		}
	}
	return 1;
}

CMD:editvtoys2(playerid, params[])
{
	new Stringg[512];
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
 	{
    	new Float: vx, Float: vy, Float: vz;
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], vx, vy, vz);
	   	if(IsPlayerInRangeOfPoint(playerid, 1.0, vx, vy, vz))
		{
			for(new vt=0;vt<MAX_OBJECTS_PER_PLAYER;vt++)
			{
				new name[32];
				format(name, sizeof(name), "None");
				for(new id;id<sizeof(HoldingVToysAll); id++)
				{
					if(HoldingVToysAll[id][holdingmodelid] == PlayerVehicleInfo[playerid][d][pvToyID][vt])
					{
						format(name, sizeof(name), "%s", HoldingVToysAll[id][holdingmodelname]);
					}
				}

				format(Stringg, sizeof(Stringg), "%s(%d) %s\n", Stringg, vt, name);
			}
			pvehEditID[playerid] = d;
			ShowPlayerDialog(playerid, DELETEVTOYS, DIALOG_STYLE_LIST, "Pilih Car Component", Stringg, "Pilih", "Engga");
		}
	}
	return 1;
}

CMD:editvtoys3(playerid, params[])
{
	new Stringg[512];
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
 	{
    	new Float: vx, Float: vy, Float: vz;
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], vx, vy, vz);
	   	if(IsPlayerInRangeOfPoint(playerid, 1.0, vx, vy, vz))
		{
			for(new vt=0;vt<MAX_OBJECTS_PER_PLAYER;vt++)
			{
				new name[32];
				format(name, sizeof(name), "None");
				for(new id;id<sizeof(HoldingVToysAll); id++)
				{
					if(HoldingVToysAll[id][holdingmodelid] == PlayerVehicleInfo[playerid][d][pvToyID][vt])
					{
						format(name, sizeof(name), "%s", HoldingVToysAll[id][holdingmodelname]);
					}
				}

				format(Stringg, sizeof(Stringg), "%s(%d) %s\n", Stringg, vt, name);
			}
			pvehEditID[playerid] = d;
			ShowPlayerDialog(playerid, VTOYCOL, DIALOG_STYLE_LIST, "Pilih Car Component", Stringg, "Pilih", "Engga");
		}
	}
	return 1;
}

CMD:editvtoys4(playerid, params[])
{
	new Stringg[512];
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
 	{
    	new Float: vx, Float: vy, Float: vz;
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], vx, vy, vz);
	   	if(IsPlayerInRangeOfPoint(playerid, 1.0, vx, vy, vz))
		{
			for(new vt=0;vt<MAX_OBJECTS_PER_PLAYER;vt++)
			{
				new name[32];
				format(name, sizeof(name), "None");
				for(new id;id<sizeof(HoldingVToysAll); id++)
				{
					if(HoldingVToysAll[id][holdingmodelid] == PlayerVehicleInfo[playerid][d][pvToyID][vt])
					{
						format(name, sizeof(name), "%s", HoldingVToysAll[id][holdingmodelname]);
					}
				}

				format(Stringg, sizeof(Stringg), "%s(%d) %s\n", Stringg, vt, name);
			}
			pvehEditID[playerid] = d;
			ShowPlayerDialog(playerid, VTOYCOL4, DIALOG_STYLE_LIST, "Pilih Car Component", Stringg, "Pilih", "Engga");
		}
	}
	return 1;
}

CMD:editvtoys5(playerid, params[])
{
	new Stringg[512];
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
 	{
    	new Float: vx, Float: vy, Float: vz;
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], vx, vy, vz);
	   	if(IsPlayerInRangeOfPoint(playerid, 1.0, vx, vy, vz))
		{
			for(new vt=0;vt<MAX_OBJECTS_PER_PLAYER;vt++)
			{
				new name[32];
				format(name, sizeof(name), "None");
				for(new id;id<sizeof(HoldingVToysAll); id++)
				{
					if(HoldingVToysAll[id][holdingmodelid] == PlayerVehicleInfo[playerid][d][pvToyID][vt])
					{
						format(name, sizeof(name), "%s", HoldingVToysAll[id][holdingmodelname]);
					}
				}

				format(Stringg, sizeof(Stringg), "%s(%d) %s\n", Stringg, vt, name);
			}
			pvehEditID[playerid] = d;
			ShowPlayerDialog(playerid, VTOYTEXT, DIALOG_STYLE_LIST, "Pilih Car Component", Stringg, "Pilih", "Engga");
		}
	}
	return 1;
}

CMD:editvtoys6(playerid, params[])
{
	new Stringg[512];
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
 	{
    	new Float: vx, Float: vy, Float: vz;
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], vx, vy, vz);
	   	if(IsPlayerInRangeOfPoint(playerid, 1.0, vx, vy, vz))
		{
			for(new vt=0;vt<MAX_OBJECTS_PER_PLAYER;vt++)
			{
				new name[32];
				format(name, sizeof(name), "None");
				for(new id;id<sizeof(HoldingVToysAll); id++)
				{
					if(HoldingVToysAll[id][holdingmodelid] == PlayerVehicleInfo[playerid][d][pvToyID][vt])
					{
						format(name, sizeof(name), "%s", HoldingVToysAll[id][holdingmodelname]);
					}
				}

				format(Stringg, sizeof(Stringg), "%s(%d) %s\n", Stringg, vt, name);
			}
			pvehEditID[playerid] = d;
			ShowPlayerDialog(playerid, VTOYTEXTCOL, DIALOG_STYLE_LIST, "Pilih Car Component", Stringg, "Pilih", "Engga");
		}
	}
	return 1;
}

CMD:editvtoys7(playerid, params[])
{
	new Stringg[512];
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
 	{
    	new Float: vx, Float: vy, Float: vz;
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], vx, vy, vz);
	   	if(IsPlayerInRangeOfPoint(playerid, 1.0, vx, vy, vz))
		{
			for(new vt=0;vt<MAX_OBJECTS_PER_PLAYER;vt++)
			{
				new name[32];
				format(name, sizeof(name), "None");
				for(new id;id<sizeof(HoldingVToysAll); id++)
				{
					if(HoldingVToysAll[id][holdingmodelid] == PlayerVehicleInfo[playerid][d][pvToyID][vt])
					{
						format(name, sizeof(name), "%s", HoldingVToysAll[id][holdingmodelname]);
					}
				}

				format(Stringg, sizeof(Stringg), "%s(%d) %s\n", Stringg, vt, name);
			}
			pvehEditID[playerid] = d;
			ShowPlayerDialog(playerid, VTOYTEXTSIZE, DIALOG_STYLE_LIST, "Pilih Car Component", Stringg, "Pilih", "Engga");
		}
	}
	return 1;
}

CMD:editvtoys8(playerid, params[])
{
	new Stringg[512];
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
 	{
    	new Float: vx, Float: vy, Float: vz;
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], vx, vy, vz);
	   	if(IsPlayerInRangeOfPoint(playerid, 1.0, vx, vy, vz))
		{
			for(new vt=0;vt<MAX_OBJECTS_PER_PLAYER;vt++)
			{
				new name[32];
				format(name, sizeof(name), "None");
				for(new id;id<sizeof(HoldingVToysAll); id++)
				{
					if(HoldingVToysAll[id][holdingmodelid] == PlayerVehicleInfo[playerid][d][pvToyID][vt])
					{
						format(name, sizeof(name), "%s", HoldingVToysAll[id][holdingmodelname]);
					}
				}

				format(Stringg, sizeof(Stringg), "%s(%d) %s\n", Stringg, vt, name);
			}
			pvehEditID[playerid] = d;
			ShowPlayerDialog(playerid, VTOYTEXTFONT, DIALOG_STYLE_LIST, "Pilih Car Component", Stringg, "Pilih", "Engga");
		}
	}
	return 1;
}

CMD:togneon(playerid, params[])
{
	new Float:x, Float:y, Float:z;
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
	    if(IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z))
		{
			if(GetPVarInt(playerid, "togneon") == 0)
			{
				if(PlayerVehicleInfo[playerid][d][pvNeon] == 0)
				{
					return 1;
				}
				if(PlayerVehicleInfo[playerid][d][pvNeon] == 1)
				{
					PlayerVehicleInfo[playerid][d][pvNeonObj] = CreateDynamicObject(18648,0,0,0,0,0,0);
					PlayerVehicleInfo[playerid][d][pvNeonObj2] = CreateDynamicObject(18648,0,0,0,0,0,0);
					PlayerVehicleInfo[playerid][d][pvNeonObj3] = CreateDynamicObject(18648,0,0,0,0,0,0);
					PlayerVehicleInfo[playerid][d][pvNeonObj4] = CreateDynamicObject(18648,0,0,0,0,0,0);
				}
				if(PlayerVehicleInfo[playerid][d][pvNeon] == 2)
				{
		            PlayerVehicleInfo[playerid][d][pvNeonObj] = CreateDynamicObject(18647,0,0,0,0,0,0);
              		PlayerVehicleInfo[playerid][d][pvNeonObj2] = CreateDynamicObject(18647,0,0,0,0,0,0);
              		PlayerVehicleInfo[playerid][d][pvNeonObj3] = CreateDynamicObject(18647,0,0,0,0,0,0);
              		PlayerVehicleInfo[playerid][d][pvNeonObj4] = CreateDynamicObject(18647,0,0,0,0,0,0);
				}
				if(PlayerVehicleInfo[playerid][d][pvNeon] == 3)
				{
		            PlayerVehicleInfo[playerid][d][pvNeonObj] = CreateDynamicObject(18649,0,0,0,0,0,0);
              		PlayerVehicleInfo[playerid][d][pvNeonObj2] = CreateDynamicObject(18649,0,0,0,0,0,0);
              		PlayerVehicleInfo[playerid][d][pvNeonObj3] = CreateDynamicObject(18649,0,0,0,0,0,0);
              		PlayerVehicleInfo[playerid][d][pvNeonObj4] = CreateDynamicObject(18649,0,0,0,0,0,0);
				}
				if(PlayerVehicleInfo[playerid][d][pvNeon] == 4)
				{
		            PlayerVehicleInfo[playerid][d][pvNeonObj] = CreateDynamicObject(18652,0,0,0,0,0,0);
		            PlayerVehicleInfo[playerid][d][pvNeonObj2] = CreateDynamicObject(18652,0,0,0,0,0,0);
		            PlayerVehicleInfo[playerid][d][pvNeonObj3] = CreateDynamicObject(18652,0,0,0,0,0,0);
		            PlayerVehicleInfo[playerid][d][pvNeonObj4] = CreateDynamicObject(18652,0,0,0,0,0,0);
				}
				if(PlayerVehicleInfo[playerid][d][pvNeon] == 5)
				{
		            PlayerVehicleInfo[playerid][d][pvNeonObj] = CreateDynamicObject(18650,0,0,0,0,0,0);
		          	PlayerVehicleInfo[playerid][d][pvNeonObj2] = CreateDynamicObject(18650,0,0,0,0,0,0);
		          	PlayerVehicleInfo[playerid][d][pvNeonObj3] = CreateDynamicObject(18650,0,0,0,0,0,0);
		          	PlayerVehicleInfo[playerid][d][pvNeonObj4] = CreateDynamicObject(18650,0,0,0,0,0,0);
				}
				if(PlayerVehicleInfo[playerid][d][pvNeon] == 6)
				{
		            PlayerVehicleInfo[playerid][d][pvNeonObj] = CreateDynamicObject(18647,0,0,0,0,0,0);
		            PlayerVehicleInfo[playerid][d][pvNeonObj2] = CreateDynamicObject(18647,0,0,0,0,0,0);
		            PlayerVehicleInfo[playerid][d][pvNeonObj3] = CreateDynamicObject(18652,0,0,0,0,0,0);
		            PlayerVehicleInfo[playerid][d][pvNeonObj4] = CreateDynamicObject(18652,0,0,0,0,0,0);
				}
    			AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][d][pvNeonObj], PlayerVehicleInfo[playerid][d][pvId], -0.8, 0.0, -0.50, 0.0, 0.0, 0.0);
		        AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][d][pvNeonObj2], PlayerVehicleInfo[playerid][d][pvId], 0.8, 0.0, -0.50, 0.0, 0.0, 0.0);
		        AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][d][pvNeonObj3], PlayerVehicleInfo[playerid][d][pvId], -0.8, 0.0, -0.50, 0.0, 0.0, 0.0);
		        AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][d][pvNeonObj4], PlayerVehicleInfo[playerid][d][pvId], 0.8, 0.0, -0.50, 0.0, 0.0, 0.0);
				SetPVarInt(playerid, "togneon", 1);
				return 1;
			}
			if(GetPVarInt(playerid, "togneon") == 1)
			{
				DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvNeonObj]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvNeonObj2]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvNeonObj3]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvNeonObj4]);
				SetPVarInt(playerid, "togneon", 0);
				return 1;
			}
		}
	}
	return 1;
}

CMD:destroyneon(playerid, params[])
{
	new Float:x, Float:y, Float:z;
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
 	{
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
	   	if(IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z))
		{
			if(PlayerVehicleInfo[playerid][d][pvNeon] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GOLD, "Kendaraan ini belum terpasang Neon.");
				return 1;
			}
			else
			{
				PlayerVehicleInfo[playerid][d][pvNeon] = 0;
				DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvNeonObj]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvNeonObj2]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvNeonObj3]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvNeonObj4]);
				SendClientMessageEx(playerid, COLOR_GOLD, "Neon di kendaraan sudah terlepas.");
				SetPVarInt(playerid, "togneon", 0);
				return 1;
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "Harus berada di dalam kendaraan milik anda.");
	return 1;
}

CMD:givetexturevehobject1(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 10 && IsPlayerAdmin(playerid))
	{
	    new giveplayerid, v, vt, texture;
	    if(sscanf(params, "iiii", giveplayerid, v, vt, texture)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givetexturevehobject1 [playerid] [Slot Vehicle 0-4] [Slot Toys 0-9] [Texture ID]");
	    if(v > 4 || v < 0) return SendClientMessage(playerid, COLOR_GREY, "Vehicle Slot 0-4");
	    if(vt > 9 || vt < 0) return SendClientMessage(playerid, COLOR_GREY, "Toy Slot 0-9");
		if(PlayerVehicleInfo[giveplayerid][v][pvToyID][vt] == 18659) return -1;
		PlayerVehicleInfo[playerid][v][pvToyTexture1][vt] = texture;
	    DestroyDynamicObject(PlayerVehicleInfo[giveplayerid][v][pvToy][vt]);
		PlayerVehicleInfo[giveplayerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[giveplayerid][v][pvToyID][vt], PlayerVehicleInfo[giveplayerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt], 10);
		SetDynamicObjectMaterial(PlayerVehicleInfo[giveplayerid][v][pvToy][vt], PlayerVehicleInfo[giveplayerid][v][pvToyIndex][vt], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTextureID][vt]][textureid], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture1][vt]][texturename1], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture2][vt]][texturename2], VehicleColors[PlayerVehicleInfo[playerid][v][pvToyColor][vt]]);
		AttachDynamicObjectToVehicle(PlayerVehicleInfo[giveplayerid][v][pvToy][vt], PlayerVehicleInfo[giveplayerid][v][pvId], PlayerVehicleInfo[giveplayerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);
	}
	return 1;
}

CMD:givetexturevehobject2(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 10 && IsPlayerAdmin(playerid))
	{
	    new giveplayerid, v, vt, texture;
	    if(sscanf(params, "iiii", giveplayerid, v, vt, texture)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givetexturevehobject2 [playerid] [Slot Vehicle 0-4] [Slot Toys 0-9] [Texture ID]");
	    if(v > 4 || v < 0) return SendClientMessage(playerid, COLOR_GREY, "Vehicle Slot 0-4");
	    if(vt > 9 || vt < 0) return SendClientMessage(playerid, COLOR_GREY, "Toy Slot 0-9");
		if(PlayerVehicleInfo[giveplayerid][v][pvToyID][vt] == 18659) return -1;
		PlayerVehicleInfo[playerid][v][pvToyTexture2][vt] = texture;
	    DestroyDynamicObject(PlayerVehicleInfo[giveplayerid][v][pvToy][vt]);
		PlayerVehicleInfo[giveplayerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[giveplayerid][v][pvToyID][vt], PlayerVehicleInfo[giveplayerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt], 10);
		SetDynamicObjectMaterial(PlayerVehicleInfo[giveplayerid][v][pvToy][vt], PlayerVehicleInfo[giveplayerid][v][pvToyIndex][vt], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTextureID][vt]][textureid], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture1][vt]][texturename1], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture2][vt]][texturename2], VehicleColors[PlayerVehicleInfo[playerid][v][pvToyColor][vt]]);
		AttachDynamicObjectToVehicle(PlayerVehicleInfo[giveplayerid][v][pvToy][vt], PlayerVehicleInfo[giveplayerid][v][pvId], PlayerVehicleInfo[giveplayerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);
	}
	return 1;
}

CMD:givetexturevehobject3(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 10 && IsPlayerAdmin(playerid))
	{
	    new giveplayerid, v, vt, texture;
	    if(sscanf(params, "iiii", giveplayerid, v, vt, texture)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givetexturevehobject2 [playerid] [Slot Vehicle 0-4] [Slot Toys 0-9] [Texture ID]");
	    if(v > 4 || v < 0) return SendClientMessage(playerid, COLOR_GREY, "Vehicle Slot 0-4");
	    if(vt > 9 || vt < 0) return SendClientMessage(playerid, COLOR_GREY, "Toy Slot 0-9");
		if(PlayerVehicleInfo[giveplayerid][v][pvToyID][vt] == 18659) return -1;
		PlayerVehicleInfo[playerid][v][pvToyTextureID][vt] = texture;
	    DestroyDynamicObject(PlayerVehicleInfo[giveplayerid][v][pvToy][vt]);
		PlayerVehicleInfo[giveplayerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[giveplayerid][v][pvToyID][vt], PlayerVehicleInfo[giveplayerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt], 10);
		SetDynamicObjectMaterial(PlayerVehicleInfo[giveplayerid][v][pvToy][vt], PlayerVehicleInfo[giveplayerid][v][pvToyIndex][vt], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTextureID][vt]][textureid], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture1][vt]][texturename1], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture2][vt]][texturename2], VehicleColors[PlayerVehicleInfo[playerid][v][pvToyColor][vt]]);
		AttachDynamicObjectToVehicle(PlayerVehicleInfo[giveplayerid][v][pvToy][vt], PlayerVehicleInfo[giveplayerid][v][pvId], PlayerVehicleInfo[giveplayerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);
	}
	return 1;
}

CMD:gvt(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 10 && IsPlayerAdmin(playerid))
	{
	    new giveplayerid, v, vt;
	    if(sscanf(params, "iii", giveplayerid, v, vt)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givevehicletext [playerid] [Slot Vehicle 0-4] [Slot Toys 0-9]");
	    if(v > 4 || v < 0) return SendClientMessage(playerid, COLOR_GREY, "Vehicle Slot 0-4");
	    if(vt > 9 || vt < 0) return SendClientMessage(playerid, COLOR_GREY, "Toy Slot 0-9");
		if(PlayerVehicleInfo[giveplayerid][v][pvToyID][vt] != 0) return SendClientMessage(playerid, COLOR_GREY, "Slot tersebut sudah terisi");
		PlayerVehicleInfo[giveplayerid][v][pvToyID][vt] = 18659;
		PlayerVehicleInfo[giveplayerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[giveplayerid][v][pvToyID][vt], PlayerVehicleInfo[giveplayerid][v][pvToyPosX][vt], PlayerVehicleInfo[giveplayerid][v][pvToyPosY][vt], PlayerVehicleInfo[giveplayerid][v][pvToyPosZ][vt], PlayerVehicleInfo[giveplayerid][v][pvToyRotX][vt], PlayerVehicleInfo[giveplayerid][v][pvToyRotY][vt], PlayerVehicleInfo[giveplayerid][v][pvToyRotZ][vt], 10);
		if(vt == 0)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText1], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText1],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID1]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize1], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol1]], 0, 0);
		}
		if(vt == 1)
 		{
			format(PlayerVehicleInfo[playerid][v][pvToyText2], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText2],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID2]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize2], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol2]], 0, 0);
		}
		if(vt == 2)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText3], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText3],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID3]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize3], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol3]], 0, 0);
		}
		if(vt == 3)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText4], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText4],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID4]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize4], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol4]], 0, 0);
		}
		if(vt == 4)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText5], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText5],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID5]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize5], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol5]], 0, 0);
		}
		if(vt == 5)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText6], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText6],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID6]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize6], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol6]], 0, 0);
		}
		if(vt == 6)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText7], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText7],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID7]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize7], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol7]], 0, 0);
		}
		if(vt == 7)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText8], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText8],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID8]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize8], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol8]], 0, 0);
		}
		if(vt == 8)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText9], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText9],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID9]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize9], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol9]], 0, 0);
		}
		if(vt == 9)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText10], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText10],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID10]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize10], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol10]], 0, 0);
		}
		AttachDynamicObjectToVehicle(PlayerVehicleInfo[giveplayerid][v][pvToy][vt], PlayerVehicleInfo[giveplayerid][v][pvId], PlayerVehicleInfo[giveplayerid][v][pvToyPosX][vt], PlayerVehicleInfo[giveplayerid][v][pvToyPosY][vt], PlayerVehicleInfo[giveplayerid][v][pvToyPosZ][vt], PlayerVehicleInfo[giveplayerid][v][pvToyRotX][vt], PlayerVehicleInfo[giveplayerid][v][pvToyRotY][vt], PlayerVehicleInfo[giveplayerid][v][pvToyRotZ][vt]);
	}
	return 1;
}
CMD:editvtoys(playerid, params[])
{
	new Float:vx, Float:vy, Float:vz;
	for(new d;d<MAX_PLAYERVEHICLES;d++)
 	{
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], vx, vy, vz);
	   	if(IsPlayerInRangeOfPoint(playerid, 1.0, vx, vy, vz))
		{
	 		for(new x = 1; x < sizeof(Mod); x++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, Mod[x][mPosX], Mod[x][mPosY], Mod[x][mPosZ]))
			   	{
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
					if(engine == VEHICLE_PARAMS_ON)
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "Mesin kendaraan harus mati terlebih dahulu.");
						return 1;
					}
					//pvehEditID[playerid] = d;
					ShowPlayerDialog(playerid, EDITVTOYS, DIALOG_STYLE_LIST, "Vehicle Object", "Edit Vehicle Object\nDelete Vehicle Object\nChange Color\nBagian Object\nEdit Text\nColor Text\nSize Text\nFont Text", "Pilih", "Engga");
				}
			}
		}
	}
	return 1;
}

CMD:buy(playerid, params[])
{
	new businessname[512];
	new String[10000], S3MP4K[10000];
	new id = PlayerInfo[playerid][pInBizz];
	new price1 = BizzInfo[id][bProductPrice][0], price2 = BizzInfo[id][bProductPrice][1], price3 = BizzInfo[id][bProductPrice][2], price4 = BizzInfo[id][bProductPrice][3], price5 = BizzInfo[id][bProductPrice][4], price6 = BizzInfo[id][bProductPrice][5];
	for(new a = 1; a < sizeof(BuyPoint); a++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, BuyPoint[a][bbPos][0], BuyPoint[a][bbPos][1], BuyPoint[a][bbPos][2]))
		{
			if(BizzInfo[id][bType] == 1)
		    {
		        format(businessname, sizeof(businessname), "%s", BizzInfo[PlayerInfo[playerid][pInBizz]][bMessage]);
		        format(String, sizeof(String), "%s (Dice) - $%s\n%s (Pack of Cigaretes) - $%s\n%s (Energy Drink) - $%s\n%s (Farm Hoe) - $%s\n", BizzInfo[id][bProductName1], FormatMoney(price1), BizzInfo[id][bProductName2], FormatMoney(price2), BizzInfo[id][bProductName3], FormatMoney(price3), BizzInfo[id][bProductName4], FormatMoney(price4));
		        strcat(S3MP4K, String);
		        format(String, sizeof(String), "%s (Bandage) - $%s\n%s (Painkiller) - $%s", BizzInfo[id][bProductName5], FormatMoney(price5), BizzInfo[id][bProductName6], FormatMoney(price6));
		        strcat(S3MP4K, String);
				ShowPlayerDialog(playerid, STOREMENU, DIALOG_STYLE_LIST, businessname, S3MP4K, "Beli", "Engga");
		    }
		    else if(BizzInfo[id][bType] == 2)
		    {
		        format(businessname, sizeof(businessname), "%s", BizzInfo[id][bMessage]);
		        format(String, sizeof(String), "%s (Clothes) - $%s\n%s (Mask) - $%s\n%s (Accessoris) - $%s",BizzInfo[id][bProductName1], FormatMoney(price1),BizzInfo[id][bProductName2], FormatMoney(price2), BizzInfo[id][bProductName3], FormatMoney(price3));
				ShowPlayerDialog(playerid, 3497, DIALOG_STYLE_LIST, businessname, String, "Pilih", "Engga");
		    }
		    else if(BizzInfo[id][bType] == 3)
		    {
		        format(businessname, sizeof(businessname), "%s", BizzInfo[id][bMessage]);
		        format(String, sizeof(String), "%s (Menu +12)  - $%s\n%s (Menu +48) - $%s\n%s (Menu +60) - $%s\n%s (Menu +84) - $%s\n%s (Menu +100) - $%s\n%s (Energy Drink) - $%s", BizzInfo[id][bProductName1], FormatMoney(price1), BizzInfo[id][bProductName2], FormatMoney(price2), BizzInfo[id][bProductName3], FormatMoney(price3), BizzInfo[id][bProductName4], FormatMoney(price4) ,BizzInfo[id][bProductName5] ,FormatMoney(price5), BizzInfo[id][bProductName6], FormatMoney(price6));
				ShowPlayerDialog(playerid, 1330, DIALOG_STYLE_LIST, businessname, String, "Beli", "Engga");
		    }
		    else if(BizzInfo[id][bType] == 4)
		    {
		        format(businessname, sizeof(businessname), "%s", BizzInfo[id][bMessage]);
		        format(String, sizeof(String), "%s (Cellphone) - $%s\n%s (Walkie-Talkie) - $%s\n%s (Camera) - $%s\n%s (Phone Credit (10.000)) - $%s\n%s (SIM Card) - $%s",BizzInfo[id][bProductName1],FormatMoney(price1),BizzInfo[id][bProductName2], FormatMoney(price2),BizzInfo[id][bProductName3], FormatMoney(price3),BizzInfo[id][bProductName4], FormatMoney(price4),BizzInfo[id][bProductName5],FormatMoney(price5));
				ShowPlayerDialog(playerid, 11019, DIALOG_STYLE_LIST, businessname, String, "Beli", "Engga");
			}
			else if(BizzInfo[id][bType] == 5)
			{
			    format(businessname, sizeof(businessname), "%s", BizzInfo[id][bMessage]);
		        format(String, sizeof(String), "%s (Fish pole) - %s\n%s (Wrench) - $%s\n%s (Golf Club) - $%s\n%s (Baseball Bat) - $%s\n%s (Jerry can) - $%s",BizzInfo[id][bProductName1],FormatMoney(price1),BizzInfo[id][bProductName2], FormatMoney(price2), BizzInfo[id][bProductName3],FormatMoney(price3),BizzInfo[id][bProductName4], FormatMoney(price4),BizzInfo[id][bProductName5], FormatMoney(price5));
				ShowPlayerDialog(playerid, 11029, DIALOG_STYLE_LIST, businessname, String, "Beli", "Engga");
			}
			else if(BizzInfo[id][bType] == 6)
		    {
		        format(businessname, sizeof(businessname), "%s", BizzInfo[id][bMessage]);
		        format(String, sizeof(String), "%s (Beer) - $%s\n%s (Wine) - $%s\n%s (Energy Drink) - $%s",BizzInfo[id][bProductName1], FormatMoney(price1),BizzInfo[id][bProductName2], FormatMoney(price2), BizzInfo[id][bProductName3], FormatMoney(price3));
				ShowPlayerDialog(playerid, 1331, DIALOG_STYLE_LIST, businessname, String, "Pilih", "Engga");
		    }
		    else if(BizzInfo[id][bType] == 7)
		    {
		        format(businessname, sizeof(businessname), "%s", BizzInfo[PlayerInfo[playerid][pInBizz]][bMessage]);
		        format(String, sizeof(String), "%s (Dice) - $%s\n%s (Pack of Cigaretes) - $%s\n%s (Energy Drink) - $%s\n%s (Farm Hoe) - $%s\n", BizzInfo[id][bProductName1], FormatMoney(price1), BizzInfo[id][bProductName2], FormatMoney(price2), BizzInfo[id][bProductName3], FormatMoney(price3), BizzInfo[id][bProductName4], FormatMoney(price4));
		        strcat(S3MP4K, String);
		        format(String, sizeof(String), "%s (Bandage) - $%s\n%s (Painkiller) - $%s", BizzInfo[id][bProductName5], FormatMoney(price5), BizzInfo[id][bProductName6], FormatMoney(price6));
		        strcat(S3MP4K, String);
				ShowPlayerDialog(playerid, PETROLMENU, DIALOG_STYLE_LIST, businessname, S3MP4K, "Beli", "Engga");
		    }
		    else if(BizzInfo[id][bType] == 8)
		    {
		        format(businessname, sizeof(businessname), "%s", BizzInfo[PlayerInfo[playerid][pInBizz]][bMessage]);
		        format(String, sizeof(String), "%s (GYM Membership) - $%s\n%s (Energy Drink) - $%s\n%s (Water) - $%s\n%s (Snack) - $%s", BizzInfo[id][bProductName1], FormatMoney(price1), BizzInfo[id][bProductName2], FormatMoney(price2), BizzInfo[id][bProductName3], FormatMoney(price3), BizzInfo[id][bProductName4], FormatMoney(price4));
				ShowPlayerDialog(playerid, GYMMENU, DIALOG_STYLE_LIST, businessname, String, "Beli", "Engga");
		    }
		}
	}
    return 1;
}

CMD:buyhouse(playerid, params[])
{
    new String[10000];
    new playername[MAX_PLAYER_NAME];
    new sendername[MAX_PLAYER_NAME];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) )
		{
            if( HouseInfo[h][hOwned] == 0 )
			{
                if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
				{
                    format(String, sizeof(String), "   You must be Level %d to purchase this!", HouseInfo[h][hLevel]);
                    SendClientMessageEx(playerid, COLOR_GRAD5, String);
                    return 1;
                }
                if(PlayerInfo[playerid][pPhousekey] == INVALID_HOUSE_ID)
				{

					if(GetPlayerCash(playerid) > HouseInfo[h][hValue])
					{
						PlayerInfo[playerid][pPhousekey] = h;
						HouseInfo[h][hOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						if(HouseInfo[h][hCustomInterior] == 1)
						{
							TogglePlayerControllable(playerid, 1);
							GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
							SetPVarInt(playerid, "LoadingObjects", 1);
							SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
						}
						SendClientMessageEx(playerid, COLOR_ARWIN, "HOUSE: {FFFFFF}You've succesfuly bought this house, use {FFFF00}'/help'{FFFFFF} to show more command");
						SaveHouses();
						OnPlayerStatsUpdate(playerid);
						DestroyDynamicPickup(HouseInfo[h][hPickupID]);
						format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}Owner: {FFFFFF}%s{00FF00}\nAddres: {FFFFFF}%s",h,HouseInfo[h][hOwner],HouseInfo[h][hAlamat]);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], COLOR_YELLOW, String);
						HouseInfo[h][hPickupID] = CreateDynamicPickup(19132, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]);
						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						format(String,sizeof(String),"%s (IP: %s) has bought house ID %d for %s.",GetName(playerid),ip,h,FormatMoney(HouseInfo[h][hValue]));
						Log("logs/house.log", String);
						return 1;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "   You don't have the cash for that!");
						return 1;
					}
				}
				else if(PlayerInfo[playerid][pPhousekey2] == INVALID_HOUSE_ID)
				{
					if(GetPlayerCash(playerid) > HouseInfo[h][hValue])
					{
						PlayerInfo[playerid][pPhousekey2] = h;
						HouseInfo[h][hOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						if(HouseInfo[h][hCustomInterior] == 1)
						{
							TogglePlayerControllable(playerid, 1);
							GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
							SetPVarInt(playerid, "LoadingObjects", 1);
							SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
						}
						SendClientMessageEx(playerid, COLOR_ARWIN, "HOUSE: {FFFFFF}You've succesfuly bought this house, use {FFFF00}'/help'{FFFFFF} to show more command");
						SaveHouses();
						OnPlayerStatsUpdate(playerid);
						DestroyDynamicPickup(HouseInfo[h][hPickupID]);
						format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}Owner: {FFFFFF}%s\n{00FF00}\nAddres: {FFFFFF}%s",h,HouseInfo[h][hOwner],HouseInfo[h][hAlamat]);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], COLOR_LIGHTBLUE, String);
						HouseInfo[h][hPickupID] = CreateDynamicPickup(19132, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]);
						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						format(String,sizeof(String),"%s (IP: %s) has bought house ID %d for %s.",GetName(playerid),ip,h,FormatMoney(HouseInfo[h][hValue]));
						Log("logs/house.log", String);
						return 1;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "   You don't have the cash for that!");
						return 1;
					}
				}
            }
            else
			{
                SendClientMessageEx( playerid, COLOR_WHITE, "This house is owned." );
            }
        }
    }
    return 1;
}

CMD:time(playerid, params[])
{
	new String[10000];
    new mtext[20];
    new year, month,day;
    getdate(year, month, day);
    if(month == 1) { mtext = "Januari"; }
    else if(month == 2) { mtext = "Februari"; }
    else if(month == 3) { mtext = "Maret"; }
    else if(month == 4) { mtext = "April"; }
    else if(month == 5) { mtext = "Mei"; }
    else if(month == 6) { mtext = "Juni"; }
    else if(month == 7) { mtext = "Juli"; }
    else if(month == 8) { mtext = "Agustus"; }
    else if(month == 9) { mtext = "September"; }
    else if(month == 10) { mtext = "Oktober"; }
    else if(month == 11) { mtext = "November"; }
    else if(month == 12) { mtext = "Desember"; }
    new hour,minuite,second;
    gettime(hour,minuite,second);
    FixHour(hour);
    hour = shifthour;
    new pc = PlayerInfo[playerid][pPDTime]/60;

    if (minuite < 10)
	{
        if (PlayerInfo[playerid][pJailTime] > 0)
		{
            format(String, sizeof(String), "Tanggal : %d\nBulan : %s\nJam : %d:0%d\nJail Time Left: %d sec\nAnda dapat mengambil paycheck %d menit lagi", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10,pc);
        }
        else
		{
            format(String, sizeof(String), "Tanggal : %d\nBulan : %s\nJam : %d:0%d\nAnda dapat mengambil paycheck %d menit lagi", day, mtext, hour, minuite,pc);
        }
    }
    else
	{
        if (PlayerInfo[playerid][pJailTime] > 0)
		{
            format(String, sizeof(String), "Tanggal : %d\nBulan : %s\nJam : %d:%d\nJail Time Left: %d sec\nAnda dapat mengambil paycheck %d menit lagi", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10,pc);
        }
        else
		{
            format(String, sizeof(String), "Tanggal : %d\nBulan : %s\nJam : %d:%d\nAnda dapat mengambil paycheck %d menit lagi", day, mtext, hour, minuite,pc);
        }
    }
    ShowPlayerDialog(playerid,233,DIALOG_STYLE_MSGBOX ,"Time",String,"Ok","Exit");
    return 1;
}
CMD:tow(playerid, params[]) {
 	if(IsACop(playerid) || PlayerInfo[playerid][pWSJob] == 1 || PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7) {
   		if(IsPlayerInAnyVehicle(playerid))
     	{
			new carid = GetPlayerVehicleID(playerid);
			if(IsATowTruck(carid))
			{
   				new closestcar = GetClosestCar(playerid, carid), S3MP4K[1401];
       			if(GetDistanceToCar(playerid,closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid)) {
					foreach(Player, i) {
						if(GetPlayerVehicle(i, closestcar) != -1) {
						    if(ProxDetectorS(30.0,playerid,i))
								SendClientMessageEx(i, COLOR_ARWIN, "VEHICLEINFO: {ffffff}Your vehicle is being towed by {00FFFF}Authority.");
							arr_Towing[playerid] = closestcar;
						    format(S3MP4K, sizeof(S3MP4K), "TOWINFO: {ffffff}You have towed {ffff00}%s {ffffff}vehicle.", GetName(i));
						    SendClientMessageEx(playerid, COLOR_ARWIN, S3MP4K);
      						return AttachTrailerToVehicle(closestcar,carid);
						}
					}
					SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle has no registration, it is available for impounding.");
					AttachTrailerToVehicle(closestcar,carid);
					arr_Towing[playerid] = closestcar;
					return 1;
     			}
			}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to tow with this vehicle.");
   		}
     	else SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be inside a vehicle to use this command!");
	}
   	else SendClientMessageEx(playerid, COLOR_GRAD2, "You must be a LSPD/Mechanic to use this command.");
	return 1;
}

CMD:untow(playerid, params[])
{
 	if(IsACop(playerid) || PlayerInfo[playerid][pWSJob] == 1)
  	{
   		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
     	{
      		SendClientMessageEx(playerid, COLOR_GRAD1,"You have unhooked the vehicle that you were towing.");
			arr_Towing[playerid] = INVALID_VEHICLE_ID;
			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
     	}
      	else
       	{
        	SendClientMessageEx(playerid, COLOR_GRAD1,"You are currently not towing anything.");
        }
  	}
   	else
	{
 		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	}
	return 1;
}
CMD:refundcmd(playerid, params[])
{
	new String[10000];
 	if(PlayerInfo[playerid][pAdmin] >= 11)
	{
		if (!norefund)
		{
			norefund = 1;
			format(String, sizeof(String), "[REFUNDCMD] Refund Command disabled by %s", PlayerInfo[playerid][pAdminName]);
			ABroadCast(COLOR_YELLOW, String, 1);
		}
		else
		{
			norefund = 0;
			format(String, sizeof(String), "[REFUNDCMD] Refund Command enabled by %s", PlayerInfo[playerid][pAdminName]);
			ABroadCast(COLOR_YELLOW, String, 1);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
CMD:spy(playerid, params[])
{
	new String[1401];
 	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminReadPm[playerid] == false)
		{
			AdminReadPm[playerid] = true;
			format(String, sizeof(String), "You are now enabled spying [WT, PM, and WHISPER]", PlayerInfo[playerid][pAdminName]);
			SendClientMessage(playerid, COLOR_YELLOW, String);
		}
		else
		{
			AdminReadPm[playerid] = false;
			format(String, sizeof(String), "You are now disabled spying [WT, PM, and WHISPER]", PlayerInfo[playerid][pAdminName]);
			SendClientMessage(playerid, COLOR_YELLOW, String);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
CMD:noooc(playerid, params[])
{
 	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if (!noooc)
		{
			noooc = 1;
			BroadCast(COLOR_YELLOW, "[Global OOC] OOC chat channel disabled by an Admin!");
		}
		else
		{
			noooc = 0;
			BroadCast(COLOR_YELLOW, "[Global OOC] OOC chat channel enabled by an Admin!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:samd(playerid, params[])
{
    if(EquipmentStock <= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "tidak bisa menggunakan perintah ini karena Equipment Stock sedang kosong");
	if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,-196.3475,-1748.7661,675.7687)/*Old Locker: 2106.5076,2808.9678,-15.9556*/ || IsPlayerInRangeOfPoint(playerid,3,413.79, 2536.79, 10.00))
		{
			ShowPlayerDialog(playerid, LSMDMENU, DIALOG_STYLE_LIST, "SAMD","Duty\nUniform\nCivilian", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_RED, "You aren't in range of your LSMD lockers.");
		}
	}
	return 1;
}
CMD:cure(playerid,params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
	    new targetid,String[1024];
		if(sscanf(params, "u", targetid))
			return SendClientMessage(playerid, COLOR_GREY, SYNTAX_MESSAGE"/cure [playerid]");
		if(PlayerInfo[targetid][pCondition] > 100)
		{
		    PlayerInfo[playerid][pCondition] = 100;
			SendClientMessage(playerid,COLOR_WHITE,"Player Tersebut sudah normal kembali");
			return 1;
		}
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid,name,sizeof(name));
	    GetPlayerName(targetid, szPlayerName, MAX_PLAYER_NAME);
		format(String, sizeof(String), "Kamu telah mengobati %s.", szPlayerName);
	    SendClientMessage(playerid, COLOR_WHITE, String);
	    format(String, sizeof(String), "{FF6347}AdmCmd: %s telah mengobati %s.",name, szPlayerName);
	    ABroadCast(COLOR_NICEGREEN, String, 4);
	    PlayerInfo[targetid][pCondition] += 70;
	}
	return 1;
}
CMD:heal(playerid, params[])
{
 if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /arevive [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(String, sizeof(String), "HEAL: {FFFF00}You have healed %s.", GetName(giveplayerid));
				SendClientMessageEx(playerid, COLOR_ARWIN, String);
				format(String, sizeof(String), "HEAL: {FFFF00}You have healed by %s.", GetName(playerid));
				SendClientMessageEx(giveplayerid, COLOR_ARWIN, String);
				KillEMSQueue(giveplayerid);
   				ClearAnimations(giveplayerid);
   				AC_BS_SetPlayerHealth(giveplayerid, 100);
   				PlayerInfo[giveplayerid][pHealth] = 100.0;
   				SetPlayerDrunkLevel(giveplayerid, 0);
   				TogglePlayerControllable(playerid,1);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not injured!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
/*CMD:inspect(playerid,params[])
{
	if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
	    new targetid, String[10000], Stringg[1024];
		if(sscanf(params, "u", targetid))
		return SendClientMessage(playerid, COLOR_GREY, SYNTAX_MESSAGE"/inspect [playerid]");
		if(PlayerInfo[targetid][pCondition] <= 20)
		{
		    GetPlayerName(targetid, szPlayerName, MAX_PLAYER_NAME);
		    format(Stringg, sizeof(Stringg), "{FFFF00}%s Condition", szPlayerName);
			format(String, sizeof(String), "{FFFFFF}Condition: {FF0000}%d%%\n{FFFFFF}Jenis Penyakit: {FF0000}Berbahaya\n{FFFFFF}Obat : {FF0000}UltraFluenza.", PlayerInfo[targetid][pCondition]);
		    ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_MSGBOX, Stringg,String,"OK","Exit");
		}
  		else if(PlayerInfo[targetid][pCondition] <= 35)
		{
		    GetPlayerName(targetid, szPlayerName, MAX_PLAYER_NAME);
			format(Stringg, sizeof(Stringg), "{FFFF00}%s Condition", szPlayerName);
			format(String, sizeof(String), "{FFFFFF}Condition: %d%%\n{FFFFFF}Jenis Penyakit: {FF0000}Tidak Berbahaya\n{FFFFFF}Obat: {FF0000}Paracetamol\n{FFFFFF}Obat 2: {FF0000}Amoxicillin", PlayerInfo[targetid][pCondition]);
			ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_MSGBOX, Stringg,String,"OK","Exit");
		}
  		else
		{
		    GetPlayerName(targetid, szPlayerName, MAX_PLAYER_NAME);
			format(Stringg, sizeof(Stringg), "{FFFF00}%s Condition", szPlayerName);
			format(String, sizeof(String), "{FFFFFF}Condition: {FF0000}%d%%\n{FFFFFF}Jenis Penyakit: {FF0000}Tidak Ada\n{FFFFFF}Obat: {FF0000}Tidak Ada", PlayerInfo[targetid][pCondition]);
			ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_MSGBOX, Stringg,String,"OK","Exit");
		}
	}
	return 1;
}*/
CMD:badge(playerid, params[]) {
	if((IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12) && GetPVarInt(playerid, "IsInArena") < 0 && !GetPVarInt(playerid, "EventToken") && PlayerInfo[playerid][pJailed] == 0 || PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pDivision] == 1) {
		if(PlayerInfo[playerid][pDuty]) {
			PlayerInfo[playerid][pDuty] = 0;
			SetPlayerToTeamColor(playerid);
			SetPlayerArmour(playerid, 0);
			PlayerInfo[playerid][pArmor] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have hidden your badge, and will now be identified as being off-duty.");
		}
		else {
			PlayerInfo[playerid][pDuty] = 1;
			SetPlayerToTeamColor(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have shown your badge, and will now be identified as being on-duty.");
		}
	}
	return 1;
}

CMD:sapd(playerid, params[])
{
    if(EquipmentStock <= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "tidak bisa menggunakan perintah ini karena Equipment Stock sedang kosong");
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,255.3,77.4,1003.6) || IsPlayerInRangeOfPoint(playerid,3,-1616.1294,681.1594,7.1875) || IsPlayerInRangeOfPoint(playerid,3,327.05, 306.81, 999.14) || IsPlayerInRangeOfPoint(playerid,3,261.7639, 108.6571, 1004.6200))
		{
			ShowPlayerDialog(playerid, DUTYMENU, DIALOG_STYLE_LIST, "SAPD Menu","Duty\nEquipment\nSWAT\nUniform\nUndercover\nClear Suspect", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your SAPD lockers.");
		}
	}
	return 1;
}

CMD:sfpd(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
 	{
  		if(IsPlayerInRangeOfPoint(playerid, 4.0, 293.675415, 188.238296, 1007.171875+0.6))
    	{
     		ShowPlayerDialog(playerid, DIALOG_SFPD, DIALOG_STYLE_LIST, "SFPD: Lockers", "Toggle Duty\nEquipment\nClothing Selection\nClear Suspect", "Proceed", "Cancel");
     	}
      	else
		{
  			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your SFPD lockers.");
 		}
  	}
	return 1;
}

CMD:sasd(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
 	{
  		if(IsPlayerInRangeOfPoint(playerid, 4.0, 2525.9009,-1655.4312,562.8000) || IsPlayerInRangeOfPoint(playerid, 4.0, 327.05, 306.81, 999.14+0.6))
    	{
     		ShowPlayerDialog(playerid, DIALOG_SASD, DIALOG_STYLE_LIST, "SASD: Lockers", "Toggle Duty\nEquipment\nClothing Selection\nClear Suspect", "Proceed", "Cancel");
       	}
        else
        {
        	SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your SASD lockers.");
     	}
  	}
	return 1;
}

CMD:sanews(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
 	{
  		if(IsPlayerInRangeOfPoint(playerid, 4.0, 621.7416,-8.3904,1102.7633))
    	{
     		ShowPlayerDialog(playerid, DIALOG_SANEWS, DIALOG_STYLE_LIST, "SANews: Lockers", "Toggle Duty\nCamera\nClothing Selection", "Proceed", "Cancel");
     	}
 		else
   		{
     		SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your SANews lockers.");
     	}
  	}
  	return 1;
}

CMD:fbi(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,310.3679,-1537.5204,-45.1338) || IsPlayerInRangeOfPoint(playerid,3,-1616.1294,681.1594,7.1875) || IsPlayerInRangeOfPoint(playerid,3,327.05, 306.81, 999.14) || IsPlayerInRangeOfPoint(playerid,3,264.29, 109.84, 1004.62))
		{
			ShowPlayerDialog(playerid, FDUTYMENU, DIALOG_STYLE_LIST, "FBI Menu","Duty\nEquipment\nSWAT Uniform\nUniform\nUndercover\nClear Suspect", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your FBI lockers.");
		}
	}
	return 1;
}

CMD:sags(playerid, params[])
{
	if(EquipmentStock <= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "tidak bisa menggunakan perintah ini karena Equipment Stock sedang kosong");
	if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 768.8376, 1466.3964, -74.1773))// SENATE Duty
		{
			ShowPlayerDialog(playerid, SAGSMENU, DIALOG_STYLE_LIST, "San Andreas Government","Duty\nUniforms", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your Senate lockers.");
		}
	}
	return 1;
}
CMD:loadammu(playerid,params[])
{
	if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 456 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 455 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 428)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5, 2787.0144, -2417.9524, 13.5702))
			{
				if(EquipmentStock >= 1000) { SendClientMessageEx(playerid,COLOR_WHITE,"Saat ini stock Equipment sudah terlalu banyak"); return 1; }
				FishHolding[playerid] = 14;
			    SedangTrucking[playerid] = 1;
                SetPlayerCheckpoint(playerid,1262.5132,-2027.5649,59.3481,5);
			    SendClientMessageEx(playerid, COLOR_WHITE,"Muatan telah dinaikkan segera kirim Ammunition ini ke Checkpoint");
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_WHITE,"Kamu tidak berada di Ammunition Dock manapun!");
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE,"Kamu harus memakai Yankee / Flatbed.");
		return 1;
	}
	SendClientMessageEx(playerid, COLOR_WHITE,"Kamu bukan bagian dari San Andreas Goverment Services.");
	return 1;
}
CMD:togooc(playerid, params[])
{
	if (!gOoc[playerid])
	{
		gOoc[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled global OOC chat.");
	}
	else
	{
		gOoc[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled global OOC chat.");
	}
	return 1;
}

CMD:tognews(playerid, params[])
{
	if (!gNews[playerid])
	{
		gNews[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled news chat.");
	}
	else
	{
		gNews[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled news chat.");
	}
	return 1;
}

CMD:togask(playerid, params[])
{
	if (!gNewbie[playerid])
	{
		gNewbie[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled newbie chat.");
	}
	else
	{
		gNewbie[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled newbie chat.");
	}
	return 1;
}

CMD:togfamily(playerid, params[])
{
	return cmd_togfam(playerid, params);
}

CMD:togfam(playerid, params[])
{
	if (!gFam[playerid])
	{
		gFam[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled family chat.");
	}
	else
	{
		gFam[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled family chat.");
	}
	return 1;
}

CMD:togwhisper(playerid, params[])
{
	if (!HidePM[playerid])
	{
		HidePM[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled whisper chat.");
	}
	else
	{
		HidePM[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled whisper chat.");
	}
	return 1;
}

CMD:togphone(playerid, params[])
{
	if(PlayerInfo[playerid][pJailed] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use your phone in jail/prison.");
		return 1;
	}
	if (!PhoneOnline[playerid])
	{
		PhoneOnline[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "Your phone is now switched off.");
	}
	else
	{
		PhoneOnline[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "Your phone is now switched on.");
	}
	return 1;
}

CMD:togadvisor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pDonateRank] == 5)
	{
		if (!advisorchat[playerid])
		{
			advisorchat[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "   You can now hear the (/c)advisor chat!");
		}
		else
		{
			advisorchat[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "   You will not hear the (/c)advisor chat any more!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not allowed to use this command!");
		return 1;
	}
	return 1;
}

CMD:vehname(playerid, params[]) {

	if(PlayerInfo[playerid][pAdmin] >= 1) {

		SendClientMessageEx(playerid, COLOR_YELLOW, "--------------------------------------------------------------------------------------------------------------------------------");
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle Search:");

		new
			String[10000];

		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "No keyword specified.");
		if(!params[2]) return SendClientMessageEx(playerid, COLOR_GREY, "Search keyword too short.");

		for(new v; v < sizeof(VehicleName); v++) {
			if(strfind(VehicleName[v], params, true) != -1) {

				if(isnull(String)) format(String, sizeof(String), "%s (ID %d)", VehicleName[v], v+400);
				else format(String, sizeof(String), "%s | %s (ID %d)", String, VehicleName[v], v+400);
			}
		}

		if(!String[0]) SendClientMessageEx(playerid, COLOR_GREY, "No results found.");
		else if(String[127]) SendClientMessageEx(playerid, COLOR_GREY, "Too many results found.");
		else SendClientMessageEx(playerid, COLOR_WHITE, String);

		SendClientMessageEx(playerid, COLOR_YELLOW, "--------------------------------------------------------------------------------------------------------------------------------");
	}
	return 1;
}

CMD:spray(playerid, params[])
{
	new idx = PlayerInfo[playerid][pWSBos];
	new giveplayerid, str[128], col1, col2, price[32], dollars, cents, duit[32];
	if(IsPlayerInRangeOfPoint(playerid, 100, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ]) || IsPlayerInRangeOfPoint(playerid, 100.0, 2184.7800,-2203.9988,13.5469))
	{
		if( PlayerInfo[playerid][pMechTime] > 0)
		{
			format(str, sizeof(str), "Anda harus menunggu %d detik!", PlayerInfo[playerid][pMechTime]);
	  		SendClientMessage(playerid, COLOR_GRAD1,str);
	  		return 1;
		}
		if(PlayerInfo[playerid][pWSJob] != 1) return SendClientMessage(playerid, COLOR_GREEN, "Anda bukan Montir");
		if(sscanf(params, "uiis[32]", giveplayerid, col1, col2, price)) return SendClientMessage(playerid, -1, "USAGE: /spray [ID/Name][Warna1][Warna2][Harga]");
		if(strfind(price, ".", true) != -1)
		{
		    sscanf(price, "p<.>dd", dollars, cents);
      		format(duit, sizeof(duit), "%d%02d", dollars, cents);
        	if(intLen(cents) > 2) return SendClientMessageEx(playerid, COLOR_GREY, "Format Cents salah");
			if(strval(duit) < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
			if(col1 > 255 || col1 < 0) return SendClientMessage(playerid, COLOR_RED,"Color ID can't be lower than 0 and higher than 255.");
			if(col2 > 255 || col2 < 0) return SendClientMessage(playerid, COLOR_RED,"Color ID can't be lower than 0 and higher than 255.");
			idveh[playerid] = GetPlayerVehicleID(giveplayerid);
			idveh2[giveplayerid] = GetPlayerVehicle(giveplayerid, GetPlayerVehicleID(giveplayerid));
			SprayPrice[giveplayerid] = strval(duit);
			warna1[playerid] = col1;
			warna2[playerid] = col2;
			SprayOffer[giveplayerid] = playerid;
			format(str, sizeof(str), "{33CCFF}%s telah menawarkan anda Jasa Spray seharga %s. {00CED1}(/accept spray) {FFFFFF}untuk menerimanya.", GetName(playerid), FormatMoney(strval(duit)));
			SendClientMessage(giveplayerid, COLOR_WHITE, str);
			format(str, sizeof(str), "{33CCFF}Anda telah menawarkan %s Jasa Spray seharga %s.", GetName(giveplayerid), FormatMoney(strval(duit)));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, str);
		}
		else
		{
	    	sscanf(price, "d", dollars);
	        format(duit, sizeof(duit), "%d00", dollars);
			if(col1 > 255 || col1 < 0) return SendClientMessage(playerid, COLOR_RED,"Color ID can't be lower than 0 and higher than 255.");
			if(col2 > 255 || col2 < 0) return SendClientMessage(playerid, COLOR_RED,"Color ID can't be lower than 0 and higher than 255.");
        	if(intLen(cents) > 2) return SendClientMessageEx(playerid, COLOR_GREY, "Format Cents salah");
			if(strval(duit) < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
			idveh[playerid] = GetPlayerVehicleID(giveplayerid);
			idveh2[giveplayerid] = GetPlayerVehicle(giveplayerid, GetPlayerVehicleID(giveplayerid));
			SprayPrice[giveplayerid] = strval(duit);
			warna1[playerid] = col1;
			warna2[playerid] = col2;
			SprayOffer[giveplayerid] = playerid;
			format(str, sizeof(str), "{33CCFF}%s telah menawarkan anda Jasa Spray seharga %s. {00CED1}(/accept spray) {FFFFFF}untuk menerimanya.", GetName(playerid), FormatMoney(strval(duit)));
			SendClientMessage(giveplayerid, COLOR_WHITE, str);
			format(str, sizeof(str), "{33CCFF}Anda telah menawarkan %s Jasa Spray seharga %s.", GetName(giveplayerid), FormatMoney(strval(duit)));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, str);
		}
	}
	else return SendClientMessage(playerid, COLOR_RED, "You must be in the garage to repair vehicles!");
	return 1;
}

CMD:stats(playerid, params[]) {
	if (gPlayerLogged{playerid} != 0) {
		ShowStats(playerid,playerid);
	}
	return 1;
}

CMD:checkguns(playerid, params[])
{
	new String[10000], myweapons[13][2], weaponname[50], encryption[256], name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	format(String, sizeof(String), "Weapons on %s:", name);
	SendClientMessageEx(playerid, COLOR_WHITE, String);
	for (new i = 0; i < 13; i++)
	{
		GetPlayerWeaponData(playerid, i, myweapons[i][0], myweapons[i][1]);
		if(myweapons[i][0] > 0)
		{
			if(PlayerInfo[playerid][pGuns][i] == myweapons[i][0])
			{
				GetWeaponName(myweapons[i][0], weaponname, sizeof(weaponname));
				format(String, sizeof(String), "%s (%d)", weaponname, myweapons[i][0]);
				SendClientMessageEx(playerid, COLOR_GRAD1, String);
				format(encryption, sizeof(encryption), "%s%d", encryption, myweapons[i][0]);
			}
		}
	}
	new year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);
	format(encryption, sizeof(encryption), "%s%s%d%d%d%d%d6524", encryption, name, day, month, year, hour, minute);
	new encrypt = crc32(encryption);
	format(String, sizeof(String), "[%d/%d/%d %d:%d:%d] - [%d]", day, month, year, hour, minute,second, encrypt);
	SendClientMessageEx(playerid, COLOR_GREEN, String);
	SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	return 1;
}

CMD:changepass(playerid, params[])
{
	if (gPlayerLogged{playerid})
	{
		ShowPlayerDialog(playerid, 2398, DIALOG_STYLE_PASSWORD, "Password Change", "Please enter your new password!", "Change", "Exit" );
	}
	return 1;
}

CMD:killcheckpoint(playerid, params[])
{
    DeletePVar(playerid, "TrackCar");
    DisablePlayerCheckpoint(playerid);
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
    SendClientMessageEx(playerid,COLOR_WHITE,"All current checkpoints, trackers and accepted fares have been reset.");
	return 1;
}

CMD:animhelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________________________________");
	SendClientMessage(playerid,COLOR_WHITE,"Available Animations:");
	SendClientMessage(playerid,COLOR_GOLD,"/handsup /handsdown /drunk /laugh /lookout /dj /skate /dance /crossarms /fucku");
	SendClientMessage(playerid,COLOR_GOLD,"/hide /vomit /wave /taichi /kiss /robman /reload /deal /fallover");
	SendClientMessage(playerid,COLOR_GOLD,"/chat /dance /lean /cpr /cry /cheer /pedmove /wank /bitchslap");
	SendClientMessage(playerid,COLOR_GOLD,"/slapass /fuckme /bj /rap /hitch /stand /greet /followme /getjiggy");
	SendClientMessage(playerid,COLOR_GOLD,"/what /signal /crabs /salute /stop /washhands /gesture /hurt /showoff /dive /relax");
	SendClientMessage(playerid,COLOR_GOLD,"/checktime /rob /sitdown /nobreath /sit");
	SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________________________________");
	return 1;
}

CMD:relax(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid, "CRACK", "crckidle1",4.0,0,1,1,1,-1);
	return 1;
}

CMD:hurt(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hurt [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hurt [1-4]");
	switch(animid)
	{
	    case 1: LoopingAnim(playerid,"PED","IDLE_tired",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"FAT","IDLE_tired",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"SWAT","gnstwall_injurd",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"SWEET","Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	}
	return 1;
}

CMD:followme(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"WUZI","Wuzi_follow",4.1,1,1,1,1,1);
	return 1;
}

CMD:greet(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"WUZI","Wuzi_Greet_Wuzi",4.1,1,1,1,1,1);
	return 1;
}

CMD:stand(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"WUZI","Wuzi_stand_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:hitch(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:slapass(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"SWEET","sweet_ass_slap",4.1,1,1,1,1,1);
	return 1;
}

CMD:bitchslap(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"MISC","bitchslap",4.1,1,1,1,1,1);
	return 1;
}

CMD:checktime(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid, "COP_AMBIENT", "Coplook_watch",4.1,1,1,1,1,1);
	return 1;
}


CMD:dive(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"DODGE","Crush_Jump",4.0,0,1,1,1,0);
	return 1;
}

CMD:showoff(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"Freeweights","gym_free_celebrate",4.1,1,1,1,1,1);
	return 1;
}

CMD:crabs(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"MISC","Scratchballs_01",4.1,1,1,1,1,1);
	return 1;
}

CMD:salute(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"ON_LOOKERS","Pointup_loop",4.1,1,1,1,1,1);
	return 1;
}

CMD:stop(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"PED","endchat_01",4.1,1,1,1,1,1);
	return 1;
}

CMD:washhands(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"BD_FIRE","wash_up",4.1,1,1,1,1,1);
	return 1;
}

CMD:cry(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.0,1,0,0,0,0);
	return 1;
}

CMD:what(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"RIOT","RIOT_ANGRY", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:cpr(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"MEDIC","CPR",4.1,1,1,1,1,1);
	LoopingAnim(playerid,"KISSING","gift_give",4.1,1,1,1,1,1);
	return 1;
}

CMD:taichi(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:kiss(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"KISSING","Playa_Kiss_01",4.1,1,1,1,1,1);
	return 1;
}

CMD:fucku(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"PED","fucku",4.1,1,1,1,1,1);
	return 1;
}

CMD:lookout(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:robman(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:hide(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:vomit(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:eat(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:laugh(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:drunk(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
	return 1;
}
CMD:lay(playerid, params[]) {

    if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	new animid;
   	if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_GREY, SYNTAX_MESSAGE"/lay [1-3]");
	switch(animid) {

  		case 1: LoopingAnim(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
  		case 2: LoopingAnim(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
  		case 3: LoopingAnim(playerid, "BEACH", "ParkSit_M_loop", 4.0,1,0,0,0,0);
 	}
 	return 1;
}
CMD:sit(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sit [1-5]");
	if(animid < 1 || animid > 5) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sit [1-5]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"BEACH","bather",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:nobreath(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /nobreath [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sit [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PED","IDLE_tired",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"FAT","IDLE_tired",4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:sitdown(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sitdown [1-7]");
	if(animid < 1 || animid > 7) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sitdown [1-7]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"Attractors","Stepsit_in",4.0,0,0,0,1,0); // Not looping
		case 2: LoopingAnim(playerid,"CRIB","PED_Console_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"INT_HOUSE","LOU_In",4.0,0,0,0,1,0); // Not looping
		case 4: LoopingAnim(playerid,"MISC","SEAT_LR",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"MISC","Seat_talk_01",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"MISC","Seat_talk_02",4.0,1,0,0,0,0);
		case 7: LoopingAnim(playerid,"ped","SEAT_down",4.0,0,0,0,1,0); // Not looping
	}
	return 1;
}

CMD:handsup(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return 1;
}

CMD:handsdown(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_HANDSUP) return SendClientMessage(playerid, COLOR_GREY, "Your hands are already down.");
	ClearAnimations(playerid);
	return 1;
}

CMD:dance(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dance [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dance [1-4]");
	switch(animid)
	{
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
	}
	return 1;
}

CMD:crossarms(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /crossarms [1-5]");
	if(animid < 1 || animid > 5) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /crossarms [1-5]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
		case 2: LoopingAnim(playerid, "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 1, -1);
		case 3: LoopingAnim(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 0, 1, 1, 1, -1);
		case 4: LoopingAnim(playerid,"GRAVEYARD","mrnM_loop",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:getjiggy(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getjiggy [1-10]");
	if(animid < 1 || animid > 10) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getjiggy [1-10]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"DANCING","DAN_Down_A",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"DANCING","DAN_Left_A",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"DANCING","DAN_Loop_A",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"DANCING","DAN_Right_A",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"DANCING","DAN_Up_A",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"DANCING","dnce_M_a",4.0,1,0,0,0,0);
		case 7: LoopingAnim(playerid,"DANCING","dnce_M_b",4.0,1,0,0,0,0);
		case 8: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
		case 9: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
		case 10: LoopingAnim(playerid,"DANCING","dnce_M_d",4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:pedmove(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pedmove[1-26]");
	if(animid < 1 || animid > 26) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pedmove [1-26]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PED","JOG_femaleA",4.0,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","JOG_maleA",4.0,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"PED","run_fat",4.0,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","run_fatold",4.0,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","run_old",4.0,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"PED","Run_Wuzi",4.0,1,1,1,1,1);
		case 8: LoopingAnim(playerid,"PED","swat_run",4.0,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"PED","WALK_fat",4.0,1,1,1,1,1);
		case 10: LoopingAnim(playerid,"PED","WALK_fatold",4.0,1,1,1,1,1);
		case 11: LoopingAnim(playerid,"PED","WALK_gang1",4.0,1,1,1,1,1);
		case 12: LoopingAnim(playerid,"PED","WALK_gang2",4.0,1,1,1,1,1);
		case 13: LoopingAnim(playerid,"PED","WALK_old",4.0,1,1,1,1,1);
		case 14: LoopingAnim(playerid,"PED","WALK_shuffle",4.0,1,1,1,1,1);
		case 15: LoopingAnim(playerid,"PED","woman_run",4.0,1,1,1,1,1);
		case 16: LoopingAnim(playerid,"PED","WOMAN_runbusy",4.0,1,1,1,1,1);
		case 17: LoopingAnim(playerid,"PED","WOMAN_runfatold",4.0,1,1,1,1,1);
		case 18: LoopingAnim(playerid,"PED","woman_runpanic",4.0,1,1,1,1,1);
		case 19: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.0,1,1,1,1,1);
		case 20: LoopingAnim(playerid,"PED","WOMAN_walkbusy",4.0,1,1,1,1,1);
		case 21: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
		case 22: LoopingAnim(playerid,"PED","WOMAN_walknorm",4.0,1,1,1,1,1);
		case 23: LoopingAnim(playerid,"PED","WOMAN_walkold",4.0,1,1,1,1,1);
		case 24: LoopingAnim(playerid,"PED","WOMAN_walkpro",4.0,1,1,1,1,1);
		case 25: LoopingAnim(playerid,"PED","WOMAN_walksexy",4.0,1,1,1,1,1);
		case 26: LoopingAnim(playerid,"PED","WOMAN_walkshop",4.0,1,1,1,1,1);
	}
	return 1;
}

CMD:rap(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /rap [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /rap [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,0);
		case 2: LoopingAnim(playerid,"RAPPING","RAP_B_Loop",4.0,1,1,1,1,0);
		case 3: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);
	}
	return 1;
}

CMD:reload(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /reload [1-5]");
	if(animid < 1 || animid > 5) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /reload [1-5]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"COLT45","colt45_reload", 4.0, 0, 0, 0, 0, 0);
		case 2: LoopingAnim(playerid,"COLT45","sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
		case 3: LoopingAnim(playerid,"BUDDY","buddy_reload", 4.0, 0, 0, 0, 0, 0);
		case 4: LoopingAnim(playerid,"RIFLE","RIFLE_load", 4.0, 0, 0, 0, 0, 0);
		case 5: LoopingAnim(playerid,"PYTHON","python_reload", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}

CMD:dj(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dj [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dj [1-4]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SCRATCHING","scdldlp",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"SCRATCHING","scdlulp",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"SCRATCHING","scdrdlp",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"SCRATCHING","scdrulp",4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:wank(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wank [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wank [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PAULNMAC","wank_in",4.0,1,1,1,1,0);
		case 2: LoopingAnim(playerid,"PAULNMAC","wank_loop",4.0,1,1,1,1,0);
		case 3: LoopingAnim(playerid,"PAULNMAC","wank_out",4.1,1,1,1,1,1);
	}
	return 1;
}

CMD:bj(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bj [1-12]");
	if(animid < 1 || animid > 12) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bj [1-12]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,0);
		case 3: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,0,1,1,1,0);
		case 4: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,0);
		case 5: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,0);
		case 6: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,0);
		case 7: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,0);
		case 8: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,0);
		case 9: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,0,1,1,1,0);
		case 10: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,0,1,1,1,0);
		case 11: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,0);
		case 12: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,0);
	}
	return 1;
}

CMD:signal(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /signal [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /signal [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"POLICE","CopTraf_Come",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"POLICE","CopTraf_Stop",4.1,1,1,1,1,1);
	}
	return 1;
}
CMD:lean(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /lean [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /lean [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.1,0,0,0,1,0);
		case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.1,0,0,0,1,0);
	}
	return 1;
}

CMD:crack(playerid, params[])
{

    if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
    LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}

CMD:fall(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fall [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fall [1-4]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid, "PED","KO_skid_front",4.0, 0, 1, 1, 1, 0);
		case 2: LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
		case 3: LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
		case 4: LoopingAnim(playerid, "PED", "BIKE_fallR", 4.0, 0, 1, 1, 0, 0);
	}
	return 1;
}

CMD:wave(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wave [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wave [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"ON_LOOKERS","wave_loop",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"KISSING","gfwave2",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","endchat_03",4.1,1,1,1,1,1);
	}
	return 1;
}

CMD:cheer(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cheer [1-8]");
	if(animid < 1 || animid > 8) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cheer [1-8]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"ON_LOOKERS","shout_01",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"ON_LOOKERS","shout_02",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"ON_LOOKERS","shout_in",4.1,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"RIOT","RIOT_ANGRY_B",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"RIOT","RIOT_shout",4.1,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"STRIP","PUN_HOLLER",4.1,1,1,1,1,1);
		case 8: LoopingAnim(playerid,"OTB","wtchrace_win",4.1,1,1,1,1,1);
	}
	return 1;
}

CMD:deal(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deal [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deal [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"DEALER", "DEALER_DEAL",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"DEALER","shop_pay",4.1,1,1,1,1,1);
	}
	return 1;
}

CMD:chat(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /chat [1-7]");
	if(animid < 1 || animid > 7) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /chat [1-7]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PED","IDLE_CHAT",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"GANGS","prtial_gngtlkA",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"GANGS","prtial_gngtlkB",4.1,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"GANGS","prtial_gngtlkE",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"GANGS","prtial_gngtlkF",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"GANGS","prtial_gngtlkG",4.1,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"GANGS","prtial_gngtlkH",4.1,1,1,1,1,1);
	}
	return 1;
}

CMD:gesture(playerid, params[])
{
	new animid;
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gesture [1-15]");
	if(animid < 1 || animid > 15) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gesture [1-15]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"GHANDS","gsign1",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"GHANDS","gsign1LH",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"GHANDS","gsign2",4.1,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"GHANDS","gsign2LH",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"GHANDS","gsign3",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"GHANDS","gsign3LH",4.1,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"GHANDS","gsign4",4.1,1,1,1,1,1);
		case 8: LoopingAnim(playerid,"GHANDS","gsign4LH",4.1,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"GHANDS","gsign5",4.1,1,1,1,1,1);
		case 10: LoopingAnim(playerid,"GHANDS","gsign5",4.1,1,1,1,1,1);
		case 11: LoopingAnim(playerid,"GHANDS","gsign5LH",4.1,1,1,1,1,1);
		case 12: LoopingAnim(playerid,"GANGS","Invite_No",4.1,1,1,1,1,1);
		case 13: LoopingAnim(playerid,"GANGS","Invite_Yes",4.1,1,1,1,1,1);
		case 14: LoopingAnim(playerid,"GANGS","prtial_gngtlkD",4.1,1,1,1,1,1);
		case 15: LoopingAnim(playerid,"GANGS","smkcig_prtl",4.1,1,1,1,1,1);
	}
	return 1;
}

CMD:help(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
	return 1;
}

CMD:fill(playerid, params[])
{
 	for(new idx = 1; idx < sizeof(BizzInfo); idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10, BizzInfo[idx][bPetrolX], BizzInfo[idx][bPetrolY], BizzInfo[idx][bPetrolZ]))
		{
  		new vehicleid = GetPlayerVehicleID(playerid);
	    new engine,lights,alarm,doors,bonnet,boot,objective,String[10000];
    	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    if(engine == VEHICLE_PARAMS_ON) return SendClientMessageEx(playerid, COLOR_RED, "Matikan mesin untuk mengisi bensin tekan 'N' atau ketik '/engine'.");
  		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_RED,"This vehicle doesn't need fuel.");
	    if(VehicleFuel[vehicleid] >= 100) return SendClientMessageEx(playerid, COLOR_RED, "This vehicle's tank is already full.");
		format(String, sizeof(String), "{00ff00}%s\n{FFFFFF}Gasoline Price: {00FF00}$0.%s\n{FFFFFF}Gasoline Stock: {FFFF00}%dliter(s).",BizzInfo[idx][bMessage], FormatMoney(HargaBensin), BizzInfo[idx][bFuelStock]);
		ShowPlayerDialog( playerid, DIALOG_REFUEL, DIALOG_STYLE_INPUT, "Buy Gasoline", String, "Refuel", "Cancel");
		return 1;
		}
	}
	SendClientMessageEx(playerid,COLOR_WHITE,"Anda tidak berada di Pom Bensin.");
	return 1;
}
CMD:filljerigen(playerid, params[])
{
 for(new idx = 0; idx < MAX_BUSINESSES; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10, BizzInfo[idx][bPetrolX], BizzInfo[idx][bPetrolY], BizzInfo[idx][bPetrolZ]))
		{
			if(PlayerInfo[playerid][pJerigen] == 1)
			PlayerInfo[playerid][pBensin] = 50;
			GivePlayerCash(playerid, -50 * HargaBensin);
			BizzInfo[idx][bTill] += 50*HargaBensin;
			BizzInfo[idx][bFuelStock] -= 50;
			SendFormattedMessage(playerid, COLOR_WHITE,"jerigen telah terisi 50liter dengan harga $%s.", FormatMoney(50*HargaBensin));
		}
    }
    return 1;
}

CMD:fillveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new Float:ariwiwinselamanya = 50.0 - VehicleFuel[vehicleid];
    if(!IsPlayerInAnyVehicle(playerid)) { SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a vehicle."); return 1; }
    if(PlayerInfo[playerid][pJerigen] != 1) { return SendClientMessageEx(playerid, COLOR_GRAD2, "Kamu tidak memiliki jergien bensin."); }
    if(PlayerInfo[playerid][pBensin] <= 0) { return SendClientMessageEx(playerid, COLOR_GRAD2, "Kamu tidak memiliki cadangan bensin."); }
    if(VehicleFuel[vehicleid] >= 50) return SendClientMessageEx(playerid, COLOR_RED, "Tangki ini kendaraan sudah penuh.");
    if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_RED,"You mad bro, kendaraan ini tak butuh bensin.");
	if(ariwiwinselamanya > PlayerInfo[playerid][pBensin])
	{
	    VehicleFuel[vehicleid] += PlayerInfo[playerid][pBensin];
	    PlayerInfo[playerid][pBensin] = 0;
	    SendClientMessageEx(playerid,COLOR_BLUE,"Pengisian bensin ke dalam Jerigen berhasil.");
	}
	else
	{
		PlayerInfo[playerid][pBensin] -= ariwiwinselamanya;
  		VehicleFuel[vehicleid] += 50.0;
		SendClientMessageEx(playerid,COLOR_BLUE,"Pengisian bensin ke dalam Jerigen berhasil.");
	}
	return 1;
}

CMD:goto(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /goto [ls,sf,lv,bank]");
			return 1;
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can not do this while spectating.");
			return 1;
		}
		if(strcmp(params,"ls",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				AC_BS_SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			AC_BS_SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			PlayerInfo[playerid][pLocal] = 255;
		}
		else if(strcmp(params,"sf",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				AC_BS_SetPlayerPos(playerid, -1417.0,-295.8,14.1);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			AC_BS_SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			PlayerInfo[playerid][pLocal] = 255;
		}
		else if(strcmp(params,"lv",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				AC_BS_SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			AC_BS_SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			PlayerInfo[playerid][pLocal] = 255;
		}
		else if(strcmp(params,"bank",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1462.0121, -1027.4490, 23.8281);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				AC_BS_SetPlayerPos(playerid, 1462.0121, -1027.4490, 23.8281);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			AC_BS_SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			PlayerInfo[playerid][pLocal] = 255;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:accept(playerid, params[])
{
	new String[10000];
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
    if(IsPlayerConnected(playerid)) {
        if(isnull(params)) {
            SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /accept [name]");
            SendClientMessageEx(playerid, COLOR_GREY, "Available names: Inspect, Mats, Crack, Pot, Weapon, Craft, Repair, Bodyguard, Job, Live, Refill, Fix, Upengine, Hyd, spray, paintjob");
            SendClientMessageEx(playerid, COLOR_GREY, "Available names: Faction, Family, Taxi, Bus, Boxing, Medic, Mechanic, Ticket, Car, Supcall, Death, Ws, Work, Nos, Body");
            return 1;
        }
        if(strcmp(params,"frisk",true) == 0)
	   	{
			if(FriskOffer[playerid] == 999) { return 1; }
			new S3MP4K[10000];
		    strcat(S3MP4K, "Item\tAmount\n");
			if(GetPlayerCash(playerid) < 0)
		    {
		        format(String, sizeof(String), "Cash\t{FF0000}($%s)\n{FFFFFF}", FormatMoney(GetPlayerCash(playerid)));
		        strcat(S3MP4K, String);
			}
			if(GetPlayerCash(playerid) > 0)
		    {
		        format(String, sizeof(String), "Cash\t$%s\n", FormatMoney(GetPlayerCash(playerid)));
		        strcat(S3MP4K, String);
			}
		    if(PlayerInfo[playerid][pCacing] > 0)
		    {
			    format(String, sizeof(String), "Bait\t%d\n", PlayerInfo[playerid][pCacing]);
			    strcat(S3MP4K, String);
		    }
		    if(PlayerInfo[playerid][pPancingan] > 0)
		    {
				format(String, sizeof(String), "Fish pole\t%d use(s) left\n", PlayerInfo[playerid][pPancingan]);
			    strcat(S3MP4K, String);
			}
			if(PlayerInfo[playerid][pBeratIkan] > 0)
		    {
				format(String, sizeof(String), "Fish total\t%d Kilograms\n", PlayerInfo[playerid][pBeratIkan]);
			    strcat(S3MP4K, String);
			}
		    if(PlayerInfo[playerid][pCangkul] > 0)
		    {
				format(String, sizeof(String), "Farm hoe\t%d use(s) left\n", PlayerInfo[playerid][pCangkul]);
			    strcat(S3MP4K, String);
		    }
		    if(PlayerInfo[playerid][pComponent] > 0)
		    {
				format(String, sizeof(String), "Component\t%d\n", PlayerInfo[playerid][pComponent]);
			    strcat(S3MP4K, String);
		    }
		    if(PlayerInfo[playerid][pTire] > 0)
		    {
				format(String, sizeof(String), "Wrench\t%d use(s) left\n", PlayerInfo[playerid][pTire]);
			    strcat(S3MP4K, String);
		    }
		    if(PlayerInfo[playerid][pBibitAnggur] > 0)
    {
		format(String, sizeof(String), "[SEED] Anggur\t%d left\n", PlayerInfo[playerid][pBibitAnggur]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pBibitBlueberry] > 0)
    {
		format(String, sizeof(String), "[SEED] Blueberry\t%d left\n", PlayerInfo[playerid][pBibitBlueberry]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pBibitStrawberry] > 0)
    {
		format(String, sizeof(String), "[SEED] Strawberry\t%d left\n", PlayerInfo[playerid][pBibitStrawberry]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pBibitGandum] > 0)
    {
		format(String, sizeof(String), "[SEED] Gandum\t%d left\n", PlayerInfo[playerid][pBibitGandum]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pBibitTomat] > 0)
    {
		format(String, sizeof(String), "[SEED] Tomat\t%d left\n", PlayerInfo[playerid][pBibitTomat]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pTanamanAnggur] > 0)
    {
		format(String, sizeof(String), "[PLANT] Anggur\t%d left\n", PlayerInfo[playerid][pTanamanAnggur]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pTanamanBlueberry] > 0)
    {
		format(String, sizeof(String), "[PLANT] Blueberry\t%d left\n", PlayerInfo[playerid][pTanamanBlueberry]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pTanamanStrawberry] > 0)
    {
		format(String, sizeof(String), "[PLANT] Strawberry\t%d left\n", PlayerInfo[playerid][pTanamanStrawberry]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pTanamanGandum] > 0)
    {
		format(String, sizeof(String), "[PLANT] Gandum\t%d left\n", PlayerInfo[playerid][pTanamanGandum]);
	    strcat(S3MP4K, String);
    }
    if(PlayerInfo[playerid][pTanamanTomat] > 0)
    {
		format(String, sizeof(String), "[PLANT] Tomat\t%d left\n", PlayerInfo[playerid][pTanamanTomat]);
	    strcat(S3MP4K, String);
    }
		    if(PlayerInfo[playerid][pParacetamol] > 0)
		    {
				format(String, sizeof(String), "[MEDICINE]Paracetamol\t%d use(s) left\n", PlayerInfo[playerid][pParacetamol]);
			    strcat(S3MP4K, String);
		    }
		    if(PlayerInfo[playerid][pAmoxicilin] > 0)
		    {
				format(String, sizeof(String), "[MEDICINE]Amoxicilin\t%d use(s) left\n", PlayerInfo[playerid][pAmoxicilin]);
			    strcat(S3MP4K, String);
		    }
		    if(PlayerInfo[playerid][pUltrafluenza] > 0)
		    {
				format(String, sizeof(String), "[MEDICINE]Ultrafluenza\t%d use(s) left\n", PlayerInfo[playerid][pUltrafluenza]);
			    strcat(S3MP4K, String);
		    }
		    if(PlayerInfo[playerid][pCrack] > 0)
		    {
			    format(String, sizeof(String), "{FF0000}Crack\t%d\n", PlayerInfo[playerid][pCrack]);
			    strcat(S3MP4K, String);
		    }
		    if(PlayerInfo[playerid][pPot] > 0)
		    {
			    format(String, sizeof(String), "{FF0000}Pot\t%d\n", PlayerInfo[playerid][pPot]);
			    strcat(S3MP4K, String);
		    }
		    if(PlayerInfo[playerid][pMats] > 0)
		    {
			    format(String, sizeof(String), "{FF0000}Materials\t%d\n", PlayerInfo[playerid][pMats]);
			    strcat(S3MP4K, String);
		    }
		    if(PlayerInfo[playerid][pScrewdriver] > 0)
		    {
			    format(String, sizeof(String), "{FF0000}Gun Schematic\t%d use(s) left\n", PlayerInfo[playerid][pScrewdriver]);
			    strcat(S3MP4K, String);
		    }
      		for(new i; i < 12; ++i)
		    {
				if(PlayerInfo[playerid][pGuns][i] > 0)
				{
		  			new wname[10000];
					GetWeaponName(PlayerInfo[playerid][pGuns][i], wname, sizeof(wname));
					format(String, sizeof(String), "{FF0000}[WEAPON]%s\t%d Ammo\n", wname, PlayerInfo[playerid][pGunsAmmo][i]);
					strcat(S3MP4K, String);
				}
			}
			ShowPlayerDialog(FriskOffer[playerid], DIALOG_INVENTORY, DIALOG_STYLE_TABLIST_HEADERS, "Items", S3MP4K, "Close", "");
			FriskOffer[playerid] = 999;
      	}
      	if(strcmp(params,"inspect",true) == 0)
	   	{
	   	    new S3MP4K[1000];
			if(InspectOffer[playerid] == 999) { return 1; }
			format(String, sizeof(String), "{00ff00}Hungry: %d\nClean: %d\nTired: %d\nBody: %d\n", PlayerInfo[playerid][pHunger], PlayerInfo[playerid][pBladder], PlayerInfo[playerid][pEnergi], PlayerInfo[playerid][pCondition]);
			strcat(S3MP4K, String);
			format(String, sizeof(String), "Groin: %.1f\nTorso: %.1f\nRight Arm: %.1f\n", PlayerInfo[playerid][pBodyCondition][0], PlayerInfo[playerid][pBodyCondition][1], PlayerInfo[playerid][pBodyCondition][2]);
			strcat(S3MP4K, String);
		    format(String, sizeof(String), "Left Arm: %.1f\nRight Leg: %.1f\nLeft Leg: %.1f", PlayerInfo[playerid][pBodyCondition][3], PlayerInfo[playerid][pBodyCondition][4], PlayerInfo[playerid][pBodyCondition][5]);
		    strcat(S3MP4K, String);
			ShowPlayerDialog(InspectOffer[playerid], DIALOG_INVENTORY, DIALOG_STYLE_MSGBOX, "Body Status", S3MP4K, "OK", "Exit");
			InspectOffer[playerid] = 999;
      	}
      	if(strcmp(params,"death",true) == 0) {
            if(GetPVarInt(playerid, "Injured") == 1) {
                KillEMSQueue(playerid);
                SpawnPlayer(playerid);
                for(new s = 0; s < 7; s++)
				{
    				PlayerInfo[playerid][pBodyCondition][s] -= 12;
				}
            }
            else {  SendClientMessageEx(playerid, COLOR_GREY, "   Anda tidak terluka, Anda tidak dapat melakukan ini sekarang !"); }
        }
		if(strcmp(params, "biz", true) == 0)
		{
		    new offeredby = GetPVarInt(playerid, "BizOfferedBy");
		    new price = GetPVarInt(playerid, "BizPrice");
		    new slot = GetPVarInt(playerid, "BizSlot");
		    new b = GetPVarInt(playerid, "BizID");
		    if(offeredby == -1) return SendClientMessage(playerid, COLOR_GREY, "Tidak ada yang menawarkan anda Biz");
		    if(price == 0) return SendClientMessage(playerid, COLOR_GREY, "Tidak ada yang menawarkan anda Biz");
			if(GetPlayerCash(playerid) < price) return SendClientMessage(playerid, COLOR_GREY, "Uang anda tidak mencukupi untuk menerima Biz tersebut.");
			if(slot == 1)
			{
				PlayerInfo[playerid][pPBiskey] = PlayerInfo[offeredby][pPBiskey];
				PlayerInfo[offeredby][pPBiskey] = 0;
			}
			else if(slot == 2)
			{
			    if(PlayerInfo[playerid][pDonateRank] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak bisa menggunakan Biz Slot 2.");
				PlayerInfo[playerid][pPBiskey2] = PlayerInfo[offeredby][pPBiskey2];
				PlayerInfo[offeredby][pPBiskey2] = 0;
			}
			GivePlayerCash(playerid, -price);
			GivePlayerCash(offeredby, price);

			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(BizzInfo[b][bOwner], 255, "%s", sendername);
			DestroyDynamicPickup(BizzInfo[b][bPickupID]);
   			DestroyDynamic3DTextLabel(business1[b]);
	 		BizzInfo[b][bPickupID] = CreateDynamicPickup(19133, 23, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ], 0, -1, -1, 150.0 );
			format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s{FFFFFF}\nPemilik: {FFFF00}%s",b, BizzInfo[b][bMessage], BizzInfo[b][bOwner]);
			business1[b] = CreateStreamed3DTextLabel(String, COLOR_WHITE, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]+0.75,2.0, 0, 0);
			SendClientMessage(offeredby, COLOR_LIGHTBLUE, "Selamat. Anda telah menjual WorkShop anda");
			DeletePVar(playerid, "BizOfferedBy");
			DeletePVar(playerid, "BizPrice");
			DeletePVar(playerid, "BizSlot");
			DeletePVar(playerid, "BizID");
		}
		if(strcmp(params, "paintjob", true) == 0)
		{
		    new offeredby = SprayOffer[playerid], veh2 = idveh2[playerid];
		    new col = SprayPaint[offeredby], price = SprayPrice[playerid];
		    new veh = idveh[offeredby];
            if(offeredby == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Tidak ada yang menawarkan anda Spray");
            if(price == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Tidak ada yang menawarkan anda Spray");
			if(GetPlayerCash(playerid) < price)
			{
				SendClientMessage(offeredby, COLOR_GREY, "Uang player tersebut kurang untuk menerima Tawaran Spray anda");
				SendClientMessage(playerid, COLOR_GREY, "Uang anda kurang untuk menerima Tawaran Spray anda");
				idveh[offeredby] = INVALID_PLAYER_VEHICLE_ID;
				SprayPaint[offeredby] = 999;
				SprayPrice[playerid] = 0;
				SprayOffer[playerid] = INVALID_PLAYER_ID;
				idveh2[playerid] = INVALID_PLAYER_VEHICLE_ID;
				return 1;
			}
			if(!IsPlayerConnected(offeredby)) return SendClientMessage(playerid, COLOR_GREY, "Player tersebut belum Tersambung ke dalam Server");
        	if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tunggulah sampai Pertandingan Paint Ball berakhir.");
			if(offeredby == playerid)
			{
				PlayerInfo[offeredby][pSpraycan] -= 3;
			    PlayerVehicleInfo[playerid][veh2][pvPaintJob] = col;
				ChangeVehiclePaintjob(veh, col);
				SendClientMessageEx(playerid, COLOR_BLUE, "Anda telah mengganti cat Kendaraan anda");
				idveh[offeredby] = INVALID_PLAYER_VEHICLE_ID;
				SprayPaint[offeredby] = 999;
				SprayPrice[playerid] = 0;
				SprayOffer[playerid] = INVALID_PLAYER_ID;
				idveh2[playerid] = INVALID_PLAYER_VEHICLE_ID;
				return 1;
			}
			PlayerVehicleInfo[playerid][veh2][pvPaintJob] = col;
			ChangeVehiclePaintjob(veh, col);
			GivePlayerCash(playerid, -price);
			GivePlayerCash(offeredby, price);
			PlayerInfo[offeredby][pSpraycan] -= 3;
			idveh[offeredby] = INVALID_PLAYER_VEHICLE_ID;
			SprayPaint[offeredby] = 999;
			SprayPrice[playerid] = 0;
			SprayOffer[playerid] = INVALID_PLAYER_ID;
			idveh2[playerid] = INVALID_PLAYER_VEHICLE_ID;
			SendClientMessage(offeredby, COLOR_LIGHTBLUE, "Player tersebut telah menerima Tawaran Spray anda");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Anda telah menerima Tawaran Spray");
		}
		if(strcmp(params, "spray", true) == 0)
		{
		    new offeredby = SprayOffer[playerid], veh2 = idveh2[playerid];
		    new col1 = warna1[offeredby], col2 = warna2[offeredby], price = SprayPrice[playerid];
		    new veh = idveh[offeredby];
            if(offeredby == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Tidak ada yang menawarkan anda Spray");
            if(price == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Tidak ada yang menawarkan anda Spray");
			if(GetPlayerCash(playerid) < price)
			{
				SendClientMessage(offeredby, COLOR_GREY, "Uang player tersebut kurang untuk menerima Tawaran Spray anda");
				SendClientMessage(playerid, COLOR_GREY, "Uang anda kurang untuk menerima Tawaran Spray anda");
				idveh[offeredby] = INVALID_PLAYER_VEHICLE_ID;
				warna1[offeredby] = 999;
				warna2[offeredby] = 999;
				SprayPrice[playerid] = 0;
				SprayOffer[playerid] = INVALID_PLAYER_ID;
				idveh2[playerid] = INVALID_PLAYER_VEHICLE_ID;
				return 1;
			}
			if(!IsPlayerConnected(offeredby)) return SendClientMessage(playerid, COLOR_GREY, "Player tersebut belum Tersambung ke dalam Server");
        	if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tunggulah sampai Pertandingan Paint Ball berakhir.");
			if(offeredby == playerid)
			{
				PlayerInfo[offeredby][pSpraycan] -= 2;
			    PlayerVehicleInfo[playerid][veh2][pvColor1] = col1;
			    PlayerVehicleInfo[playerid][veh2][pvColor2] = col2;
				SendClientMessageEx(playerid, COLOR_BLUE, "Anda telah mengganti cat Kendaraan anda");
				ChangeVehicleColor(veh, col1, col2);
				idveh[offeredby] = INVALID_PLAYER_VEHICLE_ID;
				warna1[offeredby] = 999;
				warna2[offeredby] = 999;
				SprayPrice[playerid] = 0;
				SprayOffer[playerid] = INVALID_PLAYER_ID;
				idveh2[playerid] = INVALID_PLAYER_VEHICLE_ID;
				return 1;
			}
		    PlayerVehicleInfo[playerid][veh2][pvColor1] = col1;
		    PlayerVehicleInfo[playerid][veh2][pvColor2] = col2;
			ChangeVehicleColor(veh, col1, col2);
			GivePlayerCash(playerid, -price);
			GivePlayerCash(offeredby, price);
			PlayerInfo[offeredby][pSpraycan] -= 2;
			idveh[offeredby] = INVALID_PLAYER_VEHICLE_ID;
			warna1[offeredby] = 999;
			warna2[offeredby] = 999;
			SprayPrice[playerid] = 0;
			SprayOffer[playerid] = INVALID_PLAYER_ID;
			idveh2[playerid] = INVALID_PLAYER_VEHICLE_ID;
			SendClientMessage(offeredby, COLOR_LIGHTBLUE, "Player tersebut telah menerima Tawaran Spray anda");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Anda telah menerima Tawaran Spray");
		}
        if(strcmp(params, "work", true) == 0)
        {
			if(ProxDetectorS(8.0, playerid, InviteMech[playerid]))
			{
	            new offeredby = InviteMech[playerid];
	            new idx = PlayerInfo[offeredby][pWSid];
	            if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7) return SendClientMessage(playerid, COLOR_GREY, "Anda masih bekerja di WorkShop lain");
				if(offeredby == 999) return SendClientMessage(playerid, COLOR_GREY, "Tidak ada yang menawarkan anda bekerja sebagai Montir");
	            if(PlayerInfo[playerid][pWS] == 1) return SendClientMessage(playerid, COLOR_GREY, "Anda masih memiliki WorkShop sendiri");
				PlayerInfo[playerid][pWSJob] = 1;
				PlayerInfo[playerid][pWSBos] = idx;
				format(String, sizeof(String), "%s telah menerima tawaran anda untuk bekerja di WorkShop anda sebagai Montir", GetName(playerid));
				SendClientMessage(offeredby, COLOR_LIGHTBLUE, String);
				format(String, sizeof(String), "Anda telah menerima tawaran untuk bekerja di WorkShop %s sebagai Montir", GetPlayerNameEx(offeredby));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, String);
				InviteMech[playerid] = 999;
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Anda tidak berada dekat dengan Player yang menawarkan anda");
		}
		if(strcmp(params, "farmer", true) == 0)
        {
			if(ProxDetectorS(8.0, playerid, InviteFarm[playerid]))
			{
	            new offeredby = InviteFarm[playerid];
	            new idx = PlayerInfo[offeredby][pFarmid];
	            if(PlayerInfo[playerid][pJob] == 1401 || PlayerInfo[playerid][pJob2] == 1401) return SendClientMessage(playerid, COLOR_GREY, "Anda masih bekerja di Ladang lain");
				if(offeredby == 999) return SendClientMessage(playerid, COLOR_GREY, "Tidak ada yang menawarkan anda bekerja sebagai Farmer");
	            if(PlayerInfo[playerid][pFarm] == 1) return SendClientMessage(playerid, COLOR_GREY, "Anda masih memiliki Ladang sendiri");
				PlayerInfo[playerid][pFarmJob] = 1;
				PlayerInfo[playerid][pFarmBos] = idx;
				format(String, sizeof(String), "%s telah menerima tawaran anda untuk bekerja di Ladang anda sebagai Farmer", GetName(playerid));
				SendClientMessage(offeredby, COLOR_LIGHTBLUE, String);
				format(String, sizeof(String), "Anda telah menerima tawaran untuk bekerja di Ladang %s sebagai Farmer", GetPlayerNameEx(offeredby));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, String);
				InviteFarm[playerid] = 999;
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Anda tidak berada dekat dengan Player yang menawarkan anda");
		}
        if(strcmp(params,"ws", true) == 0)
        {
	    	new offeredby = WsOffer[playerid], price = WsPrice[playerid];
			new idx = PlayerInfo[offeredby][pWSid];
			if(WsOffer[playerid] < 999)
			{
				if(GetPlayerCash(playerid) < price)
				{
					SendClientMessage(playerid, COLOR_GREY, "Uang anda kurang untuk menerima Tawaran WorkShop tersebut");
	  	 		    SendClientMessage(offeredby, COLOR_GREY, "Uang Player tersebut kurang untuk menerima tawaran WorkShop Anda");
					WsOffer[playerid] = 999;
					WsPrice[playerid] = 0;
					return 1;
				}
				else
				{
					if(WsOffer[playerid] == 999) return SendClientMessage(playerid, COLOR_GREY, "Tidak ada yang menawarkan anda WorkShop");
					if(WsPrice[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "Tidak ada yang menawarkan anda WorkShop");
		            if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tunggulah sampai Pertandingan Paint Ball berakhir.");
					if(PlayerInfo[playerid][pWS] == 1) return SendClientMessage(playerid, COLOR_GREY, "Anda sudah memiliki WorkShop");
     				ClearWS(PlayerInfo[offeredby][pWSid]);
                    PlayerInfo[playerid][pWS] = PlayerInfo[offeredby][pWS];
                    PlayerInfo[playerid][pWSJob] = PlayerInfo[offeredby][pWSJob];
                    PlayerInfo[playerid][pWSid] = PlayerInfo[offeredby][pWSid];
                    PlayerInfo[playerid][pWSBos] = PlayerInfo[offeredby][pWSBos];
                    format(String, sizeof(String), "{AA3333}Selamat{FFFFFF}. Anda telah membeli WorkShop dari {FFFF00}%s{FFFFFF}. {AA33AA}(/wshelp) {FFFFFF}untuk melihat daftar Command", GetPlayerNameEx(offeredby));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, String);

					PlayerInfo[offeredby][pWS] = 0;
					PlayerInfo[offeredby][pWSJob] = 0;
					PlayerInfo[offeredby][pWSBos] = 0;
					PlayerInfo[offeredby][pWSid] = 0;
					format(String, sizeof(String), "{AA3333}Selamat{FFFFFF}. Anda telah menjual WorkShop anda kepada {FFFF00}%s", GetName(playerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, String);

		    		GetPlayerName(playerid, sendername, sizeof(sendername));
					format(WsInfo[idx][wsOwner], 32, "%s", sendername);
					SaveWS(idx);

					GivePlayerCash(playerid, -price);
					GivePlayerCash(offeredby, price);
					DestroyDynamicPickup(WsInfo[idx][wsPickup]);
					DestroyDynamic3DTextLabel(WsInfo[idx][wsText]);
					DestroyDynamicObject(WsInfo[idx][wsPapan]);
					WsInfo[idx][wsPickup] = CreateDynamicPickup(1080, 23, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ], 0);
					format(String, sizeof(String), "{FF0000}%s{FFFF00}\nPemilik: {FFFFFF}%s{FFFF00}\nID: {FFFFFF}[%d]\n", WsInfo[idx][wsName], WsInfo[idx][wsOwner], idx);
					WsInfo[idx][wsText] = CreateStreamed3DTextLabel(String, COLOR_WHITE, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ], 5, 0, 0);
					SendClientMessage(offeredby, COLOR_LIGHTBLUE, "Selamat. Anda telah menjual WorkShop anda");
					WsOffer[playerid] = 999;
					WsPrice[playerid] = 0;
				}
			}
		}
       if(strcmp(params,"car",true) == 0) {
			if(VehicleOffer[playerid] < 999) {
				if(IsPlayerConnected(VehicleOffer[playerid])) {
					if(GetPlayerCash(playerid) > VehiclePrice[playerid]) {
						if(IsPlayerInVehicle(VehicleOffer[playerid], PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId])) {
							if(!ProxDetectorS(8.0, VehicleOffer[playerid], playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not near the car dealer");
							new playervehicleid = GetPlayerFreeVehicleId(playerid);
							new carsamount = GetPlayerVehicleCount(playerid);
							if(PlayerInfo[playerid][pDonateRank] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
							if(PlayerInfo[playerid][pDonateRank] == 2 && carsamount >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
							if(PlayerInfo[playerid][pDonateRank] == 3 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
							if(PlayerInfo[playerid][pDonateRank] == 4 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
							if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
							new ip[32], ipex[32];
							GetPlayerIp(playerid, ip, sizeof(ip));
							GetPlayerIp(VehicleOffer[playerid], ipex, sizeof(ipex));
							format(String, sizeof(String), "[CAR] %s (IP: %s) has paid %s to %s for the %s (IP: %s)", GetName(playerid), ip, FormatMoney(VehiclePrice[playerid]), GetPlayerNameEx(VehicleOffer[playerid]), GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), ipex);
							Log("logs/pay.log", String);
							GetPlayerName(VehicleOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(String, sizeof(String), "* You bought the %s for %s, from %s. (Check /carhelp for more help)", GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), FormatMoney(VehiclePrice[playerid]),giveplayer);
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
							format(String, sizeof(String), "* You sold your %s to %s for %s.",GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), sendername,FormatMoney(VehiclePrice[playerid]));
							SendClientMessageEx(VehicleOffer[playerid], COLOR_LIGHTBLUE, String);
							GivePlayerCash( VehicleOffer[playerid], VehiclePrice[playerid] );
							GivePlayerCash(playerid, -VehiclePrice[playerid]);
							RemovePlayerFromVehicle(VehicleOffer[playerid]);
							new Float:slx, Float:sly, Float:slz;
							GetPlayerPos(VehicleOffer[playerid], slx, sly, slz);
							AC_BS_SetPlayerPos(VehicleOffer[playerid], slx, sly, slz+2);
                            PlayerVehicleInfo[playerid][playervehicleid][pvId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle];
                            PlayerVehicleInfo[playerid][playervehicleid][pvLock] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock];
                            PlayerVehicleInfo[playerid][playervehicleid][pvLocked] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob];
                            PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1];
                            PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2];
                            strmid(PlayerVehicleInfo[playerid][playervehicleid][pvAllowPlayer], PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowPlayer], 0, strlen(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowPlayer]), 255);
                            PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedPlayerId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPark] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark];
                            PlayerVehicleInfo[playerid][playervehicleid][pvInsurances] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvInsurances];
                            PlayerVehicleInfo[playerid][playervehicleid][pvMesinUpgrade] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMesinUpgrade];
                            PlayerVehicleInfo[playerid][playervehicleid][pvBodyUpgrade] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvBodyUpgrade];
                            for(new m = 0; m < MAX_MODS; m++) {
                                PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m];
                            }
                            for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++) {
                                PlayerVehicleInfo[playerid][playervehicleid][pvToyID][vt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyID][vt];
                                PlayerVehicleInfo[playerid][playervehicleid][pvToyPosX][vt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyPosX][vt];
                                PlayerVehicleInfo[playerid][playervehicleid][pvToyPosY][vt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyPosY][vt];
                                PlayerVehicleInfo[playerid][playervehicleid][pvToyPosZ][vt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyPosZ][vt];
                                PlayerVehicleInfo[playerid][playervehicleid][pvToyRotX][vt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyRotX][vt];
                                PlayerVehicleInfo[playerid][playervehicleid][pvToyRotY][vt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyRotY][vt];
                                PlayerVehicleInfo[playerid][playervehicleid][pvToyRotZ][vt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyRotZ][vt];
                                PlayerVehicleInfo[playerid][playervehicleid][pvToyColor][vt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyColor][vt];
                                PlayerVehicleInfo[playerid][playervehicleid][pvToyIndex][vt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyIndex][vt];
                                PlayerVehicleInfo[playerid][playervehicleid][pvToyTexture1][vt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTexture1][vt];
                                PlayerVehicleInfo[playerid][playervehicleid][pvToyTexture2][vt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTexture2][vt];
                                PlayerVehicleInfo[playerid][playervehicleid][pvToyTextureID][vt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextureID][vt];
							    if(vt == 0)
							    {
									format(PlayerVehicleInfo[playerid][playervehicleid][pvToyText1], 128, "%s", PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText1]);
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextCol1] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol1];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextSize1] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize1];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextID1] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID1];
								}
							    if(vt == 1)
							    {
									format(PlayerVehicleInfo[playerid][playervehicleid][pvToyText2], 128, "%s", PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText2]);
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextCol2] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol2];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextSize2] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize2];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextID2] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID2];
								}
							    if(vt == 2)
							    {
									format(PlayerVehicleInfo[playerid][playervehicleid][pvToyText3], 128, "%s", PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText3]);
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextCol3] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol3];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextSize3] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize3];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextID3] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID3];
								}
							    if(vt == 3)
							    {
									format(PlayerVehicleInfo[playerid][playervehicleid][pvToyText4], 128, "%s", PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText4]);
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextCol4] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol4];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextSize4] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize4];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextID4] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID4];
								}
							    if(vt == 4)
							    {
									format(PlayerVehicleInfo[playerid][playervehicleid][pvToyText5], 128, "%s", PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText5]);
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextCol5] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol5];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextSize5] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize5];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextID5] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID5];
								}
							    if(vt == 5)
							    {
									format(PlayerVehicleInfo[playerid][playervehicleid][pvToyText6], 128, "%s", PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText6]);
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextCol6] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol6];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextSize6] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize6];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextID6] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID6];
								}
							    if(vt == 6)
							    {
									format(PlayerVehicleInfo[playerid][playervehicleid][pvToyText7], 128, "%s", PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText7]);
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextCol7] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol7];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextSize7] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize7];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextID7] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID7];
								}
							    if(vt == 7)
							    {
									format(PlayerVehicleInfo[playerid][playervehicleid][pvToyText8], 128, "%s", PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText8]);
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextCol8] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol8];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextSize8] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize8];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextID8] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID8];
								}
							    if(vt == 8)
							    {
									format(PlayerVehicleInfo[playerid][playervehicleid][pvToyText9], 128, "%s", PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText9]);
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextCol9] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol9];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextSize9] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize9];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextID9] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID9];
								}
							    if(vt == 9)
							    {
									format(PlayerVehicleInfo[playerid][playervehicleid][pvToyText10], 128, "%s", PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText10]);
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextCol10] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol10];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextSize10] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize10];
									PlayerVehicleInfo[playerid][playervehicleid][pvToyTextID10] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID10];
								}
							}
							PlayerVehicleInfo[playerid][playervehicleid][pvNeon] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvNeon];
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock] = 3;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob] = -1;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvImpounded] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvStored] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvDestroyed] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2] = 0;
                            strmid(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowPlayer], "No-one", 0, strlen("No-one"), 255);
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedPlayerId] = INVALID_PLAYER_ID;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvInsurances] = 0;
                            for(new m = 0; m < MAX_MODS; m++) {
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m] = 0;
                            }
                            for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++) {
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyID][vt] = 0;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyPosX][vt] = 0.0;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyPosY][vt] = 0.0;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyPosZ][vt] = 0.0;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyRotX][vt] = 0.0;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyRotY][vt] = 0.0;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyRotZ][vt] = 0.0;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyColor][vt] = 1;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyIndex][vt] = 0;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTexture1][vt] = 0;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTexture2][vt] = 0;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextureID][vt] = 0;
							    if(vt == 0)
							    {
									format(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText1], 128, "None");
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol1] = 1;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize1] = 20;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID1] = 0;
								}
							    if(vt == 1)
							    {
									format(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText2], 128, "None");
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol2] = 1;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize2] = 20;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID2] = 0;
								}
							    if(vt == 2)
							    {
									format(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText3], 128, "None");
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol3] = 1;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize3] = 20;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID3] = 0;
								}
							    if(vt == 3)
							    {
									format(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText4], 128, "None");
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol4] = 1;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize4] = 20;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID4] = 0;
								}
							    if(vt == 4)
							    {
									format(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText5], 128, "None");
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol5] = 1;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize5] = 20;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID5] = 0;
								}
							    if(vt == 5)
							    {
									format(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText6], 128, "None");
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol6] = 1;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize6] = 20;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID6] = 0;
								}
							    if(vt == 6)
							    {
									format(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText7], 128, "None");
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol7] = 1;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize7] = 20;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID7] = 0;
								}
							    if(vt == 7)
							    {
									format(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText8], 128, "None");
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol8] = 1;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize8] = 20;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID8] = 0;
								}
							    if(vt == 8)
							    {
									format(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText9], 128, "None");
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol9] = 1;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize9] = 20;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID9] = 0;
								}
							    if(vt == 9)
							    {
									format(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyText10], 128, "None");
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextCol10] = 1;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextSize10] = 20;
									PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvToyTextID10] = 0;
								}
							}
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvNeon] = 0;
                            VehicleOffer[playerid] = 999;
                            VehiclePrice[playerid] = 0;
                            return 1;
                        }
                        else {
                            SendClientMessageEx(playerid, COLOR_GREY, "   The Car Dealer is not in the offered car!");
                            return 1;
                        }
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the car!");
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   Nobody offered to buy a car!");
                return 1;
            }
        }
        if(strcmp(params,"house",true) == 0) {
            if(HouseOffer[playerid] < 999) {
                if(IsPlayerConnected(HouseOffer[playerid])) {
                    if(PlayerInfo[HouseOffer[playerid]][pPhousekey] == INVALID_HOUSE_ID) {
                        SendClientMessageEx(playerid, COLOR_WHITE, "They don't own that house");
                        return 1;
                    }
                    if(GetPlayerCash(playerid) > HousePrice[playerid]) {

                        new house;
                        if(House[playerid] == 1) house = PlayerInfo[HouseOffer[playerid]][pPhousekey];
                        else if(House[playerid] == 2) house = PlayerInfo[HouseOffer[playerid]][pPhousekey2];
                        else return SendClientMessageEx(playerid, COLOR_RED, "Error: No house specified");
                        ClearHouse(house);
                        HouseInfo[house][hLock] = 1;
                        format( HouseInfo[house][hOwner], 128, "Nobody" );
                        sendername = GetPlayerNameEx(HouseOffer[playerid]);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(String, sizeof(String), "~w~Congratulations~n~ You have sold your property for ~n~~g~%s", FormatMoney(HousePrice[playerid]));
                        GameTextForPlayer(HouseOffer[playerid], String, 4000, 3);
                        if(House[playerid] == 1) PlayerInfo[HouseOffer[playerid]][pPhousekey] = INVALID_HOUSE_ID;
                        else PlayerInfo[HouseOffer[playerid]][pPhousekey2] = INVALID_HOUSE_ID;
                        SaveHouses();
                        OnPlayerStatsUpdate(HouseOffer[playerid]);
                        DestroyDynamicPickup(HouseInfo[house][hPickupID]);
                        HouseInfo[house][hPickupID] = CreateDynamicPickup(19132, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
                        GivePlayerCash(HouseOffer[playerid],HousePrice[playerid]);

                        PlayerInfo[playerid][pPhousekey] = house;
                        HouseInfo[house][hOwned] = 1;
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        strmid(HouseInfo[house][hOwner], sendername, 0, strlen(sendername), 255);
                        GivePlayerCash(playerid,-HousePrice[playerid]);
                        SendClientMessageEx(playerid, COLOR_WHITE, "Congratulations on your new purchase!");
                        SendClientMessageEx(playerid, COLOR_WHITE, "Type /help to review the property help section!");
                        SaveHouses();
                        OnPlayerStatsUpdate(playerid);
                        DestroyDynamicPickup(HouseInfo[house][hPickupID]);
                        HouseInfo[house][hPickupID] = CreateDynamicPickup(19132, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
                        format(String, sizeof(String), "Pemilik: %s\nLevel: %d\nAlamat: %s\nID: %d",HouseInfo[house][hOwner],HouseInfo[house][hLevel], HouseInfo[house][hAlamat], house);
                        UpdateDynamic3DTextLabelText(HouseInfo[house][hTextID], COLOR_GREEN, String);

                        new ip[32], ipex[32];
                        GetPlayerIp(HouseOffer[playerid],ip,sizeof(ip));
                        GetPlayerIp(playerid,ipex,sizeof(ipex));
                        format(String,sizeof(String),"%s (IP: %s) has sold their house (ID %d) to %s (IP: %s) for %s.",GetPlayerNameEx(HouseOffer[playerid]),ip,house,GetName(playerid),ipex,FormatMoney(HousePrice[playerid]));
                        Log("logs/house.log", String);

                        HouseOffer[playerid] = 999;
                        HousePrice[playerid] = 0;
                        House[playerid] = 0;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the house!");
                        HouseOffer[playerid] = 999;
                        HousePrice[playerid] = 0;
                        House[playerid] = 0;
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   Nobody offered to buy a house!");
                return 1;
            }
        }
        else if(strcmp(params, "handshake",true) == 0) {
            new
                Count;

            foreach(Player, i) {
                if(GetPVarInt(i, "shrequest") == playerid) {
                    new
                        Float: ppFloats[3];

                    GetPlayerPos(i, ppFloats[0], ppFloats[1], ppFloats[2]);

                    if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2])) {
                        Count++;
                        SendClientMessageEx(playerid, COLOR_WHITE, "You're too far away. You can't accept the handshake right now.");
                    }
                    else {
                        switch(GetPVarInt(i, "shstyle")) {
                            case 1:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000 );
                                ApplyAnimation( i, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000 );
                                SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                DeletePVar(i, "shstyle");
                            }
                            case 2:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000 );
                                ApplyAnimation( i, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000 );
                                SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                DeletePVar(i, "shstyle");
                            }
                            case 3:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000 );
                                ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000 );
                                SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                DeletePVar(i, "shstyle");
                            }
                            case 4:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "hndshkcb", 4.0, 1, 1, 1, 0, 1000 );
                                ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000 );
                                SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                DeletePVar(i, "shstyle");
                            }
                            case 5:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "hndshkda", 4.0, 1, 1, 1, 0, 1000 );
                                ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000 );
                                SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                DeletePVar(i, "shstyle");
                            }
                            case 6:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600 );
                                ApplyAnimation( i, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600 );
                                SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                DeletePVar(i, "shstyle");
                            }
                            case 7:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250 );
                                ApplyAnimation( i, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250 );
                                SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                DeletePVar(i, "shstyle");
                            }
                            case 8:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "prtial_hndshk_biz_01", 3.7, 1, 1, 1, 0, 2200 );
                                ApplyAnimation( i, "GANGS", "prtial_hndshk_biz_01", 3.5, 1, 1, 1, 0, 2200 );
                                SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                DeletePVar(i, "shstyle");
                            }
                        }
                    }
                }
            }
            if(Count == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have any pending handshake requests.");
            return 1;
        }
        else if(strcmp(params,"invite",true) == 0)
		{
            if(hInviteOffer[playerid] < 999)
			{
                if(IsPlayerConnected(hInviteOffer[playerid]))
				{
					hInviteHouse[playerid] = (hInviteSlot[playerid] == 1) ? (PlayerInfo[hInviteOffer[playerid]][pPhousekey]) : (PlayerInfo[hInviteOffer[playerid]][pPhousekey2]);
                    format(String, sizeof(String), "* Anda telah menerima undangan %s. Menujulah ke checkpoint di radar anda.", GetPlayerNameEx(hInviteOffer[playerid]));
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
                    format(String, sizeof(String), "* %s telah menerima undangan anda.", GetName(playerid));
                    SendClientMessageEx(hInviteOffer[playerid], COLOR_LIGHTBLUE, String);
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid,HouseInfo[hInviteHouse[playerid]][hExteriorX], HouseInfo[hInviteHouse[playerid]][hExteriorY], HouseInfo[hInviteHouse[playerid]][hExteriorZ], 4.0);
                    gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
					hInviteSlot[playerid] = 0;
                    hInviteOffer[playerid] = 999;
                    hInviteHouse[playerid] = INVALID_HOUSE_ID;
                    return 1;
                }
                else
				{
					hInviteSlot[playerid] = 0;
                    hInviteOffer[playerid] = 999;
                    hInviteHouse[playerid] = INVALID_HOUSE_ID;
                    SendClientMessageEx(playerid, COLOR_GREY, "The player who sent you a house invite has disconnected.");
                }
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "Nobody sent you a house invite.");
                return 1;
            }
            return 1;
        }
        else if(strcmp(params,"divorce",true) == 0) {
            if(DivorceOffer[playerid] < 999) {
                if(IsPlayerConnected(DivorceOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid])) {
                        GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(String, sizeof(String), "* You have signed the divorce papers from %s, you are now single again.", giveplayer);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
                        format(String, sizeof(String), "* %s has signed the divorce papers, you are now single again.", sendername);
                        SendClientMessageEx(DivorceOffer[playerid], COLOR_LIGHTBLUE, String);
                        ClearMarriage(playerid);
                        ClearMarriage(DivorceOffer[playerid]);
                        PlayerInfo[playerid][pPhousekey] = INVALID_HOUSE_ID;
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   The player that sent you the Divorce Papers is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "Nobody sent you any divorce papers.");
                return 1;
            }
        }
        else if(strcmp(params,"faction",true) == 0) {
            if(InviteOffer[playerid] < 999) {
                if(IsPlayerConnected(InviteOffer[playerid])) {
                    if( PlayerInfo[playerid][pFactionBanned] >= 1 && PlayerInfo[playerid][pFactionBanned] == InviteFaction[playerid] ) {
                        SendClientMessageEx(playerid, COLOR_WHITE, "You are unable to accept this faction invite, as you're banned from this faction. Contact a Head Admin.");
                        return 1;
                    }

                    if( PlayerInfo[playerid][pCSFBanned] >= 1 ) {
                        switch( InviteFaction[ playerid ] ) {
                            case 1, 2, 3, 4, 5, 6, 7, 11, 12: return SendClientMessageEx(playerid, COLOR_WHITE, "You are unable to accept this faction invite, as you're banned from Civil Service Factions. Contact a Head Admin.");
                        }
                    }

                    new ftext[64];
                    if(InviteFaction[playerid] > 0 && InviteFamily[playerid] == 255) {
                        if(InviteFaction[playerid] == 1) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ftext = "SAPD"; ChosenSkin[playerid] = 280; SetPlayerSkin(playerid, 280); }
                        else if(InviteFaction[playerid] == 2) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ftext = "FBI"; ChosenSkin[playerid] = 286; SetPlayerSkin(playerid, 286); }
                        else if(InviteFaction[playerid] == 3) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ftext = "SFPD"; ChosenSkin[playerid] = 287; SetPlayerSkin(playerid, 287); }
                        else if(InviteFaction[playerid] == 4) { PlayerInfo[playerid][pTeam] = 1; gTeam[playerid] = 1; ftext = "SAMD"; ChosenSkin[playerid] = 70; SetPlayerSkin(playerid, 70); }
                        else if(InviteFaction[playerid] == 5) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ftext = "Judicial System"; }
                        else if(InviteFaction[playerid] == 6) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ftext = "SAGS"; ChosenSkin[playerid] = 120; SetPlayerSkin(playerid, 258); }
                        else if(InviteFaction[playerid] == 7) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ftext = "SASD"; ChosenSkin[playerid] = 286; SetPlayerSkin(playerid, 286); }
                        else if(InviteFaction[playerid] == 9) { PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; ftext = "SANEWS"; ChosenSkin[playerid] = 148; SetPlayerSkin(playerid, 148); }
                        else if(InviteFaction[playerid] == 10) { PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; ftext = "Transport Company"; ChosenSkin[playerid] = 61; SetPlayerSkin(playerid, 61); }
                        else if(InviteFaction[playerid] == 11) { PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; ftext = "NG"; ChosenSkin[playerid] = 287; SetPlayerSkin(playerid, 287); }
                        else if(InviteFaction[playerid] == 12) { PlayerInfo[playerid][pTeam] = 13; gTeam[playerid] = 13; ftext = "Tierra Robada"; ChosenSkin[playerid] = 255; SetPlayerSkin(playerid, 255); }
                        else if(InviteFaction[playerid] == 13) { PlayerInfo[playerid][pTeam] = 14; gTeam[playerid] = 14; ftext = "PMC"; ChosenSkin[playerid] = 255; SetPlayerSkin(playerid, 255); }
                        else { return 1; }
                        PlayerInfo[playerid][pMember] = InviteFaction[playerid];
                        if(InviteFaction[playerid] == 1 || InviteFaction[playerid] == 9 || InviteFaction[playerid] == 13) {
                            PlayerInfo[playerid][pRank] = 0;
                        }
                        else {
                            PlayerInfo[playerid][pRank] = 1;
                        }
                        PlayerInfo[playerid][pDivision] = 0;
                        format(String, sizeof(String), "   You have accepted the invitation and joined the %s, you were invited by %s.", ftext, GetPlayerNameEx(InviteOffer[playerid]));
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
                        format(String, sizeof(String), "   %s has accepted the invitation and joined the %s.", GetName(playerid),ftext);
                        SendClientMessageEx(InviteOffer[playerid], COLOR_LIGHTBLUE, String);
                        InviteOffer[playerid] = 999;
                        InviteFaction[playerid] = 0;
                        InviteFamily[playerid] = 255;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No one has invited you to join an organisation/family!");
                return 1;
            }
        }
        else if(strcmp(params,"family",true) == 0) {
            if(InviteOffer[playerid] < 999) {
                if(IsPlayerConnected(InviteOffer[playerid])) {
                    if(InviteFaction[playerid] == 0 && InviteFamily[playerid] != 255) {
                        if(PlayerInfo[playerid][pJailTime] > 1) {
                            SendClientMessageEx(playerid, COLOR_WHITE, "Please wait until you are released from jail/prison before you accept the invite.");
                            return 1;
                        }

                        if( PlayerInfo[playerid][pMember] >= 3 || PlayerInfo[playerid][pFMember] != 255 || PlayerInfo[playerid][pLeader] >= 3 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 && PlayerInfo[playerid][pDivision] >= 3 || PlayerInfo[playerid][pMember] == 2 && PlayerInfo[playerid][pDivision] == 1) {
                            SendClientMessageEx(playerid, COLOR_WHITE, "You can't accept this invite as you're already in a family/faction.");
                        }
                        else {
                            PlayerInfo[playerid][pFMember] = InviteFamily[playerid];
                            PlayerInfo[playerid][pRank] = 1;
                            FamilyInfo[InviteFamily[playerid]][FamilyMembers] ++;
                            SaveFamilies();
                            format(String, sizeof(String), "   You have accepted the invitation and joined the %s, you were invited by %s.", FamilyInfo[InviteFamily[playerid]][FamilyName], GetPlayerNameEx(InviteOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
                            format(String, sizeof(String), "   %s has accepted the invitation and joined the %s.", GetName(playerid),FamilyInfo[InviteFamily[playerid]][FamilyName]);
                            SendClientMessageEx(InviteOffer[playerid], COLOR_LIGHTBLUE, String);
                            SendClientMessageEx(playerid, COLOR_WHITE, "Use (/f)amily to talk in family chat.");//"Use (/f)amily to talk in family chat. If you wish to acquire a family skin, type /fclothes inside a clothes store.");
                            InviteOffer[playerid] = 999;
                            InviteFaction[playerid] = 0;
                            InviteFamily[playerid] = 255;
                        }
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No one has invited you to join an organisation/family!");
                return 1;
            }
        }
        else if(strcmp(params,"witness",true) == 0) {
            if(MarryWitnessOffer[playerid] < 999) {
                if(IsPlayerConnected(MarryWitnessOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid])) {
                        GetPlayerName(MarryWitnessOffer[playerid], giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(String, sizeof(String), "* You have accepted %s's request to be their marriage witness.", giveplayer);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
                        format(String, sizeof(String), "* %s has accepted your request to be your marriage witness.", sendername);
                        SendClientMessageEx(MarryWitnessOffer[playerid], COLOR_LIGHTBLUE, String);
                        MarryWitness[MarryWitnessOffer[playerid]] = playerid;
                        MarryWitnessOffer[playerid] = 999;
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   The player that requested you to be their marriage witness is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one asked you to be their marriage witness!");
                return 1;
            }
        }
        else if(strcmp(params,"marriage",true) == 0) {
            if(ProposeOffer[playerid] < 999) {
                if(IsPlayerConnected(ProposeOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid])) {
                        if(MarryWitness[ProposeOffer[playerid]] == 999) {
                            SendClientMessageEx(playerid, COLOR_GREY, "   The proposer doesn't have a marriage witness!");
                            return 1;
                        }
                        if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]])) {
                            if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]])) {
                                if(IsPlayerInRangeOfPoint(playerid, 10.0, 1963.9612, -369.1851, 1093.7289)) {
                                    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
                                    GetPlayerName(playerid, sendername, sizeof(sendername));
                                    format(String, sizeof(String), "* You have accepted %s's request to be your husband.", giveplayer);
                                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
                                    format(String, sizeof(String), "* %s has accepted your request to be your wife.", sendername);
                                    SendClientMessageEx(ProposeOffer[playerid], COLOR_LIGHTBLUE, String);
                                    format(String, sizeof(String), "Priest: %s, do you take %s as your lovely husband? (Type 'yes', as anything else will reject the marriage.)", sendername, giveplayer);
                                    SendClientMessageEx(playerid, COLOR_WHITE, String);
                                    MarriageCeremoney[playerid] = 1;
                                    ProposedTo[ProposeOffer[playerid]] = playerid;
                                    GotProposedBy[playerid] = ProposeOffer[playerid];
                                    MarryWitness[ProposeOffer[playerid]] = 999;
                                    ProposeOffer[playerid] = 999;
                                    return 1;
                                }
                                else {
                                    SendClientMessageEx(playerid, COLOR_GREY, "   You are not at the church!");
                                    return 1;
                                }
                            }
                            else {
                                SendClientMessageEx(playerid, COLOR_GREY, "   The marriage witness is not near your proposer!");
                                return 1;
                            }
                        }
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   The player that proposed to you is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   Nobody proposed to you!");
                return 1;
            }
        }
        else if(strcmp(params,"ticket",true) == 0) {
            if(TicketOffer[playerid] < 999) {
                if(IsPlayerConnected(TicketOffer[playerid])) {
                    if (ProxDetectorS(5.0, playerid, TicketOffer[playerid])) {
                        if(GetPlayerCash(playerid) >= TicketMoney[playerid]) {
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(TicketOffer[playerid], ipex, sizeof(ipex));
                            format(String, sizeof(String), "[FACTION TICKET] %s (IP: %s) telah membayar %s kepada %s (IP: %s)", GetName(playerid), ip, FormatMoney(TicketMoney[playerid]), GetPlayerNameEx(TicketOffer[playerid]), ipex);
                            Log("logs/pay.log", String);
                            format(String, sizeof(String), "* Anda telah membayar ticket seharga %s kepada %s.", FormatMoney(TicketMoney[playerid]), GetPlayerNameEx(TicketOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
                            format(String, sizeof(String), "* %s telah membayar ticket seharga %s.", GetName(playerid), FormatMoney(TicketMoney[playerid]));
                            SendClientMessageEx(TicketOffer[playerid], COLOR_LIGHTBLUE, String);
                            GivePlayerCash(playerid, - TicketMoney[playerid]);
                            Tax += TicketMoney[playerid];
                            TicketOffer[playerid] = 999;
                            TicketMoney[playerid] = 0;
                            if(GetPlayerCash(playerid) < 1) GivePlayerCash(playerid, 0);
                            return 1;
                        }
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   The officer is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you a ticket!");
                return 1;
            }
        }
        else if(strcmp(params,"medic",true) == 0) {
            if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4) {
                if(MedicCallTime[playerid] > 0) {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You have already accepted a Medic Call!");
                    return 1;
                }
                if(GetPVarInt(playerid, "Packages") >= 1 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1) {
                    SendClientMessageEx(playerid, COLOR_WHITE, "Pastikan bahwa pos pemeriksaan saat ini Anda dihancurkan dulu (Anda juga memiliki paket materi, atau lain checkpoint yang ada).");
                    return 1;
                }
                if(MedicCall < 999) {
                    if(IsPlayerConnected(MedicCall)) {
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
                        format(String, sizeof(String), "* You have accepted the Medic Call from %s",giveplayer);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Setelah 45 detik Red Marker akan hilang.");
                        format(String, sizeof(String), "* Medic %s telah menerima Medic Call silahkan menunggu di Posisi Anda saat ini.",sendername);
                        SendClientMessageEx(MedicCall, COLOR_LIGHTBLUE, String);
                        new Float:X,Float:Y,Float:Z;
                        GetPlayerPos(MedicCall, X, Y, Z);
                        SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                        new zone[MAX_ZONE_NAME];
                        GetPlayer3DZone(MedicCall, zone, sizeof(zone));
                        format(String, sizeof(String), "HINT: %s is located in %s", GetPlayerNameEx(MedicCall), zone);
                        SendClientMessageEx(playerid, COLOR_WHITE, String);
                        MedicCallTime[playerid] = 1;
                        MedicAccepted[playerid] = MedicCall;
                        MedicCall = 999;
                        return 1;
                    }
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   No-one called for a Medic yet!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   Anda bukan Medic!");
                return 1;
            }
        }
        else if(strcmp(params,"mechanic",true) == 0) {
            if(PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pJob2] != 7) {
                SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Car Mechanic!");
                return 1;
            }
            if(MechanicCallTime[playerid] > 0) {
                SendClientMessageEx(playerid, COLOR_GREY, "   You have already accepted a Mechanic Call!");
                return 1;
            }
            if(GetPVarInt(playerid, "Packages") >= 1 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1) {
                SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                return 1;
            }
            if(MechanicCall < 999) {
                if(IsPlayerConnected(MechanicCall)) {
                    if(playerid == MechanicCall) return 1;
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(MechanicCall, giveplayer, sizeof(giveplayer));
                    format(String, sizeof(String), "* You have accepted the Mechanic Call from %s, you have 30 Seconds to get there.",giveplayer);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* After the 30 Seconds the Red Marker will dissapear.");
                    format(String, sizeof(String), "* Car Mechanic %s has accepted your Mechanic Call please wait at your current Position.",sendername);
                    SendClientMessageEx(MechanicCall, COLOR_LIGHTBLUE, String);
                    new Float:X,Float:Y,Float:Z;
                    GetPlayerPos(MechanicCall, X, Y, Z);
                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                    GameTextForPlayer(playerid, "~w~Mechanic Caller~n~~r~Goto redmarker", 5000, 1);
                    MechanicCallTime[playerid] = 1;
                    MechanicCall = 999;
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one called for a Car Mechanic yet!");
                return 1;
            }
        }
        else if(strcmp(params,"job",true) == 0) {
            if(GettingJob[playerid] > 0)
			{
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Congratulations with your new Job, type /help to see your new command.");
                PlayerInfo[playerid][pJob] = GettingJob[playerid];
                GettingJob[playerid] = 0;
                PlayerInfo[playerid][pJTime] = 3600;
                return 1;
            }
            if(GettingJob2[playerid] > 0) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Congratulations with your new Job, type /help to see your new command.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have taken this as a secondary job.");
                PlayerInfo[playerid][pJob2] = GettingJob2[playerid];
                GettingJob2[playerid] = 0;
                return 1;
            }
            if(GettingIllegalJob[playerid] > 0)
			{
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Congratulations with your new Job, type /help to see your new command.");
                PlayerInfo[playerid][pIllegalJob] = GettingIllegalJob[playerid];
                GettingIllegalJob[playerid] = 0;
                PlayerInfo[playerid][pJTime] = 3600;
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   You haven't even been at a job place yet!");
                return 1;
            }
        }
        else if(strcmp(params,"live",true) == 0) {
            if(LiveOffer[playerid] < 999) {
                if(IsPlayerConnected(LiveOffer[playerid])) {
                    if (ProxDetectorS(5.0, playerid, LiveOffer[playerid])) {
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are frozen till the Live Conversation ends.");
                        SendClientMessageEx(LiveOffer[playerid], COLOR_LIGHTBLUE, "* You are frozen till the Live Conversation ends (use /live again).");
                        TogglePlayerControllable(playerid, 0);
                        TogglePlayerControllable(LiveOffer[playerid], 0);
                        TalkingLive[playerid] = LiveOffer[playerid];
                        TalkingLive[LiveOffer[playerid]] = playerid;
                        LiveOffer[playerid] = 999;
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You are to far away from the News Reporter!");
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one gave you a Live Conversation offer!");
                return 1;
            }
        }
        else if(strcmp(params,"mats",true) == 0)
		{
            if(MatsOffer[playerid] < 999)
			{
                if(GetPlayerCash(playerid) >= MatsPrice[playerid])
                {
                	if(IsPlayerConnected(MatsOffer[playerid]))
					{
    					if(GetPVarInt(playerid, "SellMatsTimer") > 0)
						{
							format(String, sizeof(String), "You must wait %d seconds before accepting materials.", GetPVarInt(playerid, "SellMatsTimer"));
							SendClientMessageEx(playerid,COLOR_GREY,String);
							return 1;
						}
						if(PlayerInfo[MatsOffer[playerid]][pMats] < MatsAmount[playerid])
						{
						    SendClientMessageEx(playerid,COLOR_GREY, "That player does not have that amount of materials anymore!");
						    return 1;
						}
     					new ip[32], ipex[32];
          				GetPlayerIp(playerid, ip, sizeof(ip));
              			GetPlayerIp(MatsOffer[playerid], ipex, sizeof(ipex));
                 		format(String, sizeof(String), "[MATERIALS (%d)] %s (IP:%s) has paid %s to %s (IP:%s)", MatsAmount[playerid], GetName(playerid), ip, FormatMoney(MatsPrice[playerid]), GetPlayerNameEx(MatsOffer[playerid]), ipex);
                   		Log("logs/pay.log", String);

						MatsWarn[playerid][MatsOffer[playerid]] += MatsPrice[playerid];
      					if(MatsWarn[playerid][MatsOffer[playerid]] >= 25000 && (PlayerInfo[MatsOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3))
				  		{
           					format(String, sizeof(String), "%s (IP:%s) has sold %s (IP:%s) %s of materials in this session.", GetPlayerNameEx(MatsOffer[playerid]), ipex, GetName(playerid), ip, FormatMoney(MatsWarn[playerid][MatsOffer[playerid]]));
                  			ABroadCast(COLOR_YELLOW, String, 1);
						}

         				format(String, sizeof(String), "* You bought %d materials for %s from %s.", MatsAmount[playerid], FormatMoney(MatsPrice[playerid]), GetPlayerNameEx(MatsOffer[playerid]));
            			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
              			format(String, sizeof(String), "* %s has bought your %d materials, the %s was added to your money.", GetName(playerid), MatsAmount[playerid], FormatMoney(MatsPrice[playerid]));
                		SendClientMessageEx(MatsOffer[playerid], COLOR_LIGHTBLUE, String);

                  		GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
						GivePlayerCash(playerid, -MatsPrice[playerid]);
                    	PlayerInfo[playerid][pMats] += MatsAmount[playerid];
                    	PlayerInfo[MatsOffer[playerid]][pMats] -= MatsAmount[playerid];

                    	MatsOffer[playerid] = 999;
                    	MatsPrice[playerid] = 0;
                    	MatsAmount[playerid] = 0;
					}
				}
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "You can't afford those materials!");
                    return 1;
                }
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "No-one offered you any materials!");
                return 1;
            }
        }
        else if(strcmp(params,"pot",true) == 0) {
            if(PotOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > PotPrice[playerid]) {
                    if(PlayerInfo[playerid][pPot] < 25) {
                        if(IsPlayerConnected(PotOffer[playerid])) {
							if(PlayerInfo[PotOffer[playerid]][pPot] < PotGram[playerid])
							{
						    	SendClientMessageEx(playerid,COLOR_GREY, "That player does not have that amount of pot anymore!");
						    	return 1;
							}
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(PotOffer[playerid], ipex, sizeof(ipex));
                            format(String, sizeof(String), "[POT (%d GRAMS)] %s (IP:%s) has paid %s to %s (IP:%s)", PotGram[playerid], GetName(playerid), ip, FormatMoney(PotPrice[playerid]), GetPlayerNameEx(PotOffer[playerid]), ipex);
                            Log("logs/pay.log", String);

                            PotWarn[playerid][PotOffer[playerid]] += PotPrice[playerid];
                            if(PotWarn[playerid][PotOffer[playerid]] >= 25000 && (PlayerInfo[PotOffer[playerid]][pLevel] <= 3 || PlayerInfo[PotOffer[playerid]][pLevel] <= 3)) {
                                format(String, sizeof(String), "%s (IP:%s) has sold %s (IP:%s) %s of pot in this session.", GetPlayerNameEx(PotOffer[playerid]), ipex, GetName(playerid), ip, FormatMoney(PotWarn[playerid][PotOffer[playerid]]));
                                Log("logs/pay.log", String);
                                ABroadCast(COLOR_YELLOW, String, 1);
                            }

                            GetPlayerName(PotOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(String, sizeof(String), "* You bought %d gram for %s from Drug Dealer %s.",PotGram[playerid],FormatMoney(PotPrice[playerid]),giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
                            format(String, sizeof(String), "* %s has bought your %d gram, the %s was added to your money.",sendername,PotGram[playerid],FormatMoney(PotPrice[playerid]));
                            SendClientMessageEx(PotOffer[playerid], COLOR_LIGHTBLUE, String);
                            SetPVarInt(PotOffer[playerid], "Cash", GetPVarInt(PotOffer[playerid], "Cash")+PotPrice[playerid]);
                            PlayerInfo[PotOffer[playerid]][pTruckingSkill] ++;
                            GivePlayerCash(playerid, -PotPrice[playerid]);
                            PlayerInfo[playerid][pPot] += PotGram[playerid];
                            PlayerInfo[PotOffer[playerid]][pPot] -= PotGram[playerid];
                            if(PlayerInfo[PotOffer[playerid]][pTruckingSkill] == 50)
                            { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[PotOffer[playerid]][pTruckingSkill] == 100)
                            { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[PotOffer[playerid]][pTruckingSkill] == 200)
                            { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[PotOffer[playerid]][pTruckingSkill] == 400)
                            { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }
                            PotOffer[playerid] = 999;
                            PotPrice[playerid] = 0;
                            PotGram[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You are fully loaded with Drugs, use them first!");
                        return 1;
                    }
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford those Pot!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any Pot!");
                return 1;
            }
        }
        else if(strcmp(params,"crack",true) == 0) {
            if(CrackOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > CrackPrice[playerid]) {
                    if(PlayerInfo[playerid][pCrack] < 25) {
                        if(IsPlayerConnected(CrackOffer[playerid])) {
 							if(PlayerInfo[CrackOffer[playerid]][pCrack] < CrackGram[playerid])
							{
						    	SendClientMessageEx(playerid,COLOR_GREY, "That player does not have that amount of crack anymore!");
						    	return 1;
							}
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(CrackOffer[playerid], ipex, sizeof(ipex));
                            format(String, sizeof(String), "[CRACK DEAL (%d GRAMS)] %s (IP:%s) has paid %s to %s (IP:%s)", CrackGram[playerid], GetName(playerid), ip, FormatMoney(CrackPrice[playerid]), GetPlayerNameEx(CrackOffer[playerid]), ipex);
                            Log("logs/pay.log", String);

                            CrackWarn[playerid][CrackOffer[playerid]] += CrackPrice[playerid];
                            if(CrackWarn[playerid][CrackOffer[playerid]] >= 25000 && (PlayerInfo[CrackOffer[playerid]][pLevel] <= 3 || PlayerInfo[CrackOffer[playerid]][pLevel] <= 3)) {
                                format(String, sizeof(String), "%s (IP:%s) has sold %s (IP:%s) %s of crack in this session.", GetPlayerNameEx(CrackOffer[playerid]), ipex, GetName(playerid), ip, FormatMoney(CrackWarn[playerid][CrackOffer[playerid]]));
                                ABroadCast(COLOR_YELLOW, String, 1);
                            }

                            GivePlayerCash(playerid, -CrackPrice[playerid]);
                            GivePlayerCash(CrackOffer[playerid], CrackPrice[playerid]);
                            GetPlayerName(CrackOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(String, sizeof(String), "* You bought %d gram for %s from Drug Dealer %s.",CrackGram[playerid],FormatMoney(CrackPrice[playerid]),giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
                            format(String, sizeof(String), "* %s has bought your %d gram, the %s was added to your money.",sendername,CrackGram[playerid],FormatMoney(CrackPrice[playerid]));
                            SendClientMessageEx(CrackOffer[playerid], COLOR_LIGHTBLUE, String);
                            PlayerInfo[CrackOffer[playerid]][pTruckingSkill] ++;
                            PlayerInfo[playerid][pCrack] += CrackGram[playerid];
                            PlayerInfo[CrackOffer[playerid]][pCrack] -= CrackGram[playerid];
                            if(PlayerInfo[CrackOffer[playerid]][pTruckingSkill] == 50)
                            { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pTruckingSkill] == 100)
                            { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pTruckingSkill] == 200)
                            { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pTruckingSkill] == 400)
                            { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }
							CrackOffer[playerid] = 999;
                            CrackPrice[playerid] = 0;
                            CrackGram[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You are fully loaded with Crack, use them first!");
                        return 1;
                    }
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford that Crack!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any Crack!");
                return 1;
            }
        }
	}                 //not connected
    return 1;
}
//Lumberjack
CMD:cutwood(playerid,params[])
{
	if(cutt==10000) return SendClientMessage(playerid,COLOR_WHITE,"Gudang sudah penuh tidak bisa menebang pohon lagi");
	if(PlayerInfo[playerid][pLumber] == 5) return SendClientMessage(playerid,COLOR_WHITE,"Pickupmu sudah memenuhi kapasitas");
    if(PlayerInfo[playerid][pJob] == 8 || PlayerInfo[playerid][pJob2] == 8 && GetPlayerWeapon(playerid) == 9)
	{
	    new String[1024];
  		if( PlayerInfo[playerid][pLumberTime] > 0 )
  		{
  			format(String, sizeof(String), "Anda harus menunggu %d detik!", PlayerInfo[playerid][pLumberTime]);
     		SendClientMessageEx(playerid, COLOR_GRAD1,String);
     		return 1;
     	}
 		if (!IsAtPohon(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Anda harus berada di pohon untuk memotong pohon!" );
		ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
		DisablePlayerCheckpoint(playerid);
		timecutt[playerid] = SetTimerEx("TimeDrov",5000,false,"i", playerid);
	}
	return 1;
}
CMD:dropwood(playerid,params[])
{
	if(GetPVarInt(playerid,"HoldingWood") == 1 )
	{
		RemovePlayerAttachedObject(playerid, 1);
		DeletePVar(playerid, "HoldingWood");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		GameTextForPlayer(playerid, "~w~Wood ~g~Droped!", 3000, 3);
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
		DeletePVar(playerid, "LoadingWood");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "Kamu tidak mengangkat kayu.");
	return 1;
}
CMD:buychainsaw(playerid,params[])
{
    if(PlayerInfo[playerid][pJob] == 8 || PlayerInfo[playerid][pJob2] == 8 && IsPlayerInRangeOfPoint(playerid, 3.0,-1449.5015,-1530.6028,101.7578))
	{
	    if(GetPlayerCash(playerid) >= 2000)
	    {
 	       	GivePlayerCash(playerid, -2000);
			givePlayerValidWeapon(playerid, 9, AMMO_MELEE);
			SendClientMessage(playerid,COLOR_WHITE,"You have bought Chainsaw");
		}
		else return SendClientMessage(playerid,COLOR_WHITE,"You dont have enought money");
	}
	else return SendClientMessage(playerid,COLOR_WHITE,"Kamu bukan lumberjack");
	return 1;
}

CMD:join(playerid, params[])
{
    if(PlayerInfo[playerid][pDonateRank] > 0) {
        if(PlayerInfo[playerid][pJob] == 0 || PlayerInfo[playerid][pJob2] == 0 || PlayerInfo[playerid][pIllegalJob] == 0) {
            if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2241.3682,-2252.4514,14.7647)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Mechanic, /accept job.");
                GettingJob[playerid] = 7;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-1438.7144,-1544.8334,102.2578)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Lumberjack, '/accept job'.");
                GettingJob[playerid] = 8;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-76.8255,-1136.7314,1.0781)) {

				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Trucker, /accept job.");
				GettingJob[playerid] = 20;
				return 1;
  			}
  			else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-382.2334,-1439.0685,25.7266)) {

				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Farmer, /accept job.");
				GettingJob[playerid] = 1401;
				return 1;
  			}
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2241.3682,-2252.4514,14.7647)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Mechanic, /accept job.");
                GettingJob2[playerid] = 7;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-1438.7144,-1544.8334,102.2578)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Lumberjack, '/accept job'.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 8;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, -76.8255,-1136.7314,1.0781)) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Trucker, /accept job.");
    			GettingJob2[playerid] = 20;
      			return 1;
			}
			else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-382.2334,-1439.0685,25.7266)) {

				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Farmer, /accept job.");
				GettingJob2[playerid] = 1401;
				return 1;
  			}
  			else if(PlayerInfo[playerid][pIllegalJob] == 0 && PlayerInfo[playerid][pLevel] == 5 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1566.8347,23.2207,24.1641)) {
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Arms Dealer, /accept job.");
			GettingIllegalJob[playerid] = 1;
			return 1;
			}
			else if(PlayerInfo[playerid][pIllegalJob] == 0 && PlayerInfo[playerid][pLevel] == 5 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,316.9504,1121.8683,1083.8828)) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Drug Dealer, /accept job.");
				GettingIllegalJob[playerid] = 2;
				return 1;
			}
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "Anda tidak berada dekat dengan tempat pendaftaran Job!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "Anda sudah terikat 2 Kontrak Job, gunakan /quitjob terlebih dahulu!");
        }
    }
    else {
        if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2241.3682,-2252.4514,14.7647)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Mechanic, /accept job.");
                GettingJob[playerid] = 7;
                return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-1438.7144,-1544.8334,102.2578)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Lumberjack, '/accept job'.");
            GettingJob[playerid] = 8;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-76.8255,-1136.7314,1.0781)) {
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Trucker, /accept job.");
    		GettingJob[playerid] = 20;
      		return 1;
	    }
	    else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-382.2334,-1439.0685,25.7266)) {
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Farmer, /accept job.");
    		GettingJob[playerid] = 1401;
      		return 1;
	    }
	    else if(PlayerInfo[playerid][pIllegalJob] == 0 && PlayerInfo[playerid][pLevel] == 5 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1566.8347,23.2207,24.1641)) {
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Arms Dealer, /accept job.");
			GettingIllegalJob[playerid] = 1;
			return 1;
		}
		else if(PlayerInfo[playerid][pIllegalJob] == 0 && PlayerInfo[playerid][pLevel] == 5 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,316.9504,1121.8683,1083.8828)) {
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Jika anda yakin bekerja menjadi Drug Dealer, /accept job.");
			GettingIllegalJob[playerid] = 2;
			return 1;
		}
        else if (PlayerInfo[playerid][pJob] > 0) {
            SendClientMessageEx(playerid, COLOR_GREY, "Anda masih terikat kontrak dengan Job lain, gunakan /quitjob terlebih dahulu!");
            SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: Only VIPs can get two jobs!");
        }
    }
    return 1;
}

CMD:createammo(playerid, params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pIllegalJob] == 1)
	{
	 	format(String,sizeof(String),"Masukan berapa Ammo yang ingin kamu buat\nMax Ammo Silinced: 750\nMax Ammo Desert Eagle: 200\nMax Ammo Rifle: 150\nMax Ammo Shotgon: 250\nMax Ammo MP5: 650\nMax Ammo AK47: 1000");
		ShowPlayerDialog(playerid,DIALOG_MAKEAMMO,DIALOG_STYLE_INPUT,"Create Ammo",String,"Buat", "Cancel");
	}
	else SendClientMessage(playerid, -1, "ERROR: You are not Arms Dealer");
	return 1;
}
CMD:creategun(playerid, params[])
{
	new String[2048];
	if(PlayerInfo[playerid][pIllegalJob] == 1)
	{
		if(PlayerInfo[playerid][pFMember] != 255)
	   	{
	   		format(String, sizeof(String), "Weapons\tMaterials\n");
			format(String, sizeof(String),"%sSilinced Pistol\t750 Materials\nRifle\t1500 Materials\nShotgun\t2500 Materials\nDesert Eagle\t4500 Materials\nMP5\t6000 Materials\nAK47\t10000 Materials",String);
		}
		else
		{
			format(String, sizeof(String), "Weapons\tMaterials\n");
			format(String, sizeof(String),"%sSilinced Pistol\t750 Materials\nRifle\t1500 Materials\nShotgun\t2500 Materials",String);
		}
		ShowPlayerDialog(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_TABLIST_HEADERS, "Weapon Selection", String, "Select", "Cancel");
	}
	else SendClientMessage(playerid, -1, "ERROR: You are not Arms Dealer");
	return 1;
}
CMD:fitness(playerid, params[])
{
	new id = PlayerInfo[playerid][pInBizz], String[10000];
	if(BizzInfo[id][bType] != 8)
		return SendClientMessage(playerid, -1, "ERROR: Anda tidak berada di GYM");

	if(PlayerInfo[playerid][pGYMTime] < 1)
		return SendClientMessage(playerid, -1, "ERROR: Anda tidak memiliki GYM Membership");

    if(PlayerInfo[playerid][pEnergi] < 15)
    	return SendClientMessage(playerid, -1, "ERROR: Anda kekurangan Energi untuk melakukan Fitness");

    if(PlayerInfo[playerid][pFitnessTimer] > 0)
    {
    	SendFormattedMessage(playerid, -1, "ERROR: Anda harus menunggu %d menit untuk melakukan Fitness kembali", PlayerInfo[playerid][pFitnessTimer]/60);
		return 1;
	}
	for(new idx = 1; idx < sizeof(GYMInfo); idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2]))
		{
		    if(GYMInfo[idx][GYMOBJType] == 1)
			{
				PlayerInfo[playerid][pFitnessTimer] = 1*60;
				PlayerInfo[playerid][pFitnessType] = 1;
				GYMInfo[idx][GYMOBJCondition] -= Random(50, 100);
				DestroyDynamic3DTextLabel(GYMInfo[idx][GYMOBJText]);
				format(String, 128, "[ID:%d]\n{00FF00}Available\n%d/1000", idx, GYMInfo[idx][GYMOBJCondition]);
				GYMInfo[idx][GYMOBJText] = CreateStreamed3DTextLabel(String, COLOR_ARWIN, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], 5.0, 0, 0);
				AC_BS_SetPlayerPos(playerid, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2]+0.5);
				OnePlayAnim(playerid, "GYMNASIUM", "gym_tread_sprint", 4.1, 0, 0, 0, 0, 9999999);
				SetCameraBehindPlayer(playerid);
				Streamer_Update(playerid);
			}
			if(GYMInfo[idx][GYMOBJType] == 2)
			{
				PlayerInfo[playerid][pFitnessTimer] = 1*60;
				PlayerInfo[playerid][pFitnessType] = 2;
	         	GYMInfo[idx][GYMOBJCondition] -= Random(50, 100);
				DestroyDynamic3DTextLabel(GYMInfo[idx][GYMOBJText]);
				format(String, 128, "[ID:%d]\n{00FF00}Available\n%d/1000", idx, GYMInfo[idx][GYMOBJCondition]);
				GYMInfo[idx][GYMOBJText] = CreateStreamed3DTextLabel(String, COLOR_ARWIN, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], 5.0, 0, 0);
				AC_BS_SetPlayerPos(playerid, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2]+0.5);
				OnePlayAnim(playerid, "GYMNASIUM", "gym_bike_faster", 4.1, 0, 0, 0, 0, 9999999);
				SetCameraBehindPlayer(playerid);
				Streamer_Update(playerid);
			}
			if(GYMInfo[idx][GYMOBJType] == 3)
			{
				PlayerInfo[playerid][pFitnessTimer] = 1*60;
				PlayerInfo[playerid][pFitnessType] = 3;
	         	GYMInfo[idx][GYMOBJCondition] -= Random(50, 100);
				DestroyDynamic3DTextLabel(GYMInfo[idx][GYMOBJText]);
				format(String, 128, "[ID:%d]\n{00FF00}Available\n%d/1000", idx, GYMInfo[idx][GYMOBJCondition]);
				GYMInfo[idx][GYMOBJText] = CreateStreamed3DTextLabel(String, COLOR_ARWIN, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], 5.0, 0, 0);
				OnePlayAnim(playerid, "GYMNASIUM", "GYMshadowbox", 4.1, 0, 0, 0, 0, 9999999);
				SetCameraBehindPlayer(playerid);
				Streamer_Update(playerid);
			}
			return idx;
		}
		else return SendClientMessage(playerid, -1, "ERROR: Anda tidak berada di dekat alat fitness");
	}
 	return 1;
}

CMD:train(playerid, params[])
{
	new String[10000], S3MP4K[10000];
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 313.9758, -140.0722, 1004.0625))
	{
		if(PlayerInfo[playerid][pTrainingTime] == 0)
		{
		    if(PlayerInfo[playerid][pMember] != 0)
		    {
			    strcat(S3MP4K, "Name\tCosts\tCurrent\tNext\n");
				format(String, sizeof(String),"Silinced Pistol\t$%s\tLevel %d\tLevel %d\nDesert Eagle\t$%s\tLevel %d\tLevel %d\n", FormatMoney(PlayerInfo[playerid][pSilincedSkill]*1500/2), PlayerInfo[playerid][pSilincedSkill], PlayerInfo[playerid][pSilincedSkill]+1, FormatMoney(PlayerInfo[playerid][pDesertEagleSkill]+1*5000/2), PlayerInfo[playerid][pDesertEagleSkill], PlayerInfo[playerid][pDesertEagleSkill]+1);
				strcat(S3MP4K, String);
				format(String, sizeof(String),"Shotgun\t$%s\tLevel %d\tLevel %d\nSpas-12\t$%s\tLevel %d\tLevel %d\n", FormatMoney(PlayerInfo[playerid][pShotgunSkill]+1*2500/2), PlayerInfo[playerid][pShotgunSkill], PlayerInfo[playerid][pShotgunSkill]+1, FormatMoney(PlayerInfo[playerid][pSpassSkill]+1*7500/2), PlayerInfo[playerid][pSpassSkill], PlayerInfo[playerid][pSpassSkill]+1);
				strcat(S3MP4K, String);
				format(String, sizeof(String),"MP5\t$%s\tLevel %d\tLevel %d\nAK47\t%s\tLevel %d\tLevel %d\n", FormatMoney(PlayerInfo[playerid][pMP5Skill]+1*10000/2), PlayerInfo[playerid][pMP5Skill], PlayerInfo[playerid][pMP5Skill]+1, FormatMoney(PlayerInfo[playerid][pAK47Skill]+1*12500/2), PlayerInfo[playerid][pAK47Skill], PlayerInfo[playerid][pAK47Skill]+1);
				strcat(S3MP4K, String);
				format(String, sizeof(String),"M4\t$%s\tLevel %d\tLevel %d\nSniper Rifle\t%s\tLevel %d\tLevel %d", FormatMoney(PlayerInfo[playerid][pM4Skill]+1*15000/2), PlayerInfo[playerid][pM4Skill], PlayerInfo[playerid][pM4Skill]+1, FormatMoney(PlayerInfo[playerid][pSniperSkill]+1*16500/2), PlayerInfo[playerid][pSniperSkill], PlayerInfo[playerid][pSniperSkill]+1);
				strcat(S3MP4K, String);
			}
			else
			{
				strcat(S3MP4K, "Name\tCosts\tCurrent\tNext\n");
				format(String, sizeof(String),"Silinced Pistol\t$%s\tLevel %d\tLevel %d\nDesert Eagle\t$%s\tLevel %d\tLevel %d\n", FormatMoney(PlayerInfo[playerid][pSilincedSkill]*1500), PlayerInfo[playerid][pSilincedSkill], PlayerInfo[playerid][pSilincedSkill]+1, FormatMoney(PlayerInfo[playerid][pDesertEagleSkill]+1*5000), PlayerInfo[playerid][pDesertEagleSkill], PlayerInfo[playerid][pDesertEagleSkill]+1);
				strcat(S3MP4K, String);
				format(String, sizeof(String),"Shotgun\t$%s\tLevel %d\tLevel %d\nSpas-12\t$%s\tLevel %d\tLevel %d\n", FormatMoney(PlayerInfo[playerid][pShotgunSkill]+1*2500), PlayerInfo[playerid][pShotgunSkill], PlayerInfo[playerid][pShotgunSkill]+1, FormatMoney(PlayerInfo[playerid][pSpassSkill]+1*7500), PlayerInfo[playerid][pSpassSkill], PlayerInfo[playerid][pSpassSkill]+1);
				strcat(S3MP4K, String);
				format(String, sizeof(String),"MP5\t$%s\tLevel %d\tLevel %d\nAK47\t%s\tLevel %d\tLevel %d\n", FormatMoney(PlayerInfo[playerid][pMP5Skill]+1*10000), PlayerInfo[playerid][pMP5Skill], PlayerInfo[playerid][pMP5Skill]+1, FormatMoney(PlayerInfo[playerid][pAK47Skill]+1*12500), PlayerInfo[playerid][pAK47Skill], PlayerInfo[playerid][pAK47Skill]+1);
				strcat(S3MP4K, String);
				format(String, sizeof(String),"M4\t$%s\tLevel %d\tLevel %d\nSniper Rifle\t%s\tLevel %d\tLevel %d", FormatMoney(PlayerInfo[playerid][pM4Skill]+1*15000), PlayerInfo[playerid][pM4Skill], PlayerInfo[playerid][pM4Skill]+1, FormatMoney(PlayerInfo[playerid][pSniperSkill]+1*16500), PlayerInfo[playerid][pSniperSkill], PlayerInfo[playerid][pSniperSkill]+1);
				strcat(S3MP4K, String);
			}
			ShowPlayerDialog(playerid, TRAININGSKILL, DIALOG_STYLE_TABLIST_HEADERS, "Weapon Training", S3MP4K, "Select", "Cancel");
		}
		else SendFormattedMessage(playerid, -1, "ERROR: Anda harus menunggu %d Menit untuk kembali menggunakan perintah ini", PlayerInfo[playerid][pTrainingTime]/60);
	}
	else SendClientMessage(playerid, -1, "ERROR: Kamu tidak berada di tempat untuk melakukan latihan senjata");
	return 1;
}
CMD:lockdoor(playerid, params[])
{
    for(new i = 0; i < sizeof(DDoorsInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW] || IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW]) {
        	if(DDoorsInfo[i][dPass] < 1)
                return SendClientMessageEx(playerid, COLOR_GREY, "This door isn't allowed to be locked");
         	if(strcmp(DDoorsInfo[i][dPass], "None", true) == 0)
                return SendClientMessageEx(playerid, COLOR_GREY, "This door isn't allowed to be locked");

			ShowPlayerDialog(playerid, DOORLOCK, DIALOG_STYLE_INPUT, "Door Security","Enter the password for this door","Login","Cancel");
			SetPVarInt(playerid, "Door", i);
		}
	}
	return 1;
}

//=====================STROBE===================================
CMD:strobe(playerid, params[])
{
	if(IsACopCar(playerid) || PlayerInfo[playerid][pAdmin] > 1)
	{
		new VID = GetPlayerVehicleID(playerid);
		new VMID = GetVehicleModel(VID);

		if (IsPlayerInAnyVehicle(playerid)) {
			if(Strobe[VID] == 1)
			{
				Strobe[VID] = 0;
				new sendername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				DestroyDynamicObject(StrobeObject[VID]);
				return 1;
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "You're not in any vehicle!");

		switch(VMID)
		{
			case 411: //Infernus
			{
				Strobe[VID] = 1;
				new sendername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				StrobeObject[VID] = CreateDynamicObject(19620, 10.0, 10.0, 10.0, 0, 0, 0);
				AttachDynamicObjectToVehicle(StrobeObject[VID], VID, 0.0, -0.15, 0.710, 0.0, 0.0, 0.0);
				return 1;
			}
			case 451: //Turismo
			{
				Strobe[VID] = 1;
				new sendername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				StrobeObject[VID] = CreateDynamicObject(19620, 10.0, 10.0, 10.0, 0, 0, 0);
				AttachDynamicObjectToVehicle(StrobeObject[VID], VID, 0.0, -0.50, 0.590, 0.0, 0.0, 0.0);
				return 1;
			}
			case 490: //FBI Rancher
			{
				Strobe[VID] = 1;
				new sendername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				StrobeObject[VID] = CreateDynamicObject(19620, 10.0, 10.0, 10.0, 0, 0, 0);
				AttachDynamicObjectToVehicle(StrobeObject[VID], VID, 0.0, 0.3, 1.100, 0.0, 0.0, 0.0);
				return 1;
			}
			case 541: //Bullet
			{
				Strobe[VID] = 1;
				new sendername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				StrobeObject[VID] = CreateDynamicObject(19620, 10.0, 10.0, 10.0, 0, 0, 0);
				AttachDynamicObjectToVehicle(StrobeObject[VID], VID, 0.0, -0.21, 0.625, 0.0, 0.0, 0.0);
				return 1;
			}
			case 560: //Sultan
			{
				Strobe[VID] = 1;
				new sendername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				StrobeObject[VID] = CreateDynamicObject(19620, 10.0, 10.0, 10.0, 0, 0, 0);
				AttachDynamicObjectToVehicle(StrobeObject[VID], VID, 0.0, -0.15, 0.780, 0.0, 0.0, 0.0);
				return 1;
			}
			default:
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "This vehicle can't use a Strobe!");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Only these vehicle can use /strobe : Bullet, FBI Rancher, Infernus, Turismo, Sultan");
			}

		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You're not authorised to use this command.");
	return 1;
}
//==============================================================

//=======================================SIREN===================================
CMD:siren(playerid, params[])
{
	if(IsACop(playerid))
	{
		new type;
		new VID = GetPlayerVehicleID(playerid);
		if(sscanf(params, "d", type))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /siren [type]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Type: 1 = Inside, 2 = Roof, 3 = Off.");
			return 1;
		}
		switch(type)
		{
		case 1:
			{
				if(Siren[VID] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle already has a siren!");
					return 1;
				}
				 new sendername[MAX_PLAYER_NAME];
                 Siren[VID] = 1;
                 GetPlayerName(playerid, sendername, sizeof(sendername));
                 SirenObject[VID] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                 AttachDynamicObjectToVehicle(SirenObject[VID], VID, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);
                 return 1;
			}
		case 2:
			{
				if(Siren[VID] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle already has a siren!");
					return 1;
				}
                        Siren[VID] = 1;
                        new sendername[MAX_PLAYER_NAME];
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        SirenObject[VID] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                        AttachDynamicObjectToVehicle(SirenObject[VID], VID, -0.43, 0.0, 0.785, 0.0, 0.1, 0.0);
                        return 1;
			}
		case 3:
			{
				if(Siren[VID] == 0)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle doesn't have a siren on it!");
					return 1;
				}
				Siren[VID] = 0;
                new sendername[MAX_PLAYER_NAME];
               	GetPlayerName(playerid, sendername, sizeof(sendername));
               	DestroyDynamicObject(SirenObject[VID]);
               	return 1;
			}
		default:
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Invalid license type! /siren [type]");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Type: 1 = Roof, 2 = Inside, 3 = Off.");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You're not authorised to use this command.");
	return 1;
}

//=================CAMMODE -ARIWIWIN14================//
CMD:cammode(playerid,params[])
{
		if(Cammode[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Cammode On");
			Cammode[playerid] = 1;
			TextDrawHideForPlayer(playerid, BSText[0]);
			TextDrawHideForPlayer(playerid, BSText[1]);
			TextDrawHideForPlayer(playerid, BSText[2]);
			TextDrawHideForPlayer(playerid, BSText[3]);
			TextDrawHideForPlayer(playerid, BSText[4]);
			TextDrawHideForPlayer(playerid, BSText[5]);
			TextDrawHideForPlayer(playerid, BSText[6]);
			TextDrawHideForPlayer(playerid, BSText[7]);
			TextDrawHideForPlayer(playerid, BSText[8]);
			TextDrawHideForPlayer(playerid, BSText[9]);
			TextDrawHideForPlayer(playerid, sen);
			TextDrawHideForPlayer(playerid, koma2);
		 	DestroyProgressBar(clean[playerid]);
		 	DestroyProgressBar(hungry[playerid]);
		 	DestroyProgressBar(tired[playerid]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Cammode Off");
			Cammode[playerid] = 0;
			TextDrawShowForPlayer(playerid, BSText[0]);
			TextDrawShowForPlayer(playerid, BSText[1]);
			TextDrawShowForPlayer(playerid, BSText[2]);
			TextDrawShowForPlayer(playerid, BSText[3]);
			TextDrawShowForPlayer(playerid, BSText[4]);
			TextDrawShowForPlayer(playerid, BSText[5]);
			TextDrawShowForPlayer(playerid, BSText[6]);
			TextDrawShowForPlayer(playerid, BSText[7]);
			TextDrawShowForPlayer(playerid, BSText[8]);
			TextDrawShowForPlayer(playerid, BSText[9]);
			TextDrawShowForPlayer(playerid, sen);
			TextDrawShowForPlayer(playerid, koma2);
			hungry[playerid] = CreateProgressBar(502.00, 141.00, 79.50, 7.19, 16711935, 100.0);
			clean[playerid] = CreateProgressBar(502.00, 164.00, 79.50, 7.19, 16711935, 100.0);
			tired[playerid] = CreateProgressBar(502.00, 190.00, 79.50, 7.19, 16711935, 100.0);
			SetProgressBarColor(hungry[playerid], 0x00FF0033);
			SetProgressBarColor(tired[playerid], 0x00FF0033);
			SetProgressBarColor(clean[playerid], 0x00FF0033);
		}
 		return 1;
}

//===========================PM System================//
CMD:pm(playerid, params[])
{
 	new Str[1024];
    new PID, reason[1024];
    if(AntiAdv(playerid, params)) return 1;
    if(sscanf(params, "us[1024]", PID, reason)) return SendClientMessage(playerid, COLOR_GREY, "Usage: /pm [playerid] [text]");
	if(!IsPlayerConnected(PID)) return SendClientMessage(playerid, COLOR_GREY, "player not connect");
	{
		if(togglepm[PID] == 0)
	 	{
	  		SendClientMessage(playerid, COLOR_GREY, "** player ini memblock pm");
	  		return 1;
	 	}
 	 	format(Str, sizeof(Str), "(( PM from [%d] %s: %s ))",playerid, GetName(playerid), reason);
  	 	SendClientMessage(PID, COLOR_YELLOW, Str);
  	 	format(Str, sizeof(Str), "(( PM to [%d] %s: %s ))",PID, GetName(PID), reason);
  	 	SendClientMessage(playerid, COLOR_YELLOW, Str);
  	 	foreach(Player, i)
  	 	{
	    	if(AdminReadPm[i] == true)
	     	{
	   	  		format(Str, sizeof(Str), "[PM] From %s[id:%d] to %s[id:%d]: %s" , GetName(playerid), playerid, GetName(PID), PID, reason );
		  		SendClientMessage(i, COLOR_YELLOW, Str);
	     	}
     	}
	}
    return 1;
}

CMD:accent(playerid, params[])
{
	new length = strlen(params), idx, String[256];
	while ((idx < length) && (params[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[16];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = params[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
		SendClientMessage(playerid, COLOR_GREY, "/accent [text]");
		return 1;
	}
	format(PlayerInfo[playerid][pAccent], 80, "%s", result);
	format(String, sizeof(String), "ACCENT: {ffffff}Your character's accent has been set to '{ffff00}%s{ffffff}'", PlayerInfo[playerid][pAccent]);
	SendClientMessage(playerid,COLOR_ARWIN,String);
	format(String, sizeof(String), "NOTE: {ffffff}Use command '{ffff00}/delaccent{ffffff}' to remove accent!", PlayerInfo[playerid][pAccent]);
	SendClientMessage(playerid,COLOR_ARWIN,String);
	OnPlayerStatsUpdate(playerid);
	togaccent[playerid] = 1;
	return 1;
}

CMD:delaccent(playerid, params[])
{
	if(togaccent[playerid] == 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "INFO: Accent deleted!");
		togaccent[playerid] = 0;
	}
	return 1;
}

CMD:togpm(playerid,params[])
{
	if(togglepm[playerid] == 1)
	{
	    SendClientMessage(playerid,0xff9900aa,"You had toggled your pm to off now, you won't get pm's.");
	    togglepm[playerid] = 0;
	}
	else if(togglepm[playerid] == 0)
	{
	    SendClientMessage(playerid,0xff9900aa,"You had toggled your pm to on now, you will get pm's from others.");
		togglepm[playerid] = 1;
	}
	return 1;
}
CMD:noadmin(playerid, params[])
{
	new String[10000];
	if(sscanf(params, "s[16]", params))
	{
		if(PlayerInfo[playerid][pAdmin] < 11) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
		if (!noadmin)
		{
			noadmin = 1;
			format(String, sizeof(String), "{FF0000}[A-Warn]{FF6347} The administrator chat has been disabled by reasons.");
			ABroadCast(COLOR_DARKRED, String, 1);
		}
		else
		{
			noadmin = 0;
			format(String, sizeof(String), "{FF0000}[A-Warn]{FF6347} The administrator chat has been enabled enjoy!");
			ABroadCast(COLOR_DARKRED, String, 1);
	 	}
	}
	return 1;
}
//CMD ADMIN//==============================//===============//
//=============//================================//========//
CMD:houseint(playerid, params[])
{
if(!(PlayerInfo[playerid][pAdmin] >= 5))
	 	{
		    SendClientMessage(playerid, COLOR_GREY, "ERROR: You don't have the privilege to use this command!");
		    return 1;
		}
		ShowPlayerDialog(playerid, HOUSES_INT, DIALOG_STYLE_LIST, "House Interiors Categories","Safe Houses\nBurglary Houses", "Select", "Cancel");
		return 1;
	}
CMD:masked(playerid, params[])
{
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "** You're no authorized to use that command . ");
	            return 1;
	        }
            new String[10000];
			SendClientMessage(playerid, COLOR_YELLOW, "Masked Users online:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMaskUse] == 1)
				    {
				        format(String, sizeof(String), "%s[%d] - Mask_%d",GetPlayerNameEx(i), i, PlayerInfo[i][pMaskID]);
						SendClientMessageEx(playerid, COLOR_GRAD1, String);
					}
				}
			}
		}
		return 1;
}
//Mask
CMD:togmask(playerid, params[]) {
	if(IsPlayerConnected(playerid)){
		if(PlayerInfo[playerid][pMask] == 0){
			 ShowDescriptionText(playerid, "Anda tidak memiliki mask.",2000);
			 return 1;
		}
		if(PlayerInfo[playerid][pLevel] < 3){
			ShowDescriptionText(playerid, "Anda tidak bisa menggunakan mask, anda harus mencapai level 3",2000);
			return 1;
		}
		if(PlayerInfo[playerid][pMaskUse] == 0)
		{
		    for(new i = 0; i < MAX_PLAYERS; i++)
			{
			        new string[128], Float:Health, Float:Armour;
			        ShowPlayerNameTagForPlayer(i, playerid, false);
					PlayerInfo[playerid][pMaskUse] = 1;
					format(string, sizeof(string), "Mask_%d", PlayerInfo[playerid][pMaskID], GetPlayerHealth(playerid, Health), GetPlayerArmour(playerid, Armour));
	                MaskLabel[playerid] = CreateDynamic3DTextLabel(string, -1, 0, 0, -10, 10.0, playerid);
	                Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, MaskLabel[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.30);
					SendClientMessage(playerid, COLOR_WHITE, "MASKINFO: Mask {00D900}ON!");
					return 1;
			}
		}
		else if(PlayerInfo[playerid][pMaskUse] == 1)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			        ShowPlayerNameTagForPlayer(i, playerid, true);
				    PlayerInfo[playerid][pMaskUse] = 0;
				    DestroyDynamic3DTextLabel(MaskLabel[playerid]);
					SendClientMessage(playerid, COLOR_WHITE, "MASKINFO: Mask {FF0000}OFF!");
					return 1;
			}
		}
	}
	return 1;
}

CMD:cc(playerid, params[])
return cmd_clearchat(playerid, params);

CMD:clearchat(playerid, params[])
{
    new String[10000];
   	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
//    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	format(String, sizeof(String), "{FF6347}AdmCmd: %s has cleared the chat window.", NORPN(playerid));
	ABroadCast(COLOR_LIGHTRED, String, 5);
	return 1;
}
CMD:customrank(playerid, params[])
{
		new messageString[10000];
		if(PlayerInfo[playerid][pDonateRank] >= 1)
		{
			format(messageString, sizeof(messageString), "Harap gunakan dengan bijak.\nharap gunakan kode HEXA ex: #FF00FF untuk merubah warna\nContoh: #FF00FFWiwin maka hasilnya {FF00FF}Wiwin");
	 		ShowPlayerDialog( playerid, 233, DIALOG_STYLE_INPUT, "Customrank editor",messageString, "Set", "Cancel" );
	 	}
 		return 1;
}
CMD:aname(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 11)
	{
        new giveplayerid, playerNameString[MAX_PLAYER_NAME];

        if(sscanf(params, "us[24]", giveplayerid, playerNameString))
		{
            return SendClientMessage(playerid, COLOR_GREY,"/aname [playerid] [adminname]");
        }
        else
		{
                    new messageString[1024];
                    format(messageString, sizeof(messageString), "Admin %s telah merubah adminname %s menjadi %s.", PlayerInfo[playerid][pAdminName], GetName(giveplayerid), playerNameString);
                    SendAdminMessage(COLOR_LIGHTRED, messageString);
                    format(PlayerInfo[giveplayerid][pAdminName], MAX_PLAYER_NAME, "%s", playerNameString);
		}
	}
	return 1;
}
CMD:setorigin(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
        new giveplayerid, playerNameString[MAX_PLAYER_NAME];

        if(sscanf(params, "us[24]", giveplayerid, playerNameString))
		{
            return SendClientMessage(playerid, COLOR_GREY,"/setorigin [playerid] [username]");
        }
        else
		{
                    new messageString[1024];
                    format(messageString, sizeof(messageString), "Admin %s telah merubah Origin %s menjadi %s.", PlayerInfo[playerid][pAdminName], GetName(giveplayerid), playerNameString);
                    SendAdminMessage(COLOR_LIGHTRED, messageString);
                    format(PlayerInfo[giveplayerid][pAge], MAX_PLAYER_NAME, "%s", playerNameString);
		}
	}
	return 1;
}
CMD:aod(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(!strcmp(PlayerInfo[playerid][pAdminName], "None", true)) {
			return SendClientMessage(playerid, COLOR_RED, "Nama admin anda belum di atur. Hubungi Head Admin (atau admin yang lebih tinggi dari anda) terlebih dahulu.");
		}
		else {

			new
				String[10000];

		    switch(PlayerInfo[playerid][pAdminDuty]) {
				case 0: {
                    PlayerInfo[playerid][pAdminDuty] = 1;
					GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
					GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
					SetPlayerName(playerid, PlayerInfo[playerid][pAdminName]);
					AC_BS_SetPlayerHealth(playerid, 999999.9);
     				SetPlayerColor(playerid, 0xFF000000);
     				SetPVarInt(playerid, "AdminProtect", 1);
					format(String, sizeof(String), "Admin %s (%s) is now on duty as admin/helper.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pAdminName]);
				}
				case 1: {
				    PlayerInfo[playerid][pAdminDuty] = 0;
					AC_BS_SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
					AC_BS_SetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
					SetPlayerName(playerid, PlayerInfo[playerid][pNormalName]);
					SetPlayerColor(playerid, 0xFFFFFF00);
					SetPVarInt(playerid, "AdminProtect", 0);
					format(String, sizeof(String), "Admin %s (%s) is now off duty as admin/helper.", PlayerInfo[playerid][pAdminName], PlayerInfo[playerid][pNormalName]);
				}
			}
			ABroadCast(COLOR_YELLOW, String, 1);
		}
	}
	return 1;
}

CMD:admins(playerid, params[]) {
	new String[10000];
	foreach(Player, x)
	{
	    if(PlayerInfo[x][pAdmin] >= 2 && PlayerInfo[x][pAdminDuty] == 1)
		{
			format(String, sizeof(String), "[id:%d] %s %s (%s)",x, RAN(x), PlayerInfo[x][pAdminName], PlayerInfo[x][pNormalName]);
		}
		if(PlayerInfo[x][pAdmin] == 1)
		{
			format(String, sizeof(String), "[id:%d] %s %s (%s)",x, RAN(x), PlayerInfo[x][pAdminName], PlayerInfo[x][pNormalName]);
		}
		SendClientMessage(playerid, COLOR_YELLOW, String);
		SendClientMessage(playerid, COLOR_ARWIN, "NOTE: {ffffff}Volunteer tidak memiliki kedudukan yang sama dengan Helper / Admin");
		return 1;
  	}
	return 1;
}

CMD:activity(playerid, params[])
{
    new String[10000];
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
	    format(String, sizeof(String), "{FFFF00}Name\t{00FFFF}Duty\n{FFFFFF}");
		foreach(Player, i)
		{
  			if(PlayerInfo[i][pAdmin] >= 2)
			{
				format(String, sizeof(String), "%s%s\t%d Min\n", String, PlayerInfo[i][pAdminName], PlayerInfo[i][pAdminOnDutyTime]/60);
				format(String, sizeof(String), "%s\n", String);
			}
		}
		format(String, sizeof(String), "%s\n", String);
		ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_TABLIST_HEADERS, "Online Admins", String, "Select", "Cancel");
    }
    return 1;
}
//======================================================
CMD:enter(playerid, params[])
{
    for(new i = 0; i < sizeof( BizzInfo ); i++)
	{
		if(IsPlayerInRangeOfPoint( playerid, 2.0, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
 		{
			if(GetPlayerVirtualWorld( playerid ) == 0)
  			{
      			if(BizzInfo[i][bSegel] == 0)
    			{
					if(BizzInfo[i][bLocked] == 0)
	    			{
        				TogglePlayerControllable(playerid, 1);
						AC_BS_SetPlayerInterior( playerid, BizzInfo[i][bInteriorID]);
  						AC_BS_SetPlayerPos( playerid, BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]);
  						PlayerInfo[playerid][pInBizz] = i;
  						PlayerInfo[playerid][pInt] = BizzInfo[i][bInteriorID];
       					TogglePlayerControllable(playerid, 0);
		                GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
		                SetPVarInt(playerid, "LoadingObjects", 1);
		                SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);

					}
	                else
	        		{
	    			   	GameTextForPlayer(playerid, "~w~Biz ~r~Terkunci!", 1000, 5);
		        	}
				}
				else return GameTextForPlayer(playerid, "~w~Biz ini ~r~Disegel", 1000, 5);
	    	}
    	}
  		if(IsPlayerInRangeOfPoint( playerid, 2.0, BizzInfo[PlayerInfo[playerid][pInBizz]][bExitX], BizzInfo[PlayerInfo[playerid][pInBizz]][bExitY], BizzInfo[PlayerInfo[playerid][pInBizz]][bExitZ]))
    	{
 			    TogglePlayerControllable(playerid, 1);
				PlayerInfo[playerid][pInt] = BizzInfo[PlayerInfo[playerid][pInBizz]][bExteriorID];
   				AC_BS_SetPlayerInterior( playerid, BizzInfo[PlayerInfo[playerid][pInBizz]][bExteriorID]);
	        	AC_BS_SetPlayerPos( playerid, BizzInfo[PlayerInfo[playerid][pInBizz]][bEntranceX], BizzInfo[PlayerInfo[playerid][pInBizz]][bEntranceY], BizzInfo[PlayerInfo[playerid][pInBizz]][bEntranceZ]);
        		PlayerInfo[playerid][pInBizz] = 0;
    	}
   	}
    for(new i = 0; i < sizeof(HouseInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ])) {
            if(PlayerInfo[playerid][pPhousekey] == i || PlayerInfo[playerid][pPhousekey2] == i || HouseInfo[i][hLock] == 0 || PlayerInfo[playerid][pRenting] == i) {
                AC_BS_SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
                PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
                PlayerInfo[playerid][pLocal] = i+6000;
                PlayerInfo[playerid][pVW] = i+6000;
                AC_BS_SetPlayerVirtualWorld(playerid, i+6000);
                if(HouseInfo[i][hCustomInterior] == 0) {
                    TogglePlayerControllable(playerid, 0);
                    GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
                    SetPVarInt(playerid, "LoadingObjects", 1);
                    SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
                }
                AC_BS_SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
                SetCameraBehindPlayer(playerid);
				Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
            }
            else {
                GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
            }
            return 1;
        }
    }

	for(new i = 0; i < sizeof(DDoorsInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,0.5,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW]) {
            if(DDoorsInfo[i][ddVIP] > 0 && PlayerInfo[playerid][pDonateRank] < DDoorsInfo[i][ddVIP]) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, you are not a high enough VIP level.");
                return 1;
            }

            if(DDoorsInfo[i][ddFamily] > 0) {
                if(PlayerInfo[playerid][pFMember] != DDoorsInfo[i][ddFamily]-1) {
                    SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door is family restricted.");
                    return 1;
                }
            }

            if(DDoorsInfo[i][ddFaction] > 0) {
				if(DDoorsInfo[i][ddFaction] >= 32) {
					if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door is restricted to law enforcement officers.");
				}
				else if(DDoorsInfo[i][ddFaction] < 32 && PlayerInfo[playerid][pMember] != DDoorsInfo[i][ddFaction]) {
					SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door is faction restricted.");
					return 1;
				}
            }

            if(DDoorsInfo[i][ddAdmin] > 0 && PlayerInfo[playerid][pAdmin] < DDoorsInfo[i][ddAdmin]) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, you are not a high enough admin level.");
                return 1;
            }

            if(DDoorsInfo[i][ddWanted] > 0 && PlayerInfo[playerid][pWantedLevel] != 0) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door restricts those with wanted levels.");
                return 1;
            }

			if(DDoorsInfo[i][dLocked] == 1) {
			    return SendClientMessageEx(playerid, COLOR_GRAD2, "This door is currently locked.");
			}

            AC_BS_SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
            PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
            PlayerInfo[playerid][pLocal] = DDoorsInfo[i][ddInteriorVW];
            PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
            AC_BS_SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
            if(DDoorsInfo[i][ddCustomInterior]) {
                TogglePlayerControllable(playerid, 0);
                GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
                SetPVarInt(playerid, "LoadingObjects", 1);
                SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
            }
            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
                LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
            }
            else
			{
			    AC_BS_SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
	            SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
	            SetCameraBehindPlayer(playerid);
            }
            return Streamer_UpdateEx(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
        }
        if (IsPlayerInRangeOfPoint(playerid,0.5,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW]) {
			AC_BS_SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
            PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
            PlayerInfo[playerid][pLocal] = DDoorsInfo[i][ddExteriorInt];
            AC_BS_SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
            PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
            if(DDoorsInfo[i][ddCustomExterior]) {
                TogglePlayerControllable(playerid, 0);
                GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
                SetPVarInt(playerid, "LoadingObjects", 1);
                SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
            }
            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
                LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
            }
            else {
                AC_BS_SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
                SetCameraBehindPlayer(playerid);
            }
            return Streamer_UpdateEx(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
        }
    }
    for(new i = 0; i < sizeof(FamilyInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,FamilyInfo[i][FamilyEntrance][0], FamilyInfo[i][FamilyEntrance][1], FamilyInfo[i][FamilyEntrance][2])) {

            AC_BS_SetPlayerInterior(playerid,FamilyInfo[i][FamilyInterior]);
            PlayerInfo[playerid][pInt] = FamilyInfo[i][FamilyInterior];
            PlayerInfo[playerid][pLocal] = FamilyInfo[i][FamilyVirtualWorld];
            PlayerInfo[playerid][pVW] = FamilyInfo[i][FamilyVirtualWorld];
            AC_BS_SetPlayerVirtualWorld(playerid, FamilyInfo[i][FamilyVirtualWorld]);
            if(FamilyInfo[i][FamilyCustomMap]) {
                TogglePlayerControllable(playerid, 0);
                GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
                SetPVarInt(playerid, "LoadingObjects", 1);
                SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
            }
            Streamer_UpdateEx(playerid, FamilyInfo[i][FamilyExit][0],FamilyInfo[i][FamilyExit][1],FamilyInfo[i][FamilyExit][2]);
            AC_BS_SetPlayerPos(playerid,FamilyInfo[i][FamilyExit][0],FamilyInfo[i][FamilyExit][1],FamilyInfo[i][FamilyExit][2]);
            SetPlayerFacingAngle(playerid,FamilyInfo[i][FamilyExit][3]);
            return 1;
        }
        if (IsPlayerInRangeOfPoint(playerid,3.0,FamilyInfo[i][FamilyExit][0], FamilyInfo[i][FamilyExit][1], FamilyInfo[i][FamilyExit][2]) && PlayerInfo[playerid][pVW] == FamilyInfo[i][FamilyVirtualWorld]) {
            PlayerInfo[playerid][pInt] = 0;
            PlayerInfo[playerid][pLocal] = 0;
            AC_BS_SetPlayerVirtualWorld(playerid, 0);
            AC_BS_SetPlayerInterior(playerid,0);
            Streamer_UpdateEx(playerid, FamilyInfo[i][FamilyEntrance][0],FamilyInfo[i][FamilyEntrance][1],FamilyInfo[i][FamilyEntrance][2]);
            AC_BS_SetPlayerPos(playerid,FamilyInfo[i][FamilyEntrance][0],FamilyInfo[i][FamilyEntrance][1],FamilyInfo[i][FamilyEntrance][2]);
            SetPlayerFacingAngle(playerid,FamilyInfo[i][FamilyEntrance][3]);
            return 1;
        }
    }
    for(new i = 0; i < sizeof(HouseInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ])) {
            if(PlayerInfo[playerid][pPhousekey] == i || PlayerInfo[playerid][pPhousekey2] == i || HouseInfo[i][hLock] == 0 || PlayerInfo[playerid][pRenting] == i) {
                AC_BS_SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
                PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
                PlayerInfo[playerid][pLocal] = i+6000;
                PlayerInfo[playerid][pVW] = i+6000;
                AC_BS_SetPlayerVirtualWorld(playerid, i+6000);
                if(HouseInfo[i][hCustomInterior] == 1) {
                    TogglePlayerControllable(playerid, 0);
                    GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
                    SetPVarInt(playerid, "LoadingObjects", 1);
                    SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
                }
                AC_BS_SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
                SetCameraBehindPlayer(playerid);
                Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
            }
            else {
                GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
            }
            return 1;
        }
        if (IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && PlayerInfo[playerid][pVW] == i+6000) {
			AC_BS_SetPlayerInterior(playerid,0);
            PlayerInfo[playerid][pInt] = 0;
            PlayerInfo[playerid][pLocal] = 255;
            if(HouseInfo[i][hCustomExterior]) {
                TogglePlayerControllable(playerid, 1);
                GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
                SetPVarInt(playerid, "LoadingObjects", 1);
                SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
            }
            AC_BS_SetPlayerPos(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
            SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorA]);
            SetCameraBehindPlayer(playerid);
            AC_BS_SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            return Streamer_UpdateEx(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
        }
    }
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1575.9766845703, -1636.4899902344, 13.555115699768)) {
        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2) {
            AC_BS_SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            AC_BS_SetPlayerVirtualWorld(playerid, 0);
            AC_BS_SetPlayerPos(playerid,1579.0098876953, -1636.2879638672, 13.554491043091);
            SetPlayerFacingAngle(playerid, 190.0520);
            SetCameraBehindPlayer(playerid);
            PlayerInfo[playerid][pVW] = 0;
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (LSPD restricted access)!");
        }
    }
    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1753.6423,-1586.9365,13.2424)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid), 1753.4561,-1595.1804,13.5381);
            SetVehicleZAngle(GetPlayerVehicleID(playerid), 347.7918);
        }
        else {
            AC_BS_SetPlayerPos(playerid,1753.4561,-1595.1804,13.5381);
        }
    }
    else if (IsPlayerInRangeOfPoint(playerid, 3, 291.8773,-1481.0674,-33.5308)) {
        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2) {
            AC_BS_SetPlayerInterior(playerid,0);
            AC_BS_SetPlayerPos(playerid,298.26, -1544.53, 76.53);
            SetCameraBehindPlayer(playerid);
            PlayerInfo[playerid][pInt] = 0;
            AC_BS_SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (FBI restricted access)!");
        }
    }
    return 1;
}
CMD:clearallreports(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 5) {
        new String[10000];
        ClearReports();
        SendClientMessageEx(playerid,COLOR_GRAD1, "You have cleared all the active reports.");
        format(String, sizeof(String), "{FF6347}AdmCmd: %s has cleared all the pending reports.", GetName(playerid));
        ABroadCast(COLOR_LIGHTRED, String, 2);
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
    }
    return 1;
}

CMD:arwin14fixveh(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(PlayerInfo[playerid][pAdmin] < 2) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid)) {
            RepairVehicle(GetPlayerVehicleID(playerid));
            SetPVarInt(playerid, "VehicleRepair", 1);
            SendClientMessageEx(playerid, COLOR_GREY, "   Vehicle Fixed!");
        }
    }
    return 1;
}

CMD:arwinrefillall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	for(new vid=0; vid<MAX_VEHICLES; vid++)
	{
    	VehicleFuel[vid] = 100;
	}
	return 1;
}


CMD:destroycars(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2) {
        SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
        return 1;
    }
    for(new i = 0; i < sizeof(CreatedCars); i++) {
        if(CreatedCars[i] != INVALID_VEHICLE_ID) {
            DestroyVehicle(CreatedCars[i]);
            CreatedCars[i] = INVALID_VEHICLE_ID;
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, "   Created vehicles destroyed!");
    return 1;
}

CMD:gmx(playerid, params[])
{
		new String[10000];
        if(PlayerInfo[playerid][pAdmin] >= 2)
	    {
	    	if(CurGMX == 0)
	    	{
	    		format(String, sizeof(String), "GMX:{FFFF00} %s {FFFFFF}has initiated a server restart, it will occur in the next {FFFF00}60 seconds.", GetName(playerid));
				SendClientMessageToAll(COLOR_ARWIN, String);
				SetTimer("DoGMX", 60000, false);
				CurGMX = 1;
	    	}
	    	else
	    	{
	        	SendClientMessage(playerid, WHITE, "There already is a current GMX in execution.");
	    	}
	    }
		return 1;
}

CMD:me(playerid, params[])
{
    if(PlayerInfo[playerid][pMaskUse] == 1)
	{
	    if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /me [action]");
	    new String[10000];
 		format(String, sizeof(String), "* Mask %d %s", PlayerInfo[playerid][pMaskID], params);
		ProxDetector(30.0, playerid, String,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /me [action]");
 	new String[10000];
	format(String, sizeof(String), "* %s %s", GetPlayerNameEx(playerid), params);
	ProxDetector(30.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	return 1;
}

CMD:w(playerid, params[])
{
	new giveplayerid, whisper[128], String[10000];

	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(sscanf(params, "us[128]", giveplayerid, whisper))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/w)hisper [playerid] [text]");
		return 1;
	}
	if(WatchingTV[playerid] != 0 && PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this while watching TV.");
		return 1;
	}
	if(PlayerInfo[playerid][pMaskUse] == 1)
	{
	    //new String[10000];
		format(String, sizeof(String), "Mask %d Whispers: %s", PlayerInfo[playerid][pMaskID], whisper);
		ProxDetector(3.0, playerid, String,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	}
	if (IsPlayerConnected(giveplayerid))
	{
		if(HidePM[giveplayerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player is blocking whispers!");
			return 1;
		}
		new giveplayer[MAX_PLAYER_NAME], sendername[MAX_PLAYER_NAME];
		sendername = GetPlayerNameEx(playerid);
		giveplayer = GetPlayerNameEx(giveplayerid);
		if(giveplayerid == playerid)
		{
			if(PlayerInfo[playerid][pSex] == 1) format(String, sizeof(String), "* %s menggerutu didalam hati.", GetPlayerNameEx(playerid));
			else format(String, sizeof(String), "* %s menggerutu didalam hati.", GetPlayerNameEx(playerid));
			return ProxDetector(5.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		if(ProxDetectorS(5.0, playerid, giveplayerid) || PlayerInfo[playerid][pAdmin] >= 2)
		{
		    if(PlayerInfo[playerid][pAdmin]<1)
		    {
		    }

			format(String, sizeof(String), "%s (ID %d) whispers to you: %s", GetPlayerNameEx(playerid), playerid, whisper);

			if(strlen(String) > 92)
			{
				new firstline[128], secondline[128];
				strmid(firstline, String, 0, 88);
				strmid(secondline, String, 88, 128);
				format(firstline, sizeof(firstline), "%s ...", firstline);
				SendClientMessageEx(giveplayerid, COLOR_YELLOW, firstline);
				SendClientMessageEx(giveplayerid, COLOR_YELLOW, secondline);
			}
			else SendClientMessageEx(giveplayerid,COLOR_YELLOW, String);

			format(String, sizeof(String), "You whispered to %s: %s", GetPlayerNameEx(giveplayerid),whisper);
			if(strlen(String) > 92)
			{
				new firstline[128], secondline[128];
				strmid(firstline, String, 0, 88);
				strmid(secondline, String, 88, 128);
				format(firstline, sizeof(firstline), "%s ...", firstline);
				SendClientMessageEx(playerid, COLOR_YELLOW, firstline);
				ProxDetector(5.0, playerid, firstline,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendClientMessageEx(playerid, COLOR_YELLOW, secondline);
				ProxDetector(5.0, playerid, secondline,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
			else SendClientMessageEx(playerid,COLOR_YELLOW, String);
			foreach(Player, i)
			{
				if(AdminReadPm[i] == true)
	   			{
	      			format(String, sizeof(String), "[Whipser] From %s[id:%d] to %s[id:%d]: %s" , GetPlayerNameEx(playerid), playerid, pName(giveplayerid), giveplayerid, whisper );
		  			SendClientMessage(i, COLOR_YELLOW, String);
	      		}
      		}
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
		}
		return 1;
	}

	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	return 1;
}

CMD:do(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(PlayerInfo[playerid][pMaskUse] == 1)
	{
	    if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /do [action]");
	    new String[10000];
 		format(String, sizeof(String), "* %s (( Mask %d ))", params, PlayerInfo[playerid][pMaskID]);
		ProxDetector(30.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 		return 1;
	}
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /do [action]");
	else if(strlen(params) >= 100) return SendClientMessageEx(playerid, COLOR_GREY, "The specified message must not be longer than 99 characters in length.");
	new String[10000];
	format(String, sizeof(String), "* %s (( %s ))", params, GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:o(playerid, params[])
{
 	new String[10000];
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if ((noooc) && PlayerInfo[playerid][pAdmin] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   The OOC channel has been disabled by an Admin!");
		return 1;
	}
	if(gOoc[playerid])
	{
		SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "   You have disabled OOC Chat, re-enable with /togooc!");
		return 1;
	}
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/o)oc [ooc chat]");
	if(PlayerInfo[playerid][pAdminDuty] >= 1 && PlayerInfo[playerid][pAdmin] <= 2 )
	{
		format(String, sizeof(String), "(( {FF0000}Helper %s : {FFFFFF}%s ))", PlayerInfo[playerid][pAdminName], params);
	}
	else if(PlayerInfo[playerid][pAdminDuty] >= 1 && PlayerInfo[playerid][pAdmin] >= 3 )
	{
		format(String, sizeof(String), "(( {FF0000}Admin %s : {FFFFFF}%s ))", PlayerInfo[playerid][pAdminName], params);
	}
	else if(PlayerInfo[playerid][pDonateRank] >= 1 )
	{
		format(String, sizeof(String), "(( %s %s :{FFFFFF} %s ))", PlayerInfo[playerid][pVIPName], 	GetName(playerid), params);
	}
	else if(PlayerInfo[playerid][pLevel])
	{
		format(String, sizeof(String), "(( {00FFFF}%s %s: {FFFFFF}%s ))", ORANK(playerid), GetName(playerid), params);
	}
	OOCOff(COLOR_WHITE, String);
	return 1;
}
CMD:ask(playerid, params[])
{
 	new String[10000];
	if(askTick[playerid] > 0)
	{
		SendFormattedMessage(playerid, COLOR_GRAD2, "Error: kamu harus menunggu %d Menit untuk bertanya kembali", askTick[playerid]/60);
		return 1;
	}
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ask [ask]");
	else if(PlayerInfo[playerid][pLevel]) format(String, sizeof(String), "Q:[id:%d] %s: %s ", playerid, GetName(playerid), params);
	ABroadCast(COLOR_YELLOW, String, 1);
	SendClientMessageEx(playerid, COLOR_YELLOW, String);
	askTick[playerid] += 120;
	return 1;
}
CMD:ans(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
	 	new String[10000], giveplayerid;
		if(sscanf(params, "us[1024]", giveplayerid, params)) return SendClientMessage(playerid, COLOR_GREY, "Usage: /ans [playerid] [text]");
		format(String, sizeof(String), "Answer: {FFFF00}%s",params);
		SendClientMessageEx(giveplayerid, COLOR_ARWIN, String);
		format(String, sizeof(String), "Answer: {FFFF00}%s {FF0000} - %s",params, PlayerInfo[playerid][pAdminName]);
		ABroadCast(COLOR_ARWIN, String, 1);
	}
	return 1;
}
CMD:asay(playerid, params[]) //BookFuckingMark
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /asay [say something]");
			new String[10000];
			format(String, sizeof(String), "Admin %s: %s", PlayerInfo[playerid][pAdminName], params);
			OOCOff(0xFF6347FF,String);
			return 1;
		}
		else if(PlayerInfo[playerid][pAdmin] <= 2)
		{
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /asay [say something]");
			new String[10000];
			format(String, sizeof(String), "Helper %s: %s", PlayerInfo[playerid][pAdminName], params);
			OOCOff(0xFF6347FF,String);
			return 1;
		}
	}
	else return 1;
	return 1;
}
CMD:unstuck(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "ud", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /unstuck [playerid]");
	if(PlayerInfo[playerid][pAdmin] >= 1 && IsPlayerConnected(giveplayerid))
	{
	    PlayerInfo[giveplayerid][pVW] = 0;
		AC_BS_SetPlayerVirtualWorld(giveplayerid, 0);
		PlayerInfo[giveplayerid][pInt] = 0;
		AC_BS_SetPlayerInterior(giveplayerid, 0);
	}
	return 1;
}

CMD:shout(playerid, params[]) {
	return cmd_shout(playerid, params);
}

CMD:s(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
    if(PlayerInfo[playerid][pMaskUse] == 1)
	{
	    if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/s)hout [shout chat]");
		new String[10000];
		format(String, sizeof(String), "Mask %d Shouts: %s !", PlayerInfo[playerid][pMaskID], params);
		ProxDetector(30.0, playerid, String,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		return 1;
	}
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/s)hout [shout chat]");
	new String[10000];
	format(String, sizeof(String), "(shouts) %s!", params);
	format(String, sizeof(String), "%s Shouts: %s!", GetPlayerNameEx(playerid), params);
	ProxDetector(30.0, playerid, String,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
	if(PlayerInfo[playerid][pBugged] == 1)
	{
		format(String, sizeof(String), "(bug) %s shouts: %s!", GetPlayerNameEx(playerid), params);
		SendBugMessage(2, COLOR_LIGHTGREEN, String);
	}

	return 1;
}


CMD:low(playerid, params[]) {
	return cmd_l(playerid, params);
}

CMD:l(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(PlayerInfo[playerid][pMaskUse] == 1)
	{
	    if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/l)ow [close chat]");
	    new String[10000];
		format(String, sizeof(String), "%Mask %d says [low]: %s", PlayerInfo[playerid][pMaskID], params);
		ProxDetector(5.0, playerid, String,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		return 1;
	}

	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/l)ow [close chat]");

	new String[10000];
	format(String, sizeof(String), "%s says [low]: %s", GetPlayerNameEx(playerid), params);
	ProxDetector(5.0, playerid, String,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	if(PlayerInfo[playerid][pBugged] == 1)
	{
		format(String, sizeof(String), "(bug) %s says quietly: %s", GetPlayerNameEx(playerid), params);
		SendBugMessage(2, COLOR_LIGHTGREEN, String);
	}
	return 1;
}

CMD:b(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(AntiAdv(playerid, params)) return 1;
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /b [local ooc chat]");
	if(PlayerInfo[playerid][pMaskUse] == 1)
	{
	    new String[10000];
		format(String, sizeof(String), "Mask %d Says: (( %s ))", PlayerInfo[playerid][pMaskID], params);
		ProxDetector(20.0, playerid, String,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		return 1;
	}
	new String[10000];
	format(String, sizeof(String), "%s: (( %s ))", GetPlayerNameEx(playerid), params);
	ProxDetector(20.0, playerid, String,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

	return 1;
}
CMD:transfer(playerid, params[])
    {
        new id, cash[32], String[10000];
        new dollars, cents, totalcash[25];
        if(sscanf(params, "us[32]", id, cash)) return SendClientMessage(playerid, COLOR_GREY, "/transfer [playerid] [Jumlah(dollar.cents)]");
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1428.6332,-986.0527,996.1050))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
			return 1;
		}
        if(PlayerInfo[playerid][pLevel] < 2) return ShowDescriptionText(playerid, "~r~MINIMAL LEVEL 2 UNTUK MENCEGAH ABUSING");
        if(strfind(cash, ".", true) != -1)
        {
			sscanf(cash, "p<.>dd", dollars, cents);
			format(totalcash, sizeof(totalcash), "%d%02d", dollars, cents);
			if(IsPlayerConnected(id) && id != playerid)
		    {
			    if(PlayerInfo[playerid][pAccount] >= strval(totalcash))
			    {
					if(IsPlayerConnected(id))
					{
						if(strval(totalcash) < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
				       	PlayerInfo[playerid][pAccount] -= strval(totalcash);
		       			PlayerInfo[id][pAccount] += strval(totalcash);
		           		format(String, sizeof(String), "TRANSFERINFO: {ffffff}You've transfer {ffff00}%s [id:%d] {00ff00}$%s", GetPlayerNameEx(id), id, FormatMoney(strval(totalcash)));
		              	SendClientMessage(playerid, COLOR_ARWIN, String);
				        format(String, sizeof(String), "TRANSFERINFO: {ffffff}Your bank account received {00ff00}$%s {ffffff}from {ffff00}%s [id:%d]", FormatMoney(strval(totalcash)), GetPlayerNameEx(playerid), id);
				        SendClientMessage(id, COLOR_ARWIN, String);
						new ip[32], ipex[32];
						GetPlayerIp(playerid, ip, sizeof(ip));
						GetPlayerIp(id, ipex, sizeof(ipex));
						if(strval(totalcash) >= 1000)
						{
							format(String, sizeof(String), "TRANSFERINFO: {ffff00}%s [IP:%s] {FFFFFF}telah memberi {ffff00}%s [IP:%s] {00ff00}$%s.", GetName(playerid), ip, PlayerInfo[id][pNormalName], ipex, FormatMoney(strval(totalcash)));
							Log("logs/pay.log", String);
							ABroadCast(COLOR_RED, String, 1);
						}
					}
					else SendClientMessage(playerid, COLOR_GREY, "Player yang anda tuju sedang tidak online.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki uang sebesar itu.");
			}
		}
		else
		{
			sscanf(cash, "d", dollars);
			format(totalcash, sizeof(totalcash), "%d00", dollars);
			if(IsPlayerConnected(id) && id != playerid)
		    {
			    if(PlayerInfo[playerid][pAccount] >= strval(totalcash))
			    {
					if(IsPlayerConnected(id))
					{
						if(strval(totalcash) < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
				       	PlayerInfo[playerid][pAccount] -= strval(totalcash);
		       			PlayerInfo[id][pAccount] += strval(totalcash);
		           		format(String, sizeof(String), "TRANSFERINFO: {ffffff}You've transfer {ffff00}%s [id:%d] {00ff00}$%s", GetPlayerNameEx(id), id, FormatMoney(strval(totalcash)));
		              	SendClientMessage(playerid, COLOR_ARWIN, String);
				        format(String, sizeof(String), "TRANSFERINFO: {ffffff}Your bank account received {00ff00}$%s {ffffff}from {ffff00}%s [id:%d]", FormatMoney(strval(totalcash)), GetPlayerNameEx(playerid), id);
				        SendClientMessage(id, COLOR_ARWIN, String);
						new ip[32], ipex[32];
						GetPlayerIp(playerid, ip, sizeof(ip));
						GetPlayerIp(id, ipex, sizeof(ipex));
						if(strval(totalcash) >= 1000)
						{
							format(String, sizeof(String), "TRANSFERINFO: {ffff00}%s [IP:%s] {FFFFFF}telah memberi {ffff00}%s [IP:%s] {00ff00}$%s.", GetName(playerid), ip, PlayerInfo[id][pNormalName], ipex, FormatMoney(strval(totalcash)));
							Log("logs/pay.log", String);
							ABroadCast(COLOR_RED, String, 1);
						}
					}
					else SendClientMessage(playerid, COLOR_GREY, "Player yang anda tuju sedang tidak online.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki uang sebesar itu.");
			}
		}
	    return 1;
	 }

    CMD:pay(playerid, params[])
    {
        new id, cash[32], String[10000];
        new dollars, cents, totalcash[25];
        if(sscanf(params, "us[32]", id, cash)) return SendClientMessage(playerid, COLOR_GREY, "/pay [playerid] [Jumlah(dollar.cents)]");
        if(PlayerInfo[playerid][pLevel] < 2) return ShowDescriptionText(playerid, "~r~MINIMAL LEVEL 2 UNTUK MENCEGAH ABUSING");
        if(strfind(cash, ".", true) != -1)
        {
			sscanf(cash, "p<.>dd", dollars, cents);
			format(totalcash, sizeof(totalcash), "%d%02d", dollars, cents);
			if(IsPlayerConnected(id) && id != playerid)
		    {
			    if(GetPlayerCash(playerid) > strval(totalcash))
			    {
					if (ProxDetectorS(5.0, playerid, id))
					{
						if(strval(totalcash) < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
				       	GivePlayerCash(playerid, -strval(totalcash));
		       			GivePlayerCash(id, strval(totalcash));
		           		format(String, sizeof(String), "PAYINFO: {ffffff}You've given {ffff00}%s [id:%d] {00ff00}$%s", GetPlayerNameEx(id), id, FormatMoney(strval(totalcash)));
		              	SendClientMessage(playerid, COLOR_ARWIN, String);
				        format(String, sizeof(String), "PAYINFO: {ffffff}You've received {00ff00}$%s {ffffff}from {ffff00}%s [id:%d]", FormatMoney(strval(totalcash)), GetPlayerNameEx(playerid), id);
				        SendClientMessage(id, COLOR_ARWIN, String);
				        ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
				        ApplyAnimation(id, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
						new ip[32], ipex[32];
						GetPlayerIp(playerid, ip, sizeof(ip));
						GetPlayerIp(id, ipex, sizeof(ipex));
						if(strval(totalcash) >= 1000)
						{
							format(String, sizeof(String), "PAYINFO: {ffff00}%s [IP:%s] {FFFFFF}telah memberi {ffff00}%s [IP:%s] {00ff00}$%s.", GetName(playerid), ip, PlayerInfo[id][pNormalName], ipex, FormatMoney(strval(totalcash)));
							Log("logs/pay.log", String);
							ABroadCast(COLOR_RED, String, 1);
						}
					}
					else SendClientMessage(playerid, COLOR_GREY, "Anda tidak berada dekat dengan Player tersebut.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki uang sebesar itu.");
			}
		}
		else
		{
			sscanf(cash, "d", dollars);
			format(totalcash, sizeof(totalcash), "%d00", dollars);
			if(IsPlayerConnected(id) && id != playerid)
		    {
			    if(GetPlayerCash(playerid) > strval(totalcash))
			    {
					if (ProxDetectorS(5.0, playerid, id))
					{
						if(strval(totalcash) < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
				       	GivePlayerCash(playerid, -strval(totalcash));
		       			GivePlayerCash(id, strval(totalcash));
		           		format(String, sizeof(String), "PAYINFO: {ffffff}You've given {ffff00}%s [id:%d] {00ff00}$%s", GetPlayerNameEx(id), id, FormatMoney(strval(totalcash)));
		              	SendClientMessage(playerid, COLOR_ARWIN, String);
				        format(String, sizeof(String), "PAYINFO: {ffffff}You've received {00ff00}$%s {ffffff}from {ffff00}%s [id:%d]", FormatMoney(strval(totalcash)), GetPlayerNameEx(playerid), id);
				        SendClientMessage(id, COLOR_ARWIN, String);
				        ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
				        ApplyAnimation(id, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
						new ip[32], ipex[32];
						GetPlayerIp(playerid, ip, sizeof(ip));
						GetPlayerIp(id, ipex, sizeof(ipex));
						if(strval(totalcash) >= 1000)
						{
							format(String, sizeof(String), "PAYINFO: {ffff00}%s [IP:%s] {FFFFFF}telah memberi {ffff00}%s [IP:%s] {00ff00}$%s.", GetName(playerid), ip, PlayerInfo[id][pNormalName], ipex, FormatMoney(strval(totalcash)));
							Log("logs/pay.log", String);
							ABroadCast(COLOR_RED, String, 1);
						}
					}
					else SendClientMessage(playerid, COLOR_GREY, "Anda tidak berada dekat dengan Player tersebut.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki uang sebesar itu.");
			}
		}
	    return 1;
	 }

CMD:stopani(playerid, params[])
{
	if(StopaniFloats[playerid][0] != 0)
	{
	    SendClientMessageEx (playerid, COLOR_GREY, "You are already attempting to clear your animations!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0||PlayerInfo[playerid][pBeingSentenced]!=0)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
	}
	else
	{
	    GetPlayerPos(playerid, StopaniFloats[playerid][0], StopaniFloats[playerid][1], StopaniFloats[playerid][2]);
		SetTimerEx("StopaniTimer", 3000, 0, "d", playerid);
		SendClientMessageEx (playerid, COLOR_YELLOW, "Do not move for 3 seconds to have your animations cleared!");
	}
	return 1;
}

forward StopaniTimer(playerid);
public StopaniTimer(playerid)
{
	new Float:posX, Float:posY, Float:posZ;
    GetPlayerPos(playerid, posX, posY, posZ);

    if(StopaniFloats[playerid][0] != posX || StopaniFloats[playerid][1] != posY || StopaniFloats[playerid][2] != posZ)
	{
	    SendClientMessageEx (playerid, COLOR_YELLOW, "Failed to clear animations because you moved!");
    	for(new i = 0; i < 3; i++)
		{
			StopaniFloats[playerid][i] = 0;
		}
	    return 1;
	}
	SendClientMessageEx (playerid, COLOR_YELLOW, "Your animations were cleared!");
	ClearAnimations(playerid);
	SetPlayerSkin(playerid, GetPlayerSkin(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	for(new i = 0; i < 3; i++)
	{
		StopaniFloats[playerid][i] = 0;
	}
	return 1;
}
CMD:health(playerid, params[])
{
 	new String[10000], S3MP4K[10000];
	format(String, sizeof(String), "{00ff00}Hungry: %d\nClean: %d\nTired: %d\nBody: %d\n", PlayerInfo[playerid][pHunger], PlayerInfo[playerid][pBladder], PlayerInfo[playerid][pEnergi], PlayerInfo[playerid][pCondition]);
	strcat(S3MP4K, String);
	format(String, sizeof(String), "Groin: %.1f\nTorso: %.1f\nRight Arm: %.1f\n", PlayerInfo[playerid][pBodyCondition][0], PlayerInfo[playerid][pBodyCondition][1], PlayerInfo[playerid][pBodyCondition][2]);
	strcat(S3MP4K, String);
    format(String, sizeof(String), "Left Arm: %.1f\nRight Leg: %.1f\nLeft Leg: %.1f", PlayerInfo[playerid][pBodyCondition][3], PlayerInfo[playerid][pBodyCondition][4], PlayerInfo[playerid][pBodyCondition][5]);
    strcat(S3MP4K, String);
	ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_MSGBOX, "Body Status", S3MP4K, "Close", "");
	return 1;
}
CMD:credits(playerid, params[])
{
	SendClientMessage(playerid, COLOR_ARWIN, "SA-MP {FFFFFF}Forum, {00B6FF}SA-MP {FFFFFF}Wiki");
	SendClientMessage(playerid, COLOR_ARWIN, "ZeeX: {FFFFFF}untuk ZCMD");
	SendClientMessage(playerid, COLOR_ARWIN, "DracoeBlue: {FFFFFF}untuk D_INI");
	SendClientMessage(playerid, COLOR_ARWIN, "Incognito: {FFFFFF}untuk Streamer");
	SendClientMessage(playerid, COLOR_ARWIN, "Yashas: {FFFFFF}untuk BustAim");
	SendClientMessage(playerid, COLOR_ARWIN, "SA-MP Indo Group: {FFFFFF}untuk sedikit bantuan");
	SendClientMessage(playerid, COLOR_ARWIN, "Wining Kulsum: {FFFFFF}Do'aku untuk mu sayang");
	SendClientMessage(playerid, COLOR_ARWIN, "Ari Pradana: {FFFFFF}untuk membuat Script ini");
	return 1;
}
CMD:apaiturefund(playerid, params[])
{
	new string[10000], S3MP4K[10000];
	format(string, sizeof(string), "{00B6FF}PERTANYAAN: {ffffff}Apa itu Refund?\n");
	strcat(S3MP4K, string);
	format(string, sizeof(string), "{FFFF00}{FFFF00}JAWABAN: {ffffff}Prosess pengembalian barang/harta yang hilang\n");
	strcat(S3MP4K, string);
	format(string, sizeof(string), "{00B6FF}PERTANYAAN: {ffffff}Apakah saya bisa Refund?\n");
	strcat(S3MP4K, string);
	format(string, sizeof(string), "{FFFF00}JAWABAN: {ffffff}Bisa jika kamu kehilangan barang/harta yang dikarenakan bug server\n");
	strcat(S3MP4K, string);
	format(string, sizeof(string), "{00B6FF}PERTANYAAN: {ffffff}Kalau hilang karena ulah player yang melanggar peraturan atau cheater bisa?\n");
	strcat(S3MP4K, string);
	format(string, sizeof(string), "{FFFF00}JAWABAN: {ffffff}Ya bisa\n");
	strcat(S3MP4K, string);
	format(string, sizeof(string), "{00B6FF}PERTANYAAN: {ffffff}Dimana saya bisa mengambil 'Refund' ini?\n");
	strcat(S3MP4K, string);
	format(string, sizeof(string), "{FFFF00}JAWABAN: {ffffff}Di 'The Refund Box', berlokasi di tempat asuransi depan job Taxi\n");
	strcat(S3MP4K, string);
	format(string, sizeof(string), "{00B6FF}PERTANYAAN: {ffffff}Apa itu 'The Refund Box'?\n");
	strcat(S3MP4K, string);
	format(string, sizeof(string), "{FFFF00}JAWABAN: {ffffff}Tempat dimana kamu bisa mengambil 'Refund'\n");
	strcat(S3MP4K, string);
	format(string, sizeof(string), "{00B6FF}PERTANYAAN: {ffffff}Kapan biasanya 'The Refund Box' dibuka?\n");
	strcat(S3MP4K, string);
	format(string, sizeof(string), "{FFFF00}JAWABAN: {ffffff}Setelah atau sebelum Newbie School atau admin biasanya mengumumkan jika Refund Box ingin dibuka");
	strcat(S3MP4K, string);
    ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_MSGBOX, "{FF0000}DESKRIPSI REFUND. WAJIB BACA!", S3MP4K, "Close", "");
	return 1;
}
CMD:skills(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /skill [number]");
		SendClientMessageEx(playerid, COLOR_GREY, "| 1: Trucker");
		SendClientMessageEx(playerid, COLOR_GREY, "| 2: Mechanic");
		return 1;
	}
	else switch(strval(params)) {
		case 1://Drugs Dealer
		{
			new level = PlayerInfo[playerid][pTruckingSkill], String[50];
			if(level >= 0 && level <= 10) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Trucking skill Level = 1."); format(String, sizeof(String), "You need to import load %d times more to level up.", 10 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level >= 11 && level <= 31) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Trucking skill Level = 2."); format(String, sizeof(String), "You need to import load %d times more to level up.", 31 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level >= 32 && level <= 53) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Trucking skill Level = 3."); format(String, sizeof(String), "You need to import load %d times more to level up.", 53 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level >= 54 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Trucking skill Level = 4."); format(String, sizeof(String), "You need to import load %d times more to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level >= 101) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Trucking skill Level = 5."); }
		}
		case 4://Drug Smuggling
		{
			new level = PlayerInfo[playerid][pSmugSkill], String[53];
			if(level >= 0 && level <= 20) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 1."); format(String, sizeof(String), "You need to smuggle %d more drug crates to level up.", 20 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level >= 21 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 2."); format(String, sizeof(String), "You need to smuggle %d more drug crates to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 3."); format(String, sizeof(String), "You need to smuggle %d more drug crates to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 4."); format(String, sizeof(String), "You need to smuggle %d more drug crates to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level >= 201) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 5."); }
		}
		case 3://Arms Dealer
		{
			new level = PlayerInfo[playerid][pArmsSkill], String[48];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 1."); format(String, sizeof(String), "You need to sell %d more guns to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level >= 50 && level < 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 2."); format(String, sizeof(String), "You need to sell %d more guns to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level >= 100 && level < 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 3."); format(String, sizeof(String), "You need to sell %d more guns to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level >= 200 && level < 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 4."); format(String, sizeof(String), "You need to sell %d more guns to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level >= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 5."); }
		}
		case 2://Car Mechanic
		{
			new level = PlayerInfo[playerid][pMechSkill], String[60];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Mechanic Skill Level = 1."); format(String, sizeof(String), "You need to fix a car for %d times more to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level > 50 && level < 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Mechanic Skill Level = 2."); format(String, sizeof(String), "You need to fix a car for %d times more to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level > 100 && level < 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Mechanic Skill Level = 3."); format(String, sizeof(String), "You need to fix a car for %d times more to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level > 200 && level < 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Mechanic Skill Level = 4."); format(String, sizeof(String), "You need to fix a car for %d times more to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, String); }
			else if(level > 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Mechanic Skill Level = 5."); }
		}
		default:
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid skill number specified.");
		}
	}
	return 1;
}
//PERINTAH GYM
CMD:createmachine(playerid, params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pAdmin] < 10) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Unknown command,Please use /help to see available Commands.");
    new choice[32], Float:X, Float:Y, Float:Z;
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /createmachine [bike,treadmill,boxing]");
		return 1;
	}
	for(new idx=1; idx<MAX_GYMOBJECT; idx++)
	{
	    if(strcmp(choice, "bike", true) == 0)
		{
		    if(!GYMInfo[idx][GYMOBJPos][0])
		    {
		        GetPlayerPos(playerid, X, Y, Z);
		        GYMInfo[idx][GYMOBJPos][0] = X;
		        GYMInfo[idx][GYMOBJPos][1] = Y;
		        GYMInfo[idx][GYMOBJPos][2] = Z;
		        GYMInfo[idx][GYMOBJPos][3] = X;
		        GYMInfo[idx][GYMOBJPos][4] = Y;
		        GYMInfo[idx][GYMOBJPos][5] = Z;
		        GYMInfo[idx][GYMOBJCondition] = 1000;
		        GYMInfo[idx][GYMOBJType] = 2;
		        GYMInfo[idx][GYMOBJObject] = CreateDynamicObject(2630, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], GYMInfo[idx][GYMOBJPos][3], GYMInfo[idx][GYMOBJPos][4], GYMInfo[idx][GYMOBJPos][5]);
      			format(String, sizeof(String), "[ID:%d]\n{00FF00}Available\n%d/1000", idx, GYMInfo[idx][GYMOBJCondition]);
				GYMInfo[idx][GYMOBJText] = CreateStreamed3DTextLabel(String, COLOR_ARWIN, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], 5.0, 0, 0);
				idx = MAX_GYMOBJECT;
				SaveGYMObject();
			}
		}
		else if(strcmp(choice, "treadmill", true) == 0)
		{
		    if(!GYMInfo[idx][GYMOBJPos][0])
		    {
		        GetPlayerPos(playerid, X, Y, Z);
		        GYMInfo[idx][GYMOBJPos][0] = X;
		        GYMInfo[idx][GYMOBJPos][1] = Y;
		        GYMInfo[idx][GYMOBJPos][2] = Z;
		        GYMInfo[idx][GYMOBJPos][3] = X;
		        GYMInfo[idx][GYMOBJPos][4] = Y;
		        GYMInfo[idx][GYMOBJPos][5] = Z;
		        GYMInfo[idx][GYMOBJCondition] = 1000;
		        GYMInfo[idx][GYMOBJType] = 1;
		        GYMInfo[idx][GYMOBJObject] = CreateDynamicObject(2630, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], GYMInfo[idx][GYMOBJPos][3], GYMInfo[idx][GYMOBJPos][4], GYMInfo[idx][GYMOBJPos][5]);
      			format(String, sizeof(String), "[ID:%d]\n{00FF00}Available\n%d/1000", idx, GYMInfo[idx][GYMOBJCondition]);
				GYMInfo[idx][GYMOBJText] = CreateStreamed3DTextLabel(String, COLOR_ARWIN, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], 5.0, 0, 0);
				idx = MAX_GYMOBJECT;
				SaveGYMObject();
			}
		}
		else if(strcmp(choice, "boxing", true) == 0)
		{
		    if(!GYMInfo[idx][GYMOBJPos][0])
		    {
		        GetPlayerPos(playerid, X, Y, Z);
		        GYMInfo[idx][GYMOBJPos][0] = X;
		        GYMInfo[idx][GYMOBJPos][1] = Y;
		        GYMInfo[idx][GYMOBJPos][2] = Z;
		        GYMInfo[idx][GYMOBJPos][3] = X;
		        GYMInfo[idx][GYMOBJPos][4] = Y;
		        GYMInfo[idx][GYMOBJPos][5] = Z;
		        GYMInfo[idx][GYMOBJCondition] = 1000;
		        GYMInfo[idx][GYMOBJType] = 3;
		        GYMInfo[idx][GYMOBJObject] = CreateDynamicObject(2630, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], GYMInfo[idx][GYMOBJPos][3], GYMInfo[idx][GYMOBJPos][4], GYMInfo[idx][GYMOBJPos][5]);
      			format(String, sizeof(String), "[ID:%d]\n{00FF00}Available\n%d/1000", idx, GYMInfo[idx][GYMOBJCondition]);
				GYMInfo[idx][GYMOBJText] = CreateStreamed3DTextLabel(String, COLOR_ARWIN, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], 5.0, 0, 0);
				idx = MAX_GYMOBJECT;
				SaveGYMObject();
			}
		}
	}
	return 1;
}

CMD:editmachine(playerid, params[])
{
	new id, String[10000], amount;
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Command tidak ada, Gunakan /help untuk melihat daftar Command.");
	if(sscanf(params, "s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editmachine [posisi,condition]");
	    return 1;
	}
	if(!strcmp(params, "posisi", true, 6))
	{
	    if(sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "/editgymobject posisi [id]");
		if(!GYMInfo[id][GYMOBJPos][0])
		{
			SendClientMessage(playerid, COLOR_GREY, "invalid id");
			return 1;
		}
		gymEdit[playerid] = 1;
		gymEditID[playerid] = id;
		GetDynamicObjectPos(GYMInfo[id][GYMOBJObject], gymObjectPos[playerid][0], gymObjectPos[playerid][1], gymObjectPos[playerid][2]);
		GetDynamicObjectRot(GYMInfo[id][GYMOBJObject], gymObjectRot[playerid][0], gymObjectRot[playerid][1], gymObjectRot[playerid][2]);
		EditDynamicObject(playerid, GYMInfo[id][GYMOBJObject]);
		DestroyDynamic3DTextLabel(GYMInfo[id][GYMOBJText]);
  		format(String, 128, "[ID:%d]\n{00FF00}Available\n%d/1000", id, GYMInfo[id][GYMOBJCondition]);
		GYMInfo[id][GYMOBJText] = CreateStreamed3DTextLabel(String, COLOR_ARWIN, GYMInfo[id][GYMOBJPos][0], GYMInfo[id][GYMOBJPos][1], GYMInfo[id][GYMOBJPos][2], 5.0, 0, 0);
		SaveGYMObject();
	}
	if(!strcmp(params, "condition", true, 9))
	{
	    if(sscanf(params, "s[32]ii", params, id, amount)) return SendClientMessage(playerid, COLOR_WHITE, "/editgymobject condition [id] [amount]");
		if(!GYMInfo[id][GYMOBJPos][0])
		{
			SendClientMessage(playerid, COLOR_GREY, "invalid id");
			return 1;
		}
		GYMInfo[id][GYMOBJCondition] = amount;
		DestroyDynamic3DTextLabel(GYMInfo[id][GYMOBJText]);
  		format(String, 128, "[ID:%d]\n{00FF00}Available\n%d/1000", id, GYMInfo[id][GYMOBJCondition]);
		GYMInfo[id][GYMOBJText] = CreateStreamed3DTextLabel(String, COLOR_ARWIN, GYMInfo[id][GYMOBJPos][0], GYMInfo[id][GYMOBJPos][1], GYMInfo[id][GYMOBJPos][2], 5.0, 0, 0);
		SaveGYMObject();
	}
	return 1;
}

CMD:deletemachine(playerid, params[])
{
	new idx;
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Command tidak ada, Gunakan /help untuk melihat daftar Command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletebuy [id]");
	if(!GYMInfo[idx][GYMOBJPos][0])
	{
		SendClientMessage(playerid, COLOR_GREY, "invalid id");
		return 1;
	}
	GYMInfo[idx][GYMOBJPos][0] = 0.0;
 	GYMInfo[idx][GYMOBJPos][1] = 0.0;
  	GYMInfo[idx][GYMOBJPos][2] = 0.0;
	GYMInfo[idx][GYMOBJPos][3] = 0.0;
 	GYMInfo[idx][GYMOBJPos][4] = 0.0;
  	GYMInfo[idx][GYMOBJPos][5] = 0.0;
  	GYMInfo[idx][GYMOBJType] = 0;
  	GYMInfo[idx][GYMOBJCondition] = 0;
  	DestroyDynamicObject(GYMInfo[idx][GYMOBJObject]);
  	DestroyDynamic3DTextLabel(GYMInfo[idx][GYMOBJText]);
	SaveGYMObject();
	return 1;
}//AKHIR DARI PERINTAH GYM
//PERINTAH FARMER
CMD:sellplant(playerid, params[])
{
	new choice[32], String[10000];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /sellplant [anggur,blueberry,strawberry,gandum,tomat]");
		return 1;
	}
	if(strcmp(choice, "anggur", true) == 0)
	{
		if(PlayerInfo[playerid][pTanamanAnggur] > 0)
		{
			if(stockplant >= 5000) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR:Stock tanaman sudah penuh."); return 1; }
		    stockplant += PlayerInfo[playerid][pTanamanAnggur];
			GivePlayerCash(playerid, PlayerInfo[playerid][pTanamanAnggur] * HargaAnggur);
	      	SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Kamu mendapat uang sebesar {00FFFF}$%s {FFFFFF}dari menjual tanaman", FormatMoney(PlayerInfo[playerid][pTanamanAnggur]*(HargaAnggur/2)));
			format(String, sizeof(String), "[Plant Storage]\nPlant Available: %d\n'/missions' untuk mengangkut barang", stockplant);
			UpdateDynamic3DTextLabelText(pickupPlant, COLOR_WHITE, String);
			PlayerInfo[playerid][pTanamanAnggur] = 0;
			SaveStock();
		}
		else SendClientMessage(playerid, -1, "ERROR: Anda tidak memiliki tanaman Anggur");
	}
	else if(strcmp(choice, "blueberry", true) == 0)
	{
		if(PlayerInfo[playerid][pTanamanBlueberry] > 0)
		{
			if(stockplant >= 5000) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR:Stock tanaman sudah penuh."); return 1; }
		    stockplant += PlayerInfo[playerid][pTanamanBlueberry];
			GivePlayerCash(playerid, PlayerInfo[playerid][pTanamanBlueberry] * HargaBlueberry);
	      	SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Kamu mendapat uang sebesar {00FFFF}$%s {FFFFFF}dari menjual tanaman", FormatMoney(PlayerInfo[playerid][pTanamanBlueberry]*HargaBlueberry));
			format(String, sizeof(String), "[Plant Storage]\nPlant Available: %d\n'/missions' untuk mengangkut barang", stockplant);
			UpdateDynamic3DTextLabelText(pickupPlant, COLOR_WHITE, String);
			PlayerInfo[playerid][pTanamanBlueberry] = 0;
			SaveStock();
		}
		else SendClientMessage(playerid, -1, "ERROR: Anda tidak memiliki tanaman Blueberry");
	}
	else if(strcmp(choice, "strawberry", true) == 0)
	{
		if(PlayerInfo[playerid][pTanamanStrawberry] > 0)
		{
			if(stockplant >= 5000) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR:Stock tanaman sudah penuh."); return 1; }
		    stockplant += PlayerInfo[playerid][pTanamanStrawberry];
			GivePlayerCash(playerid, PlayerInfo[playerid][pTanamanStrawberry] * HargaStrawberry);
	      	SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Kamu mendapat uang sebesar {00FFFF}$%s {FFFFFF}dari menjual tanaman", FormatMoney(PlayerInfo[playerid][pTanamanStrawberry]*HargaStrawberry));
			format(String, sizeof(String), "[Plant Storage]\nPlant Available: %d\n'/missions' untuk mengangkut barang", stockplant);
			UpdateDynamic3DTextLabelText(pickupPlant, COLOR_WHITE, String);
			PlayerInfo[playerid][pTanamanStrawberry] = 0;
			SaveStock();
		}
		else SendClientMessage(playerid, -1, "ERROR: Anda tidak memiliki tanaman Strawberry");
	}
	else if(strcmp(choice, "gandum", true) == 0)
	{
		if(PlayerInfo[playerid][pTanamanGandum] > 0)
		{
			if(stockplant >= 5000) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR:Stock tanaman sudah penuh."); return 1; }
		    stockplant += PlayerInfo[playerid][pTanamanGandum];
			GivePlayerCash(playerid, PlayerInfo[playerid][pTanamanGandum] * HargaGandum);
	      	SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Kamu mendapat uang sebesar {00FFFF}$%s {FFFFFF}dari menjual tanaman", FormatMoney(PlayerInfo[playerid][pTanamanGandum]*HargaGandum));
			format(String, sizeof(String), "[Plant Storage]\nPlant Available: %d\n'/missions' untuk mengangkut barang", stockplant);
			UpdateDynamic3DTextLabelText(pickupPlant, COLOR_WHITE, String);
			PlayerInfo[playerid][pTanamanGandum] = 0;
			SaveStock();
		}
		else SendClientMessage(playerid, -1, "ERROR: Anda tidak memiliki tanaman Gandum");
	}
	else if(strcmp(choice, "tomat", true) == 0)
	{
		if(PlayerInfo[playerid][pTanamanTomat] > 0)
		{
			if(stockplant >= 5000) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR:Stock tanaman sudah penuh."); return 1; }
		    stockplant += PlayerInfo[playerid][pTanamanTomat];
			GivePlayerCash(playerid, PlayerInfo[playerid][pTanamanTomat] * HargaTomat);
	      	SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Kamu mendapat uang sebesar {00FFFF}$%s {FFFFFF}dari menjual tanaman", FormatMoney(PlayerInfo[playerid][pTanamanTomat]*HargaTomat));
			format(String, sizeof(String), "[Plant Storage]\nPlant Available: %d\n'/missions' untuk mengangkut barang", stockplant);
			UpdateDynamic3DTextLabelText(pickupPlant, COLOR_WHITE, String);
			PlayerInfo[playerid][pTanamanTomat] = 0;
			SaveStock();
		}
		else SendClientMessage(playerid, -1, "ERROR: Anda tidak memiliki tanaman Tomat");
	}
	return 1;
}
CMD:buyseeds(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 1401 || PlayerInfo[playerid][pJob2] == 1401)
	{
		new choice[32], amount;
		if(sscanf(params, "s[32]d", choice, amount))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /buyseeds [anggur,blueberry,strawberry,gandum,tomat] [amount]");
			return 1;
		}
		if(strcmp(choice, "anggur", true) == 0)
		{
		    if(GetPlayerCash(playerid) >= amount*HargaAnggur)
		    {
				PlayerInfo[playerid][pBibitAnggur] += amount;
				GivePlayerCash(playerid, -amount*HargaAnggur);
				SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Anda telah membeli bibit Anggur sebanyak %d dengan harga $%s", amount, FormatMoney(HargaAnggur));
			}
			else SendClientMessage(playerid, -1, "ERROR: Uang anda tidak cukup untuk membeli bibit sebanyak itu");
		}
		else if(strcmp(choice, "blueberry", true) == 0)
		{
		    if(GetPlayerCash(playerid) >= amount*HargaBlueberry)
		    {
				PlayerInfo[playerid][pBibitBlueberry] += amount;
				GivePlayerCash(playerid, -amount*HargaBlueberry);
				SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Anda telah membeli bibit Blueberry sebanyak %d dengan harga $%s", amount, FormatMoney(HargaBlueberry));
	    	}
			else SendClientMessage(playerid, -1, "ERROR: Uang anda tidak cukup untuk membeli bibit sebanyak itu");
		}
		else if(strcmp(choice, "strawberry", true) == 0)
		{
		    if(GetPlayerCash(playerid) >= amount*HargaStrawberry)
		    {
				PlayerInfo[playerid][pBibitStrawberry] += amount;
				GivePlayerCash(playerid, -amount*HargaStrawberry);
				SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Anda telah membeli bibit Strawberry sebanyak %d dengan harga $%s", amount, FormatMoney(HargaStrawberry));
	        }
			else SendClientMessage(playerid, -1, "ERROR: Uang anda tidak cukup untuk membeli bibit sebanyak itu");
		}
		else if(strcmp(choice, "gandum", true) == 0)
		{
		    if(GetPlayerCash(playerid) >= amount*HargaGandum)
		    {
				PlayerInfo[playerid][pBibitGandum] = amount;
				GivePlayerCash(playerid, -amount*HargaGandum);
				SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Anda telah membeli bibit Gandum sebanyak %d dengan harga $%s", amount, FormatMoney(HargaGandum));
    		}
			else SendClientMessage(playerid, -1, "ERROR: Uang anda tidak cukup untuk membeli bibit sebanyak itu");
		}
		else if(strcmp(choice, "tomat", true) == 0)
		{
		    if(GetPlayerCash(playerid) >= amount*HargaTomat)
		    {
				PlayerInfo[playerid][pBibitTomat] += amount;
				GivePlayerCash(playerid, -amount*HargaTomat);
				SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Anda telah membeli bibit Tomat sebanyak %d dengan harga $%s", amount, FormatMoney(HargaTomat));
			}
			else SendClientMessage(playerid, -1, "ERROR: Uang anda tidak cukup untuk membeli bibit sebanyak itu");
		}
		return 1;
	}
	else SendClientMessage(playerid, -1, "ERROR: Anda bukan seorang Farmer");
	return 1;
}
CMD:plant(playerid, params[])
{
    for(new i = 0; i < sizeof(PlantInfo); i++)
	{
	if(PlayerInfo[playerid][pJob] == 1401 || PlayerInfo[playerid][pJob2] == 1401)
	{
      	//for(new i = 0; i < sizeof(PlantInfo); i++)
		//{
			new choice[128], String[10000], typeText[1401], idx = PlayerInfo[playerid][pFarmJob];
			if(sscanf(params, "s[128]", choice))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /plant [plant,info,harvest,destroy]");
				return 1;
			}
			if(strcmp(choice, "info", true) == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.9, PlantInfo[i][plantPos][0], PlantInfo[i][plantPos][1], PlantInfo[i][plantPos][2]))
			    {
			        switch(PlantInfo[i][plantType])
					{
						case 1: typeText = "Anggur";
						case 2: typeText = "Blueberry";
						case 3: typeText = "Strawberry";
						case 4: typeText = "Gandum";
						case 5: typeText = "Tomat";
						default: typeText = "None";
					}
					new hours, minutes, seconds;
					GetElapsedTime(PlantInfo[i][plantTime], hours, minutes, seconds);
					if(PlantInfo[i][plantTime] > 15*60)
					{
						format(String, sizeof(String), "{FFFFFF}Plant Type: {ffff00}%s\n{FFFFFF}Harvest Time: {ff0000}%02d:%02d:%02d{ffffff}Harvest Status: {ff0000}Low", typeText, hours, minutes, seconds);
					}
					if(PlantInfo[i][plantTime] >= 15*60)
					{
						format(String, sizeof(String), "{FFFFFF}Plant Type: {ffff00}%s\n{FFFFFF}Harvest Time: {ffff00}%02d:%02d:%02d{ffffff}Harvest Status: {ffff00}Medium", typeText, hours, minutes, seconds);
					}
					if(PlantInfo[i][plantTime] < 1*60)
					{
						format(String, sizeof(String), "{FFFFFF}Plant Type: {ffff00}%s\n{FFFFFF}Harvest Time: {00ff00}%02d:%02d:%02d{ffffff}Harvest Status: {00ff00}High", typeText, hours, minutes, seconds);
					}
					if(PlantInfo[i][plantTime] == 0)
					{
						format(String, sizeof(String), "{FFFFFF}Plant Type: {ffff00}%s\n{FFFFFF}Harvest Time: {00ff00}%02d:%02d:%02d\n{ffffff}Harvest Status: {00ff00}Harvest", typeText, hours, minutes, seconds);
					}
					ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_MSGBOX, "Plant Check", String, "Close","");
				}
			}
	   		else if(strcmp(choice, "harvest", true) == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.9, PlantInfo[i][plantPos][0], PlantInfo[i][plantPos][1], PlantInfo[i][plantPos][2]))
			    {
			            if(PlantInfo[i][plantType] == 1)
			            {
							if(PlantInfo[i][plantTime] == 0)
							{
								ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
								SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Anda telah memetik %d tanaman Anggur.", random(10));
								PlayerInfo[playerid][pTanamanAnggur] += Random(1, 10);
								DestroyDynamicObject(PlantInfo[i][plantObject]);
								PlantInfo[i][plantPos][0] = 0;
								PlantInfo[i][plantPos][1] = 0;
								PlantInfo[i][plantPos][2] = 0;
								PlantInfo[i][plantType] = 0;
								PlantInfo[i][plantTime] = 0;
        //SavePlant();();
								return 1;
							}
							else SendClientMessageEx(playerid, COLOR_GREY, "This plant is not ready to be picked yet.");
							return 1;
						}
						if(PlantInfo[i][plantType] == 2)
			            {
							if(PlantInfo[i][plantTime] == 0)
							{
								ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
								SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Anda telah memetik %d tanaman Blueberry.", random(10));
								PlayerInfo[playerid][pTanamanBlueberry] += Random(1, 10);
								DestroyDynamicObject(PlantInfo[i][plantObject]);
								PlantInfo[i][plantPos][0] = 0;
								PlantInfo[i][plantPos][1] = 0;
								PlantInfo[i][plantPos][2] = 0;
								PlantInfo[i][plantType] = 0;
								PlantInfo[i][plantTime] = 0;
        //SavePlant();();
								return 1;
							}
							else SendClientMessageEx(playerid, COLOR_GREY, "This plant is not ready to be picked yet.");
							return 1;
						}
						if(PlantInfo[i][plantType] == 3)
			            {
							if(PlantInfo[i][plantTime] == 0)
							{
        						ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
								SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Anda telah memetik %d tanaman Strawberry.", random(10));
								PlayerInfo[playerid][pTanamanStrawberry] += Random(1, 10);
								DestroyDynamicObject(PlantInfo[i][plantObject]);
								PlantInfo[i][plantPos][0] = 0;
								PlantInfo[i][plantPos][1] = 0;
								PlantInfo[i][plantPos][2] = 0;
								PlantInfo[i][plantType] = 0;
								PlantInfo[i][plantTime] = 0;
        //SavePlant();();
								return 1;
							}
							else SendClientMessageEx(playerid, COLOR_GREY, "This plant is not ready to be picked yet.");
							return 1;
						}
						if(PlantInfo[i][plantType] == 4)
			            {
							if(PlantInfo[i][plantTime] == 0)
							{
								ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
								SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Anda telah memetik %d tanaman Gandum.", random(10));
								PlayerInfo[playerid][pTanamanGandum] += Random(1, 10);
								DestroyDynamicObject(PlantInfo[i][plantObject]);
								PlantInfo[i][plantPos][0] = 0;
								PlantInfo[i][plantPos][1] = 0;
								PlantInfo[i][plantPos][2] = 0;
								PlantInfo[i][plantType] = 0;
								PlantInfo[i][plantTime] = 0;
        //SavePlant();();
								return 1;
							}
							else SendClientMessageEx(playerid, COLOR_GREY, "This plant is not ready to be picked yet.");
							return 1;
						}
						if(PlantInfo[i][plantType] == 5)
			            {
							if(PlantInfo[i][plantTime] == 0)
							{
								ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
								SendFormattedMessage(playerid, COLOR_ARWIN, "PLANTINFO: {FFFFFF}Anda telah memetik %d tanaman Tomat.", random(10));
								PlayerInfo[playerid][pTanamanTomat] += Random(1, 10);
								DestroyDynamicObject(PlantInfo[i][plantObject]);
								PlantInfo[i][plantPos][0] = 0;
								PlantInfo[i][plantPos][1] = 0;
								PlantInfo[i][plantPos][2] = 0;
								PlantInfo[i][plantType] = 0;
								PlantInfo[i][plantTime] = 0;
        //SavePlant();();
								return 1;
							}
							else SendClientMessageEx(playerid, COLOR_GREY, "This plant is not ready to be picked yet.");
							return 1;
						}
				}
				else SendClientMessage(playerid, -1, "ERROR: Anda tidak berada dekat dengan tanaman");
				return 1;
			}
			else if(strcmp(choice, "destroy", true) == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.5, PlantInfo[i][plantPos][0], PlantInfo[i][plantPos][1], PlantInfo[i][plantPos][2]))
			    {
					DestroyDynamicObject(PlantInfo[i][plantObject]);
					PlantInfo[i][plantPos][0] = 0;
					PlantInfo[i][plantPos][1] = 0;
					PlantInfo[i][plantPos][2] = 0;
					PlantInfo[i][plantType] = 0;
					PlantInfo[i][plantTime] = 0;
			  		SendClientMessage(playerid, -1, "PLANTINFO: Anda telah menghancurkan tanaman");
       //SavePlant();();
				}
			}
			else if(strcmp(choice, "plant", true) == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, FarmInfo[idx][FarmRepX], FarmInfo[idx][FarmRepY], FarmInfo[idx][FarmRepZ]) || IsPlayerInDynamicArea(playerid, Farmer_Area))
			    {
			        if(IsPlayerInRangeOfPoint(playerid, 2.5, PlantInfo[i][plantPos][0], PlantInfo[i][plantPos][1], PlantInfo[i][plantPos][2]))
			        {
			            SendClientMessage(playerid, -1, "ERROR: Anda berada terlalu dekat dengan tanaman lain");
			            return 1;
					}
					new S3MP4K[1401];
					strcat(S3MP4K, "Plant\tSeed\n");
					format(String, sizeof(String), "%sAnggur\t%d use(s) left\nBlueberry\t%d use(s) left\nStrawberry\t%d use(s) left\n",String, PlayerInfo[playerid][pBibitAnggur], PlayerInfo[playerid][pBibitBlueberry], PlayerInfo[playerid][pBibitStrawberry]);
					strcat(S3MP4K, String);
					format(String, sizeof(String), "Gandum\t%d use(s) left\nTomat\t%d use(s) left", PlayerInfo[playerid][pBibitGandum], PlayerInfo[playerid][pBibitTomat]);
                    strcat(S3MP4K, String);
					ShowPlayerDialog(playerid, DIALOG_PLANTSEED, DIALOG_STYLE_TABLIST_HEADERS, "Plant List", S3MP4K, "Close","");
				}
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
//END OF FARM COMMAND - Coded by AriWiwin14
/////////////////////////////////////////Farm Ownership by AriWiwin14/////////////////////////////////////////////////
CMD:createfarm(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 10) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Unknown command,Please use /help to see available Commands.");
	new String[10000];
	for(new idx = 1; idx < sizeof(FarmInfo); idx++)
	{
	    if(!FarmInfo[idx][FarmPosX])
	    {
	        new Float:X, Float:Y, Float:Z;
	        GetPlayerPos(playerid, X, Y, Z);
	        FarmInfo[idx][FarmPosX] = X;
	        FarmInfo[idx][FarmPosY] = Y;
			FarmInfo[idx][FarmPosZ] = Z;
			format(FarmInfo[idx][FarmOwner], 32, "Tidak Ada");
			FarmInfo[idx][FarmPrice] = 2000000;
			FarmInfo[idx][FarmPlant] = 100;
			FarmInfo[idx][FarmPickup] = CreateDynamicPickup(1239, 23, X, Y, Z, 0);
			format(String, 128, "[id:%d]\nThis farm is for sale\nPrice: $%s\nuse '/buyfarm' for buy this Farm", idx, FormatMoney(FarmInfo[idx][FarmPrice]));
			FarmInfo[idx][FarmText] = CreateStreamed3DTextLabel(String, COLOR_WHITE, X, Y, Z, 5, 0, 0);
			format(String, sizeof(String), "AdmWarn: %s has created Farm ID %d.", GetName(playerid), idx);
		    ABroadCast(COLOR_DARKRED, String, 2);
			idx = MAX_FARM;
			SaveFarm();
		}
	}
	return 1;
}
CMD:farmstats(playerid, params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pFarm] != 1) return SendClientMessage(playerid, COLOR_GREY, "Anda belum memiliki Ladang");
	format(String, 128, "Jumlah Tanaman: %d", FarmInfo[PlayerInfo[playerid][pFarmid]][FarmPlant]);
	ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_MSGBOX, "Farm Info",String,"OK","Exit");
	return 1;
}
CMD:buyfarm(playerid, params[])
{
	new done;
	if(PlayerInfo[playerid][pFarm] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Anda sudah memiliki Ladang");
	for(new idx = 1; idx < sizeof(FarmInfo); idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5, FarmInfo[idx][FarmPosX], FarmInfo[idx][FarmPosY], FarmInfo[idx][FarmPosZ]))
		{
			if(!strcmp("Tidak Ada", FarmInfo[idx][FarmOwner], false))
			{
			    if(GetPlayerCash(playerid) < FarmInfo[idx][FarmPrice]) return SendClientMessage(playerid, COLOR_GREY, "Uang anda kurang untuk membeli Ladang ini");
			    GivePlayerCash(playerid, -FarmInfo[idx][FarmPrice]);
			    PlayerInfo[playerid][pFarm] = 1;
			    PlayerInfo[playerid][pFarmJob] = 1;
			    PlayerInfo[playerid][pFarmid] = idx;
			    PlayerInfo[playerid][pFarmBos] = idx;
			    new sendername[MAX_PLAYER_NAME];
    			GetPlayerName(playerid, sendername, sizeof(sendername));
				format(FarmInfo[idx][FarmOwner], 32, "%s", sendername);
			    format(FarmInfo[idx][FarmName], 32, "Enterplay Gaming Roleplay");
				new String[10000];
				format(String, sizeof(String), "{FF0000}%s\n{FFFF00}Pemilik: {FFFFFF}%s\n{FFFF00}Tanaman: {FFFFFF}%d\n{FFFF00}ID: {FFFFFF}[%d]\n", FarmInfo[idx][FarmName], FarmInfo[idx][FarmOwner], FarmInfo[idx][FarmPlant], idx);
                SendClientMessage(playerid, COLOR_GREEN, " Selamat. Anda telah berhasil membeli Ladang. ( /farmhelp )");
				UpdateDynamic3DTextLabelText(FarmInfo[idx][FarmText], COLOR_GREEN, String);
				SaveFarm();
				idx = MAX_FARM;
				done = 1;
			}
			if(idx == MAX_FARM-1 && !done)
			{
				SendClientMessage(playerid, COLOR_GREEN, " Ladang ini sudah dimiliki seseorang");
			}
		}
		if(idx == MAX_FARM-1 && !done)
		{
			SendClientMessage(playerid, COLOR_GREEN, " Anda tidak di dekat Ladang yang Dijual");
		}
	}
	return 1;
}

CMD:sellfarmtomarket(playerid, params[])
{
	new String[10000];
	new idx = PlayerInfo[playerid][pFarmid];
	if(PlayerInfo[playerid][pFarm] != 1) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Ladang.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellfarmtomarket [confirm]");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Anda akan mendapatkan 80 persen dari hasil penjualan");
		return 1;
	}
	if(!strcmp(params, "confirm", true))
	{
	    new done;
		if(IsPlayerInRangeOfPoint(playerid, 5, FarmInfo[idx][FarmPosX], FarmInfo[idx][FarmPosY], FarmInfo[idx][FarmPosZ]))
		{
			GivePlayerCash(playerid, (80*FarmInfo[idx][FarmPrice])/100);
			ClearFarm(idx);
			format(String, 128, "{FFFF00}Pemilik : {FFFFFF}%s\n{FFFF00}Price : {FFFFFF}%s{FFFF00}\nID: [%d]\n'/buyfarm' untuk membeli Ladang", FarmInfo[idx][FarmOwner], FormatMoney(FarmInfo[idx][FarmPrice]), idx);
			UpdateDynamic3DTextLabelText(FarmInfo[idx][FarmText], COLOR_WHITE, String);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Selamat. Anda telah menjual Ladang anda.");
			PlayerInfo[playerid][pFarm] = 0;
			PlayerInfo[playerid][pFarmJob] = 0;
			PlayerInfo[playerid][pFarmid] = 0;
			PlayerInfo[playerid][pFarmBos] = 0;
			SaveFarm();
			done = 1;
		}
		if(!done)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Anda tidak berada di dekat Ladang anda");
		    return 1;
		}
	}
	return 1;
}

CMD:sellmyfarm(playerid, params[])
{
	new String[10000], giveplayerid, harga[32], dollars, cents;
	new idx = PlayerInfo[playerid][pFarmid], duit[32];
	if(PlayerInfo[playerid][pFarm] != 1) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Ladang");
	if(IsPlayerInRangeOfPoint(playerid, 5, FarmInfo[idx][FarmPosX], FarmInfo[idx][FarmPosY], FarmInfo[idx][FarmPosZ]))
	{
		if(sscanf(params, "us[32]", giveplayerid, harga)) return SendClientMessage(playerid, -1, "HINT: /sellmyFarm [ID/NamaPlayer] [Harga]");
        if(strfind(harga, ".", true) != -1)
        {
	 		sscanf(harga, "p<.>dd", dollars, cents);
			format(duit, sizeof(duit), "%d%02d", dollars, cents);
	        if(strval(duit) < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Harga harus diatas 0.");
			if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak bisa menjualnya pada anda sendiri");
	        if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Player belum tersambung ke dalam Server.");
			if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "  Anda tidak berada dekat dengan Player tersebut");
			if(PlayerInfo[giveplayerid][pFarm] == 1) return SendClientMessage(playerid, COLOR_GREY, "Player tersebut sudah memiliki Ladang");
			FarmOffer[giveplayerid] = playerid;
			farmPrice[giveplayerid] = strval(duit);
			format(String, 128, "%s telah menawarkan anda Ladangnya seharga %s. Ketik /accept Farm untuk menerimanya.", GetName(playerid), FormatMoney(strval(duit)));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, String);
			format(String, 128, "Anda telah menawarkan %s Ladang Anda seharga %s.", GetPlayerNameEx(giveplayerid), FormatMoney(strval(duit)));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, String);
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Anda tidak dekat dengan Ladang Anda");
	return 1;
}
CMD:setplantpos(playerid, params[])
{
	new idx, String[10000];
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "Anda bukan Admin");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid,COLOR_WHITE, "USAGE: /setplantpos [ID Ladang]");
	if(!FarmInfo[idx][FarmPosX]) return SendClientMessage(playerid, COLOR_GREY, "ID WorkShop Salah");
	if(FarmInfo[idx][FarmPosX])
	{
	 	new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		FarmInfo[idx][FarmRepX] = X;
		FarmInfo[idx][FarmRepY] = Y;
		FarmInfo[idx][FarmRepZ] = Z;
		DestroyDynamicPickup(FarmInfo[idx][FarmRepPickup]);
		DestroyDynamic3DTextLabel(FarmInfo[idx][FarmRepText]);
		FarmInfo[idx][FarmRepPickup] = CreateDynamicPickup(1239, 1, FarmInfo[idx][FarmRepX], FarmInfo[idx][FarmRepY], FarmInfo[idx][FarmRepZ], 0);
		format(String, sizeof(String), "{FF0000}Plant Pos{FFFF00}\nID: %d", idx);
		FarmInfo[idx][FarmRepText] = CreateStreamed3DTextLabel(String, COLOR_WHITE, FarmInfo[idx][FarmRepX], FarmInfo[idx][FarmRepY], FarmInfo[idx][FarmRepZ], 5, 0);
		format(String, sizeof(String), "AdmWarn: %s telah men-set Plant Pos Ladang ID %d.", GetName(playerid), idx);
		ABroadCast(COLOR_DARKRED, String, 2);
		SaveFarm();
	}
	return 1;
}
CMD:editfarm(playerid, params[])
{
	new String[10000], str[1024], id;
	if(PlayerInfo[playerid][pAdmin] < 9) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Command tidak ada, Gunakan /help untuk melihat daftar Command.");
	if(sscanf(params, "s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editfarm [Opsi]");
	    SendClientMessage(playerid, COLOR_WHITE, "Opsi: Posisi | Harga ");
	    return 1;
	}
	if(!strcmp(params, "posisi", true, 6))
	{
	    if(sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "/editfarm posisi [ID Ladang]");
		if(!FarmInfo[id][FarmPosX])
		{
			SendClientMessage(playerid, COLOR_GREY, "ID Ladang Salah");
			return 1;
		}
		new Float: X, Float: Y, Float: Z;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerPos(playerid, FarmInfo[id][FarmPosX], FarmInfo[id][FarmPosY], FarmInfo[id][FarmPosZ]);
		DestroyDynamicPickup(FarmInfo[id][FarmPickup]);
		FarmInfo[id][FarmPickup] = CreateDynamicPickup(1239, 1, FarmInfo[id][FarmPosX], FarmInfo[id][FarmPosY], FarmInfo[id][FarmPosZ], 0);
		DestroyDynamic3DTextLabel(FarmInfo[id][FarmText]);
		if(!strcmp("Tidak Ada", FarmInfo[id][FarmOwner]))
		{
			format(String, sizeof(String), "{FFFF00}Pemilik : {FFFF00}%s\n{FFFFFF}%s{FFFF00}\nID: %d\n'/buyfarm' untuk membeli Ladang", FarmInfo[id][FarmOwner], FormatMoney(FarmInfo[id][FarmPrice]), id);
			FarmInfo[id][FarmText] = CreateStreamed3DTextLabel(String, COLOR_WHITE, X, Y, Z, 5, 0, 0);
		}
		else
		{
			if(FarmInfo[id][FarmPapanMT] == 1)
			{
				format(String, sizeof(String), "{FF0000}%s{FFFF00}\nPemilik: {FFFFFF}%s{FFFF00}\nID: [%d]", FarmInfo[id][FarmName], FarmInfo[id][FarmOwner], id);
    			FarmInfo[id][FarmText] = CreateStreamed3DTextLabel(String, COLOR_WHITE, X, Y, Z, 5, 0, 0);
			}
			else if(FarmInfo[id][FarmPapanMT] == 0)
			{
				format(String, sizeof(String), "{FF0000}%s{FFFF00}\nPemilik: {FFFFFF}%s{FFFF00}\nID: [%d]", FarmInfo[id][FarmName], FarmInfo[id][FarmOwner], id);
				strcat(str, String);
				FarmInfo[id][FarmText] = CreateStreamed3DTextLabel(str, COLOR_WHITE, X, Y, Z, 5, 0, 0);
			}
		}
		format(String, 128, "Anda telah mengganti Posisi Ladang ID: %d", id);
		SendClientMessage(playerid, COLOR_LIGHTRED, String);
		SaveFarm();
	}
	if(!strcmp(params, "harga", true, 5))
	{
	    new harga;
	    if(sscanf(params, "s[32]ii", params, id, harga)) return SendClientMessage(playerid, COLOR_WHITE, "/editfarm harga [ID Ladang] [Harga]");
		if(!FarmInfo[id][FarmPosX])
		{
			SendClientMessage(playerid, COLOR_GREY, "ID WorkShop Salah");
			return 1;
		}
		FarmInfo[id][FarmPrice] = harga;
		if(!strcmp("Tidak Ada", FarmInfo[id][FarmOwner], false))
		{
			format(String, 128, "{FFFF00}%s\n{FFFFFF}%s{FFFF00}\nID: %d\n'/buyfarm' untuk membeli Ladang", FarmInfo[id][FarmOwner], FormatMoney(FarmInfo[id][FarmPrice]), id);
			UpdateDynamic3DTextLabelText(FarmInfo[id][FarmText], COLOR_WHITE, String);
			format(String, 128, "Anda sudah edit Harga Ladang ID: %d menjadi %s", id, FormatMoney(harga));
			SendClientMessage(playerid, COLOR_RED, String);
			SaveFarm();
		}
		else return SendClientMessage(playerid, COLOR_RED, "Ladang itu sudah dimiliki seseorang");
	}
	return 1;
}
CMD:invitefarm(playerid, params[])
{
	if(PlayerInfo[playerid][pFarm] == 1)
	{
		new String[512], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /invitefarm [playerid]");
		if(IsPlayerConnected(giveplayerid))
		{
			        if(PlayerInfo[giveplayerid][pFarm] == 0)
			        {
			            if(PlayerInfo[giveplayerid][pFarmJob] == 0)
			            {
							format(String, sizeof(String), "Anda telah di tawar untuk menjadi Pegawai Ladang oleh %s - ketik /accept farmer untuk menerimanya.", GetName(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
							format(String, sizeof(String), "Anda telah menawarkan %s untuk menjadi Pegawai Ladang .", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
							InviteFarm[giveplayerid] = playerid;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Player tersebut sudah bekerja di Ladang lain");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Player tersebut sudah memiliki Ladang sendiri");
						return 1;
					}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Player yang anda tawari belum terhubung dalam Server/Login.");
			return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Ladang");
	return 1;
}
CMD:uninvitefarm(playerid, params[])
{
	if(PlayerInfo[playerid][pFarm] == 1)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /uninvitefarm [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pFarmJob] == 1)
			{
			    if(PlayerInfo[giveplayerid][pFarmBos] == PlayerInfo[playerid][pFarmid])
			    {
					format(String, sizeof(String), "* Anda telah di pecat menjadi Pegawai Ladang oleh %s.", GetName(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					PlayerInfo[giveplayerid][pFarmJob] = 0;
					PlayerInfo[giveplayerid][pFarmBos] = 0;
					format(String, sizeof(String), "Anda telah memecat Pegawai anda yang bernama %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Player tersebut tidak bekerja di Ladang anda");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Player bukan montir Ladang.");
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "Player belum tersambung ke dalam Server.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Anda tidak memiliki Ladang.");
	}
	return 1;
}
/*CMD:storeplant(playerid, params[])
{
    new String[10000], amount;
	if(PlayerInfo[playerid][pFarmJob] != 1) return SendClientMessage(playerid, COLOR_GREY, "Anda bukan Pekerja ladang ini");
	new idx = PlayerInfo[playerid][pFarmBos];
	if(IsPlayerInRangeOfPoint(playerid, 4, FarmInfo[idx][FarmPosX], FarmInfo[idx][FarmPosY], FarmInfo[idx][FarmPosZ]))
	{
	    if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /storeplant [Jumlah]");
		if(amount > PlayerInfo[playerid][plant]) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Tanaman sebanyak itu");
		FarmInfo[idx][FarmPlant] += amount;
		PlayerInfo[playerid][plant] -= amount;
		format(String, sizeof(String), "{FF0000}%s{FFFF00}\nPemilik: {FFFFFF}%s{FFFF00}\n{FFFF00}Tanaman: {FFFFFF}%d\nID: [%d]", FarmInfo[idx][FarmName], FarmInfo[idx][FarmOwner], FarmInfo[idx][FarmPlant], idx);
		UpdateDynamic3DTextLabelText(FarmInfo[idx][FarmText], COLOR_WHITE, String);
		format(String, 128, "Anda telah menambah Tanaman sebanyak %d ke dalam penyimpanan Tanaman Ladang", amount);
		SendClientMessage(playerid, COLOR_GREEN, String);
		SaveFarm();
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Ladang ini bukan milik Leader anda");
	return 1;
}
CMD:getplant(playerid, params[])
{
	new String[10000], amount;
	if(PlayerInfo[playerid][pFarmJob] != 1) return SendClientMessage(playerid, COLOR_GREY, "Anda bukan Pekerja ladang ini");
	new idx = PlayerInfo[playerid][pFarmid];
	if(IsPlayerInRangeOfPoint(playerid, 4, FarmInfo[idx][FarmPosX], FarmInfo[idx][FarmPosY], FarmInfo[idx][FarmPosZ]))
	{
	    if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getplant [Jumlah]");
	    if(amount > FarmInfo[idx][FarmPlant]) return SendClientMessage(playerid, COLOR_GREY, "Ladang tidak memiliki Tanaman sebanyak itu");
		if(amount < 0) return SendClientMessage(playerid, COLOR_GREY, "Tidak bisa dibawah 0");
		PlayerInfo[playerid][plant] += amount;
		FarmInfo[idx][FarmPlant] -= amount;
		format(String, sizeof(String), "{FF0000}%s{FFFF00}\nPemilik: {FFFFFF}%s{FFFF00}\n{FFFF00}Tanaman: {FFFFFF}%d\nID: [%d]", FarmInfo[idx][FarmName], FarmInfo[idx][FarmOwner], FarmInfo[idx][FarmPlant], idx);
		UpdateDynamic3DTextLabelText(FarmInfo[idx][FarmText], COLOR_WHITE, String);
		format(String, 128, "Anda telah mengambil Tanaman sebanyak %d", amount);
		SendClientMessage(playerid, COLOR_GREEN, String);
		SaveFarm();
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Ladang ini bukan milik Leader anda");
	return 1;
}*/
CMD:farmname(playerid, params[])
{
	if(PlayerInfo[playerid][pFarm] != 1) return SendClientMessage(playerid, COLOR_GREY, "Anda belum memiliki Ladang");
	new String[512], farmname[32];
	new idx = PlayerInfo[playerid][pFarmid];
	if(IsPlayerInRangeOfPoint(playerid, 5, FarmInfo[idx][FarmPosX], FarmInfo[idx][FarmPosY], FarmInfo[idx][FarmPosZ]))
	{
		if(sscanf(params, "s[128]", farmname)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /farmname [Nama]");
		if(strlen(farmname) > 32)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Tidak bisa Diatas 32 karakter");
		    return 1;
		}
		new str[1024];
		if(FarmInfo[idx][FarmPapanMT] == 0)
		{
			format(FarmInfo[idx][FarmName], 32, "%s", farmname);
			format(String, sizeof(String), "{FF0000}%s{FFFF00}\nPemilik: {FFFFFF}%s{FFFF00}\n{FFFF00}Tanaman: {FFFFFF}%d{FFFF00}\nID: {FFFFFF}[%d]", FarmInfo[idx][FarmName], FarmInfo[idx][FarmOwner], FarmInfo[idx][FarmPlant], idx);
	        strcat(str, String);
			UpdateDynamic3DTextLabelText(FarmInfo[idx][FarmText], COLOR_WHITE, str);
		}
		else if(FarmInfo[idx][FarmPapanMT] == 1)
		{
			format(FarmInfo[idx][FarmName], 32, "%s", farmname);
			format(String, sizeof(String), "{FF0000}%s{FFFF00}\nPemilik: {FFFFFF}%s{FFFF00}\n{FFFF00}Tanaman: {FFFFFF}%d{FFFF00}\nID: {FFFFFF}[%d]", FarmInfo[idx][FarmName], FarmInfo[idx][FarmOwner], FarmInfo[idx][FarmPlant], idx);
			strcat(str, String);
			UpdateDynamic3DTextLabelText(FarmInfo[idx][FarmText], COLOR_WHITE, str);
		}
		format(String, sizeof(String), "Anda telah mengganti nama Ladang anda menjadi {FF0000}%s",FarmInfo[idx][FarmName]);
		SendClientMessage(playerid, COLOR_WHITE, String);
		SaveFarm();
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Anda tidak berada dekat dengan Ladang anda");
	return 1;
}
CMD:deletefarm(playerid, params[])
{
	new idx, String[10000];
	if(PlayerInfo[playerid][pAdmin] < 10) return SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Command tidak ada, Gunakan /help untuk melihat daftar Command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletefarm [ID Ladang]");
	if(!FarmInfo[idx][FarmPosX])
	{
		SendClientMessage(playerid, COLOR_GREY, "ID Ladang Salah");
		return 1;
	}
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pFarmid] == idx)
	    {
	        new playername[64];
	        format(String, sizeof(String), "%s", FarmInfo[idx][FarmOwner]);
	        GetPlayerName(i, playername, sizeof(playername));
	        {
	            if(strcmp(playername, String, true) == 1)
	            {
			        PlayerInfo[i][pFarm] = 0;
			        PlayerInfo[i][pFarmid] = 0;
			        PlayerInfo[i][pFarmJob] = 0;
			        PlayerInfo[i][pFarmBos] = 0;
			        format(String, sizeof(String), "Admin %s telah menghapus Ladang anda", GetName(playerid));
			        SendClientMessage(i, COLOR_LIGHTRED, String);
					break;
				}
			}
		}
	}
	if(strcmp("Nothing", FarmInfo[idx][FarmOwner]))
	{
	    format(String, sizeof(String), "AdmWarn: Admin %s telah menghapus Ladang ID: %d", GetName(playerid), idx);
	}
	else
	{
	    format(String, sizeof(String), "AdmWarn: Admin %s telah menghapus Ladang %s (ID: %d)", GetName(playerid), FarmInfo[idx][FarmOwner], idx);
	}
	ABroadCast(COLOR_DARKRED, String, 2);
	FarmInfo[idx][FarmPosX] = 0.0;
	FarmInfo[idx][FarmPosY] = 0.0;
	FarmInfo[idx][FarmPosZ] = 0.0;
	FarmInfo[idx][FarmRepX] = 0.0;
	FarmInfo[idx][FarmRepY] = 0.0;
	FarmInfo[idx][FarmRepZ] = 0.0;
	format(FarmInfo[idx][FarmOwner], 32, "");
	format(FarmInfo[idx][FarmName], 32, "");
	FarmInfo[idx][FarmPrice] = 0;
	FarmInfo[idx][FarmSafeMoney] = 0;
	DestroyDynamicPickup(FarmInfo[idx][FarmRepPickup]);
	DestroyDynamic3DTextLabel(FarmInfo[idx][FarmRepText]);
	DestroyDynamicPickup(FarmInfo[idx][FarmPickup]);
	DestroyDynamic3DTextLabel(FarmInfo[idx][FarmText]);
	DestroyDynamic3DTextLabel(FarmInfo[idx][FarmFixText]);
	SaveFarm();
	return 1;
}
CMD:clearfarm(playerid, params[])
{
	new id, String[256];
	if( sscanf( params, "u", id) )
	{
	    if(PlayerInfo[playerid][pAdmin] > 7)
	    {
		    SendClientMessage( playerid, COLOR_WHITE, "USAGE: /clearFarm [PlayerID/PartOfName]" );
		}
	}
	else
	{
	    if(PlayerInfo[playerid][pAdmin] > 7)
	    {
			PlayerInfo[id][pFarm] = 0;
			PlayerInfo[id][pFarmJob] = 0;
			PlayerInfo[id][pFarmid] = 0;
			PlayerInfo[id][pFarmBos] = 0;
 	    	format( String, sizeof( String ), "Anda telah men-set stats Ladang %s.",GetPlayerNameEx(id));
  	    	SendClientMessage( playerid, COLOR_YELLOW, String);
		}
	}
	return 1;
}
CMD:farmhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pFarm] != 1) return SendClientMessage(playerid, COLOR_GREY, "Anda belum memiliki Ladang");
	SendClientMessage(playerid, COLOR_WHITE, "/farmname /storeplant /farmdeposit /plantseed /harvestplant");
	return 1;
}
CMD:dropgun(playerid, params[])
{
    new Float:X,Float:Y,Float:Z;
    new GunID = GetPlayerWeapon(playerid);
    new GunAmmo = GetPlayerAmmo(playerid);
    new String[10000], wname[1024], sendername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, sendername, sizeof(sendername));
    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerWeaponData(playerid, GetWeaponSlot(GunID), GunID, GunAmmo);
    removePlayerWeapon(playerid, GunID);
    DropGun(playerid, GunID,GunAmmo,X,Y,Z,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));
    new year, month,day;
	getdate(year, month, day);
	new hour,minuite,second;
	gettime(hour,minuite,second);
	hour = shifthour;
	GetWeaponName(GunID, wname, sizeof(wname));
    format(String, sizeof(String), "[DROPWEAPON]%s menjatuhkan senjata berjenis %s. (%d-%d-%d-%d-%d-%d)", GetName(playerid), wname, hour,minuite,second,day,month,year);
    Log("logs/dropgun.log", String);
    return 1;
}

CMD:pickgun(playerid, params[]){
	new String[1024], wname[1024];
    for(new i = 0; i < sizeof(DropInfo); i++){
        if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK && IsPlayerInRangeOfPoint(playerid, 2.0,DropInfo[i][DropGunPosX],DropInfo[i][DropGunPosY],DropInfo[i][DropGunPosZ])){
            if(GetPlayerVirtualWorld(playerid) == DropInfo[i][DropGunVWorld] && GetPlayerInterior(playerid) == DropInfo[i][DropGunInterior]){
                givePlayerValidWeapon(playerid, DropInfo[i][DropGunAmmount][0], DropInfo[i][DropGunAmmount][1]);
                DestroyDynamicObject(DropObject[i]);
                DropInfo[i][DropGunPosX] = 0.0;
                DropInfo[i][DropGunPosY] = 0.0;
                DropInfo[i][DropGunPosZ] = 0.0;
                DropInfo[i][DropGunAmmount][0] = 0;
                DropInfo[i][DropGunAmmount][1] = 0;
                new year, month,day;
				getdate(year, month, day);
				new hour,minuite,second;
				gettime(hour,minuite,second);
				hour = shifthour;
				GetWeaponName(DropInfo[i][DropGunAmmount][0], wname, sizeof(wname));
                format(String, sizeof(String), "[PICKUPWEAPON]%s mengambil senjata berjenis %s. (%d-%d-%d-%d-%d-%d)", GetName(playerid), wname, hour,minuite,second,day,month,year);
    			Log("logs/dropgun.log", String);
                return 1;
            }
        }
    }
    return 1;
}
CMD:destroyallgun(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] >= 2){
        for(new i = 0; i < sizeof(DropInfo); i++){
            DestroyDynamicObject(DropObject[i]);
            DropInfo[i][DropGunPosX] = 0.0;
            DropInfo[i][DropGunPosY] = 0.0;
            DropInfo[i][DropGunPosZ] = 0.0;
            DropInfo[i][DropGunAmmount][0] = 0;
            DropInfo[i][DropGunAmmount][1] = 0;
		}
	}
	return 1;
}

CMD:vipnum(playerid, params[])
{
    if(PlayerInfo[playerid][pDonateRank] < 1)
    {
    	SendClientMessageEx(playerid, COLOR_GRAD1, "KHUSUS DONATOR");
     	return 1;
	}
 	ShowPlayerDialog(playerid, VIPNUMMENU, DIALOG_STYLE_LIST, "VIP Phone Number Changes","2 digit\n3 digit\n4 Digit", "Purchase", "Cancel");
	return 1;
}

CMD:safebalance(playerid, params[]) {
	if(PlayerInfo[playerid][pFMember] < 255) {
		if(FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyUSafe] < 1) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "Your family doesn't have a safe.");
		}
		else
		{
			new String[10000];

			new weaponsinlocker;
			for(new s = 0; s < 10; s++)
			{
				if(FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyGuns][s] != 0)
				{
					weaponsinlocker++;
				}
			}

			format(String, sizeof(String), " Safe: %s | Gunlockers: %d/10 | Cash: %s | Pot: %d | Crack: %d | Materials: %d", FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyName], weaponsinlocker, FormatMoney(FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCash]), FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyPot], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCrack], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMats]);
			SendClientMessageEx(playerid, COLOR_WHITE, String);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
	return 1;
}

CMD:safehelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________________");
	SendClientMessageEx(playerid, COLOR_WHITE, "SAFE HELP: Type a command for more information.");
	SendClientMessageEx(playerid, COLOR_WHITE, "SAFE: /safebalance /safedeposit /safewithdraw /fstoregun /fgetgun.");
	return 1;
}

CMD:destroypvehicle(playerid, params[])
{
	new String[10000], giveplayerid, vehicleid;
	if(sscanf(params, "ud", giveplayerid, vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /destroypvehicle [playerid] [vehicleid]");

    if (PlayerInfo[playerid][pAdmin] < 4)
    {
    	SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
     	return 1;
   	}

	format(String, sizeof(String), "%s has destroyed %s's %s.", GetName(playerid), GetPlayerNameEx(giveplayerid), GetVehicleName(vehicleid));
	Log("logs/playervehicle.log", String);

	new playervehicleid = GetPlayerVehicle(giveplayerid, vehicleid);
	if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: That player doesn't own that vehicle.");
	DestroyPlayerVehicle(giveplayerid, playervehicleid);
	return 1;
}

CMD:cgv(playerid, params[])
{
	new String[10000], family, modelid, color1, color2;
	if(sscanf(params, "dddd", family, modelid, color1, color2)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /creategvehicle [familyid] [modelid] [color 1] [color 2]");

    if (PlayerInfo[playerid][pAdmin] < 4)
    {
    	SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
     	return 1;
    }
   	if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 14!"); return 1; }
	family -= 1;
	if(FamilyInfo[family][FamilyTaken] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   That FamilyNr hasn't been Taken yet!");
		return 1;
	}
	if(color1 < 0 || color1 > 126) { SendClientMessageEx(playerid, COLOR_GREY, "   Color Number can't be below 0 or above 126 !"); return 1; }
	if(color2 < 0 || color2 > 126) { SendClientMessageEx(playerid, COLOR_GREY, "   Color Number can't be below 0 or above 126 !"); return 1; }
	if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611 !"); return 1; }
	new gangvehicleid = GetGangFreeVehicleId(family);
	if(gangvehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: That family can't have more cars.");
	new Float:X,Float:Y,Float:Z;
 	GetPlayerPos(playerid,X,Y,Z);
  	new Float:Angle;
   	GetPlayerFacingAngle(playerid,Angle);
   	new car = CreateGangVehicle(family, gangvehicleid, modelid, X, Y, Z, Angle, color1, color2, 0);
   	if(car == INVALID_VEHICLE_ID)
	{
 		SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Something went wrong and the car didn't got created.");
	}
 	else
  	{
   		format(String, sizeof(String), " Vehicle successfully created with ID %d.", car);
    	SendClientMessageEx(playerid, COLOR_GRAD1, String);
	    SaveFamiliesHQ();
	}
	return 1;
}

CMD:destroygvehicle(playerid, params[])
{
	new family, vehicleid;
	if(sscanf(params, "dd", family, vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /destroygvehicle [familyid] [vehicleid]");

    if (PlayerInfo[playerid][pAdmin] < 4)
    {
    	SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
     	return 1;
    }
    if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 14!"); return 1; }
	family -= 1;
	new gangvehicleid = GetGangVehicle(family, vehicleid);
	if(gangvehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: That family doesn't own that vehicle.");
	DestroyGangVehicle(family, gangvehicleid);
	SaveFamiliesHQ();
	return 1;
}

CMD:giftall(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 5)
    {
    	if(GiftAllowed)
     	{
			new String[10000];
      		format(String, sizeof(String), "{FF6347}AdmCmd: %s has just sent a gift to all players.", GetName(playerid));
			ABroadCast(COLOR_YELLOW, String, 1);
			GiftAllowed = 0;
			foreach(Player, i)
			{
			    GiftPlayer(playerid, i);
			}
		}
		else
		{
		    return SendClientMessageEx(playerid, COLOR_GRAD2, "This command has already been used, wait until the next paycheck!");
		}
	}
	return 1;
}

CMD:jobhelp(playerid, params[]) {
    return ShowPlayerDialog(playerid, JOBHELPMENU, DIALOG_STYLE_LIST, "Which job do you need help with?","Drug Dealer\nLumberjack\nArms Dealer\nDrug Smuggling\nTrucker\nPizza Boy\nFarmer\nMechanic", "Select", "Cancel");
}

CMD:spikestrip(playerid, params[])
{
	if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
		if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pRank] >= 3)
		{
  			SendClientMessageEx(playerid, COLOR_WHITE, "Current deployed spikes:");
			for(new i, String[58 + MAX_PLAYER_NAME]; i < sizeof(SpikeStrips); i++)
			{
				if(SpikeStrips[i][sX] != 0) // Checking for next available ID.
				{
					format(String, sizeof(String), "HQ: Spike ID: %d | Deployed location: %s | Deployed by: %s", i, SpikeStrips[i][sDeployedAt], SpikeStrips[i][sDeployedBy]);
					SendClientMessageEx(playerid, COLOR_GRAD2, String);
				}
 			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You are not a LEO!");
	}
	return 1;
}

CMD:deployspikes(playerid, params[])
{
    if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
		if(PlayerInfo[playerid][pRank] >= 3 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] >= 1)
		{
			for(new i; i < sizeof(SpikeStrips); i++)
			{
				if(SpikeStrips[i][sX] == 0)
				{
					new
						Float: f_TempAngle,
						String[10000];

					GetPlayerPos(playerid, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
					GetPlayerFacingAngle(playerid, f_TempAngle);
					SpikeStrips[i][sObjectID] = CreateDynamicObject(2899, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]-0.8, 0.0, 0.0, f_TempAngle);
					GetPlayer3DZone(playerid, SpikeStrips[i][sDeployedAt], MAX_ZONE_NAME);
					SpikeStrips[i][sDeployedBy] = GetPlayerNameEx(playerid);
					format(String,sizeof(String),"Spike ID: %d successfully created.", i);
					SendClientMessageEx(playerid, COLOR_WHITE, String);
					format(String, sizeof(String), "HQ: A spike has been deployed by %s at %s.", GetPlayerNameEx(playerid), SpikeStrips[i][sDeployedAt]);
					foreach(Player, x)
					{
						if(IsACop(x))
						{
							SendClientMessageEx(x, TEAM_BLUE_COLOR, String);
							if (PlayerInfo[x][pRank] >= 3)
							{
								SendClientMessageEx(x, COLOR_YELLOW, "You can remove a spike by typing /destroyspikes.");
							}
						}
					}
					return 1;
				}
    		}
			SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more strips, limit is 5." );
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You are not a LEO!");
	}
	return 1;
}

CMD:destroyspikes(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /destroyspikes [spikeid]");

    if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
		if(PlayerInfo[playerid][pRank] >= 3 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] >= 2)
		{
			new id = strval(params);
			if(!(0 <= id <= sizeof(SpikeStrips)) || SpikeStrips[id][sX] == 0) {
				return SendClientMessageEx(playerid, COLOR_WHITE, "Invalid spike ID.");
			}
			else
			{
				new String[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
				DestroyDynamicObject(SpikeStrips[id][sObjectID]);
				SpikeStrips[id][sX] = 0; SpikeStrips[id][sY] = 0; SpikeStrips[id][sZ] = 0;
				SpikeStrips[id][sObjectID] = INVALID_OBJECT_ID;
				format(String,sizeof(String),"Spike ID: %d successfully deleted.", id);
				SendClientMessageEx(playerid, COLOR_WHITE, String);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(String, sizeof(String), "HQ: A spike has been destroyed by %s at %s.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessageEx(x, TEAM_BLUE_COLOR, String);
					}
				}
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:backup(playerid, params[])
{
    if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	{
		if (Backup[playerid] != 1)
		{
			new
				zone[MAX_ZONE_NAME],
				String[40 + MAX_PLAYER_NAME];

			GetPlayer3DZone(playerid, zone, sizeof(zone));
			format(String, sizeof(String), "%s is requesting immediate backup at %s.", GetPlayerNameEx(playerid), zone);
            Backup[playerid] = 1;
			foreach(Player, i)
			{
				if(gTeam[i] == 2 || IsACop(i))
				{
      				SetPlayerMarkerForPlayer(i, playerid, 0x2641FEAA);
					SendClientMessageEx(i, TEAM_BLUE_COLOR, String);
				}
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "Type /nobackup to clear your backup request.");
			SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "  You already have an active backup request!");
		}
	}
    else if(gTeam[playerid] == TEAM_CYAN||PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4)//model
	{
		if(Backup[playerid] != 1)
		{
			new String[10000];
			format(String, sizeof(String), "HQ: %s is requesting immediate assistance, radio for additional details. %s's location has been transmitted to your GPS [See Pink Dot].", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
            Backup[playerid] = 1;
			foreach(Player, i)
			{
				if(gTeam[i] == TEAM_CYAN||PlayerInfo[i][pMember]==4||PlayerInfo[i][pLeader]==4)//model
				{
        			SetPlayerMarkerForPlayer(i, playerid, TEAM_CYAN_COLOR);
					SendClientMessageEx(i, TEAM_CYAN_COLOR, String);
				}
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "Type /nobackup to clear your backup request.");
     		SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "  You already have an active backup request!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not a member of Goverment Faction!");
	}
	return 1;
}

CMD:nobackup(playerid, params[])
{
    BackupClear(playerid, 0);
	return 1;
}

CMD:quitfaction(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] >= 1 || PlayerInfo[playerid][pLeader] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You have quit your faction, you are now a civilian again.");
		PlayerInfo[playerid][pTeam] = TEAM_GREEN;
		gTeam[playerid] = PlayerInfo[playerid][pTeam];
		PlayerInfo[playerid][pMember] = 0;
		PlayerInfo[playerid][pRank] = 0;
		PlayerInfo[playerid][pChar] = 0;
		PlayerInfo[playerid][pDuty] = 0;
		PlayerInfo[playerid][pLeader] = 0;
		PlayerInfo[playerid][pDivision] = 0;
		if(!IsValidSkin(GetPlayerSkin(playerid)))
		{
  			new rand = random(sizeof(CIV));
			SetPlayerSkin(playerid,CIV[rand]);
			PlayerInfo[playerid][pModel] = CIV[rand];
		}
		SetPlayerToTeamColor(playerid);
		player_remove_vip_toys(playerid);
   		pTazer[playerid] = 0;
	}
	return 1;
}
CMD:claiminsurance(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1667.6727,-1409.0708,13.5469))
	{
		new vstring[1024];
		for(new i; i < MAX_PLAYERVEHICLES; i++)
		{
			if(PlayerVehicleInfo[playerid][i][pvDestroyed])
			{
				format(vstring, sizeof(vstring), "%s\n%s (Destroyed)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
			else format(vstring, sizeof(vstring), "%s\nNone", vstring);
		}
		ShowPlayerDialog(playerid, CLAIMINSURANCE, DIALOG_STYLE_LIST, "Vehicles", vstring, "Take", "Cancel");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not at Insurance Agency.");
	return 1;
}
CMD:buyinsurances(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1667.6727,-1409.0708,13.5469))
	{
	    new string [10000];
        if(GetPlayerVehicleCount(playerid) != 0)
		{
			if(GetPlayerCash(playerid) < 25000) { SendClientMessageEx(playerid, COLOR_GRAD2, "Tidak memiliki uang sebesar $250.00!"); return 1; }
			for(new i; i < MAX_PLAYERVEHICLES; ++i)
	        {
				if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
				{
     				format(string, sizeof(string), "Slot: [id:%d] | Name: %s | Insurance: {00FFFF}[%d]{FFFFFF}",i,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]),PlayerVehicleInfo[playerid][i][pvInsurances]);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
			 	}
		    }
	    	ShowPlayerDialog(playerid, 8224, DIALOG_STYLE_INPUT, "Insurances","Pilih mobil yang akan Menambah Insurances\nNote: Harga asuransi $100.00", "Select", "Cancel");
			return 1;
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR : Kamu tidak memiliki mobil satu pun!");
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR : Kamu tidak berada di pembelian insurance");
	}
	return 1;
}
CMD:trackcar(playerid, params[])
{
		new vstring[1024];
		for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++)
		{
			if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0)
			{
				if(PlayerVehicleInfo[playerid][i][pvImpounded])
				{
					format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[iModelID]);
				}
				else if(PlayerVehicleInfo[playerid][i][pvDestroyed])
				{
					format(vstring, sizeof(vstring), "%s\n%s (destroyed)", vstring, VehicleName[iModelID]);
				}
				else if(PlayerVehicleInfo[playerid][i][pvStored])
				{
					format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[iModelID]);
				}
				else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[iModelID]);
			}
		}
		ShowPlayerDialog(playerid, TRACKCAR, DIALOG_STYLE_LIST, "Vehicle GPS Tracking", vstring, "Track", "Cancel");
		return 1;
}

CMD:anim(playerid, params[])
{
	#if defined ADD_RCON_PROTECTION
	if(!IsPlayerAdmin(playerid))
	return 1;
	#endif
	new
	animlib[32], animname[32],
	iAnimIndex = strval(params);
	if(iAnimIndex < 1 || iAnimIndex >= MAX_ANIMS)return SendClientMessage(playerid, COLOR_GRAD1, "Total Anims : (Index 1-1812)");
	else
	{
		GetAnimationName(iAnimIndex, animlib, 32, animname, 32);
		ApplyAnimation(playerid , animlib , animname ,
		iAnim_AnimData[iAnimIndex][iAnim_Speed],
		iAnim_AnimData[iAnimIndex][iAnim_Loop],
		iAnim_AnimData[iAnimIndex][iAnim_Lockx],
		iAnim_AnimData[iAnimIndex][iAnim_Locky],
		iAnim_AnimData[iAnimIndex][iAnim_Freeze],
		iAnim_AnimData[iAnimIndex][iAnim_Time],
		iAnim_AnimData[iAnimIndex][iAnim_ForceSync]
		);
		iAnim_PlayerUsingAnim{ playerid } = true;
	}
	return 1;
}

CMD:makeadmin(playerid, params[])
{
 	if(PlayerInfo[playerid][pAdmin] == 11)
  	{
		new
			iAdminValue,
			iTargetID;

		if(sscanf(params, "ui", iTargetID, iAdminValue)) {
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /makeadmin [playerid] [level]");
		}
		else if(IsPlayerConnected(iTargetID)) {
				new
					szMessage[47 + (MAX_PLAYER_NAME * 2)];

				PlayerInfo[iTargetID][pAdmin] = iAdminValue;
				format(szMessage, sizeof(szMessage), "{FF6347}AdmCmd: %s has set %s to a level %d admin.", PlayerInfo[playerid][pAdminName], PlayerInfo[iTargetID][pNormalName], iAdminValue);
				ABroadCast(COLOR_LIGHTRED,szMessage, 1);
			}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	return 1;
}

CMD:unmodcar(playerid, params[])
{
	new modList[512], String[10000];
	new count = 0;
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
		{
			for(new f = 0 ; f < MAX_MODS; f++)
			{
				if (GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f) != 0)
				{
					if (f != 9 && f != 7 && f != 8)
					{
						format(modList, sizeof(modList), "%s\n%s - %s", modList, partType(f), partName(GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f)));
					}
					else
					{
					    format(modList, sizeof(modList), "%s\n%s", modList, partType(f));
					}
     				format(String, sizeof(String), "partList%d", count);
					SetPVarInt(playerid, String, GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
					count++;
				}
			}
			if (count == 0)
			{
			    SendClientMessageEx(playerid, COLOR_GREY, " This vehicle does not have any modifications.");
			    return 1;
			}
		    format(modList, sizeof(modList), "%s\nAll", modList);
		    format(String, sizeof(String), "partList%d", count);
		    SetPVarInt(playerid, String, 999);
		    count++;
		    SetPVarInt(playerid, "modCount", count);
		    ShowPlayerDialog(playerid, UNMODCARMENU, DIALOG_STYLE_LIST, "Unmodification Parts", modList, "Select", "Cancel");
		    return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
 	return 1;
}
CMD:park(playerid, params[])
{
	if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
		new ownerid = PlayerInfo[playerid][pVehicleKeysFrom];
		if(IsPlayerConnected(ownerid))
		{
			new d = PlayerInfo[playerid][pVehicleKeys];
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[ownerid][d][pvId]))
			{
			    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
				new Float:x, Float:y, Float:z, Float:angle, Float:health;
				GetVehicleHealth(PlayerVehicleInfo[ownerid][d][pvId], health);
				if(health < 900) return SendClientMessageEx(playerid, COLOR_GREY, "		Your vehicle is too damaged to park it.");
				if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
				if(IsARC(GetPlayerVehicleID(playerid))) // RC Vehicles
				{
					new Float:vehPos[3];
					GetVehiclePos(GetPlayerVehicleID(playerid),vehPos[0], vehPos[1], vehPos[2]);
					AC_BS_SetPlayerPos(playerid,vehPos[0], vehPos[1]+0.5, vehPos[2]+0.5);
				}
				GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
				GetVehicleZAngle(PlayerVehicleInfo[ownerid][d][pvId], angle);
				SurfingCheck(GetPlayerVehicleID(playerid));
				UpdatePlayerVehicleParkPosition(ownerid, d, x, y, z, angle, health);
				PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
			 	SetPlayerArmedWeapon(playerid, 0);

				return 1;
			}
		}
	}
	if(IsPlayerInVehicle(playerid, PlayerRentInfo[playerid][prId]))
	{
	    new Float:x, Float:y, Float:z, Float:angle, Float:health;
	    GetVehicleHealth(PlayerRentInfo[playerid][prId], health);
       	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
		if(PlayerRentInfo[playerid][prVehicleRent] == 1) PlayerRentInfo[playerid][prVehicleRent] = 0;
		GetVehiclePos(PlayerRentInfo[playerid][prId], x, y, z);
		GetVehicleZAngle(PlayerRentInfo[playerid][prId], angle);
		SurfingCheck(GetPlayerVehicleID(playerid));
		UpdatePlayerRentParkPosition(playerid, x, y, z, angle, health);
		PutPlayerInVehicle(playerid, PlayerRentInfo[playerid][prId], 0);
		SetPlayerArmedWeapon(playerid, 0);
		return 1;
	}
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
		{
			new Float:x, Float:y, Float:z, Float:angle, Float:health;
			GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
//			if(health < 800) return SendClientMessageEx(playerid, COLOR_GREY, " Your vehicle is too damaged to park it.");
			if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
			GetVehicleZAngle(PlayerVehicleInfo[playerid][d][pvId], angle);
			SurfingCheck(GetPlayerVehicleID(playerid));
			UpdatePlayerVehicleParkPosition(playerid, d, x, y, z, angle, health);
			PutPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], 0);
			SetPlayerArmedWeapon(playerid, 0);

			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "You need to be inside a vehicle that you own.");
	return 1;
}

CMD:a(playerid, params[]) {
	new
	aString[256];
    if ((noadmin) && PlayerInfo[playerid][pAdmin] < 11)
	{
		SendClientMessage(playerid, COLOR_GREY, "   The administrator chat has been disabled!");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] >= 1) {
	    if(!isnull(params)){
		    if(PlayerInfo[playerid][pAdmin] == 1)
			{
				format(aString, sizeof(aString), "** RT %s: %s", PlayerInfo[playerid][pAdminName], params);
			}
			if(PlayerInfo[playerid][pAdmin] == 2)
			{
				format(aString, sizeof(aString), "** RW %s: %s", PlayerInfo[playerid][pAdminName], params);
			}
			if(PlayerInfo[playerid][pAdmin] == 3)
			{
				format(aString, sizeof(aString), "** Lurah %s: %s", PlayerInfo[playerid][pAdminName], params);
			}
			if(PlayerInfo[playerid][pAdmin] == 4)
			{
				format(aString, sizeof(aString), "** Camat %s: %s", PlayerInfo[playerid][pAdminName], params);
			}
			if(PlayerInfo[playerid][pAdmin] == 5)
			{
				format(aString, sizeof(aString), "** Bupati %s: %s", PlayerInfo[playerid][pAdminName], params);
			}
			if(PlayerInfo[playerid][pAdmin] == 6)
			{
				format(aString, sizeof(aString), "** Walikota %s: %s", PlayerInfo[playerid][pAdminName], params);
			}
			if(PlayerInfo[playerid][pAdmin] == 7)
			{
				format(aString, sizeof(aString), "** Gubernur %s: %s", PlayerInfo[playerid][pAdminName], params);
			}
			if(PlayerInfo[playerid][pAdmin] == 8)
			{
				format(aString, sizeof(aString), "** DPR %s: %s", PlayerInfo[playerid][pAdminName], params);
			}
			if(PlayerInfo[playerid][pAdmin] == 9)
			{
				format(aString, sizeof(aString), "** MPR %s: %s", PlayerInfo[playerid][pAdminName], params);
			}
			if(PlayerInfo[playerid][pAdmin] == 10)
			{
				format(aString, sizeof(aString), "** Menteri %s: %s", PlayerInfo[playerid][pAdminName], params);
			}
			if(PlayerInfo[playerid][pAdmin] == 11)
			{
				format(aString, sizeof(aString), "** President %s: %s", PlayerInfo[playerid][pAdminName], params);
			}
	  		ABroadCast(COLOR_NICEGREEN, aString, 1);
		}
		else {
			SendClientMessage(playerid, COLOR_WHITE,"/a [message]");
		}
	}
	return 1;
}

CMD:cnn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		if(!isnull(params)) {

			new
				szMessage[128];

			format(szMessage, sizeof(szMessage), "~b~%s: ~w~%s",GetPlayerNameEx(playerid), params);
			foreach(Player, i) GameTextForPlayer(i, szMessage, 5000, 6);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /cnn [message]. ~n~ = new line, ~r~ = red, ~g~ = green, ~b~ = blue, ~w~ = white, ~y~ = yellow.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	return 1;
}

CMD:veh(playerid, params[]) {
	if (PlayerInfo[playerid][pAdmin] >= 5) {

		new
			iVehicle;
			new rand = random(126), rand2 = random(126);

		if(sscanf(params, "i", iVehicle)) {
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /veh [model ID]");
		}
		else if(!(400 <= iVehicle <= 611)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid model specified (model IDs start at 400, and end at 611).");
		}
		else for(new iIterator; iIterator < sizeof(CreatedCars); iIterator++) if(CreatedCars[iIterator] == INVALID_VEHICLE_ID) {

			new
				Float: fVehPos[4];

			GetPlayerPos(playerid, fVehPos[0], fVehPos[1], fVehPos[2]);
			GetPlayerFacingAngle(playerid, fVehPos[3]);
			CreatedCars[iIterator] = CreateVehicle(iVehicle, fVehPos[0], fVehPos[1], fVehPos[2], fVehPos[3], rand, rand2, -1);
			VehicleFuel[CreatedCars[iIterator]] = 100.0;
			LinkVehicleToInterior(CreatedCars[iIterator], GetPlayerInterior(playerid));
			return SendClientMessageEx(playerid, COLOR_GREY, "Vehicle spawned!");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	return 1;
}

CMD:cnnn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 5) {

		new
			iTextID,
			szMessage[128];

		if(sscanf(params, "is", iTextID, szMessage)) {
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /cnnn [type 1-6] [message]. ~n~ = new line, ~r~ = red, ~g~ = green, ~b~ = blue, ~w~ = white, ~y~ = yellow.");
		}
		else if(!(0 <= iTextID <= 6 && iTextID != 2)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Text ID must be between 0 and 6, but not 2 (due to SA:MP bugs).");
		}
		else foreach(Player, i) GameTextForPlayer(i, szMessage, 5000, iTextID);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	return 1;
}

CMD:quitfamily(playerid, params[]) {
	return cmd_quitgang(playerid, params);
}

CMD:quitgang(playerid, params[])
{
    if(PlayerInfo[playerid][pFMember] != 255)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit the family, you are now a civilian again.");
		gTeam[playerid] = 3;
		PlayerInfo[playerid][pTeam] = 3;
		PlayerInfo[playerid][pFMember] = 255;
		PlayerInfo[playerid][pRank] = 0;
		PlayerInfo[playerid][pChar] = 0;
		if(!IsValidSkin(GetPlayerSkin(playerid)))
		{
		    new rand = random(sizeof(CIV));
			SetPlayerSkin(playerid,CIV[rand]);
			PlayerInfo[playerid][pModel] = CIV[rand];
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
	}
	return 1;
}

CMD:changeuserpassword(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 11)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
        return 1;
    }

    new String[10000], accountName[24], password[64];
    if(sscanf(params, "s[MAX_PLAYER_NAME]s[64]", accountName, password)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /changeuserpassword [playername] [new password]");

    if(doesAccountExist(accountName))
	{
        OnPlayerOfflineLogin(accountName);
        if(PlayerInfo[MAX_PLAYERS][pAdmin] > 0)
		{
            return SendClientMessageEx(playerid, COLOR_GRAD2, " You can't do this to other admins!");
        }
        new EncryptedPassword[64];
        format(EncryptedPassword, 64, "%s", password);

        format(PlayerInfo[MAX_PLAYERS][pKey], 64, "%s", EncryptedPassword);
        format(String, sizeof(String), "You have changed %s's your password to '%s'", accountName, password);
        SendClientMessageEx(playerid, COLOR_YELLOW, String);
        OnPlayerOfflineSave(accountName);
        format(String, sizeof(String), "AdmCmd: %s's password was changed by %s", accountName, GetName(playerid));
        Log("logs/password.log", String);
        ABroadCast(COLOR_LIGHTRED,String,1);
    }
    else
	{
        SendClientMessageEx( playerid, COLOR_WHITE, "That account doesn't exist." );
    }
    return 1;
}

CMD:sb(playerid, params[]) return cmd_seatbelt(playerid, params);

CMD:seatbelt(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 0)
	{
        Seatbelt[playerid] = 1;
        SendClientMessageEx(playerid, COLOR_WHITE, "Anda telah mengenakan sabuk pengaman.");

    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 1)
	{
        Seatbelt[playerid] = 0;
        SendClientMessageEx(playerid, COLOR_WHITE, "Anda telah melepaskan Sabuk Pengaman anda.");
    }
    return 1;
}
CMD:toghelm(playerid, params[])
{
    if(Seatbelt[playerid] == 0)
	{
	    Seatbelt[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "HELMINFO: Helm {00D900}ON!");
  		SetPlayerAttachedObject(playerid, 9, 18645, 2, 0.07, 0, 0, 88, 75, 0);
	}
	else if(Seatbelt[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "HELMINFO: Helm {FF0000}OFF!");
  		RemovePlayerAttachedObject(playerid, 9);
  		Seatbelt[playerid] = 0;
	}
    return 1;
}

CMD:cb(playerid, params[]) return cmd_checkbelt(playerid, params);

CMD:checkbelt(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /checkbelt [playerid]");

    if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT)
	{
        SendClientMessageEx(playerid,COLOR_GREY,"That player is not in any vehicle!");
        return 1;
    }
    if (ProxDetectorS(9.0, playerid, giveplayerid))
	{
		new String[10000];
        new stext[4];
        if(Seatbelt[giveplayerid] == 0) { stext = "off"; }
        else { stext = "on"; }
        if(IsABike(GetPlayerVehicleID(playerid)))
		{
            format(String, sizeof(String), "%s's helmet is currently %s." , GetPlayerNameEx(giveplayerid) , stext);
            SendClientMessageEx(playerid,COLOR_WHITE,String);

		}
        else
		{
            format(String, sizeof(String), "%s's seat belt is currently %s." , GetPlayerNameEx(giveplayerid) , stext);
            SendClientMessageEx(playerid,COLOR_WHITE,String);

		}
    }
    else { SendClientMessageEx(playerid, COLOR_GREY, "You are not around that player!"); }
    return 1;
}
CMD:isafk(playerid, params[])
{
	new	szMessage[42 + MAX_PLAYER_NAME];
	SendClientMessageEx(playerid,COLOR_WHITE,"Listing all paused players...");
	foreach(Player, i)
	{
	 	if(playerTabbed[i] != 0)
		{
			if(playerTabbedTime[i] > 60) format(szMessage, sizeof(szMessage), "[id:%d] %s AFK for %d minute(s).",i, GetName(i), playerTabbedTime[i]/60);
			else format(szMessage, sizeof(szMessage), "[id:%d] %s AFK for %d seconds.",i, GetName(i), playerTabbedTime[i]);
			SendClientMessageEx(playerid,COLOR_LIGHTRED, szMessage);
		}
	}
	return 1;
}
CMD:deliverpt(playerid, params[])
{
    if(gTeam[playerid] == TEAM_CYAN||PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 3))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
			new String[10000], giveplayerid;
		    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /deliverpt [playerid]");

            new carid = GetPlayerVehicleID(playerid);
            new caridex = GetPlayerVehicleID(giveplayerid);
            if(IsAnAmbulance(carid))
			{
                if(carid == caridex)
				{
                    if(IsAtDeliverPatientPoint(playerid))
					{
                        if(playerid == giveplayerid)
						{
                            SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot deliver yourself to the hospital!");
                            return 1;
                        }
                        if(GetPVarInt(giveplayerid, "Injured") == 0)
						{
                            return SendClientMessageEx(playerid, COLOR_GRAD2, "Pemain yang tidak cedera!");
                        }
                        if(playerTabbed[giveplayerid] == 1)
						{
                            SendClientMessageEx(playerid, COLOR_GRAD2, "That player is paused, you can't currently deliver him!");
                            return 1;
                        }
                        AC_BS_SetPlayerHealth(giveplayerid, 100);
                        PlayerInfo[giveplayerid][pHealth] = 100;
                        if(STDPlayer[giveplayerid] > 0)
						{
                            STDPlayer[giveplayerid] = 0;
                            SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "* Anda tidak lagi terinfeksi dengan STD lagi karena bantuan rumah sakit!");
                        }
                        GivePlayerCash(giveplayerid, -1000);
                        Tax += 1000;
                        GivePlayerCash(playerid,2500);
                        KillEMSQueue(giveplayerid);
                        SetPVarInt(giveplayerid, "MedicBill", 0);
                        SendClientMessageEx(giveplayerid, TEAM_CYAN_COLOR, "Doc: Your medical bill comes in at $1000. Have a nice day!");
                        format(String,sizeof(String),"Anda menerima $2500 Atas bantuan anda!");
                        SendClientMessageEx(playerid, TEAM_CYAN_COLOR, String);
                        AC_BS_SetPlayerPos(giveplayerid, 1169.7588,-1351.5490,2423.0461);
                        Streamer_UpdateEx(giveplayerid, 1169.7588,-1351.5490,2423.0461);
                        AC_BS_SetPlayerInterior(giveplayerid, 1);
                        PlayerInfo[giveplayerid][pInt] = 1;
                        TogglePlayerControllable(giveplayerid, 0);
                        GameTextForPlayer(giveplayerid, "Objects loading...", 4000, 5);
                        SetPVarInt(giveplayerid, "LoadingObjects", 1);
                        SetTimerEx("SafeLoadObjects", 4000, 0, "d", giveplayerid);
                        PlayerInfo[playerid][pPatientsDelivered]++;
                        format(String, sizeof(String), "EMS Driver %s telah berhasil memberikan Pasien %s ke rumah sakit.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						SendRadioMessage(4, TEAM_MED_COLOR, String);
                        new Float:X, Float:Y, Float:Z;
                        if(IsPlayerInRangeOfPoint(playerid, 5.0,1142.4733,-1326.3633,13.6259) || IsPlayerInRangeOfPoint(playerid, 5.0, 1165.1564,-1368.8240,26.6502))
						{
                            AC_BS_SetPlayerVirtualWorld(giveplayerid, 2);
                            PlayerInfo[giveplayerid][pVW] = 2;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,2027.0599,-1410.6870,16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2024.5742,-1382.7844,48.3359))
					 	{
                            AC_BS_SetPlayerVirtualWorld(giveplayerid, 1);
                            PlayerInfo[giveplayerid][pVW] = 1;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,1227.2339,306.4730,19.7028) || IsPlayerInRangeOfPoint(playerid, 5.0, 1233.3384,316.4022,24.7578))
						{
                            AC_BS_SetPlayerVirtualWorld(giveplayerid, 5);
                            PlayerInfo[giveplayerid][pVW] = 5;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,-339.2989,1055.8138,19.7392) || IsPlayerInRangeOfPoint(playerid, 5.0, -334.1560,1051.4434,26.0125))
						{
                            AC_BS_SetPlayerVirtualWorld(giveplayerid, 4);
                            PlayerInfo[giveplayerid][pVW] = 4;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,-2695.5725,639.4147,14.4531) || IsPlayerInRangeOfPoint(playerid, 5.0, -2656.0339,615.2567,66.0938))
						{
                            AC_BS_SetPlayerVirtualWorld(giveplayerid, 6);
                            PlayerInfo[giveplayerid][pVW] = 6;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 250,X, Y, Z))
						{
                            AC_BS_SetPlayerVirtualWorld(giveplayerid, 7);
                            PlayerInfo[giveplayerid][pVW] = 7;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,-1528.814331, 2540.706054, 55.835937))
						{
                            AC_BS_SetPlayerVirtualWorld(giveplayerid, 99);
                            PlayerInfo[giveplayerid][pVW] = 99;
                        }
                    }
                    else
					{
                        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not near a deliver point - look out near the hospitals.");
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GRAD2, "Pasien harus dalam mobil Anda untuk melepaskan dia.");
                }
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GRAD2, "Anda tidak berada dalam sebuah kendaraan LSMD.");
            }
        }
    }
    return 1;
}

CMD:loadpt(playerid, params[])
{
    if(gTeam[playerid] == TEAM_CYAN||PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 3))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            SendClientMessageEx(playerid, COLOR_GREY, "   Cannot use this while you're in a car!");
            return 1;
        }

        new String[10000], giveplayerid, seat;
        if(sscanf(params, "ud", giveplayerid, seat)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /loadpt [playerid] [seatid]");

        if(IsPlayerConnected(giveplayerid))
		{
            if(giveplayerid != INVALID_PLAYER_ID)
			{
                if(seat < 2 || seat > 3)
				{
                    SendClientMessageEx(playerid, COLOR_GRAD1, "The seat ID cannot be above 3 or below 2.");
                    return 1;
                }
                if(GetPVarInt(giveplayerid, "Injured") != 1)
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "   That patient not injured - you can't load them.");
                    return 1;
                }
                if(IsPlayerInAnyVehicle(giveplayerid))
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "   That patient is inside a car - you can't load them.");
                    return 1;
                }
                if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
                    if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot load yourself!"); return 1; }
                    if(PlayerInfo[giveplayerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
                    new carid = gLastCar[playerid];
                    if(IsAnAmbulance(carid))
					{
                        new Float:pos[6];
                        GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
                        GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
                        GetVehiclePos( carid, pos[0], pos[1], pos[2]);
                        if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
                            floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
                            floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
                        format(String, sizeof(String), "* You were loaded by paramedic %s.", GetPlayerNameEx(playerid));
                        SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
                        format(String, sizeof(String), "* You loaded patient %s.", GetPlayerNameEx(giveplayerid));
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
                        SetPVarInt(giveplayerid, "EMSAttempt", 3);
                        ClearAnimations(giveplayerid);
                        PutPlayerInVehicle(giveplayerid,carid,seat);
                        TogglePlayerControllable(giveplayerid, false);
                    }
                    else
					{
                        SendClientMessageEx(playerid, COLOR_GRAD2, "Your last car needs to be an ambulance!");
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, " You're not close enough to the player or your car!");
                    return 1;
                }
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
            return 1;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "   Anda bukan Cop / FBI / Coast Guard!");
    }
    return 1;
}

CMD:triage(playerid, params[])
{
    if(gTeam[playerid] == TEAM_CYAN||PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4)//model
	{
 		if(PlayerInfo[playerid][pTriageTime] != 0)
   		{
     		SendClientMessageEx(playerid, COLOR_GREY, "You must wait for 2 minutes to use this command.");
       		return 1;
	    }

	    new giveplayerid;
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /triage [playerid]");

   		if(IsPlayerConnected(giveplayerid))
   		{
    	    if(playerid == giveplayerid) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command on yourself.");
    	    if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
	    	    new Float: health;
	    	    GetPlayerHealth(giveplayerid, health);
	    	    if(health >= 85) AC_BS_SetPlayerHealth(giveplayerid, 100);
				else AC_BS_SetPlayerHealth(giveplayerid, health+15.0);
	    	    PlayerInfo[playerid][pTriageTime] = 120;
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			}
 		}
	}
	return 1;
}

CMD:vmdc(playerid, params[])
{
    if(IsACop(playerid))
    {
        new String[10000], giveplayerid;
        if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /vmdc [playerid]");

   		if(IsPlayerConnected(giveplayerid))
    	{
	        SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
			format(String, sizeof(String), "*** %s' Vehicles  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, String);
	        for(new i=0; i<MAX_PLAYERVEHICLES; i++)
         	{
			    if(PlayerVehicleInfo[giveplayerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
				{
    				format(String, sizeof(String), "Vehicle registration: %d | Vehicle Name: %s | Ticket: %s.",PlayerVehicleInfo[giveplayerid][i][pvId],GetVehicleName(PlayerVehicleInfo[giveplayerid][i][pvId]),FormatMoney(PlayerVehicleInfo[giveplayerid][i][pvTicket]));
					SendClientMessageEx(playerid, COLOR_WHITE, String);
	    		}
				else if(PlayerVehicleInfo[giveplayerid][i][pvImpounded])
				{
    				format(String, sizeof(String), "Vehicle registration: Voided (impounded) | Vehicle Name: %s | Ticket: %s.",VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400],FormatMoney(PlayerVehicleInfo[giveplayerid][i][pvTicket]));
					SendClientMessageEx(playerid, COLOR_WHITE, String);
	    		}
	    	}
	    	SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
   		}
    }
	return 1;
}

CMD:payticket(playerid, params[])
{
	new vString[10000];
	if(!IsPlayerInRangeOfPoint(playerid, 3, 252.5994, 117.4798, 1003.3950)) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak berada di LSPD HQ");
	for(new i; i < MAX_PLAYERVEHICLES; i++)
	{
		if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
			format(vString, sizeof(vString), "%s\n%s (Ticket: %s)", vString, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], FormatMoney(PlayerVehicleInfo[playerid][i][pvTicket]));

		else
			format(vString, sizeof(vString), "%s\nEmpty", vString);
	}
	ShowPlayerDialog(playerid, PAYTICKET, DIALOG_STYLE_LIST, "Pay Ticket", vString, "Bayar", "Engga");
	return 1;
}

CMD:vticket(playerid, params[])
{
    if(IsACop(playerid))
    {
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /vticket [vehicle registration]");

        if(PlayerInfo[playerid][pTicketTime] != 0)
		{
            SendClientMessageEx(playerid, COLOR_GRAD2, "You must wait within a minute in order to use this command again!");
            return 1;
        }

        new Float: x, Float: y, Float: z, vehicleid = strval(params);
        GetVehiclePos(vehicleid, x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
		{
            if(vehicleid != INVALID_VEHICLE_ID)
			{
                foreach(Player, i)
				{
                    new v = GetPlayerVehicle(i, vehicleid);
                    if(v != -1)
					{
						new String[62 + MAX_PLAYER_NAME];
                        PlayerVehicleInfo[i][v][pvTicket] += 1000;
                        PlayerInfo[playerid][pTicketTime] = 60;
                        format(String, sizeof(String), "You have issued a $10.00 ticket on %s's %s.",GetPlayerNameEx(i),GetVehicleName(PlayerVehicleInfo[i][v][pvId]));
                        SendClientMessageEx(playerid, COLOR_WHITE, String);
                        return 1;
                    }
                }
                for(new f = 0; f < MAX_FAMILY; f++)
				{
                    new v = GetGangVehicle(f, vehicleid);
                    if(v != -1)
					{
                        SendClientMessageEx(playerid, COLOR_WHITE, "You can not issue a ticket on a family owned vehicle!");
                        return 1;
                    }
                }
                SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle does not have any registration!");
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be near such vehicle!");
        }
    }
    return 1;
}

CMD:vcheck(playerid, params[])
{
    if(IsACop(playerid))
	{
        new carid = GetPlayerVehicleID(playerid);
        new closestcar = GetClosestCar(playerid, carid);
        if(IsTrailerAttachedToVehicle(carid))
		{
            new carbeingtowed = GetVehicleTrailer(carid);
            foreach(Player, i)
			{
                new v = GetPlayerVehicle(i, carbeingtowed);
                if(v != -1)
				{
					new String[78 + MAX_PLAYER_NAME];
                    format(String, sizeof(String), "Vehicle ID: %d | Name: %s | Owner: %s | Ticket: %s.",carbeingtowed,GetVehicleName(PlayerVehicleInfo[i][v][pvId]),GetPlayerNameEx(i),FormatMoney(PlayerVehicleInfo[i][v][pvTicket]));
                    SendClientMessageEx(playerid, COLOR_WHITE, String);
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, carbeingtowed);
                if(v != -1)
                {
					new String[72 + MAX_PLAYER_NAME];
                    format(String, sizeof(String), "Vehicle ID: %d | Name: %s | Owner: %s.",carbeingtowed,GetVehicleName(FamilyVehicleInfo[f][v][fvId]),FamilyInfo[f][FamilyLeader]);
                    SendClientMessageEx(playerid, COLOR_WHITE, String);
                    return 1;
                }
            }
            SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle is not owned by anyone!");
        }
        else if(IsPlayerInRangeOfVehicle(playerid, 9.0) && !IsTrailerAttachedToVehicle(carid))
		{
            foreach(Player, i)
			{
                new v = GetPlayerVehicle(i, closestcar);
                if(v != -1)
				{
					new String[78 + MAX_PLAYER_NAME];
                    format(String, sizeof(String), "Vehicle ID: %d | Name: %s | Owner: %s | Ticket: %s.",closestcar,GetVehicleName(PlayerVehicleInfo[i][v][pvId]),GetPlayerNameEx(i),FormatMoney(PlayerVehicleInfo[i][v][pvTicket]));
                    SendClientMessageEx(playerid, COLOR_WHITE, String);
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, closestcar);
                if(v != -1)
				{
					new String[72 + MAX_PLAYER_NAME];
                    format(String, sizeof(String), "Vehicle ID: %d | Name: %s | Owner: %s.",closestcar,GetVehicleName(FamilyVehicleInfo[f][v][fvId]),FamilyInfo[f][FamilyLeader]);
                    SendClientMessageEx(playerid, COLOR_WHITE, String);
                    return 1;
                }
            }
            SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle is not owned by anyone!");
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You are not towing a vehicle/near to another vehicle.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
    }
    return 1;
}

CMD:motd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 11)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GOLD, "USAGE: /motd [message]");
		new String[10000];
    	format(String, sizeof(String), "AdmCmd: %s has changed the global motd to: %s.", GetName(playerid), params);
		ABroadCast( COLOR_LIGHTRED, String, 1);
		format(GlobalMOTD, sizeof(GlobalMOTD), "%s {FF00FF}- %s", params, PlayerInfo[playerid][pAdminName]);
		SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the Global MOTD.");
		SaveMOTDs();
	}
	return 1;
}

CMD:amotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 11)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_YELLOW, "USAGE: /amotd [message]");
		new String[10000];
		format(AdminMOTD, sizeof(AdminMOTD), "%s {FF00FF}- %s", params, PlayerInfo[playerid][pAdminName]);
		format(String, sizeof(String), "AdmCmd: %s has changed the admin motd to: %s.", GetName(playerid), params);
		ABroadCast( COLOR_LIGHTRED, String, 1);
		SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the Admin MOTD.");
		SaveMOTDs();
	}
	return 1;
}

CMD:transferveh(playerid, params[])
{
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
        if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
 		{
            new Float:health;
            GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
   			new String[10000], giveplayerid, price[32], dollars, cents, duit[32];
			if(sscanf(params, "us[32]", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /transferveh [playerid] [price]");
			if(strfind(price, ".", true) != -1)
			{
   				sscanf(price, "p<.>dd", dollars, cents);
			    format(duit, sizeof(duit), "%d%02d", dollars, cents);
	            if(strval(duit) < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Price must be higher than 0.");
	            if(playerid == giveplayerid)
				{
	                SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on yourself.");
	                return 1;
	            }
		        if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Player is currently not connected to the server.");
          		if (ProxDetectorS(8.0, playerid, giveplayerid))
			 	{
		        	VehicleOffer[giveplayerid] = playerid;
           			VehicleId[giveplayerid] = d;
            	 	VehiclePrice[giveplayerid] = strval(duit);
              		format(String, sizeof(String), "* You offered %s to buy this %s for %s.", GetPlayerNameEx(giveplayerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), FormatMoney(strval(duit)));
              		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
              		format(String, sizeof(String), "* %s has offered you their %s for %s, (type /accept car) to buy.", GetName(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), FormatMoney(strval(duit)));
              		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
              		return 1;
           		}
           		else
				{
    				SendClientMessageEx(playerid, COLOR_GREY, "That player is not near you.");
    				return 1;
				}
			}
			else
			{
	            sscanf(price, "d", dollars);
	        	format(duit, sizeof(duit), "%d00", dollars);
	            if(strval(duit) < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Price must be higher than 0.");
	            if(playerid == giveplayerid)
				{
	                SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on yourself.");
	                return 1;
	            }
		        if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Player is currently not connected to the server.");
          		if (ProxDetectorS(8.0, playerid, giveplayerid))
			 	{
		        	VehicleOffer[giveplayerid] = playerid;
           			VehicleId[giveplayerid] = d;
            	 	VehiclePrice[giveplayerid] = strval(duit);
              		format(String, sizeof(String), "* You offered %s to buy this %s for %s.", GetPlayerNameEx(giveplayerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), FormatMoney(strval(duit)));
              		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
              		format(String, sizeof(String), "* %s has offered you their %s for %s, (type /accept car) to buy.", GetName(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), FormatMoney(strval(duit)));
              		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
              		return 1;
           		}
           		else
				{
    				SendClientMessageEx(playerid, COLOR_GREY, "That player is not near you.");
    				return 1;
				}
			}
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
    return 1;
}

CMD:transferhouse(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
    if((PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) || (PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwner], true) == 0))
	{
	    new String[10000], giveplayerid, price[32], dollars, cents, duit[32];
	    if(sscanf(params, "us[32]", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /transferhouse [playerid] [price]");
		if(strfind(price, ".", true) != -1)
		{
		    sscanf(price, "p<.>dd", dollars, cents);
      		format(duit, sizeof(duit), "%d%02d", dollars, cents);
        	if(strval(duit) < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Price must be higher than 0.");
	        if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Player is currently not connected to the server.");
	        if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(GetName(playerid), HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwner], true) == 0)
			{
	            SendClientMessageEx(playerid, COLOR_GREY, "They already own a house.");
	            return 1;
	        }
	        new house = PlayerInfo[playerid][pPhousekey];
	        new house2 = PlayerInfo[playerid][pPhousekey2];
	        if(PlayerInfo[giveplayerid][pLevel] >= HouseInfo[PlayerInfo[playerid][pPhousekey]][hLevel])
			{
	            if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]))
				{
	                if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
	                    HouseOffer[giveplayerid] = playerid;
	                    HousePrice[giveplayerid] = strval(duit);
	                    House[giveplayerid] = 1;
	                    format(String, sizeof(String), "* You offered %s to buy your house for %s.", GetPlayerNameEx(giveplayerid), FormatMoney(strval(duit)));
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
	                    format(String, sizeof(String), "* %s has offered you their house for %s, (type /accept house) to buy.", GetName(playerid), FormatMoney(strval(duit)));
	                    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
	                    return 1;
	                }
	                else
					{
	                    SendClientMessageEx(playerid, COLOR_GREY, "That player is not near you.");
	                    return 1;
	                }
	            }
	            else if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]))
				{
	                if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
	                    HouseOffer[giveplayerid] = playerid;
	                    HousePrice[giveplayerid] = strval(duit);
	                    House[giveplayerid] = 2;
	                    format(String, sizeof(String), "* You offered %s to buy your house for %s.", GetPlayerNameEx(giveplayerid), FormatMoney(strval(duit)));
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
	                    format(String, sizeof(String), "* %s has offered you their house for %s, (type /accept house) to buy.", GetName(playerid), FormatMoney(strval(duit)));
	                    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
	                    return 1;
	                }
	                else
					{
	                    SendClientMessageEx(playerid, COLOR_GREY, "That player is not near you.");
	                    return 1;
	                }
	            }
	            else
				{
	                SendClientMessageEx(playerid, COLOR_GREY, "You are not near your house");
	                return 1;
	            }
	        }
	        else
			{
	            SendClientMessageEx(playerid, COLOR_GREY, "The player you are trying to sell your house to is not the appropriate level to buy this house.");
	            return 1;
	        }
		}
		else
		{
            sscanf(price, "d", dollars);
        	format(duit, sizeof(duit), "%d00", dollars);
        	if(strval(duit) < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Price must be higher than 0.");
	        if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Player is currently not connected to the server.");
	        if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(GetName(playerid), HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwner], true) == 0)
			{
	            SendClientMessageEx(playerid, COLOR_GREY, "They already own a house.");
	            return 1;
	        }
	        new house = PlayerInfo[playerid][pPhousekey];
	        new house2 = PlayerInfo[playerid][pPhousekey2];
	        if(PlayerInfo[giveplayerid][pLevel] >= HouseInfo[PlayerInfo[playerid][pPhousekey]][hLevel])
			{
	            if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]))
				{
	                if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
	                    HouseOffer[giveplayerid] = playerid;
	                    HousePrice[giveplayerid] = strval(duit);
	                    House[giveplayerid] = 1;
	                    format(String, sizeof(String), "* You offered %s to buy your house for %s.", GetPlayerNameEx(giveplayerid), FormatMoney(strval(duit)));
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
	                    format(String, sizeof(String), "* %s has offered you their house for %s, (type /accept house) to buy.", GetName(playerid), FormatMoney(strval(duit)));
	                    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
	                    return 1;
	                }
	                else
					{
	                    SendClientMessageEx(playerid, COLOR_GREY, "That player is not near you.");
	                    return 1;
	                }
	            }
	            else if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]))
				{
	                if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
	                    HouseOffer[giveplayerid] = playerid;
	                    HousePrice[giveplayerid] = strval(duit);
	                    House[giveplayerid] = 2;
	                    format(String, sizeof(String), "* You offered %s to buy your house for %s.", GetPlayerNameEx(giveplayerid), FormatMoney(strval(duit)));
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
	                    format(String, sizeof(String), "* %s has offered you their house for %s, (type /accept house) to buy.", GetName(playerid), FormatMoney(strval(duit)));
	                    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
	                    return 1;
	                }
	                else
					{
	                    SendClientMessageEx(playerid, COLOR_GREY, "That player is not near you.");
	                    return 1;
	                }
	            }
	            else
				{
	                SendClientMessageEx(playerid, COLOR_GREY, "You are not near your house");
	                return 1;
	            }
	        }
	        else
			{
	            SendClientMessageEx(playerid, COLOR_GREY, "The player you are trying to sell your house to is not the appropriate level to buy this house.");
	            return 1;
	        }
		}
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "You don't own a house.");
    }
    return 1;
}
CMD:gotopveh(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2) {

        new iTargetID;

        if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotopveh [player]");
		}
		else if(IsPlayerConnected(iTargetID)) {

			new szVehString[8024];
			if(!GetPlayerVehicleCount(iTargetID)) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Player doesn't own any vehicles.");
			for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
				if((iModelID = PlayerVehicleInfo[iTargetID][i][pvModelId] - 400) >= 0){
					if(PlayerVehicleInfo[iTargetID][i][pvImpounded]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (impounded)", szVehString, VehicleName[iModelID]);
					}
					else if(PlayerVehicleInfo[iTargetID][i][pvDestroyed]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (Destroyed)", szVehString, VehicleName[iModelID]);
					}
					else if(PlayerVehicleInfo[iTargetID][i][pvStored]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (stored)", szVehString, VehicleName[iModelID]);
					}
					else format(szVehString, sizeof(szVehString), "%s\n%s (ID %i)", szVehString, VehicleName[iModelID], PlayerVehicleInfo[iTargetID][i][pvId]);
				}
			}
		    ShowPlayerDialog(playerid, GOTOPLAYERCAR, DIALOG_STYLE_LIST, "Vehicle Teleportation", szVehString, "Teleport", "Cancel");
       		SetPVarInt(playerid, "playeraffectedcarTP", iTargetID);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
  	}
	return 1;
}

CMD:lock(playerid, params[])
{
    new Float: x, Float: y, Float: z;
    if(PlayerRentInfo[playerid][prId] != 0) GetVehiclePos(PlayerRentInfo[playerid][prId], x, y, z);
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
            if(PlayerRentInfo[playerid][prLock] > 0 && PlayerRentInfo[playerid][prLocked] == 0)
			{
                GameTextForPlayer(playerid,"~r~Kendaraan Terkunci !",5000,6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerRentInfo[playerid][prLocked] = 1;
                LockPlayerRent(playerid, PlayerRentInfo[playerid][prId],PlayerRentInfo[playerid][prLock]);
			 	VehicleStatus[GetPlayerVehicleID(playerid)] = 1;
                return 1;
            }
            else if(PlayerRentInfo[playerid][prLock] > 0 && PlayerRentInfo[playerid][prLocked] == 1)
			{
                GameTextForPlayer(playerid,"~g~vehicle unlocked",5000,6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerRentInfo[playerid][prLocked] = 0;
                UnLockPlayerRent(playerid, PlayerRentInfo[playerid][prId], PlayerRentInfo[playerid][prLock]);
			 	VehicleStatus[GetPlayerVehicleID(playerid)] = 0;
               	return 1;
            }
            SendClientMessageEx(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
            return 1;
        }
	}
	if(PlayerRentInfo[playerid][prId] != 0) GetVehiclePos(PlayerRentInfo[playerid][prId], x, y, z);
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
            if(PlayerRentInfo[playerid][prLock] > 0 && PlayerRentInfo[playerid][prLocked] == 0)
			{
                GameTextForPlayer(playerid,"~r~vehicle locked",5000,6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerRentInfo[playerid][prLocked] = 1;
                LockPlayerVehicle(playerid, PlayerRentInfo[playerid][prId],PlayerRentInfo[playerid][prLock]);
			 	VehicleStatus[GetPlayerVehicleID(playerid)] = 1;
                return 1;
            }
            else if(PlayerRentInfo[playerid][prLock] > 0 && PlayerRentInfo[playerid][prLocked] == 1)
			{
                GameTextForPlayer(playerid,"~g~vehicle unlocked",5000,6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerRentInfo[playerid][prLocked] = 0;
                UnLockPlayerVehicle(playerid, PlayerRentInfo[playerid][prId], PlayerRentInfo[playerid][prLock]);
			 	VehicleStatus[GetPlayerVehicleID(playerid)] = 0;
               	return 1;
            }
            SendClientMessageEx(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
            return 1;
        }
	}
    if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
        new ownerid = PlayerInfo[playerid][pVehicleKeysFrom];
        if(IsPlayerConnected(ownerid))
		{
            new d = PlayerInfo[playerid][pVehicleKeys];
            if(PlayerVehicleInfo[ownerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
            if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
			{
			    if(PlayerVehicleInfo[ownerid][d][pvLock] > 0)
				{
                    if(PlayerVehicleInfo[ownerid][d][pvLocked] == 0)
					{
                        GameTextForPlayer(playerid,"Kendaraan~r~Terkunci!",5000,6);
                        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 1;
                        LockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
			 			VehicleStatus[GetPlayerVehicleID(playerid)] = 1;
                        return 1;
                    }
                    else
					{
                        GameTextForPlayer(playerid,"Kendaraan~g~Terbuka!",5000,6);
                        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 0;
                        UnLockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
			 			VehicleStatus[GetPlayerVehicleID(playerid)] = 0;
                        return 1;
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
                    return 1;
                }
            }
        }
    }
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
    {
        new String[10000];
        if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
			if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 0)
			{
			    format(String, sizeof(String), "~w~%s ~r~locked", GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]));
                GameTextForPlayer(playerid, String ,5000, 6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerVehicleInfo[playerid][d][pvLocked] = 1;
                LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
			 	VehicleStatus[GetPlayerVehicleID(playerid)] = 1;
                return 1;
            }
            else if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 1)
			{
			    format(String, sizeof(String), "~w~%s ~g~unlocked", GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]));
                GameTextForPlayer(playerid, String ,5000, 6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerVehicleInfo[playerid][d][pvLocked] = 0;
                UnLockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
			 	VehicleStatus[GetPlayerVehicleID(playerid)] = 0;
               return 1;

            }
            SendClientMessageEx(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
            return 1;
        }
    }
    return 1;
}

CMD:gpark(playerid, params[])
{
	new f = PlayerInfo[playerid][pFMember];
	if(f == 255) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in a family.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
 	{
	    if(IsPlayerInVehicle(playerid, FamilyVehicleInfo[f][d][fvId]))
	    {
    		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
	        new Float:x, Float:y, Float:z, Float:angle, Float:health;
	        GetVehicleHealth(FamilyVehicleInfo[f][d][fvId], health);
	        if(health < 800) return SendClientMessageEx(playerid, COLOR_GREY, " The vehicle is too damaged to park it.");
	        if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
            GetVehiclePos(FamilyVehicleInfo[f][d][fvId], x, y, z);
           	GetVehicleZAngle(FamilyVehicleInfo[f][d][fvId], angle);
            SurfingCheck(GetPlayerVehicleID(playerid));
            UpdateGangVehicleParkPosition(f, d, x, y, z, angle, health, 1);
  			FamilyVehicleInfo[f][d][fvSpawnx] = x;
			FamilyVehicleInfo[f][d][fvSpawny] = y;
			FamilyVehicleInfo[f][d][fvSpawnz] = z;
			FamilyVehicleInfo[f][d][fvSpawna] = angle;
			PutPlayerInVehicle(playerid, FamilyVehicleInfo[f][d][fvId], 0);
            SaveFamiliesHQ();
            return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
	return 1;
}

CMD:gvlock(playerid, params[])
{
    new Float: x, Float: y, Float: z;
	new f = PlayerInfo[playerid][pFMember];
	if(f == 255) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in a family.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
    {
		if(FamilyVehicleInfo[f][d][fvId] != 0) GetVehiclePos(FamilyVehicleInfo[f][d][fvId], x, y, z);
  		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
    	{
        	if(FamilyVehicleInfo[f][d][fvLock] > 0 && FamilyVehicleInfo[f][d][fvLocked] == 0)
         	{
          		GameTextForPlayer(playerid,"~r~vehicle locked",5000,6);
            	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
             	FamilyVehicleInfo[f][d][fvLocked] = 1;
              	LockGangVehicle(f, FamilyVehicleInfo[f][d][fvId], FamilyVehicleInfo[f][d][fvLock]);
               	return 1;
			}
			else if(FamilyVehicleInfo[f][d][fvLock] > 0 && FamilyVehicleInfo[f][d][fvLocked] == 1)
   			{
      			GameTextForPlayer(playerid,"~g~vehicle unlocked",5000,6);
         		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
           		FamilyVehicleInfo[f][d][fvLocked] = 0;
             	UnLockGangVehicle(f, FamilyVehicleInfo[f][d][fvId], FamilyVehicleInfo[f][d][fvLock]);
              	return 1;
			}
   			SendClientMessageEx(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
      		return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, " You are not near any vehicle that your family owns.");
	return 1;
}

CMD:vehid(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid))
    {
		new String[10000];
    	new idcar = GetPlayerVehicleID(playerid);
		format(String, sizeof(String), "* Vehicle Name: %s | Vehicle Model:%d | Vehicle ID: %d.",GetVehicleName(idcar), GetVehicleModel(idcar), idcar);
		SendClientMessageEx(playerid, COLOR_GREY, String);
	}
	return 1;
}
CMD:dm(playerid, params[])
{
    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ])) {
            if(IsPlayerOwnerOfCDEx(playerid, d))
			{
                SetPVarInt(playerid, "editingcd", d);
                SetPVarInt(playerid, "editingcdveh", -1);
                SetPVarInt(playerid, "editingcdvehpos", 0);
                SetPVarInt(playerid, "editingcdvehnew", 0);
                new listitems[] = "1 New Vehicle\n2 My Vehicles\n3 Upgrade\n4 Till";
                ShowPlayerDialog(playerid,DIALOG_CDEDIT,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "You do not own that Car Dealership.");
                return 1;
            }
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You must be standing inside the radius of the Car Dealership.");
    return 1;
}

CMD:editcar(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new v, d;
    v = GetCarDealershipVehicleId(vehicleid);
    d = GetCarDealershipId(vehicleid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You are not in any car.");
    if(v != -1 && d != -1)
	{
        if(IsPlayerOwnerOfCDEx(playerid, d))
		{
            SetPVarInt(playerid, "editingcd", d);
            SetPVarInt(playerid, "editingcdveh", v);
            SetPVarInt(playerid, "editingcdvehpos", 0);
            SetPVarInt(playerid, "editingcdvehnew", 0);
            new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
            ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
            return 1;
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You do not own that Car Dealership.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Car is not part of a Car Dealership.");
    }
    return 1;
}

CMD:buydealership(playerid, params[])
{
    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		{
            if(!CarDealershipInfo[d][cdOwned])
			{
                if(GetPVarInt(playerid, "Cash") < CarDealershipInfo[d][cdPrice])
				{
                    SendClientMessageEx(playerid, COLOR_GREY, " You do not have enough money to buy this Car Dealership.");
                    return 1;
                }
                SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-CarDealershipInfo[d][cdPrice]);
                SetPlayerOwnerOfCD(playerid, d);
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "That Car Dealership is already owned and it's not for sale.");
            }
        }
    }
    return 1;
}

CMD:selldealership(playerid, params[])
{
	new string[128];

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		{
            if(IsPlayerOwnerOfCDEx(playerid, d))
			{
                SetPVarInt(playerid, "editingcd", d);
                format(string,128,"Are you sure you want to sell this Car Dealership for $%d?\n.", CarDealershipInfo[d][cdPrice] / 2);
                ShowPlayerDialog(playerid,DIALOG_CDSELL,DIALOG_STYLE_MSGBOX,"Warning:",string,"Sell","Cancel");
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "You are not the owner of this car dealership.");
                return 1;
            }
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, "You have to be near a car dealership.");
    return 1;
}

CMD:createcdveh(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 10)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

    new string[128], price, dealershipid, modelid;
    if(sscanf(params, "ddd", price, dealershipid, modelid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /createcdveh [price] [dealership] [modelid]");

    new Float:X,Float:Y,Float:Z,Float:A;
    GetPlayerPos(playerid,X,Y,Z);
    GetPlayerFacingAngle(playerid, A);
    new cdvehicleid = CreateCarDealershipVehicle(dealershipid, modelid, X, Y, Z, A, price);
    if(cdvehicleid == -1)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "ERROR: cdVehicles limit reached.");
    }
    else
	{
        format(string, sizeof(string), " Car Dealership Vehicle created with ID %d.", cdvehicleid);
        SendClientMessageEx(playerid, COLOR_GRAD1, string);
    }
    return 1;
}

CMD:destroycdveh(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 10)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

    new string[128], vehid;
    if(sscanf(params, "d", vehid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /destroycdveh [vehicleid]");

    DestroyCarDealershipVehicle(GetCarDealershipId(vehid), GetCarDealershipVehicleId(vehid));
    SavecDealership(GetCarDealershipId(vehid));
    format(string, sizeof(string), " Car Dealership Vehicle destroyed with ID %d.", vehid);
    SendClientMessageEx(playerid, COLOR_GRAD1, string);
    return 1;
}

CMD:createdealership(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 10)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

    new string[128], price, radius, message[64];
    if(sscanf(params, "dds[64]", price, radius, message)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /createdealership [price] [radius] [message]");

    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    new dealershipid = CreateCarDealership(X, Y, Z, radius, price, message);
    if(dealershipid == -1)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Car Dealerships limit reached.");
    }
    else
	{
        format(string, sizeof(string), " Car Dealership created with ID %d.", dealershipid);
        SendClientMessageEx(playerid, COLOR_GRAD1, string);
    }
    return 1;
}

CMD:gotodealership(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 10)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

	new dealershipid;
    if(sscanf(params, "d", dealershipid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /gotodealership [dealershipid]");

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        AC_BS_SetPlayerPos(playerid, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]);
    }
    return 1;
}

CMD:destroydealership(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 10)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

    new string[128], dealershipid;
    if(sscanf(params, "d", dealershipid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /destroydealership [dealershipid]");

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		{
            DestroyCarDealership(d);
            format(string, sizeof(string), " Car Dealership destroyed with ID %d.", d);
            SendClientMessageEx(playerid, COLOR_GRAD1, string);
            return 1;
        }
    }
    if(dealershipid > MAX_CARDEALERSHIPS) return 1;
    if(dealershipid < 0) return 1;
    DestroyCarDealership(dealershipid);
    format(string, sizeof(string), " Car Dealership destroyed with ID %d.", dealershipid);
    SendClientMessageEx(playerid, COLOR_GRAD1, string);
    return 1;
}
CMD:reloadpvehicles(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 3)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

	new String[10000], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /reloadpvehicles [playerid]");

	UnloadPlayerVehicles(giveplayerid);
	LoadPlayerVehicles(giveplayerid);

	format(String, sizeof(String), " You have successfully reloaded %s's Vehicles.", GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GREY, String);

	return 1;
}

CMD:insurances(playerid, params[])
{
	if(gPlayerLogged{playerid} != 0)
 	{
  		new string [128];
  		if(GetPlayerVehicleCount(playerid) != 0)
	 	{
			for(new i; i < MAX_PLAYERVEHICLES; ++i)
	        {
				if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
				{
     				format(string, sizeof(string), "Slot: [id:%d] | Name: %s | Insurance: [{00FFFF}%d{FFFFFF}]",i,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]),PlayerVehicleInfo[playerid][i][pvInsurances]);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
			 	}
		    }
			return 1;
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Kamu tidak memiliki mobil satu pun!");
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "kamu harus login terlebih dahulu");
	}
	return 1;
}

CMD:refundveh(playerid, params[])
{
    if ((norefund) && PlayerInfo[playerid][pAdmin] < 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "Perintah untuk Refund dalam status DISABLED");
    new String[10000], giveplayerid, modelid;
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "ERROR: Player yang ingin anda refund sedang tidak online");
    if(sscanf(params, "ud", giveplayerid, modelid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /refundveh [playerid] [modelid]");
	if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611 !"); return 1; }
    new playervehicleid = GetPlayerFreeVehicleId(giveplayerid);
    if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: That player can't have more cars.");
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(giveplayerid,X,Y,Z);
    new Float:Angle;
    new rand = random(126), rand2 = random(126);
    GetPlayerFacingAngle(giveplayerid,Angle);
    new car = CreatePlayerVehicle(giveplayerid, playervehicleid, modelid, X, Y, Z, Angle, rand, rand2, 0);
    if(car == INVALID_PLAYER_VEHICLE_ID)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Something went wrong and the car didn't get created.");
    }
    else
	{
        format(String, sizeof(String), " Vehicle successfully created with ID %d.", car);
        SendClientMessageEx(playerid, COLOR_GRAD1, String);
        format(String, sizeof(String), "REFUNDCMD: %s telah merefund kendaraan %s untuk %s.", PlayerInfo[playerid][pAdminName], GetVehicleName(car), GetName(giveplayerid));
		ABroadCast(COLOR_LIGHTRED,String, 1);
    }

    format(String, sizeof(String), "%s telah merefund kendaraan %s untuk %s.", GetName(playerid), GetVehicleName(car), GetPlayerNameEx(giveplayerid));
    Log("logs/refundveh.log", String);
    return 1;
}

CMD:cpv(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 10)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

    new String[10000], giveplayerid, modelid, color1, color2;
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "ERROR: Player yang ingin anda refund sedang tidak online");
    if(sscanf(params, "uddd", giveplayerid, modelid, color1, color2)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /createpvehicle [playerid] [modelid] [color 1] [color 2]");

    if(color1 < 0 || color1 > 255) { SendClientMessageEx(playerid, COLOR_GREY, "   Color Number can't be below 0 or above 255 !"); return 1; }
    if(color2 < 0 || color2 > 255) { SendClientMessageEx(playerid, COLOR_GREY, "   Color Number can't be below 0 or above 255 !"); return 1; }
    if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611 !"); return 1; }
    new playervehicleid = GetPlayerFreeVehicleId(giveplayerid);
    if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: That player can't have more cars.");
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(giveplayerid,X,Y,Z);
    new Float:Angle;
    GetPlayerFacingAngle(giveplayerid,Angle);
    new car = CreatePlayerVehicle(giveplayerid, playervehicleid, modelid, X, Y, Z, Angle, color1, color2, 0);
    if(car == INVALID_PLAYER_VEHICLE_ID)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Something went wrong and the car didn't get created.");
    }
    else
	{
        format(String, sizeof(String), " Vehicle successfully created with ID %d.", car);
        SendClientMessageEx(playerid, COLOR_GRAD1, String);
        format(String, sizeof(String), "AdmCmd: %s Menggunakan cmd /createpvehicle.", GetName(playerid));
		ABroadCast(COLOR_LIGHTRED,String, 1);
    }

    format(String, sizeof(String), "%s has created a %s for %s (Color 1: %d | Color 2: %d).", GetName(playerid), GetVehicleName(car), GetName(giveplayerid), color1, color2);
    Log("logs/playervehicle.log", String);
    return 1;
}

CMD:ip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ip [ip]");

		new String[10000], IP[32];

		foreach(Player, i)
		{
			GetPlayerIp(i, IP, sizeof(IP));
			if(strfind(IP, params, true) != -1)
			{
				format(String, sizeof(String), "Player: %s (ID: %d) | IP: %s", GetName(i), i, IP);
				SendClientMessageEx(playerid, COLOR_WHITE, String);
			}
		}
	}
	return 1;
}

CMD:unlockveh(playerid, params[])
{
 if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new vehicleid;
		if(sscanf(params, "d", vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /unlockveh [vehicle id]");

		if(IsValidVehicleID(vehicleid))
		{
			vehicle_unlock_doors(PlayerInfo[playerid][pLockCar]);
			GameTextForPlayer(playerid, "~g~unlocked", 1000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid vehicle ID");
		}
	}
	return 1;
}
CMD:unbanip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Gunakan: /unbanip [ip]");
		if(IsValidIP(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "That is not a valid IP address!");
		new String[1024], year, month,day;
		getdate(year, month, day);
		RemoveBan(params);
		format(String, 128, "AdmCmd: %s has unbanned IP %s", PlayerInfo[playerid][pAdminName], params);
		SendClientMessageToAll(COLOR_LIGHTRED, String);
		format(String, sizeof(String), "AdmCmd: %s has unbanned IP %s (%d-%d-%d)", PlayerInfo[playerid][pAdminName], params, day, month, year);
		Log("logs/ban.log", String);
		print(String);
	}
	return 1;
}
CMD:unban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[1024];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Gunakan: /unban [playername]");

		if(doesAccountExist(params))
		{
			OnPlayerOfflineLogin(params);
			if( PlayerInfo[MAX_PLAYERS][pPermaBanned] == 3 )
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "Permanently banned accounts can only be unbanned via FTP." );
			}
			else
			{
				if( PlayerInfo[MAX_PLAYERS][pBanned] >= 1 )
				{
				    new playerIP[16];
					GetPlayerIp(MAX_PLAYERS, playerIP, sizeof(playerIP));
					format(PlayerInfo[MAX_PLAYERS][pAdminban], 128, "");
					format(PlayerInfo[MAX_PLAYERS][pBanReason], 128, "");
					format(PlayerInfo[MAX_PLAYERS][pBanExpired],150, "");
					format(PlayerInfo[MAX_PLAYERS][pBanExpired2],150, "");
					PlayerInfo[MAX_PLAYERS][pBanned] = 0;
					print("OnPlayerOfflineSave: Saving variables to file");
					OnPlayerOfflineSave(params);
					print("OnPlayerOfflineLogin: Variables saved properly");
					OnPlayerOfflineLogin(params);
					RemoveBan(playerIP);
					new year, month,day;
					getdate(year, month, day);
					format(String, sizeof(String), "AdmCmd: %s was unbanned by %s. (%d-%d-%d)", params,GetName(playerid),day,month,year);
					Log("logs/ban.log", String);
					SendClientMessageToAll(COLOR_LIGHTRED, String);
					print(String);
				}
				else
				{
					SendClientMessageEx( playerid, COLOR_WHITE, "Not a banned account!" );
				}
			}
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "That account doesn't exist." );
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
CMD:osuspend(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Gunakan: /osuspend [playername]");

	if(doesAccountExist(params))
	{
		OnPlayerOfflineLogin(params);
		if(PlayerInfo[MAX_PLAYERS][pAdmin] == 0)
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "That player is not an admin!" );
			return 1;
		}
		if(PlayerInfo[MAX_PLAYERS][pAdmin] >= 5)
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "You can not suspend high rank admin accounts!" );
			return 1;
		}
		else
		{
			if(PlayerInfo[MAX_PLAYERS][pAdmin] > 0)
			{
				PlayerInfo[MAX_PLAYERS][pAdmin] = 0;
				PlayerInfo[MAX_PLAYERS][pDisabled] = 1;
				OnPlayerOfflineSave(params);
				new year, month,day;
				getdate(year, month, day);
				format(String, sizeof(String), "{FF6347}AdmCmd: %s(IP:%s) was offline suspended by %s. (%d-%d-%d)", params, PlayerInfo[playerid][pIP], GetName(playerid),day,month,year);
				Log("logs/ban.log", String);
				format(String, 128, "{FF6347}AdmCmd: %s(IP:%s) was offline suspended by %s.", params, PlayerInfo[playerid][pIP], GetName(playerid));
				ABroadCast(COLOR_LIGHTRED,String,2);
				print(String);
			}
		}
	}
	else
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "That account doesn't exist." );
	}
	return 1;
}

CMD:destroycar(playerid, params[])
{
	new String[10000];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}
	new bool:breakingloop = false, newid = INVALID_VEHICLE_ID;
	if(IsPlayerInAnyVehicle(playerid))
	{
		for(new i=0;i<sizeof(CreatedCars);i++)
		{
			if(!breakingloop)
			{
				if(CreatedCars[i] == GetPlayerVehicleID(playerid)) // Checking for next available ID.
				{
					breakingloop = true;
					newid = i;
				}
			}
		}
		if(newid != INVALID_VEHICLE_ID)
		{
			new carid = GetPlayerVehicleID(playerid);
			DestroyVehicle(carid);
			CreatedCars[newid] = INVALID_VEHICLE_ID;
			format(String, sizeof(String), " Car %d destroyed.", carid);
			SendClientMessageEx(playerid, COLOR_GREY, String);
		}
	}
	return 1;
}

CMD:setfightstyle(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], giveplayerid, fightstyle;
		if(sscanf(params, "ud", giveplayerid, fightstyle))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setfightstyle [playerid] [fightstyle]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available fighting styles: 4, 5, 6, 7, 15, 26.");
			return 1;
		}

		if(fightstyle > 3 && fightstyle < 8 || fightstyle == 15 || fightstyle == 26)
		{
			format(String, sizeof(String), " Your fighting style has been changed to %d.", fightstyle);
			SendClientMessageEx(giveplayerid,COLOR_YELLOW,String);
			format(String, sizeof(String), " You have changed %s's fighting style to %d.", GetPlayerNameEx(giveplayerid), fightstyle);
			SendClientMessageEx(playerid,COLOR_YELLOW,String);
			SetPlayerFightingStyle(giveplayerid, fightstyle);
			PlayerInfo[playerid][pFightStyle] = fightstyle;
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:setname(playerid, params[])
{
	new String[10000], giveplayerid, name[MAX_PLAYER_NAME];
	new playername[MAX_PLAYER_NAME];
	if(sscanf(params, "us[24]", giveplayerid, name)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setname [playerid] [newname]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 10)
		{
			if(!doesAccountExist(name))
			{
				new
					newname[MAX_PLAYER_NAME + 10];

				GetPlayerName(giveplayerid, playername, sizeof(playername));
				format(newname, sizeof(newname), "users/%s.ini", name);
				format(PlayerInfo[giveplayerid][pNormalName], MAX_PLAYER_NAME, "%s", name);

				if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwner], true) == 0)
				{
					strmid(HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwner], name, 0, strlen(name), 255);
					format(String, sizeof(String), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwner],HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hLevel],PlayerInfo[giveplayerid][pPhousekey]);
					UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hTextID], COLOR_GREEN, String);
					SaveHouses();
				}

				if(PlayerInfo[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hOwner], true) == 0)
				{
					strmid(HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hOwner], name, 0, strlen(name), 255);
					format(String, sizeof(String), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hOwner],HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hLevel],PlayerInfo[giveplayerid][pPhousekey2]);
					UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hTextID], COLOR_GREEN, String);
					SaveHouses();
				}

				if(PlayerInfo[giveplayerid][pPBiskey] != 0 && strcmp(playername, BizzInfo[PlayerInfo[giveplayerid][pPBiskey]][bOwner], true) == 0)
				{
				    new b = PlayerInfo[giveplayerid][pPBiskey];
				    format( BizzInfo[PlayerInfo[giveplayerid][pPBiskey]][bOwner], MAX_PLAYER_NAME, "%s", name);
					format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s{FFFFFF}\nPemilik: {FFFF00}%s",b, BizzInfo[b][bMessage], BizzInfo[b][bOwner]);
					UpdateDynamic3DTextLabelText(business1[PlayerInfo[giveplayerid][pPBiskey]], COLOR_WHITE, String);
   					SaveBusiness(b);
				}
				if(PlayerInfo[giveplayerid][pPBiskey2] != 0 && strcmp(playername, BizzInfo[PlayerInfo[giveplayerid][pPBiskey2]][bOwner], true) == 0)
				{
				    new b = PlayerInfo[giveplayerid][pPBiskey2];
				    format( BizzInfo[PlayerInfo[giveplayerid][pPBiskey2]][bOwner], MAX_PLAYER_NAME, "%s", name);
					format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s{FFFFFF}\nPemilik: {FFFF00}%s",b, BizzInfo[b][bMessage], BizzInfo[b][bOwner]);
					UpdateDynamic3DTextLabelText(business1[PlayerInfo[giveplayerid][pPBiskey2]], COLOR_WHITE, String);
   					SaveBusiness(b);
				}
				if(PlayerInfo[giveplayerid][pWS] != 0 && strcmp(playername, WsInfo[PlayerInfo[giveplayerid][pWSid]][wsOwner], true) == 0)
				{
				    new idx = PlayerInfo[giveplayerid][pWSid];
					format(WsInfo[idx][wsOwner], MAX_PLAYER_NAME, "%s", name);
					format(String, sizeof(String), "{FF0000}%s{FFFF00}\nPemilik: {FFFFFF}%s{FFFF00}\nID: {FFFFFF}[%d]", WsInfo[idx][wsName], WsInfo[idx][wsOwner], idx);
					UpdateDynamic3DTextLabelText(WsInfo[idx][wsText], COLOR_WHITE, String);
					SaveWS(idx);
				}
				if(PlayerInfo[giveplayerid][pDonateRank] >= 1)
				{
					new String2[128];
					format(String2, sizeof(String2), "[VIP NAMECHANGES] %s has changed their name to %s.", GetPlayerNameEx(giveplayerid), name);
					Log("logs/vipnamechanges.log", String2);
				}

				format(String, sizeof(String), " Your name has been changed from %s to %s.", GetName(giveplayerid), name);
				SendClientMessageEx(giveplayerid,COLOR_YELLOW,String);
				format(String, sizeof(String), " You have changed %s's name to %s.", GetName(giveplayerid), name);
				SendClientMessageEx(playerid,COLOR_YELLOW,String);
				format(String, sizeof(String), "%s changed \"%s\"s name to \"%s\"",GetName(playerid),GetName(giveplayerid),name);
				Log("logs/stats.log", String);
				SetPlayerName(giveplayerid, name);
				OnPlayerStatsUpdate(giveplayerid);

				format(newname, sizeof(newname), "users/%s.ini", playername);
				fremove(newname);

				if(doesAccountExist(playername))  // If it doesn't get removed, blank the file with write io and check its length when a player attempts to authenticate (it'll be 0)
				{
					new File: BlankTheFile = fopen(newname, io_write);
					SendClientMessageEx(playerid, COLOR_GRAD2, "The old account couldn't be removed completely (it's been blanked for future use).");
					fclose(BlankTheFile);
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "This name is already registered.");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You aren't authorised to use this command.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "No Such Player");
	}
	return 1;
}

CMD:togreports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		switch(PlayerInfo[playerid][pTogReports])
		{
		case 0:
			{
				PlayerInfo[playerid][pTogReports] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have went into spec ops mode, you will be unable to see admin messages.");
			}
		case 1:
			{
				PlayerInfo[playerid][pTogReports] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "You are now out of spec ops mode, you will be able to see admin messages.");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You aren't authorized to use this command.");
	}
	return 1;
}

CMD:countdown(playerid, params[])
{
 if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SetTimer("Three", 1000, 0);
		SetTimer("Two", 2000, 0);
		SetTimer("One", 3000, 0);
	}
	return 1;
}

CMD:arevive(playerid, params[])
{
 if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /arevive [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(String, sizeof(String), " You have revived %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, String);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "You have been revived by an Admin.");

				KillEMSQueue(giveplayerid);
   				ClearAnimations(giveplayerid);
   				AC_BS_SetPlayerHealth(giveplayerid, 100);
   				PlayerInfo[giveplayerid][pHealth] = 100;
   				TogglePlayerControllable(giveplayerid,1);
   				SetPlayerDrunkLevel(giveplayerid, 0);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not injured!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
CMD:arwin14healnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2) {
        new string[1024], count;
        foreach(Player, i) {
            if(ProxDetectorS(12.0, playerid, i)) {
                AC_BS_SetPlayerHealth(i, 100);
                AC_BS_SetPlayerArmour(i, 100);
                PlayerInfo[playerid][pArmor] = 100.0;
                PlayerInfo[playerid][pHealth] = 100.0;
                count++;
            }
        }
        format(string, sizeof(string), "HEALNEAR: {ffffff}Admin {ff0000}%s {ffffff}have healed everyone (%d) nearby.",PlayerInfo[playerid][pAdminName], count);
        ABroadCast(COLOR_ARWIN, string, 1);
    }
    return 1;
}

CMD:forcedeath(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /forcedeath [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(String, sizeof(String), " You have forced %s to death.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, String);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "You have been forced to death by an Admin.");
				KillEMSQueue(giveplayerid);
				//ResetPlayerWeapons(giveplayerid);
				SpawnPlayer(giveplayerid);
				DeletePVar(playerid, "Injured");
				DeletePVar(giveplayerid, "HospitalTimer");
				HospitalSpawn(giveplayerid);
				DeletePVar(giveplayerid, "Hospital");
				DeletePVar(giveplayerid, "MedicBill");
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not injured!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:sendtols(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /sendtols [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			AC_BS_SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
			AC_BS_SetPlayerVirtualWorld(giveplayerid, 0);
			AC_BS_SetPlayerInterior(giveplayerid, 0);
			PlayerInfo[giveplayerid][pLocal] = 255;
			PlayerInfo[giveplayerid][pInt] = 0;
			PlayerInfo[giveplayerid][pVW] = 0;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
CMD:givegun(playerid, params[])
{
		new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid), userid, wname[10000], string[10000];
		if(sscanf(params, "u", userid))
		return SendClientMessage(playerid, COLOR_GREY, SYNTAX_MESSAGE"/givegun [playerid]");
		if(IsPlayerConnected(userid))
		{
	   	    if(IsPlayerInRangeOfPlayer(playerid, userid, 4.0) && !IsPlayerInAnyVehicle(playerid))
  			{
  			    GetPlayerWeaponData(playerid, GetWeaponSlot(weapon), weapon, ammo);
				removePlayerWeapon(playerid, weapon);
				givePlayerValidWeapon(userid, weapon, ammo);
				GetWeaponName(weapon, wname, sizeof(wname));
				format(string, sizeof(string), "hands it %s to %s", wname, GetPlayerNameEx(userid));
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 5.0, 5000);
				format(string, sizeof(string), "AME: {C2A2DA}hands it %s to %s", wname, GetPlayerNameEx(userid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "GIVE: {ffffff}You've received {ffff00}%s {ffffff}from {ffff00}%s", wname, GetPlayerNameEx(userid));
				SendClientMessage(playerid, COLOR_ARWIN, string);
				format(string, sizeof(string), "GIVE: {ffffff}You've given your {ffff00}%s {ffffff}to {ffff00}%s", wname, GetPlayerNameEx(playerid));
				SendClientMessage(userid, COLOR_ARWIN, string);
	    	}
	    	else SendClientMessage(playerid, COLOR_GREY, "You're too far away or in a vehicle.");
	    }
		else SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
	return 1;
}

CMD:oipcheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000], name[MAX_PLAYER_NAME];
	if(sscanf(params, "s", name)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /oipcheck [name]");

	if(doesAccountExist(name))
	{
		OnPlayerOfflineLogin(name);
		format(String, sizeof(String), "Name: %s | IP: %s", name,PlayerInfo[MAX_PLAYERS][pIP]);
		SendClientMessageEx(playerid, COLOR_WHITE, String);
	}
	return 1;
}

CMD:ipcheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ipcheck [playerid]");

		if(giveplayerid == INVALID_PLAYER_ID) return 1;
		if(IsPlayerConnected(giveplayerid))
		{
			new playerip[32];
			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "[ID] ID:%d | Name: %s | IP: %s", giveplayerid, GetName(giveplayerid), playerip);
			SendClientMessageEx(playerid, COLOR_WHITE, String);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:gotomapicon(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}

	new mapiconid;
	if(sscanf(params, "d", mapiconid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /gotomapicon [mapiconid]");

	if(mapiconid >= MAX_DMAPICONS || mapiconid < 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /gotomapicon [mapiconid]");
		return 1;
	}
	AC_BS_SetPlayerPos(playerid, DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ]);
	AC_BS_SetPlayerVirtualWorld(playerid, DMPInfo[mapiconid][dmpVW]);
	AC_BS_SetPlayerInterior(playerid, DMPInfo[mapiconid][dmpInt]);
	return 1;
}

CMD:serverstreamer(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}

	new String[10000], rate;
	if(sscanf(params, "d", rate)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /serverstreamer [rate] (1: Low) (2: Medium) (3: High)");

	if(rate > 3 || rate < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /serverstreamer [rate] (1: Low) (2: medium) (3: High)");
		return 1;
	}

	switch(rate)
	{
	case 1:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the streamer to Low, keep in mind this is only recommened if the player count is under 100.");
			format(String, sizeof(String), "{FF6347}AdmCmd: %s has changed the streamer to the Low Setting (Under 100 Players).",GetName(playerid));
			ABroadCast(COLOR_YELLOW, String, 1);
			SendRconCommand("onfoot_rate 40");
			SendRconCommand("incar_rate 40");
			SendRconCommand("weapon_rate 40");
			SendRconCommand("stream_distance 300.0");
			SendRconCommand("stream_rate 1000");
			Streamer_TickRate(50);
		}
	case 2:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the streamer to Medium, keep in mind this is only recommened if the player count is under 200.");
			format(String, sizeof(String), "{FF6347}AdmCmd: %s has changed the streamer to the Medium Setting (Under 200 Players).",GetName(playerid));
			ABroadCast(COLOR_YELLOW, String, 1);
			SendRconCommand("onfoot_rate 40");
			SendRconCommand("incar_rate 40");
			SendRconCommand("weapon_rate 40");
			SendRconCommand("stream_distance 250.0");
			SendRconCommand("stream_rate 1000");
			Streamer_TickRate(75);
		}
	case 3:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the streamer to High, keep in mind this is only recommened if the player count is over 200.");
			format(String, sizeof(String), "{FF6347}AdmCmd: %s has changed the streamer to the High Setting (Over 200 Players).",GetName(playerid));
			ABroadCast(COLOR_YELLOW, String, 1);
			SendRconCommand("onfoot_rate 50");
			SendRconCommand("incar_rate 50");
			SendRconCommand("weapon_rate 50");
			SendRconCommand("stream_distance 200.0");
			SendRconCommand("stream_rate 2000");
			Streamer_TickRate(100);
		}
	}
	return 1;
}

CMD:serverstats(playerid, params[])
{
	new String[10000];

	new formatmin[4];
	if(MPMinute < 10) format(formatmin,sizeof(formatmin),"0%d",MPMinute);
	else format(formatmin,sizeof(formatmin),"%d",MPMinute);
	format(String,sizeof(String),"Server Statistics - Version %s.",SERVER_GM_TEXT);
	SendClientMessageEx(playerid, COLOR_WHITE, String);
	format(String, sizeof(String), "* Objects: %d | Pickups: %d | Map icons: %d | 3D text labels: %d | TextDraws: %d | Loaded houses: %d",CountDynamicObjects(),CountDynamicPickups(),CountDynamicMapIcons(),CountDynamic3DTextLabels(),textdrawscount,MAX_HOUSES);
	SendClientMessageEx(playerid, COLOR_GREY, String);
	format(String, sizeof(String), "* Logins: %d | Connections: %d | Registrations: %d | Hackers autobanned: %d | Uptime: %d hours",TotalLogin, TotalConnect, TotalRegister, TotalAutoBan, TotalUptime);
	SendClientMessageEx(playerid, COLOR_GREY, String);
	format(String, sizeof(String), "* Players connected: %d | Peak players recorded: %d (%d/%d/%d - %d:%s) | Player vehicles loaded: %d",PlayersConnected,MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,formatmin,PlayerCars);
	SendClientMessageEx(playerid, COLOR_GREY, String);
	return 1;
}

CMD:deploycade(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13 ||
	PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7 || PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pMember] != 2)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank 3 to use this command.");
			return 1;
		}

		new String[10000], Float:BerPosition[4];
		for(new i; i<MAX_BARRICADES; i++)
		{
			if(Barricade[i] == 0)
			{
				GetPlayerPos(playerid, BerPosition[0], BerPosition[1], BerPosition[2]);
				GetPlayerFacingAngle(playerid, BerPosition[3]);
				Barricade[i] = CreateDynamicObject(981, BerPosition[0], BerPosition[1], BerPosition[2], 0.0, 0.0, BerPosition[3]+180.0, -1, -1, -1, 200.0);
				AC_BS_SetPlayerPos(playerid, BerPosition[0], BerPosition[1], BerPosition[2]+5);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(String, sizeof(String), "HQ: A barricade has been deployed by %s at %s.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessageEx(x, TEAM_BLUE_COLOR, String);
						if (PlayerInfo[x][pRank] >= 3)
						{
							SendClientMessageEx(x, COLOR_YELLOW, "You can remove a barricade by typing /destroycade.");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "All available barriers have been deployed.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not an LEO.");
	}
	return 1;
}

CMD:destroycade(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pMember] != 2)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank 3 to use this command.");
			return 1;
		}
		new String[10000], Float:BerPosition[3];
		for(new i; i<MAX_BARRICADES; i++)
		{
			GetDynamicObjectPos(Barricade[i], BerPosition[0], BerPosition[1], BerPosition[2]);

			if(IsPlayerInRangeOfPoint(playerid, 5.0, BerPosition[0], BerPosition[1], BerPosition[2]))
			{
				DestroyDynamicObject(Barricade[i]);
				Barricade[i] = 0;
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(String, sizeof(String), "HQ: A barricade has been destroyed by %s at %s.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessageEx(x, TEAM_BLUE_COLOR, String);
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You are not near any barricades.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not an LEO.");
	}
	return 1;
}

CMD:payday(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 5)
	{
		PayDay();
	}
	return 1;
}

CMD:setvip(playerid, params[]){
	if(PlayerInfo[playerid][pAdmin] >= 11){
		new giveplayerid, level, dlong;
		if(sscanf(params, "udd", giveplayerid, level, dlong)){
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setvip [playerid] [level] [day]");
			SendClientMessageEx(playerid, COLOR_GRAD3, "Available Levels: |0| None |1| Basic |2| Advanced |3| Professional |4| Lifetime");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid)){
			if(giveplayerid != INVALID_PLAYER_ID){
				if(level < 0 || level > 4){
					SendClientMessageEx(playerid, COLOR_GRAD1, "VIP Level tidak boleh di bawah 0 atau di atas 5!");
					return 1;
				}
				PlayerInfo[giveplayerid][pDonateRank] = level;
				PlayerInfo[giveplayerid][pVIPLeft] = dlong;
				PlayerInfo[giveplayerid][pVIPJoinDate] = gettime();
				PlayerInfo[giveplayerid][pTempVIP] = 0;
				PlayerInfo[giveplayerid][pBuddyInvited] = 0;
				new year, month,day,h,m,s,edate[32], slong[32], szMessage[1024];
				getdate(year, month, day);
				gettime(h,m,s);
				if (dlong < 99999) {
					strmid(edate, AddDay(day, month, year, dlong), 0, 32, 255);
					format(slong, sizeof(slong), "%d days", dlong);
				}
				else if (dlong >= 99999) {
					strmid(edate, "Permanent", 0, 32, 255);
					format(slong, sizeof(slong), "Permanent");
				}
				format(PlayerInfo[giveplayerid][pVIPExpTime], 32, "%d",h);
				strmid(PlayerInfo[giveplayerid][pVIPExpDate], edate, 0, strlen(edate), 255);
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				if(level == 0){
					if (PlayerInfo[playerid][pAdmin] < 7){
						format(szMessage, sizeof(szMessage), "AdmCmd: %s telah menghilangkan status VIP %s menjadi (%d).", GetName(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, szMessage);
     				}
					format(szMessage, sizeof(szMessage), "AdmCmd: %s telah menghilangkan status VIP %s's menjadi %d.", GetName(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,szMessage, 4);
					format(szMessage, sizeof(szMessage), "VIP anda telah di hapus oleh admin %s.", GetName(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, szMessage);

					format(szMessage, sizeof(szMessage), "AdmCmd: %s telah menghilangkan status VIP %s (%d-%d-%d)", GetName(playerid), GetPlayerNameEx(giveplayerid), day,month,year);
					Log("logs/setvip.log", szMessage);
					return 1;
				}
				if(level == 1){
					if (PlayerInfo[playerid][pAdmin] < 7)
					{
						format(szMessage, sizeof(szMessage), "AdmCmd: %s telah merubah status VIP %s menjadi Basic (%d).", GetName(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, szMessage);
					}
					format(szMessage, sizeof(szMessage), "AdmCmd: %s telah merubah status VIP %s menjadi %d-Basic(%s).", GetName(playerid), GetPlayerNameEx(giveplayerid), level, slong);
					ABroadCast(COLOR_LIGHTRED,szMessage, 4);
					format(szMessage, sizeof(szMessage), "Status VIP anda telah di set menjadi Basic hingga %s oleh admin %s.", slong, GetName(playerid));
					SendClientMessageEx(giveplayerid, COLOR_VIP, szMessage);
					format(szMessage, sizeof(szMessage), "VIP : Terima kasih atas sumbangan di Enterplay Gaming Roleplay");
					SendClientMessageEx(giveplayerid, COLOR_VIP, szMessage);
					if (dlong < 99999) {
						format(szMessage, sizeof(szMessage), "VIP : %s, VIP Basic anda akan habis pada %s.", GetPlayerNameEx(giveplayerid), edate);
						SendClientMessageEx(giveplayerid, COLOR_VIP, szMessage);
					}
					format(szMessage, sizeof(szMessage), "AdmCmd: %s telah merubah status VIP %s (IP:%s) menjadi %d-Basic(%s). (%d-%d-%d)", GetName(playerid), GetPlayerNameEx(giveplayerid), playerip, level, slong, day,month,year);
					Log("logs/setvip.log", szMessage);
					return 1;
				}
				if(level == 2){
					if (PlayerInfo[playerid][pAdmin] < 7)
					{
						format(szMessage, sizeof(szMessage), "AdmCmd: %s telah merubah status VIP %s menjadi Advanced (%d).", GetName(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, szMessage);
					}
					format(szMessage, sizeof(szMessage), "AdmCmd: %s telah merubah status VIP %s menjadi %d-Advanced(%s).", GetName(playerid), GetPlayerNameEx(giveplayerid), level, slong);
					ABroadCast(COLOR_LIGHTRED,szMessage, 4);
					format(szMessage, sizeof(szMessage), "Status VIP anda telah di set menjadi Advanced hingga %s oleh admin %s.", slong, GetName(playerid));
					SendClientMessageEx(giveplayerid, COLOR_VIP, szMessage);
					format(szMessage, sizeof(szMessage), "VIP : Terima kasih atas sumbangan di Enterplay Gaming Roleplay");
					SendClientMessageEx(giveplayerid, COLOR_VIP, szMessage);
					if (dlong < 99999) {
						format(szMessage, sizeof(szMessage), "VIP : %s, VIP Advanced anda akan habis pada %s.", GetPlayerNameEx(giveplayerid), edate);
						SendClientMessageEx(giveplayerid, COLOR_VIP, szMessage);
					}

					format(szMessage, sizeof(szMessage), "AdmCmd: %s telah merubah status VIP %s (IP:%s) menjadi %d-Advanced(%s). (%d-%d-%d)", GetName(playerid), GetPlayerNameEx(giveplayerid), playerip, level, slong, day,month,year);
					Log("logs/setvip.log", szMessage);
					return 1;
				}
				if(level == 3){
					if (PlayerInfo[playerid][pAdmin] < 7)
					{
						format(szMessage, sizeof(szMessage), "AdmCmd: %s telah merubah status VIP %s menjadi Professional (%d).", GetName(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, szMessage);
					}
					format(szMessage, sizeof(szMessage), "AdmCmd: %s telah merubah status VIP %s menjadi %d-Professional(%s).", GetName(playerid), GetPlayerNameEx(giveplayerid), level, slong);
					ABroadCast(COLOR_LIGHTRED,szMessage, 4);
					format(szMessage, sizeof(szMessage), "Status VIP anda telah di set menjadi Professional hingga %s oleh admin %s.", slong, GetName(playerid));
					SendClientMessageEx(giveplayerid, COLOR_VIP, szMessage);
					format(szMessage, sizeof(szMessage), "VIP : Terima kasih atas sumbangan di Enterplay Gaming Roleplay");
					SendClientMessageEx(giveplayerid, COLOR_VIP, szMessage);
					if (dlong < 99999) {
						format(szMessage, sizeof(szMessage), "VIP : %s, VIP Professional anda akan habis pada %s.", GetPlayerNameEx(giveplayerid), edate);
						SendClientMessageEx(giveplayerid, COLOR_VIP, szMessage);
					}

					format(szMessage, sizeof(szMessage), "AdmCmd: %s telah merubah status VIP %s (IP:%s) menjadi %d-Professional(%s). (%d-%d-%d)", GetName(playerid), GetPlayerNameEx(giveplayerid), playerip, level, slong, day,month,year);
					Log("logs/setvip.log", szMessage);
					return 1;
				}
				if(level == 4){
					if (PlayerInfo[playerid][pAdmin] < 7)
					{
						format(szMessage, sizeof(szMessage), "AdmCmd: %s telah merubah status VIP %s menjadi Lifetime (%d).", GetName(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, szMessage);
					}
					format(szMessage, sizeof(szMessage), "AdmCmd: %s telah merubah status VIP %s menjadi %d-Lifetime(%s).", GetName(playerid), GetPlayerNameEx(giveplayerid), level, slong);
					ABroadCast(COLOR_LIGHTRED,szMessage, 4);
					format(szMessage, sizeof(szMessage), "Status VIP anda telah di set menjadi Lifetime hingga %s oleh admin %s.", slong, GetName(playerid));
					SendClientMessageEx(giveplayerid, COLOR_VIP, szMessage);
					format(szMessage, sizeof(szMessage), "VIP : Terima kasih atas sumbangan di Enterplay Gaming Roleplay");
					SendClientMessageEx(giveplayerid, COLOR_VIP, szMessage);
					if (dlong < 99999) {
						format(szMessage, sizeof(szMessage), "VIP : %s, VIP Lifetime anda akan habis pada %s.", GetPlayerNameEx(giveplayerid), edate);
						SendClientMessageEx(giveplayerid, COLOR_VIP, szMessage);
					}
					// Level 5 Arms Job - Lifetime Donator

					format(szMessage, sizeof(szMessage), "AdmCmd: %s telah merubah status VIP %s (IP:%s) menjadi %d-Lifetime(%s). (%d-%d-%d)", GetName(playerid), GetPlayerNameEx(giveplayerid), playerip, level, slong, day,month,year);
					Log("logs/setvip.log", szMessage);
					return 1;
				}
			}
		}
	}
 	else{
	 ShowDescriptionText(playerid, "Anda ~r~tidak berhak ~w~menggunakan command ini!", 3000);
	}
	return 1;
}

CMD:ofine(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], name[MAX_PLAYER_NAME], amount, reason[64];
		if(sscanf(params, "s[24]ds[64]", name, amount, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ofine [name] [amount] [reason]");

		if(doesAccountExist(name))
		{
			OnPlayerOfflineLogin(name);
			if( PlayerInfo[MAX_PLAYERS][pPermaBanned] == 3 )
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "That player is already permabanned!" );
				return 1;
			}
			if( PlayerInfo[MAX_PLAYERS][pAdmin] >= 1 )
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "You can not fine admin accounts!" );
				return 1;
			}
			if (amount < 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "Amount must be greater than 0");
				return 1;
			}

			new year, month,day;
			getdate(year, month, day);
			format(String, sizeof(String), "{FF6347}AdmCmd: %s was offline fined %s by %s, reason: %s(%d-%d-%d)", name, FormatMoney(amount), GetName(playerid), reason, day, month, year);
			Log("logs/admin.log", String);
			format(String, sizeof(String), "{FF6347}AdmCmd: %s was offline fined %s by %s, reason: %s", name, FormatMoney(amount), GetName(playerid), reason);
			ABroadCast(COLOR_LIGHTRED,String,2);
			PlayerInfo[MAX_PLAYERS][pCash] -= amount;
			OnPlayerOfflineSave(name);
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "That account does not exist!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not a level three admin.");
	}
	return 1;
}

CMD:givetoys(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new String[10000], giveplayerid, object, slot;
		if(sscanf(params, "udd", giveplayerid, object, slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /giveobject [playerid] [object] [slot]");

		if(slot < 0 || slot > 5) return SendClientMessageEx(playerid, COLOR_WHITE, "* Invalid slot, must be between 0 and 5");

			if (IsPlayerConnected(giveplayerid))
			{
				PlayerToyInfo[giveplayerid][slot][ptModelID] = object;
				PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
				format(String, sizeof(String), "You have given %s object %d in slot %d", GetPlayerNameEx(giveplayerid), object, slot);
				SendClientMessageEx(playerid, COLOR_YELLOW, String);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "You have received a new /toys from an administrator!");
			}
	}
	return 1;
}
CMD:check(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /check [playerid]");
		if(IsPlayerConnected(giveplayerid))
		{
			ShowStats(playerid,giveplayerid);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not an administrator.");
	}
	return 1;
}
//STOREVEH TEST
CMD:takeveh(playerid, params[])
{
	if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hGaragePos][0], HouseInfo[PlayerInfo[playerid][pPhousekey]][hGaragePos][1], HouseInfo[PlayerInfo[playerid][pPhousekey]][hGaragePos][2])))
 	{
		new vstring[1024];
		for(new i; i < MAX_PLAYERVEHICLES; ++i)
		{
			if(PlayerVehicleInfo[playerid][i][pvStored])
			{
				format(vstring, sizeof(vstring), "%s\n%s (Stored)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
			else format(vstring, sizeof(vstring), "%s\nNone", vstring);
		}
		ShowPlayerDialog(playerid, TAKEVEH, DIALOG_STYLE_LIST, "Vehicles", vstring, "Take", "Cancel");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not at House Exterior.");
	return 1;
}

CMD:storeveh(playerid, params[])
{
	if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hGaragePos][0], HouseInfo[PlayerInfo[playerid][pPhousekey]][hGaragePos][1], HouseInfo[PlayerInfo[playerid][pPhousekey]][hGaragePos][2])))
	{
		new	iVehType, iVehIndex;
		foreach(Player, i)
		{
			iVehIndex = GetPlayerVehicle(i, GetPlayerVehicleID(playerid));
			if(iVehIndex != -1)
			{
				iVehType = 1;
				break;
			}
		}
		if(!iVehType)
		{
			for(new i; i < MAX_FAMILY; ++i)
			{
				iVehIndex = GetGangVehicle(i, GetPlayerVehicleID(playerid));
				if(iVehIndex != -1)
				{
					iVehType = 2;
					break;
				}
			}
		}
	    switch(iVehType)
		{
			case 0, 2:
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "The impound administration could not find any registration on the vehicle and has returned it.");
				SetVehiclePos(GetPlayerVehicleID(playerid), 0, 0, 0); // Attempted desync fix
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			}
			case 1:
			{
			    for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++)
        		{
		            DestroyDynamicObject(PlayerVehicleInfo[playerid][iVehIndex][pvToy][vt]);
		            DestroyDynamicObject(PlayerVehicleInfo[playerid][iVehIndex][pvNeonObj]);
					DestroyDynamicObject(PlayerVehicleInfo[playerid][iVehIndex][pvNeonObj2]);
					DestroyDynamicObject(PlayerVehicleInfo[playerid][iVehIndex][pvNeonObj3]);
					DestroyDynamicObject(PlayerVehicleInfo[playerid][iVehIndex][pvNeonObj4]);
					PlayerVehicleInfo[playerid][iVehIndex][pvStored] = 1;
					PlayerVehicleInfo[playerid][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
					SetVehiclePos(GetPlayerVehicleID(playerid), 0, 0, 0); // Attempted desync fix
					LinkVehicleToInterior(GetPlayerVehicleID(playerid), 99);
					SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 99);
					DestroyVehicle(GetPlayerVehicleID(playerid));
					--PlayerCars;
					new szMessage[10900];
					format(szMessage, sizeof(szMessage), "STOREVEH: {FFFFFF}Your {FFFF00}%s {FFFFFF}has been stored. You may release it with {FFFF00}'/takeveh'.", VehicleName[PlayerVehicleInfo[playerid][iVehIndex][pvModelId] - 400]);
					SendClientMessageEx(playerid, COLOR_ARWIN, szMessage);
					return 1;
				}
			}
		}
	}
	return 1;
}
CMD:hdeposit(playerid, params[])
{
	new String[10000], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hdeposit [cash,materials,pot,crack] [amount]");
		return 1;
	}

	if( GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey]+6000 )
	{
		if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID)
		{
			if(strcmp(choice, "Cash", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't deposit less than one.");
					return 1;
				}
				if( GetPVarInt(playerid, "Cash") >= amount )
				{
				    if(amount + HouseInfo[PlayerInfo[playerid][pPhousekey]][hSafeMoney] > 100000) return SendClientMessage(playerid, -1, "ERROR: Rumah tidak bisa menampung lebih dari $1,000.00");
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hSafeMoney]+=amount;
					SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-amount);
					format(String, sizeof(String), "You have deposited %s in your house safe.", FormatMoney(amount));
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(String,sizeof(String),"%s (IP: %s) has deposited %s into their house (house ID %d).",GetName(playerid),ip,FormatMoney(amount),PlayerInfo[playerid][pPhousekey]);
					Log("logs/house.log", String);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough money to deposit.");
				}
			}
			else if(strcmp(choice, "Pot", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't deposit less than one.");
					return 1;
				}
				if( PlayerInfo[playerid][pPot] >= amount )
				{
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hPot]+=amount;
					PlayerInfo[playerid][pPot] -= amount;
					format(String, sizeof(String), "You have deposited %d grams of pot in your house safe.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(String,sizeof(String),"%s (IP: %s) has deposited %d grams of pot into their house (house ID %d).",GetName(playerid),ip,amount,PlayerInfo[playerid][pPhousekey]);
					Log("logs/house.log", String);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough pot to deposit.");
				}
			}
			else if(strcmp(choice, "Materials", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't deposit less than one.");
					return 1;
				}
				if( PlayerInfo[playerid][pMats] >= amount )
				{
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hMaterials]+=amount;
					PlayerInfo[playerid][pMats] -= amount;
					format(String, sizeof(String), "You have deposited %d materials in your house safe.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(String,sizeof(String),"%s (IP: %s) has deposited %d materials into their house (house ID %d).",GetName(playerid),ip,amount,PlayerInfo[playerid][pPhousekey]);
					Log("logs/house.log", String);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough materials to deposit.");
				}
			}
			else if(strcmp(choice, "Crack", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't deposit less than one.");
					return 1;
				}
				if( PlayerInfo[playerid][pCrack] >= amount )
				{
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hCrack]+=amount;
					PlayerInfo[playerid][pCrack] -= amount;
					format(String, sizeof(String), "You have deposited %d grams of crack in your house safe.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(String,sizeof(String),"%s (IP: %s) has deposited %d grams of crack into their house (house ID %d).",GetName(playerid),ip,amount,PlayerInfo[playerid][pPhousekey]);
					Log("logs/house.log", String);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough crack to deposit.");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hdeposit [name] [amount]");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: Cash, Pot, Crack, Materials");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not in any house");
	}
	return 1;
}

CMD:hbalance(playerid, params[])
{
	if( GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey]+6000 )
	{
		if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID)
		{
			new weaponsinlocker;
			for(new s; s < 3; ++s)
			{
				if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][s] != 0)
				{
					weaponsinlocker++;
				}
			}
			new String[80];
			format(String, sizeof(String), "Gunlocker(s): %d/3 | Cash: %s | Pot: %d | Crack: %d | Materials: %d", weaponsinlocker, FormatMoney(HouseInfo[PlayerInfo[playerid][pPhousekey]][hSafeMoney]), HouseInfo[PlayerInfo[playerid][pPhousekey]][hPot], HouseInfo[PlayerInfo[playerid][pPhousekey]][hCrack], HouseInfo[PlayerInfo[playerid][pPhousekey]][hMaterials]);
			SendClientMessageEx(playerid, COLOR_WHITE, String);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not inside a house you own.");
	}
	return 1;
}

CMD:trunkput(playerid, params[])
{
	foreach(Player, i)
	{
		for(new veh; veh <MAX_PLAYERVEHICLES; veh++)
		{
			if(IsPlayerInRangeOfVehicle(playerid, 5.0))
			{
                new amount, string[1401], wname[32], senjata, peluru, weapon = GetPlayerWeapon(playerid);
				GetPlayerWeaponData(playerid, GetWeaponSlot(weapon), senjata, peluru);
				GetWeaponName(weapon, wname, sizeof(wname));
                if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /trunkput [slot]");
                new engine,lights,alarm,doors,bonnet,boot,objective;
				GetVehicleParamsEx(PlayerVehicleInfo[i][veh][pvId],engine,lights,alarm,doors,bonnet,boot,objective);
				if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessageEx(playerid, COLOR_GRAD3, "You can't take/put stuff inside the trunk if it's closed!(/car trunk to open it)");
				if(amount >= 1 && amount <= 3)
				{
					switch(amount)
					{
						case 1:
						{
							PlayerVehicleInfo[i][veh][pvWeapons][0] = weapon;
							PlayerVehicleInfo[i][veh][pvWeaponsAmmo][0] = peluru;
						}
						case 2:
						{
							PlayerVehicleInfo[i][veh][pvWeapons][1] = weapon;
							PlayerVehicleInfo[i][veh][pvWeaponsAmmo][1] = peluru;
						}
						case 3:
						{
							PlayerVehicleInfo[i][veh][pvWeapons][2] = weapon;
							PlayerVehicleInfo[i][veh][pvWeaponsAmmo][2] = peluru;
						}
					}
					removePlayerWeapon(playerid, weapon);
					format(string, sizeof(string), "VEHICLEINFO: {FFFFFF}You've stored %s to the trunk [slot:%d].", wname, amount);
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else return ShowDescriptionText(playerid, "Invalid slot, available slot 1-3");
			}
			else return ShowDescriptionText(playerid, "Kamu tidak berada dekat dengan kendaraan");
		}
	}
	return 1;
}

CMD:trunktake(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while you're inside a vehicle.");
	}
	else if(PlayerInfo[playerid][pConnectTime] < 2 || PlayerInfo[playerid][pWRestricted] > 0)
	{
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
	}
	new	szMessage[1401], szWeapon[16], iWeaponSlot = strval(params);
	foreach(Player, i)
	{
		for(new d; d < MAX_PLAYERVEHICLES; ++d)
		{
			if(PlayerVehicleInfo[i][d][pvId] != INVALID_PLAYER_VEHICLE_ID)
			{
				if(IsPlayerInRangeOfVehicle(playerid, 5.0))
				{
					if(isnull(params))
					{
						format(szMessage, sizeof(szMessage), "*** %s's %s Safe ***", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[i][d][pvId]));
						SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
						for(new s = 0; s < 3; s++) if(PlayerVehicleInfo[i][d][pvWeapons][s] != 0)
						{
							GetWeaponName(PlayerVehicleInfo[i][d][pvWeapons][s], szWeapon, sizeof(szWeapon));
							format(szMessage, sizeof(szMessage), "Slot %d: %s", s, szWeapon);
							SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
						}
						return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /trunktake [slot]");
					}
					else if(GetVehicleModel(PlayerVehicleInfo[i][d][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[i][d][pvId]) == 509)
					{
						return SendClientMessageEx(playerid,COLOR_GREY,"That vehicle doesn't have a trunk.");
	  				}
	    			new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(PlayerVehicleInfo[i][d][pvId], engine, lights, alarm, doors, bonnet, boot, objective);
					if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
					{
						return SendClientMessageEx(playerid, COLOR_GRAD3, "You can't take weapons from the trunk if it's closed! /car trunk to open it.");
					}
					if(PlayerVehicleInfo[i][d][pvWeapons][iWeaponSlot] != 0)
					{
						GetWeaponName(PlayerVehicleInfo[i][d][pvWeapons][iWeaponSlot], szWeapon, sizeof(szWeapon));
						givePlayerValidWeapon(playerid, PlayerVehicleInfo[i][d][pvWeapons][iWeaponSlot], PlayerVehicleInfo[i][d][pvWeaponsAmmo][iWeaponSlot]);
						PlayerVehicleInfo[i][d][pvWeapons][iWeaponSlot] = 0;
						PlayerVehicleInfo[i][d][pvWeaponsAmmo][iWeaponSlot] = 0;

						format(szMessage, sizeof(szMessage), "VEHICLEINFO: {FFFFFF}You've withdrawn a %s from your car gun locker.", szWeapon);
						SendClientMessageEx(playerid, COLOR_ARWIN, szMessage);
					}
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
				}
			}
		}
		return SendClientMessageEx(playerid,COLOR_GREY,"Anda tidak deket dengan kendraan yang ingin dibuka.");
	}
	return 1;
}

CMD:storegun(playerid, params[])
{
	if( GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey]+6000 )
	{
		if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID)
		{
  			new amount, string[1401], wname[32], senjata, peluru, weapon = GetPlayerWeapon(playerid);
  			GetPlayerWeaponData(playerid, GetWeaponSlot(weapon), senjata, peluru);
  			GetWeaponName(weapon, wname, sizeof(wname));
            if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /storegun [slot]");
	 		if(amount >= 1 && amount <= 3)
			{
				switch(weapon)
				{
					case 16, 18, 35, 36, 37, 38, 39, 40, 44, 45, 46, 0: SendClientMessage(playerid, COLOR_GREY, "Invalid weapon.");
					default:
					{
						switch(amount)
						{
							case 1:
							{
								HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][1] = weapon;
								HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeaponsAmmo][1] = peluru;
							}
							case 2:
							{
								HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][2] = weapon;
								HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeaponsAmmo][2] = peluru;
							}
							case 3:
							{
								HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][3] = weapon;
								HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeaponsAmmo][3] = peluru;
							}
						}
						removePlayerWeapon(playerid, weapon);
						format(string, sizeof(string), "HOUSEINFO: You've stored %s to house locker [slot:%d].", wname, amount);
						SendClientMessage(playerid, COLOR_ARWIN, string);
					}
				}
			}
		}
	}
	return 1;
}

CMD:getgun(playerid, params[])
{
	new String[10000], weaponname[50], slot;
	if( GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey]+6000 )
	{
		if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID)
		{
			if(sscanf(params, "d", slot))
			{
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				format(String, sizeof(String), "*** %s's Safe ***", GetPlayerNameEx(playerid));
		   		SendClientMessageEx(playerid, COLOR_WHITE, String);
				for(new s; s < 4; ++s)
				{
					if( HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][s] != 0 )
					{
						GetWeaponName(HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][s], weaponname, sizeof(weaponname));
						format(String, sizeof(String), "Slot %d: %s", s, weaponname);
						SendClientMessageEx(playerid, COLOR_WHITE, String);
					}
				}
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /getgun [slot]");
				return 1;
			}
			if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][slot] != 0)
			{
				GetWeaponName(HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][slot], weaponname, sizeof(weaponname));
				givePlayerValidWeapon(playerid, HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][slot], HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeaponsAmmo][slot]);
				HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][slot] = 0;
				HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeaponsAmmo][slot] = 0;
				format(String, sizeof(String), "HOUSEINFO: {FFFFFF}You've withdrawn a %s from your house gun locker.", weaponname);
				SendClientMessageEx(playerid, COLOR_WHITE, String);
				SaveHouses();
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
				return 1;
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not in any house");
	}
	return 1;
}

CMD:hwithdraw(playerid, params[])
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));

	new String[10000], amount, choice[32];

	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hwithdraw [name] [amount]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: Cash, Pot, Crack, Materials");
		return 1;
	}

	if( GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey]+6000 )
	{
		if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(strcmp(choice, "Cash", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if( HouseInfo[PlayerInfo[playerid][pPhousekey]][hSafeMoney] >= amount )
				{
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hSafeMoney]-=amount;
					SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+amount);
					format(String, sizeof(String), "You have withdrawn %s from your house money safe.", FormatMoney(amount));
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(String,sizeof(String),"%s (IP: %s) has withdrawn %s from their house (house ID %d).",GetName(playerid),ip,FormatMoney(amount),PlayerInfo[playerid][pPhousekey]);
					Log("logs/house.log", String);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough money to withdraw.");
				}
			}
			else if(strcmp(choice, "Pot", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if( HouseInfo[PlayerInfo[playerid][pPhousekey]][hPot] >= amount)
				{
					if(PlayerInfo[playerid][pPot] > 50)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You already have 50 grams of pot.");
						return 1;
					}
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hPot]-=amount;
					PlayerInfo[playerid][pPot] += amount;
					format(String, sizeof(String), "You have withdrawn %d grams of pot from your house safe.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(String,sizeof(String),"%s (IP: %s) has withdrawn %d grams of pot from their house (house ID %d).",GetName(playerid),ip,amount,PlayerInfo[playerid][pPhousekey]);
					Log("logs/house.log", String);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough pot to withdraw.");
				}
			}
			else if(strcmp(choice, "Materials", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if( HouseInfo[PlayerInfo[playerid][pPhousekey]][hMaterials] >= amount )
				{
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hMaterials]-=amount;
					PlayerInfo[playerid][pMats] += amount;
					format(String, sizeof(String), "You have withdrawn %d materials from your house safe.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(String,sizeof(String),"%s (IP: %s) has withdrawn %d materials from their house (house ID %d).",GetName(playerid),ip,amount,PlayerInfo[playerid][pPhousekey]);
					Log("logs/house.log", String);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough materials to withdraw.");
				}
			}
			else if(strcmp(choice, "Crack", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if( HouseInfo[PlayerInfo[playerid][pPhousekey]][hCrack] >= amount )
				{
					if(PlayerInfo[playerid][pCrack] > 25)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You already have 25 grams of crack.");
						return 1;
					}
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hCrack]-=amount;
					PlayerInfo[playerid][pCrack] += amount;
					format(String, sizeof(String), "You have withdrawn %d grams of crack from your house safe.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(String,sizeof(String),"%s (IP: %s) has withdrawn %d grams of crack from their house (house ID %d).",GetName(playerid),ip,amount,PlayerInfo[playerid][pPhousekey]);
					Log("logs/house.log", String);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough crack to withdraw.");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hwithdraw [name] [amount]");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: Cash, Pot, Crack, Materials");
			}
		}
	}


	else if( GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey2]+6000 )
	{
		if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwner], true) == 0)
		{
			if(strcmp(choice, "Cash", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if( HouseInfo[PlayerInfo[playerid][pPhousekey2]][hSafeMoney] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pPhousekey2]][hSafeMoney]-=amount;
					SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+amount);
					format(String, sizeof(String), "You have withdrawn %s from your house money safe.", FormatMoney(amount));
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(String,sizeof(String),"%s (IP: %s) has withdrawn %s from their house (house ID %d).",GetName(playerid),ip,FormatMoney(amount),PlayerInfo[playerid][pPhousekey2]);
					Log("logs/house.log", String);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough money to withdraw.");
				}
			}
			else if(strcmp(choice, "Pot", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if( HouseInfo[PlayerInfo[playerid][pPhousekey2]][hPot] >= amount )
				{
					if(PlayerInfo[playerid][pPot] > 50)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You already have 50 grams of pot.");
						return 1;
					}
					HouseInfo[PlayerInfo[playerid][pPhousekey2]][hPot]-=amount;
					PlayerInfo[playerid][pPot] += amount;
					format(String, sizeof(String), "You have withdrawn %d grams of pot from your house safe.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(String,sizeof(String),"%s (IP: %s) has withdrawn %d grams of pot from their house (house ID %d).",GetName(playerid),ip,amount,PlayerInfo[playerid][pPhousekey2]);
					Log("logs/house.log", String);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough pot to withdraw.");
				}
			}
			else if(strcmp(choice, "Materials", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if( HouseInfo[PlayerInfo[playerid][pPhousekey2]][hMaterials] >= amount )
				{
					HouseInfo[PlayerInfo[playerid][pPhousekey2]][hMaterials]-=amount;
					PlayerInfo[playerid][pMats] += amount;
					format(String, sizeof(String), "You have withdrawn %d materials from your house safe.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(String,sizeof(String),"%s (IP: %s) has withdrawn %d materials from their house (house ID %d).",GetName(playerid),ip,amount,PlayerInfo[playerid][pPhousekey2]);
					Log("logs/house.log", String);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough materials to withdraw.");
				}
			}
			else if(strcmp(choice, "Crack", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if( HouseInfo[PlayerInfo[playerid][pPhousekey2]][hCrack] >= amount )
				{
					if(PlayerInfo[playerid][pCrack] > 25)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You already have 25 grams of crack.");
						return 1;
					}
					HouseInfo[PlayerInfo[playerid][pPhousekey2]][hCrack]-=amount;
					PlayerInfo[playerid][pCrack] += amount;
					format(String, sizeof(String), "You have withdrawn %d grams of crack from your house safe.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(String,sizeof(String),"%s (IP: %s) has withdrawn %d grams of crack from their house (house ID %d).",GetName(playerid),ip,amount,PlayerInfo[playerid][pPhousekey2]);
					Log("logs/house.log", String);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough crack to withdraw.");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hwithdraw [name] [amount]");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: Cash, Pot, Crack, Materials");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not in any house");
		return 1;
	}
	return 1;
}
CMD:buyvtext(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] >= 1)
	{
	    new v, vt;
	    if(sscanf(params, "ii", v, vt)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /buyvtext [Slot Vehicle 0-4] [Slot Toys 0-9]");
	    if(v > 4 || v < 0) return SendClientMessage(playerid, COLOR_GREY, "Vehicle Slot 0-4");
	    if(vt > 9 || vt < 0) return SendClientMessage(playerid, COLOR_GREY, "Toy Slot 0-9");
		if(PlayerVehicleInfo[playerid][v][pvToyID][vt] != 0) return SendClientMessage(playerid, COLOR_GREY, "Slot tersebut sudah terisi");
		PlayerVehicleInfo[playerid][v][pvToyID][vt] = 18659;
		PlayerVehicleInfo[playerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[playerid][v][pvToyID][vt], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt], 10);
		if(vt == 0)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText1], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText1],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID1]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize1], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol1]], 0, 0);
		}
		if(vt == 1)
 		{
			format(PlayerVehicleInfo[playerid][v][pvToyText2], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText2],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID2]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize2], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol2]], 0, 0);
		}
		if(vt == 2)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText3], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText3],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID3]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize3], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol3]], 0, 0);
		}
		if(vt == 3)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText4], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText4],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID4]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize4], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol4]], 0, 0);
		}
		if(vt == 4)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText5], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText5],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID5]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize5], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol5]], 0, 0);
		}
		if(vt == 5)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText6], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText6],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID6]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize6], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol6]], 0, 0);
		}
		if(vt == 6)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText7], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText7],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID7]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize7], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol7]], 0, 0);
		}
		if(vt == 7)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText8], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText8],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID8]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize8], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol8]], 0, 0);
		}
		if(vt == 8)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText9], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText9],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID9]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize9], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol9]], 0, 0);
		}
		if(vt == 9)
		{
			format(PlayerVehicleInfo[playerid][v][pvToyText10], 128, "Wining Kulsum");
			SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText10],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID10]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize10], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol10]], 0, 0);
		}
		AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);
	}
	return 1;
}
CMD:buyvtoys(playerid, params[])
{
					new vstring[10000];
					if(PlayerInfo[playerid][pDonateRank] >= 1)
					{
	    				for(new a = 1; a < sizeof(Mod); a++)
						{
							if(IsPlayerInRangeOfPoint(playerid, 10.0, Mod[a][mPosX], Mod[a][mPosY], Mod[a][mPosZ]))
								{
									new engine,lights,alarm,doors,bonnet,boot,objective;
									GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
									if(engine == VEHICLE_PARAMS_ON)
									{
										SendClientMessageEx(playerid, COLOR_GRAD1, "Mesin kendaraan harus mati terlebih dahulu.");
										return 1;
									}
									for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++)
									{
										if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0)
										{
											if(PlayerVehicleInfo[playerid][i][pvImpounded])
											{
												format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[iModelID]);
											}
											else if(PlayerVehicleInfo[playerid][i][pvDestroyed])
											{
												format(vstring, sizeof(vstring), "%s\n%s (destroyed)", vstring, VehicleName[iModelID]);
											}
											else if(PlayerVehicleInfo[playerid][i][pvStored])
											{
												format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[iModelID]);
											}
											else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[iModelID]);
										}
									}
									ShowPlayerDialog(playerid, BUYVTOYS4, DIALOG_STYLE_LIST, "Pilih Kendaraan untuk dipasang Mod", vstring, "Pilih", "Engga");
								}
						}
					}
					return 1;
}
CMD:ad(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] >= 1)
	{
		if(PlayerInfo[playerid][pPnumber] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Anda tidak memiliki HandPhone.");
			return 1;
		}
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: (/ad)vertise [advert text]");
			return 1;
		}
		if(GetPlayerCash(playerid) < 250)
		{
			SendClientMessageEx(playerid, COLOR_YELLOW, "uang anda kurang untuk membuat iklan");
			return 1;
		}
		GivePlayerCash(playerid, - 250);
		SetTimerEx("advertisement", 50000, 0, "i", playerid);
		format(advertise[playerid], 1024, "%s", params);
		SendClientMessage(playerid, COLOR_ARWIN, "ADVERTISEMENT: {FFFFFF}Your advertisement will be published shortly.");
	}
	else
	{
	    if(PlayerInfo[playerid][pPnumber] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Anda tidak memiliki HandPhone.");
			return 1;
		}
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: (/ad)vertise [advert text]");
			return 1;
		}
		if(GetPlayerCash(playerid) < 500)
		{
			SendClientMessageEx(playerid, COLOR_YELLOW, "uang anda kurang untuk membuat iklan");
			return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 234.9485,164.9973,1003.0300))
		{
			GivePlayerCash(playerid, - 500);
			SetTimerEx("advertisement", 100000, 0, "i", playerid);
			format(advertise[playerid], 1024, "%s", params);
			SendClientMessage(playerid, COLOR_ARWIN, "ADVERTISEMENT: {FFFFFF}Your advertisement will be published shortly.");
		}
		else return SendClientMessage(playerid, COLOR_ARWIN, "ADVERTISEMENT: {ffffff}Anda harus berada di 'Advertisement Agency' untuk membuat iklan.");
	}
	return 1;
}

CMD:gov(playerid, params[])
{
	if(IsInLSMD(playerid) || IsACop(playerid) || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pRank] == 10))
	{
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: (/gov)ernment [text]");
			return 1;
		}

		new String[10000];

		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		{
			if(PlayerInfo[playerid][pRank] == 10)
			{
				format(String, sizeof(String), "Chief Of Police %s: %s", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, String);
			}
			else if(PlayerInfo[playerid][pRank] == 9)
			{
				format(String, sizeof(String), "Deputy Of Chief %s: %s", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, String);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Anda Harus Berpangkat 9 atau 10 untuk bisa menggunakannya!");
			}
		}
		else if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
			if(PlayerInfo[playerid][pRank] == 10)
			{
				format(String, sizeof(String), "Chief Of Medic %s: %s", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, String);
			}
			else if(PlayerInfo[playerid][pRank] == 9)
			{
				format(String, sizeof(String), "Deputy Of Chief %s: %s", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, String);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Anda Harus Berpangkat 9 atau 10 untuk bisa menggunakannya!");
			}
		}
		else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
		{
			if(PlayerInfo[playerid][pRank] == 10)
			{
				format(String, sizeof(String), "Warden %s: %s", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, String);
			}
			else if(PlayerInfo[playerid][pRank] == 9)
			{
				format(String, sizeof(String), "Deputy Warden %s: %s", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, String);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Anda Harus Berpangkat 9 atau 10 untuk bisa menggunakannya!");
			}
		}
	}
	return 1;
}

CMD:showbadge(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] >= 1 || PlayerInfo[playerid][pLeader] >= 1)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "ud", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /showbadge [playerid]");

		if(giveplayerid != INVALID_PLAYER_ID) {
			if(ProxDetectorS(5.0, playerid, giveplayerid)) {
				switch(PlayerInfo[playerid][pMember]) {
				case 1 .. 4, 5, 6, 7, 11, 12, 13: {

						new
						infoArrays[3][64];

						GetPlayerFactionInfo(playerid, infoArrays[0], infoArrays[1], infoArrays[2]);

						SendClientMessageEx(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(String, sizeof(String), "%s %s is a duly sworn member of the %s.", infoArrays[0], GetPlayerNameEx(playerid), infoArrays[2]);
						SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
						format(String, sizeof(String), "Current Assignment: %s.", infoArrays[1]);
						SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
						if(PlayerInfo[playerid][pMember] != 6 && PlayerInfo[playerid][pMember] != 12) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Official has the authority to arrest.");
						else if(PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 2) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Official has the authority to arrest.");
						else SendClientMessageEx(giveplayerid, COLOR_WHITE, "Official has the authority to assist in arrests.");
						SendClientMessageEx(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
					}
				default: SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a civil service faction.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a civil service faction.");
	}
	return 1;
}

CMD:m(playerid, params[])
{
	new String[10000];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/m)egaphone [megaphone chat]");
	if(PlayerInfo[playerid][pMember] >= 1 || PlayerInfo[playerid][pLeader] >=1)
	{
		format(String, sizeof(String), "[MEGAPHONE] %s: %s", GetPlayerNameEx(playerid), params);
		ProxDetector(60.0, playerid, String,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_ARWIN, "ERROR: {FFFFFF}You do not have authority to use the megaphone.");
		return 1;
	}
	return 1;
}

CMD:ro(playerid, params[])
{
 new String[10000];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ro [Radio OOC Chat]");
	switch (PlayerInfo[playerid][pMember])
	{
		case 1:
		{
			format(String, sizeof(String), "(( %s: %s ))", GetName(playerid), params);
			SendRadioOOCMessage(1, COLOR_FBI, String);
		}
		case 4:
		{
			format(String, sizeof(String), "(( %s: %s ))", GetName(playerid), params);
			SendRadioOOCMessage(4, COLOR_FBI, String);
		}
		case 6:
		{
			format(String, sizeof(String), "(( %s: %s ))", GetName(playerid), params);
			SendRadioOOCMessage(6, COLOR_FBI, String);
		}
		default:
		{
			SendClientMessageEx(playerid,COLOR_GRAD2,"You're not in a faction.");
			return 1;
		}
	}
	return 1;
}

CMD:od(playerid, params[])
{
 new String[10000];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/od)epartments [OOC department chat]");

	format(String, sizeof(String), "(( %s: %s ))", GetName(playerid), params);
	SendRadioOOCMessage(1, DEPTRADIO, String);
	SendRadioOOCMessage(4, DEPTRADIO, String);
	SendRadioOOCMessage(6, DEPTRADIO, String);
	return 1;
}

CMD:r(playerid, params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pMember] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Anda belum bergabung dalam Faction.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/r)adio [radio chat]");
	format(String, sizeof(String), "%s %s: %s", GetRankName(playerid), GetPlayerNameEx(playerid), params);
	SendRadioMessage(PlayerInfo[playerid][pMember], COLOR_FBI, String);
	return 1;
}

stock GetRankName(playerid)
{
	new String[56];
	switch(PlayerInfo[playerid][pMember]) // employer/rank/division data is pulled from here
	{
	    case 1:
		{
			switch(PlayerInfo[playerid][pRank])
			{
			    case 1: String = "PD Officer I";
			    case 2: String = "PD Officer II";
			    case 3: String = "PD Officer III";
			    case 4: String = "Sergeant I";
			    case 5: String = "Sergeant II";
			    case 6: String = "Lieutenant";
			    case 7: String = "Captain";
			    case 8: String = "Commander";
			    case 9: String = "Deputy Of Chief";
			    case 10: String = "Chief Of Police";
			    default: String = "Cadet";
			}
		}
		case 2:
		{
			switch(PlayerInfo[playerid][pRank])
			{
			    case 1: String = "Staff";
			    case 2: String = "Agent";
			    case 3: String = "Senior Agent";
			    case 4: String = "Special Agent";
			    case 5: String = "Assistant Director";
			    case 6: String = "Director";
			    default: String = "Intern";
			}
		}
		case 3:
		{
			switch(PlayerInfo[playerid][pRank])
			{
				case 1: String = "Officer";
				case 2: String = "Corporal";
				case 3: String = "Sergeant";
				case 4: String = "Lieutenant";
				case 5: String = "Captain";
				case 6: String = "Chief";
				default: String = "Cadet";
			}
		}
		case 4:
		{
			switch(PlayerInfo[playerid][pRank])
			{
				case 1: String = "EMT Paramedic I";
				case 2: String = "EMT Paramedic II";
				case 3: String = "Senior Paramedic";
				case 4: String = "Doctor Medic I";
				case 5: String = "Doctor Medic II";
				case 6: String = "Head Of Paramedic";
				case 7: String = "Supervisor I";
				case 8: String = "Supervisor II";
				case 9: String = "Deputy of Chief";
				case 10: String = "Chief Of Medic";
				default: String = "Volunteer";
			}
		}
		case 5:
		{
			switch(PlayerInfo[playerid][pRank])
			{
				case 1: String = "Clerk of Court";
				case 2: String = "District Attorney";
				case 3: String = "District Judge";
				case 4: String = "Appellate Judge";
				case 5: String = "Associate Justice of the Supreme Court";
				case 6: String = "Chief Justice of the Supreme Court";
				default: String = "Clerk of Court";
			}
		}
   		case 6:
		{
			switch(PlayerInfo[playerid][pRank])
			{
				case 1: String = "Officer";
				case 2: String = "Officer I";
                case 3: String = "Officer II";
                case 4: String = "Sergeant";
                case 5: String = "Sergeant I";
				case 6: String = "Sergeant II";
				case 7: String = "Captain";
				case 8: String = "Major";
				case 9: String = "Deputy Warden";
				case 10: String = "Warden";
				default: String = "Intern";
			}
		}
  		case 7:
		{
			switch(PlayerInfo[playerid][pRank])
			{
				case 1: String = "Deputy Sheriff Generalist I";
				case 2: String = "Deputy Sheriff";
				case 3: String = "Senior Of Deputy Sheriff";
				case 4: String = "Corporal Of Sheriff";
				case 5: String = "Lieutenant Sheriff";
				case 6: String = "Commander Of Sheriff I";
				case 7: String = "Commander Of Sheriff II";
				case 8: String = "Assistant Chief Of Sheriff";
				case 9: String = "Senior Of Assistant Sheriff";
				case 10: String = "Chief Of Sheriff";
				default: String = "Deputy";
			}
		}
		case 9:
		{
			switch(PlayerInfo[playerid][pRank])
			{
				case 1: String = "Reporter";
				case 2: String = "Reporter I";
				case 3: String = "Reporter II";
				case 4: String = "Editor";
				case 5: String = "Editor I";
				case 6: String = "Editor II";
				case 7: String = "Supervisor";
				case 8: String = "HRD";
                case 9: String = "Manager";
                case 10: String = "CEO";
                default: String = "Intern";
			}
		}
   		case 10:
		{
			switch(PlayerInfo[playerid][pRank])
			{
				case 1: String = "Trainee";
				case 2: String = "Driver";
				case 3: String = "Dispatcher";
				case 4: String = "Pilot";
				case 5: String = "Assistant Director";
				case 6: String = "Director";
				default: String = "Trainee";
			}
		}
	}
	return String;
}

CMD:d(playerid, params[])
{
	new String[10000];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/d)epartments [department chat]");

	new employer[16], rank[64], division[16];
	switch (PlayerInfo[playerid][pMember]) // employer/rank/division data is pulled from here
	{
	case 1:
		{
			employer = "SAPD";
			switch(PlayerInfo[playerid][pRank])
			{
			    case 1: rank = "PD Officer I";
			    case 2: rank = "PD Officer II";
			    case 3: rank = "PD Officer III";
			    case 4: rank = "Sergeant I";
			    case 5: rank = "Sergeant II";
			    case 6: rank = "Lieutenant";
			    case 7: rank = "Captain";
			    case 8: rank = "Commander";
			    case 9: rank = "Deputy Of Chief";
			    case 10: rank = "Chief Of Police";
			    default: rank = "Cadet";
			}
			switch(PlayerInfo[playerid][pDivision])
			{
			case 2: division = "(II) ";
			case 3: division = "(FTO) ";
			case 4: division = "(IA) ";
			case 5: division = "(SWAT) ";
			default: division = "";
			}
		}
	case 2:
		{
			employer = "FBI";
			switch(PlayerInfo[playerid][pRank])
			{
			case 1: rank = "Staff";
			case 2: rank = "Agent";
			case 3: rank = "Senior Agent";
			case 4: rank = "Special Agent";
			case 5: rank = "Assistant Director";
			case 6: rank = "Director";
			default: rank = "Intern";
			}
			switch(PlayerInfo[playerid][pDivision])
			{
			case 2: division = "(GU) ";
			case 3: division = "(FAN) ";
			case 4: division = "(CID) ";
			case 5: division = "(IA) ";
			case 6: division = "(NSB) ";
			default: division = "";
			}
		}
		case 3:
		{
			employer = "SFPD";
			switch(PlayerInfo[playerid][pRank])
			{
				case 1: rank = "Officer";
				case 2: rank = "Corporal";
				case 3: rank = "Sergeant";
				case 4: rank = "Lieutenant";
				case 5: rank = "Captain";
				case 6: rank = "Chief";
				default: rank = "Cadet";
			}
			switch(PlayerInfo[playerid][pDivision])
			{
				case 1: division = "(HR) ";
				case 2: division = "(ERT) ";
				case 3: division = "(IA) ";
				case 4: division = "(SO) ";
				default: division = "";
			}
		}
	case 4:
		{
			employer = "SAMD";
			switch(PlayerInfo[playerid][pRank])
			{
				case 1: rank = "EMT Paramedic I";
				case 2: rank = "EMT Paramedic II";
				case 3: rank = "Senior Paramedic";
				case 4: rank = "Doctor Medic I";
				case 5: rank = "Doctor Medic II";
				case 6: rank = "Head Of Paramedic";
				case 7: rank = "Supervisor I";
				case 8: rank = "Supervisor II";
				case 9: rank = "Deputy of Chief";
				case 10: rank = "Chief Of Medic";
				default: rank = "Volunteer";
			}
			switch(PlayerInfo[playerid][pDivision])
			{
			    case 1: division = "(FD) ";
				case 2: division = "(LF) ";
				case 3: division = "(T&R) ";
				default: division = "";
			}
		}
	case 5:
		{
			employer = "";
			switch(PlayerInfo[playerid][pRank])
			{
			case 1: rank = "Clerk of Court";
			case 2: rank = "District Attorney";
			case 3: rank = "District Judge";
			case 4: rank = "Appellate Judge";
			case 5: rank = "Associate Justice of the Supreme Court";
			case 6: rank = "Chief Justice of the Supreme Court";
			default: rank = "Clerk of Court";
			}
		}
	case 6:
		{
			employer = "SAGS";
			switch(PlayerInfo[playerid][pRank])
			{
				case 1: rank = "Officer";
				case 2: rank = "Officer I";
                case 3: rank = "Officer II";
                case 4: rank = "Sergeant";
                case 5: rank = "Sergeant I";
				case 6: rank = "Sergeant II";
				case 7: rank = "Captain";
				case 8: rank = "Major";
				case 9: rank = "Deputy Warden";
				case 10: rank = "Warden";
				default: rank = "Intern";
			}
			switch(PlayerInfo[playerid][pDivision])
			{
			case 2: division = "(Transport) ";
			case 3: division = "(Towing) ";
			case 4: division = "(Taxing) ";
			case 5: division = "(Employing) ";
			default: division = "";
			}
		}
	case 7:
		{
			employer = "SASD";
			switch(PlayerInfo[playerid][pRank])
			{
				case 1: rank = "Deputy Sheriff Generalist I";
				case 2: rank = "Deputy Sheriff";
				case 3: rank = "Senior Of Deputy Sheriff";
				case 4: rank = "Corporal Of Sheriff";
				case 5: rank = "Lieutenant Sheriff";
				case 6: rank = "Commander Of Sheriff I";
				case 7: rank = "Commander Of Sheriff II";
				case 8: rank = "Assistant Chief Of Sheriff";
				case 9: rank = "Senior Of Assistant Sheriff";
				case 10: rank = "Chief Of Sheriff";
				default: rank = "Deputy";
			}
			switch(PlayerInfo[playerid][pDivision])
			{
			case 2: division = "(TET) ";
			case 3: division = "(SCU) ";
			case 4: division = "(SORT) ";
			case 5: division = "(FTO) ";
			default: division = "";
			}
		}
		case 13:
		{
            employer = "PMC";
			switch(PlayerInfo[playerid][pRank])
			{
			    case 0: rank = "Ensign";
				case 1: rank = "Marksman";
				case 2: rank = "Elite Marksman";
				case 3: rank = "Operative";
				case 4: rank = "Elite Operative";
				case 5: rank = "Vice Commander";
				case 6: rank = "Supreme Commander";
				default: rank = "Ensign";
			}
			division = "";
		}
	default:
		{
			SendClientMessageEx(playerid,COLOR_GRAD2,"You're not in a faction.");
			return 1;
		}
	}
	format(String, sizeof(String), "[%s]%s %s: %s", employer, rank, GetPlayerNameEx(playerid), params);
	SendDepartmentMessage(1, DEPTRADIO, String);
	SendDepartmentMessage(4, DEPTRADIO, String);
	SendDepartmentMessage(6, DEPTRADIO, String);
	return 1;
}

CMD:hgate(playerid, params[])
{
    // Dynamic Gates
    for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(GateInfo[idx][gModel] && IsPlayerInRangeOfPoint(playerid, GateInfo[idx][gRange], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]))
	    {
	        if(GateInfo[idx][gFaction] == 0)
	        {
		        if(strlen(GateInfo[idx][gPassword]))
		        {
		            /*if(sscanf(params, "s[256]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hgate [password]");
		            if(strcmp(params, GateInfo[idx][gPassword])) return SendClientMessage(playerid, COLOR_GREY, "Password salah.");
					if(PlayerInfo[playerid][pGate] == idx || GateInfo[idx][gOwner] == 999 || GateInfo[idx][gOwner] == 0)*/
					{
			            if(!GateInfo[idx][gStatus])
				        {
				            GateInfo[idx][gStatus] = 1;
				            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
				            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
				        }
				        else
				        {
				            GateInfo[idx][gStatus] = 0;
				            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
				            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
				        }
					}
		        }
		        else
		        {
		            if(!GateInfo[idx][gStatus])
			        {
			            GateInfo[idx][gStatus] = 1;
			            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
			            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
			        }
			        else
			        {
			            GateInfo[idx][gStatus] = 0;
			            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
			            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
			        }
		        }
		        idx = MAX_GATES;
		        return 1;
			}
			if(PlayerInfo[playerid][pMember] != GateInfo[idx][gFaction]) return -1;
	        else if(PlayerInfo[playerid][pMember] == GateInfo[idx][gFaction])
	        {
		        if(strlen(GateInfo[idx][gPassword]))
		        {
		            if(sscanf(params, "s[256]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hgate [password]");
		            if(strcmp(params, GateInfo[idx][gPassword])) return SendClientMessage(playerid, COLOR_GREY, "Password salah.");
		            if(!GateInfo[idx][gStatus])
			        {
			            GateInfo[idx][gStatus] = 1;
			            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
			            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
			        }
			        else
			        {
			            GateInfo[idx][gStatus] = 0;
			            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
			            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
			        }
		        }
		        else
		        {
		            if(!GateInfo[idx][gStatus])
			        {
			            GateInfo[idx][gStatus] = 1;
			            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
			            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
			        }
			        else
			        {
			            GateInfo[idx][gStatus] = 0;
			            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
			            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
			        }
		        }
		        idx = MAX_GATES;
		        return 1;
			}
		}
	}
	return 1;
}

CMD:su(playerid, params[])
{
	if(PlayerInfo[playerid][pJailed] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this in jail/prison.");
		return 1;
	}

	new giveplayerid, crime[64];
	if(sscanf(params, "us[64]", giveplayerid, crime)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/su)spect [playerid] [crime discription]");

	if (PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 ||
			PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7 ||
			PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11 || PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
	{
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if (gTeam[giveplayerid] != 2 || PlayerInfo[playerid][pMember] != 2 || PlayerInfo[playerid][pLeader] != 2)
				{
					if (WantedPoints[giveplayerid]>=6)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "Target is already most wanted.");
						return 1;
					}
					WantedPoints[giveplayerid] += 1;
					SetPlayerCriminal(giveplayerid,playerid, crime);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "   You can't suspect an LEO!");
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not a Cop / FBI!");
	}
	return 1;
}
CMD:levelup(playerid, params[])
{
	if (gPlayerLogged{playerid} != 0)
	{
		if(PlayerInfo[playerid][pLevel] >= 2)
		{
			new nxtlevel = PlayerInfo[playerid][pLevel]+1;
			/*new costlevel = nxtlevel*levelcost;*/
			new expamount = nxtlevel*levelexp;

			 if (PlayerInfo[playerid][pExp] < expamount)
			{
				new string[58];
				format(string, sizeof(string), "Anda Perlu %d Point Untuk level selanjutnya.", expamount - PlayerInfo[playerid][pExp]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				return 1;
			}
			else
			{
				new string[92];
				format(string, sizeof(string), "~g~LEVEL UP~n~~w~You Are Now Level %d", nxtlevel);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pLevel]++;
				PlayerInfo[playerid][pExp] = PlayerInfo[playerid][pExp]-expamount;
				SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
				if(PlayerInfo[playerid][pLevel] == 6)
				{
				    SendClientMessageEx(playerid, COLOR_GRAD1, "Newbie chat will now be automatically togged off on login.");
				}
			}
		}
		else if(PlayerInfo[playerid][pLevel] == 1)
		{
			new nxtlevel = PlayerInfo[playerid][pLevel]+1;
			//new costlevel = nxtlevel*levelcost;
			new expamount = 1;

			 if (PlayerInfo[playerid][pExp] < expamount)
			{
				new string[58];
				format(string, sizeof(string), "Anda Perlu %d Point Untuk level selanjutnya.", expamount - PlayerInfo[playerid][pExp]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				return 1;
			}
			else
			{
				new string[92];
				format(string, sizeof(string), "~g~LEVEL UP~n~~w~You are now Level %d", nxtlevel);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pLevel]++;
				PlayerInfo[playerid][pExp] = PlayerInfo[playerid][pExp]-expamount;
				GameTextForPlayer(playerid, string, 5000, 1);
				SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
			}
		}

		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not logged in.");
	}
	return 1;
}
CMD:signcheck(playerid, params[])
{
  	if(PlayerInfo[playerid][pPDTime] <= 0)
	{
	    new String[10000];
	    for(new i = 0; i < sizeof(ATMInfo); i++)
		{
			if(PlayerInfo[playerid][pDonateRank] >= 1)
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak bisa melakukannya saat menyetir.");
				if(PlayerInfo[playerid][pMember] != 0)
				{
					format(String, sizeof(String), "{FFFFFF}PayCheck : {FFFF00}$%s\n{ffffff}Duty Salary: {FFFF00}$%s\n{FFFFFF}Tax : {FF0000}-$%s (%d percent)\n{FFFFFF}Interest: {FFFF00}$%s", FormatMoney(PlayerInfo[playerid][pPayCheck]), FormatMoney(PlayerInfo[playerid][pRank]*PlayerInfo[playerid][pDutyTime]/60), FormatMoney((PlayerInfo[playerid][pPayCheck]/100)*TaxValue), TaxValue ,FormatMoney((PlayerInfo[playerid][pAccount]/100)*(1)));
				}
				else
				{
					format(String, sizeof(String), "{FFFFFF}PayCheck : {FFFF00}$%s\n{FFFFFF}Tax : {FF0000}-%s (%d percent)\n{FFFFFF}Interest: {FFFF00}$%s", FormatMoney(PlayerInfo[playerid][pPayCheck]), FormatMoney((( PlayerInfo[playerid][pPayCheck] / 100 ) * TaxValue)), TaxValue, FormatMoney((PlayerInfo[playerid][pAccount]/100)*(1)));
				}
				ShowPlayerDialog(playerid, 1150, DIALOG_STYLE_MSGBOX, "Sign PayCheck", String,"Get","Cancel");
			}
			else
			{
			    if(IsPlayerInRangeOfPoint(playerid, 20.0, 1227.7953,-1336.8491,1305.5115) || IsPlayerInRangeOfPoint(playerid, 3, ATMInfo[i][ATMX], ATMInfo[i][ATMY], ATMInfo[i][ATMZ]))
				{
				    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak bisa melakukannya saat menyetir.");
					if(PlayerInfo[playerid][pMember] != 0)
					{
						format(String, sizeof(String), "{FFFFFF}PayCheck : {FFFF00}$%s\n{ffffff}Duty Salary: {FFFF00}$%s\n{FFFFFF}Tax : {FF0000}-$%s (%d percent)\n{FFFFFF}Interest: {FFFF00}$%s", FormatMoney(PlayerInfo[playerid][pPayCheck]), FormatMoney(PlayerInfo[playerid][pRank]*PlayerInfo[playerid][pDutyTime]/60), FormatMoney((PlayerInfo[playerid][pPayCheck]/100)*TaxValue), TaxValue ,FormatMoney((PlayerInfo[playerid][pAccount]/100)*(1)));
					}
					else
					{
						format(String, sizeof(String), "{FFFFFF}PayCheck : {FFFF00}$%s\n{FFFFFF}Tax : {FF0000}-%s (%d percent)\n{FFFFFF}Interest: {FFFF00}$%s", FormatMoney(PlayerInfo[playerid][pPayCheck]), FormatMoney((( PlayerInfo[playerid][pPayCheck] / 100 ) * TaxValue)), TaxValue, FormatMoney((PlayerInfo[playerid][pAccount]/100)*(1)));
					}
					ShowPlayerDialog(playerid, 1150, DIALOG_STYLE_MSGBOX, "Sign PayCheck", String,"Get","Cancel");
				}
			}
			return 1;
		}
	    return 1;
	}
	else
	{
	    new String[10000], menit = PlayerInfo[playerid][pPDTime] / 60;
	    format(String, sizeof(String), "ERROR: Kamu dapat mengambil PayCheck %d menit lagi", menit);
	    SendClientMessageEx(playerid,COLOR_WHITE,String);
	}
	return 1;
}
CMD:atm(playerid, params[])
{
    for(new i = 0; i < sizeof(ATMInfo); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, ATMInfo[i][ATMX], ATMInfo[i][ATMY], ATMInfo[i][ATMZ]))
 		{
			ShowPlayerDialog(playerid, 11020, DIALOG_STYLE_LIST, "ATM Menus", "Bank Status\nWithdraw\nSign PayCheck","Select","Exit");
			return 1;
		}
	}
	SendClientMessageEx(playerid,COLOR_WHITE,"Anda tidak berada di sebuah ATM.");
	return 1;
}
CMD:withdraw(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1428.6332,-986.0527,996.1050))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new String[10000], amount[32], dollars, cents, duit[32];

	if(sscanf(params, "s[32]", amount))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /withdraw [Jumlah]");
		format(String, sizeof(String), "  Anda memiliki uang sebesar %s di dalam Akun ATM Anda.", FormatMoney(PlayerInfo[playerid][pAccount]));
		SendClientMessageEx(playerid, COLOR_GRAD3, String);
		return 1;
	}
	if(strfind(amount, ".", true) != 1)
	{
	    	sscanf(amount, "p<.>dd", dollars, cents);
	        format(duit, sizeof(duit), "%d%02d", dollars, cents);
			if(strval(duit) > PlayerInfo[playerid][pAccount])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "   Anda tidak memiliki uang sebesar itu di dalam Akun ATM anda!");
				return 1;
			}
			if(strval(duit) < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
			GivePlayerCash(playerid,strval(duit));
			PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-strval(duit);
			format(String, sizeof(String), "BANK: {ffffff}You've withdrawn {ffff00}$%s{ffffff} from your bank account", FormatMoney(strval(duit)));
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
			format(String, sizeof(String), "BALANCE: {ffff00}$%s",FormatMoney(PlayerInfo[playerid][pAccount]));
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
	}
	else
	{
	    	sscanf(amount, "d", dollars);
	        format(duit, sizeof(duit), "%d00", dollars);
			if(strval(duit) > PlayerInfo[playerid][pAccount])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "   Anda tidak memiliki uang sebesar itu di dalam Akun ATM anda!");
				return 1;
			}
			if(strval(duit) < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
			GivePlayerCash(playerid,strval(duit));
			PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-strval(duit);
			format(String, sizeof(String), "BANK: {ffffff}You've withdrawn {ffff00}$%s{ffffff} from your bank account", FormatMoney(strval(duit)));
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
			format(String, sizeof(String), "BALANCE: {ffff00}$%s",FormatMoney(PlayerInfo[playerid][pAccount]));
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
	}
	return 1;
}

CMD:deposit(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1428.6332,-986.0527,996.1050))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new String[10000], amount[32], dollars, cents, duit[32];
	if(sscanf(params, "s[32]", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /deposit [amount(dollars.cents)]");
  		return 1;
	}
	if(strfind(amount, ".", true) != -1)
	{
	    	sscanf(amount, "p<.>dd", dollars, cents);
	        format(duit, sizeof(duit), "%d%02d", dollars, cents);
	        if(intLen(cents) > 2) return SendClientMessageEx(playerid, COLOR_GREY, "Format Cents salah");
			if (strval(duit) > GetPlayerCash(playerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Anda tidak memiliki uang sebesar itu.");
				return 1;
			}
			if(strval(duit) < 0) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Tidak bisa dibawah $0.00 ."); return 1; }
			GivePlayerCash(playerid,-strval(duit));
			PlayerInfo[playerid][pAccount]=strval(duit)+PlayerInfo[playerid][pAccount];
			format(String, sizeof(String), "BANK: {ffffff}You've stored {ffff00}$%s{ffffff} into your bank account", FormatMoney(strval(duit)));
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
			format(String, sizeof(String), "BALANCE: {ffff00}$%s", FormatMoney(PlayerInfo[playerid][pAccount]));
   			SendClientMessageEx(playerid, COLOR_ARWIN, String);
   			SendClientMessageEx(playerid, COLOR_WHITE, String);
	}
	else
	{
	    	sscanf(amount, "d", dollars);
	        format(duit, sizeof(duit), "%d00", dollars);
			if (strval(duit) > GetPlayerCash(playerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Anda tidak memiliki uang sebesar itu.");
				return 1;
			}
			if(strval(duit) < 0) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Tidak bisa dibawah $0.00 ."); return 1; }
			GivePlayerCash(playerid,-strval(duit));
			PlayerInfo[playerid][pAccount]=strval(duit)+PlayerInfo[playerid][pAccount];
			format(String, sizeof(String), "BANK: {ffffff}You've stored {ffff00}$%s{ffffff} into your bank account", FormatMoney(strval(duit)));
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
			format(String, sizeof(String), "BALANCE: {ffff00}$%s", FormatMoney(PlayerInfo[playerid][pAccount]));
   			SendClientMessageEx(playerid, COLOR_ARWIN, String);
	}
	return 1;
}

CMD:balance(playerid, params[])
{
	new String[10000];
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 1428.6332,-986.0527,996.1050))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
	if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	format(String, sizeof(String), "You have %s in your account.",FormatMoney(PlayerInfo[playerid][pAccount]));
	SendClientMessageEx(playerid, COLOR_YELLOW, String);
	return 1;
}

CMD:asellhouse(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10)
    {
        SendClientMessageEx(playerid,COLOR_WHITE,"Executive Admin Only or Shop Tech");
        return 1;
	}
    new String[10000], house;
	if(sscanf(params, "d", house)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /asellhouse [houseid]");

	if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]))
	{
	    if(PlayerInfo[HouseInfo[house][hOwner]][pPhousekey2] == house)
	    {
		    PlayerInfo[HouseInfo[house][hOwner]][pPhousekey2] = INVALID_HOUSE_ID;
			return 1;
		}
		else if(PlayerInfo[HouseInfo[house][hOwner]][pPhousekey] == house)
	    {
	        PlayerInfo[HouseInfo[house][hOwner]][pPhousekey] = INVALID_HOUSE_ID;
	    }
	    ClearHouse(house);
	    HouseInfo[house][hLock] = 1;
		format( HouseInfo[house][hOwner], 128, "Nobody" );
		HouseInfo[house][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		SaveHouses();
		DestroyDynamicPickup(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreateDynamicPickup(19132, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(String, sizeof(String), "{00FF00}Rumah Dijual!{00FF00}\n Interior: {FFFFFF}%s\n{00FF00}Harga: {FFFFFF}$%s\n {00FF00}Level: {FFFFFF}%d\n{00FF00}Alamat: {FFFFFF}%s\n{00FF00}ID: {FFFFFF}%d\n{00FF00}Untuk membeli rumah ini /buyhouse",HouseInfo[house][hDescription],FormatMoney(HouseInfo[house][hValue]),HouseInfo[house][hLevel],HouseInfo[house][hAlamat], house);
  		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( String, COLOR_GREEN, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 30.0, .testlos = 1, .streamdistance = 30.0);
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "You need to be near your house(exterior) in order to sell it.");
 	return 1;
}
CMD:sellhouse(playerid, params[])
{
	new String[10000];
	new house = PlayerInfo[playerid][pPhousekey];
	new house2 = PlayerInfo[playerid][pPhousekey2];
	if(house == INVALID_HOUSE_ID && house2 == INVALID_HOUSE_ID)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You don't own a house.");
		return 1;
	}
    new time;
	if(sscanf(params, "d", time)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /sellhouse [slot rumah]");
    if(IsPlayerInRangeOfPoint(playerid, 10,354.8210, 154.7380, 1025.4203))
	{
		if(time == 1)
		{
			ClearHouse(house);
			HouseInfo[house][hLock] = 1;
			format( HouseInfo[house][hOwner], 128, "Nobody" );
			GivePlayerCash(playerid,HouseInfo[house][hValue]);
			HouseInfo[house][hGLUpgrade] = 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(String, sizeof(String), "~w~Congratulations~n~ You have sold your property for ~n~~g~%s", FormatMoney(HouseInfo[house][hValue]));
			GameTextForPlayer(playerid, String, 4000, 3);
			PlayerInfo[playerid][pPhousekey] = INVALID_HOUSE_ID;
			if(PlayerInfo[playerid][pVW] == house+6000)
			{
				AC_BS_SetPlayerInterior(playerid,0);
				AC_BS_SetPlayerPos(playerid,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pPhousekey] = INVALID_HOUSE_ID;
			}
			PlayerInfo[playerid][pInsurance] = 0;
			SaveHouses();
			OnPlayerStatsUpdate(playerid);
			DestroyDynamicPickup(HouseInfo[house][hPickupID]);
			HouseInfo[house][hPickupID] = CreateDynamicPickup(19132, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
			DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
			format(String, sizeof(String), "{00FF00}Rumah Dijual!{00FF00}\n Interior: {FFFFFF}%s\n{00FF00}Harga: {FFFFFF}$%s\n {00FF00}Level: {FFFFFF}%d\n{00FF00}Alamat: {FFFFFF}%s\n{00FF00}ID: {FFFFFF}%d\n{00FF00}Untuk membeli rumah ini /buyhouse",HouseInfo[house][hDescription],FormatMoney(HouseInfo[house][hValue]),HouseInfo[house][hLevel],HouseInfo[house][hAlamat], house);
			HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( String, COLOR_GREEN, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 30.0, .testlos = 1, .streamdistance = 30.0);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			format(String,sizeof(String),"%s (IP: %s) has sold their house (ID %d) for %s.",GetName(playerid),ip,house,FormatMoney(HouseInfo[house][hValue]));
			Log("logs/house.log", String);
			return 1;
		}
		else if(time == 2)
		{
			ClearHouse(house2);
			HouseInfo[house2][hLock] = 1;
			format( HouseInfo[house2][hOwner], 128, "Nobody" );
			GivePlayerCash(playerid,HouseInfo[house2][hValue]);
			HouseInfo[house2][hGLUpgrade] = 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(String, sizeof(String), "~w~Congratulations~n~ You have sold your property for ~n~~g~%s", FormatMoney(HouseInfo[house2][hValue]));
			GameTextForPlayer(playerid, String, 4000, 3);
			PlayerInfo[playerid][pPhousekey2] = INVALID_HOUSE_ID;
			if(PlayerInfo[playerid][pVW] == house2+6000)
			{
				AC_BS_SetPlayerInterior(playerid,0);
				AC_BS_SetPlayerPos(playerid,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pPhousekey2] = INVALID_HOUSE_ID;
			}
			PlayerInfo[playerid][pInsurance] = 0;
			SaveHouses();
			OnPlayerStatsUpdate(playerid);
			DestroyDynamicPickup(HouseInfo[house2][hPickupID]);
			HouseInfo[house2][hPickupID] = CreateDynamicPickup(19132, 23, HouseInfo[house2][hExteriorX], HouseInfo[house2][hExteriorY], HouseInfo[house2][hExteriorZ]);
			DestroyDynamic3DTextLabel(HouseInfo[house2][hTextID]);
			format(String, sizeof(String), "{00FF00}Rumah Dijual!{00FF00}\n Interior: {FFFFFF}%s\n{00FF00}Harga: {FFFFFF}$%s\n {00FF00}Level: {FFFFFF}%d\n{00FF00}Alamat: {FFFFFF}%s\n{00FF00}ID: {FFFFFF}%d\n{00FF00}Untuk membeli rumah ini /buyhouse",HouseInfo[house2][hDescription],FormatMoney(HouseInfo[house2][hValue]),HouseInfo[house2][hLevel],HouseInfo[house2][hAlamat], house2);
			HouseInfo[house2][hTextID] = CreateDynamic3DTextLabel( String, COLOR_GREEN, HouseInfo[house2][hExteriorX], HouseInfo[house2][hExteriorY], HouseInfo[house2][hExteriorZ]+0.5,5.0, .testlos = 1, .streamdistance = 5.0);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			format(String,sizeof(String),"%s (IP: %s) has sold their house (ID %d) for %s.",GetName(playerid),ip,house2,FormatMoney(HouseInfo[house2][hValue]));
			Log("logs/house.log", String);
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Hanya dapat menjual rumah pada slot 1 dan 2.");
		}
	}
	else { SendClientMessageEx(playerid,COLOR_WHITE,"Kamu harus di City hall untuk menggunakan CMD ini."); }
	return 1;
}

forward advertisement(playerid);
public advertisement(playerid)
{
	new String[255];
	format(String, sizeof(String), "{FF0000}Iklan: {33AA33}%s",  advertise[playerid]);
	OOCNews(TEAM_GROVE_COLOR,String);
	format(String, sizeof(String), "{FF0000}Contact Info: [{33AA33}%s{FF0000}] ph: [{33AA33}%d{FF0000}]", PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pPnumber]);
	OOCNews(TEAM_GROVE_COLOR,String);
	SetTimer("AdTime", 30000, 0);
	return 1;
}

CMD:call(playerid, params[])
{
	new String[10000], phonenumb;

	if(sscanf(params, "d", phonenumb)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /call [phonenumber]");

	if (PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"You can't use your phone while in jail.");
		return 1;
	}
	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"Anda tidak bisa melakukannya saat ini.");
		return 1;
	}
	if(PlayerInfo[playerid][pPnumber] == 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Anda tidak memiliki HandPhone.");
		return 1;
	}
	if(PlayerInfo[playerid][pPulsa2] <= 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Kamu tidak memiliki Pulsa.");
		return 1;
	}
	if(PhoneOnline[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Your phone is off.");
		return 1;
	}
	if(phonenumb == 1)
	{
		SendClientMessageEx(playerid, COLOR_FBI, "OPERATOR: {FFFFFF}You've reached the operator");
		SendClientMessageEx(playerid, COLOR_FBI, "OPERATOR: {FFFFFF}Call 911 for emergency services");
		SendClientMessageEx(playerid, COLOR_FBI, "OPERATOR: {FFFFFF}Call 555 for non-emergency police services");
		SendClientMessageEx(playerid, COLOR_FBI, "OPERATOR: {FFFFFF}Call 888 for SAGS call center");
		SendClientMessageEx(playerid, COLOR_FBI, "OPERATOR: {FFFFFF}Call 777 for non-emergency medical service");
		return 1;
	}
	if(phonenumb == 555)
	{
		SendClientMessageEx(playerid, COLOR_FBI, "555: {FFFFFF}You have reached the Non-Emergency Service.");
		SendClientMessageEx(playerid, COLOR_FBI, "555: {FFFFFF}How can I help you?");
		Mobile[playerid] = 555;
		return 1;
	}
	if(phonenumb == 777)
	{
		SendClientMessageEx(playerid, COLOR_FBI, "777: {FFFFFF}You have reached the non-emergency medical service.");
		SendClientMessageEx(playerid, COLOR_FBI, "777: {FFFFFF}How can I help you?");
		Mobile[playerid] = 777;
		return 1;
	}
	if(phonenumb == 888)
	{
		SendClientMessageEx(playerid, COLOR_FBI, "888: {FFFFFF}You have reached the SAGS call center.");
		SendClientMessageEx(playerid, COLOR_FBI, "888: {FFFFFF}How can I help you?");
		Mobile[playerid] = 888;
		return 1;
	}
	if(phonenumb == 123)
	{
		format(String, sizeof(String), "{FFFF00}Sisa Pulsa anda: {FF6347}%s",  FormatMoney(PlayerInfo[playerid][pPulsa2]));
		SendClientMessageEx(playerid, COLOR_ALLDEPT, String);
		return 1;
	}
	if(phonenumb == 911)
	{
		if(PlayerInfo[playerid][pJailed] == 4 || PlayerInfo[playerid][pJailed] == 1000)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Cannot use this whilist in admin prison!");
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_FBI, "911: {FFFFFF}You have reached the 911 Emergency Service.");
		SendClientMessageEx(playerid, COLOR_FBI, "911: {FFFFFF}Do you need a police or a paramedic ?");
		Mobile[playerid] = 911;
		return 1;
	}
	if(phonenumb == PlayerInfo[playerid][pPnumber])
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You just get a busy tone...");
		return 1;
	}
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are already on a call...");
		return 1;
	}
	foreach(Player, i)
	{
		if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
		{
			new giveplayerid = i;
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(PhoneOnline[giveplayerid] > 0)
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That player's phone is switched off.");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Mobile[giveplayerid] != INVALID_PLAYER_ID)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You just get a busy tone...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Spectating[giveplayerid]!=0)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You just get a busy tone...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if (Mobile[giveplayerid] == INVALID_PLAYER_ID)
					{
      					format(String, sizeof(String), "CELLPHONE: {ffffff}Ponsel anda berbunyi!, nomor {ffff00}%d {ffffff}mencoba untuk menghubungi anda, /p untuk menjawab", PlayerInfo[playerid][pPnumber]);
						SendClientMessageEx(giveplayerid, COLOR_ARWIN, String);
						format(String, sizeof(String), "CELLPHONE: {ffffff}Anda telah mencoba menghubungi nomor {ffff00}%d {ffffff}silahkan tunggu sampai di jawab", PlayerInfo[giveplayerid][pPnumber]);
						SendClientMessageEx(playerid, COLOR_ARWIN, String);
						RingTone[giveplayerid] = 10;
						new Float:rX, Float:rY, Float:rZ;
						GetPlayerPos(giveplayerid, rX, rY, rZ);
						PlayerPlaySound(playerid, 3600, 0,0,0);
						PlayerPlaySound(giveplayerid, 6003, 0,0,0);
						CellTime[playerid] = 1;
						return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
					}
				}
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "Your call can not be completed as dialed, please check the number and try again.");
	return 1;
}
CMD:sms(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You haven't logged in yet!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
		return 1;
	}
	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"You can't use your phone whilist restrained.");
		return 1;
	}

	new String[10000], phonenumb, text[100];
	if(sscanf(params, "ds[100]", phonenumb, text)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/t)ext [phonenumber] [text chat]");

	if(PlayerInfo[playerid][pPnumber] == 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "PHONE: You don't have a cell phone...");
		return 1;
	}
	if(PlayerInfo[playerid][pPulsa2] <= 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "PHONE : Kamu tidak memiliki pulsa.");
		return 1;
	}
	if (PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"PHONE: You can not use your phone while in jail or prison!");
		return 1;
	}
	if(PhoneOnline[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Your phone is off.");
		return 1;
	}
	foreach(Player, i)
	{
		if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
		{
			new giveplayerid = i;
			if(Mobile[giveplayerid] != INVALID_PLAYER_ID)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player's phone is busy (on a call).");
				return 1;
			}
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{

					if(PhoneOnline[giveplayerid] > 0)
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That player's phone is switched off.");
						return 1;
					}
					if(PlayerInfo[playerid][pPhonePrivacy] == 1)
					{
						format(String, sizeof(String), "SMS: {ffffff}You have received one new message from '{ffff00}unknown{ffffff}'");
						SendClientMessageEx(giveplayerid, COLOR_RED, String);
						format(String, sizeof(String), "Message: {ffff00}%s", text);
						SendClientMessageEx(giveplayerid, COLOR_RED, String);
					}
					else
					{
						format(String, sizeof(String), "SMS: {ffffff}You have received one new message from '{ffff00}%d{ffffff}'", PlayerInfo[playerid][pPnumber]);
						SendClientMessageEx(giveplayerid, COLOR_RED, String);
						format(String, sizeof(String), "Message: {ffff00}%s", text);
						SendClientMessageEx(giveplayerid, COLOR_RED, String);
					}
					//format(String, sizeof(String), "* %s's phone beeps.", sendername);
					RingTone[giveplayerid] =20;
					PlayerInfo[playerid][pPulsa2] -= 50;
					PlayerPlaySound(giveplayerid, 6003, 0,0,0);
					SendClientMessageEx(playerid, COLOR_ARWIN, "SMS: {FFFF00}Message sent");
					SendClientMessageEx(playerid, COLOR_WHITE, "AME: {C2A2DA}types something to his cellphone");
					format(String, sizeof(String), "types something to his cellphone");
					SetPlayerChatBubble(playerid, String, COLOR_PURPLE, 5.0, 5000);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					Mobile[playerid] = INVALID_PLAYER_ID;

					if(strcmp(PlayerInfo[giveplayerid][pAutoTextReply], "Nothing", true) != 0)
					{
						format(String, sizeof(String), "SMS: %s, Sender: %s [automated response] (%d)", PlayerInfo[giveplayerid][pAutoTextReply], GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pPnumber]);
						SendClientMessageEx(playerid, COLOR_YELLOW, String);
					}

					return 1;
				}
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "  Message delivery failed...");
	return 1;
}

CMD:p(playerid, params[])
{
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are already on a call...");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
		return 1;
	}
	foreach(Player, i)
	{
		if(Mobile[i] == playerid)
		{
			Mobile[playerid] = i; //caller connecting
   			callcost[Mobile[playerid]] = 10;
			SendClientMessageEx(i, COLOR_ARWIN, "CELLPHONE: {ffffff}Telepon anda telah di jawab.");
			SendClientMessageEx(i, COLOR_ARWIN, "CELLPHONE: {ffffff}Gunakan chat biasa untuk berkomunikasi lewat telpon, '/h' untuk menutup telpon.");
			SendClientMessageEx(playerid, COLOR_ARWIN, "CELLPHONE: {ffffff}Anda telah menjawab telpon.");
			SendClientMessageEx(playerid, COLOR_ARWIN, "CELLPHONE: {ffffff}Gunakan chat biasa untuk berkomunikasi lewat telpon, '/h' untuk menutup telpon.");
			RingTone[playerid] = 0;
			return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		}
	}
	return 1;
}

CMD:h(playerid,params[])
{
	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
		return 1;
	}
	new caller = Mobile[playerid];
	if((IsPlayerConnected(caller) && caller != INVALID_PLAYER_ID)|| caller == 911)
	{
		if(caller < 500)
		{
			SendClientMessageEx(caller,  COLOR_WHITE, "Telepon telah dimatikan.");
			CellTime[caller] = 0;
			Mobile[caller] = INVALID_PLAYER_ID;
		}
		CellTime[playerid] = 0;
		SendClientMessageEx(playerid,  COLOR_GRAD2, "Kamu telah menutup telepon");
		Mobile[playerid] = INVALID_PLAYER_ID;
		CellTime[playerid] = 0;
		RingTone[playerid] = 0;
		PlayerInfo[playerid][pPulsa2] -= CellTime[playerid];
		SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		return 1;
	}
	SendClientMessageEx(playerid,  COLOR_GRAD2, "   Your phone is in your pocket.");
	return 1;
}

CMD:goindoor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /goindoor [doornumber]");

		Streamer_UpdateEx(playerid, DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		AC_BS_SetPlayerInterior(playerid,DDoorsInfo[doornum][ddInteriorInt]);
		AC_BS_SetPlayerPos(playerid,DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddInteriorA]);
		if(DDoorsInfo[doornum][ddCustomInterior])
		{
			TogglePlayerControllable(playerid, 1);
			GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
			SetPVarInt(playerid, "LoadingObjects", 1);
			SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
		}
		PlayerInfo[playerid][pInt] = DDoorsInfo[doornum][ddInteriorInt];
		PlayerInfo[playerid][pLocal] = DDoorsInfo[doornum][ddInteriorVW];
		PlayerInfo[playerid][pVW] = DDoorsInfo[doornum][ddInteriorVW];
		AC_BS_SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddInteriorVW]);
	}
	return 1;
}

CMD:gotodoor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /gotodoor [doornumber]");

		Streamer_UpdateEx(playerid, DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		if(DDoorsInfo[doornum][ddCustomExterior])
		{
			TogglePlayerControllable(playerid, 1);
			GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
			SetPVarInt(playerid, "LoadingObjects", 1);
			SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
		}
		AC_BS_SetPlayerInterior(playerid,DDoorsInfo[doornum][ddExteriorInt]);
		AC_BS_SetPlayerPos(playerid,DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddExteriorA]);
		PlayerInfo[playerid][pInt] = DDoorsInfo[doornum][ddExteriorInt];
		PlayerInfo[playerid][pLocal] = DDoorsInfo[doornum][ddExteriorInt];
		AC_BS_SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddExteriorVW]);
		PlayerInfo[playerid][pVW] = DDoorsInfo[doornum][ddExteriorVW];
	}
	return 1;
}

CMD:goinhouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /goinhouse [housenumber]");

		AC_BS_SetPlayerInterior(playerid,HouseInfo[housenum][hHInteriorWorld]);
		if(HouseInfo[housenum][hCustomInterior] == 1)
		{
			TogglePlayerControllable(playerid, 1);
			GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
			SetPVarInt(playerid, "LoadingObjects", 1);
			SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
		}
		AC_BS_SetPlayerPos(playerid,HouseInfo[housenum][hInteriorX],HouseInfo[housenum][hInteriorY],HouseInfo[housenum][hInteriorZ]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		PlayerInfo[playerid][pInt] = HouseInfo[housenum][hHInteriorWorld];
		PlayerInfo[playerid][pLocal] = housenum;
	}
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /gotohouse [housenumber]");

		AC_BS_SetPlayerPos(playerid,HouseInfo[housenum][hExteriorX],HouseInfo[housenum][hExteriorY],HouseInfo[housenum][hExteriorZ]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		AC_BS_SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	return 1;
}

CMD:setstock(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 7)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not an Admin!");
		return 1;
	}

	new String[10000], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /dedit [name] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Ikan, Comp, Drug");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Mats, Bait");
		return 1;
	}
	if(strcmp(choice,"ikan",true) == 0)
	{
 		if(amount < 0) { return 1; }
			StockIkan = amount;
			format(String, sizeof(String), "[Fish Storage]\nFish Available : %d\n '/missions' untuk mengangkut barang", StockIkan);
			UpdateDynamic3DTextLabelText(pickupML, COLOR_WHITE, String);
			format(String, sizeof(String), "[Fish Storage]\nFish Available : %d\n '/missions' untuk mengangkut barang", StockIkan);
			UpdateDynamic3DTextLabelText(pickupML2, COLOR_WHITE, String);
			SendClientMessageEx(playerid, COLOR_WHITE, " Kamu berhasil mengubah total stock ikan ");
	}
	else if(strcmp(choice,"equipment",true) == 0)
	{
	    EquipmentStock = amount;
	    new equipmentt1[1024], equipmentt2[1024], equipmentt3[1024];
		format(equipmentt1, sizeof(equipmentt1), "'/sags'\nTo open your locker\nEquipment Stock: %d", EquipmentStock);
		UpdateDynamic3DTextLabelText(equipment1, COLOR_WHITE, String);
		format(equipmentt2, sizeof(equipmentt2), "'/sapd'\nTo open your locker\nEquipment Stock: %d", EquipmentStock);
		UpdateDynamic3DTextLabelText(equipment2, COLOR_WHITE, String);
		format(equipmentt3, sizeof(equipmentt3), "'/samd'\nTo open your locker\nEquipment Stock: %d", EquipmentStock);
		UpdateDynamic3DTextLabelText(equipment3, COLOR_WHITE, String);
		SendClientMessageEx(playerid, COLOR_WHITE, " Kamu berhasil mengubah total stock Equipment di Equipment Storage!");
	}
	else if(strcmp(choice,"pot",true) == 0)
	{
	    stockpot = amount;
		format(String, sizeof(String), "Drug Dealer\n{FFFF00}'/join' untuk menjadi Drug Dealer\nPot Available : %d\n'/getpot' untuk membeli Pot\nCrack Available : %d\n'/getcrack' untuk membeli Crack", stockpot, stockcrack);
 		UpdateDynamic3DTextLabelText(pickupPot, COLOR_WHITE, String);
		SendClientMessageEx(playerid, COLOR_WHITE, " Kamu berhasil mengubah total stock Pot di penyimpanan!");
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
	    stockcrack = amount;
		format(String, sizeof(String), "Drug Dealer\n{FFFF00}'/join' untuk menjadi Drug Dealer\nPot Available : %d\n'/getpot' untuk membeli Pot\nCrack Available : %d\n'/getcrack' untuk membeli Crack", stockpot, stockcrack);
 		UpdateDynamic3DTextLabelText(pickupPot, COLOR_WHITE, String);
		SendClientMessageEx(playerid, COLOR_WHITE, " Kamu berhasil mengubah total stock Crack di penyimpanan!");
	}
	else if(strcmp(choice,"comp",true) == 0)
	{
	    stockcomp = amount;
	    format(String, sizeof(String), "[Component Storage]\nComponent Available : %d\nComponent Price : $0.50\n'/buycomponent' untuk membeli Komponen", stockcomp);
		UpdateDynamic3DTextLabelText(pickupComp, COLOR_YELLOW, String);
		SendClientMessageEx(playerid, COLOR_WHITE, " Kamu berhasil mengubah total stock component di gudang!");
	}
	else if(strcmp(choice,"plant",true) == 0)
	{
	    stockplant = amount;
	    format(String, sizeof(String), "[Plant Storage]\nPlant Available : %d.", stockplant);
		UpdateDynamic3DTextLabelText(pickupPlant, COLOR_YELLOW, String);
		SendClientMessageEx(playerid, COLOR_WHITE, " Kamu berhasil mengubah total stock component di gudang!");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "	Not a valid name.");
		return 1;
	}
	return 1;
}
CMD:hstatus(playerid, params[])
{
	new hid;
	if(sscanf(params, "i", hid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /hstatus [houseid]");
		return 1;
	}
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000];
		format(String,sizeof(String),"|___________ House Status (ID: %d) ___________|", hid);
		SendClientMessageEx(playerid, COLOR_GREEN, String);
		format(String,sizeof(String),"Owner : %s | Price : %d | Level : %d", HouseInfo[hid][hOwner], HouseInfo[hid][hValue],HouseInfo[hid][hLevel]);
		SendClientMessageEx(playerid, COLOR_GREEN, String);

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}


CMD:dmpnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing all map icons within 30 meters of you");
		new Float:X, Float:Y, Float:Z;
  		GetPlayerPos(playerid, X, Y, Z);
		for(new i;i<MAX_DMAPICONS;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30, DMPInfo[i][dmpPosX], DMPInfo[i][dmpPosY], DMPInfo[i][dmpPosZ]))
			{
				if(DMPInfo[i][dmpMarkerType] != 0)
				{
				    new String[10000];
			    	format(String, sizeof(String), "MapIcon ID %d | %f from you", i, GetDistance(DMPInfo[i][dmpPosX], DMPInfo[i][dmpPosY], DMPInfo[i][dmpPosZ], X, Y, Z));
			    	SendClientMessageEx(playerid, COLOR_WHITE, String);
				}
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:dmpnext(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available map icon...");
		for(new x;x<MAX_DMAPICONS;x++)
		{
		    if(DMPInfo[x][dmpMarkerType] == 0)
		    {
		        new String[10000];
		        format(String, sizeof(String), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, String);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}
	return 1;
}

CMD:ddnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available dynamic door...");
  		for(new x;x<MAX_DDOORS;x++)
		{
		    if(DDoorsInfo[x][ddDescription] == 0)
		    {
		        new String[10000];
		        format(String, sizeof(String), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, String);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}
	return 1;
}

CMD:hnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available house...");
		for(new x;x<MAX_HOUSES;x++)
		{
		    if(HouseInfo[x][hAlamat] == 0)
		    {
		        new String[10000];
		        format(String, sizeof(String), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, String);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}
	return 1;
}

CMD:floorname(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new floor, tmp[24];
	if(sscanf(params, "is[24]", floor, tmp))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /floorname [floor] [name]");
		return 1;
	}
	new String[10000];
	format(LAElevatorFloorName[floor],24, "%s", tmp);
	format(String, sizeof(String), "Renamed Floor %d to %s", (floor+1), LAElevatorFloorName[floor]);
	SendClientMessageEx(playerid, COLOR_WHITE, String);
	SaveElevatorStuff();
	return 1;
}

CMD:floorpass(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new floor, tmp[24];
	if(sscanf(params, "is[24]", floor, tmp))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /floorpass [floor] [pass]");
		return 1;
	}
	new String[10000];
	format(LAElevatorFloorPass[floor],24, "%s", tmp);
	format(String, sizeof(String), "Floor %d pass set to %s", (floor+1), LAElevatorFloorPass[floor]);
	SendClientMessageEx(playerid, COLOR_WHITE, String);
	SaveElevatorStuff();
	return 1;
}

CMD:floorpassr(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new floor;
	if(sscanf(params, "i", floor))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /floorpassr [floor]");
		return 1;
	}
	new String[10000];
	floor = floor  - 1;
	format(LAElevatorFloorPass[floor],24, "");
	format(String, sizeof(String), "Floor %d pass removed", (floor+1));
	SendClientMessageEx(playerid, COLOR_WHITE, String);
	SaveElevatorStuff();
	return 1;
}
CMD:setalldmtobject(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 7) return -1;
	for(new idx;idx<MAX_COBJECTS;idx++)
	{
	    ObjectInfo[idx][oMT] = 0;
	    DestroyDynamicObject(ObjectInfo[idx][obj]);
		ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
	    SaveObj();
	    return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Anda telah mematikan efek Material Text Object");
	return 1;
}

CMD:createobject(playerid, params[])
{
	new String[10000], object;
	if(PlayerInfo[playerid][pAdmin] >= 8)
	{
		if(sscanf(params, "i", object)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /createobject [objectid]");
		for(new idx=1; idx<MAX_COBJECTS; idx++)
		{
		    if(!ObjectInfo[idx][oModel])
		    {
		        GetPlayerPos(playerid, ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ]);
	  			ObjectInfo[idx][oModel] = object;
				ObjectInfo[idx][oX] = ObjectInfo[idx][oX] + 2;
				ObjectInfo[idx][oY] = ObjectInfo[idx][oY] + 2;
				ObjectInfo[idx][oRX] = 0;
				ObjectInfo[idx][oRY] = 0;
				ObjectInfo[idx][oRZ] = 0;
				ObjectInfo[idx][oMT] = 0;
				// Creating
				ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
				//O-bjectInfo[idx][oText] = CreateDynamic3DTextLabel(String, COLOR_WHITE, ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], 10);
				// Text
				format(String, sizeof(String), "AdmWarn: %s has created object ID %d. (Object: %d)", GetName(playerid), idx, object);
			    ABroadCast(COLOR_DARKRED, String, 2);
				Log("logs/cobjects.log", String);
				idx = MAX_COBJECTS;
				SaveObj();
			}
		}
	}
	return 1;
}
CMD:onear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		SendClientMessageEx(playerid, COLOR_RED, "SEDANG MELOAD OBJECT YANG BERJARAK SEKITAR 10METER DARI POSISI ANDA");
		new Float:X, Float:Y, Float:Z;
		new Float:X2, Float:Y2, Float:Z2;
  		GetPlayerPos(playerid, X2, Y2, Z2);
		for(new i;i<MAX_COBJECTS;i++)
		{
			GetDynamicObjectPos(ObjectInfo[i][obj], X, Y, Z);
			if(IsPlayerInRangeOfPoint(playerid, 10, X, Y, Z))
			{
				if(ObjectInfo[i][oModel] != 0)
				{
				    new String[10000];
			    	format(String, sizeof(String), "Object ID %d | %f from you", i, GetDistance(X, Y, Z, X2, Y2, Z2));
			    	SendClientMessageEx(playerid, COLOR_WHITE, String);
				}
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:editobject(playerid, params[])
{
	new String[10000], idx;
	if(PlayerInfo[playerid][pAdmin] >= 8)
	{
	 	if(sscanf(params, "s[128]", params))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /objedit [option] [objectid]");
			SendClientMessage(playerid, COLOR_GREY, "OPTIONS: mt | objek | posisi | fsize | msize | text");
			return 1;
		}
		if(!strcmp(params, "mt", true, 2))
		{
		    new mt;
		    if(sscanf(params, "s[128]ii", params, idx, mt))
	 		{
		 		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editobject mt [objectid] [mt on/off]");
		 		SendClientMessage(playerid, COLOR_WHITE, "1 = On | 0 = Off");
				return 1;
			}
	        if(!ObjectInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
			ObjectInfo[idx][oMT] = mt;
			SaveObj();
			if(ObjectInfo[idx][oMT] == 0)
	  		{
				DestroyDynamicObject(ObjectInfo[idx][obj]);
				ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
				format(String, 128, "Anda telah menonaktifkan Material Text Object ID: %d", idx);
			    SendClientMessage(playerid, COLOR_WHITE, String);
			}
			else if(ObjectInfo[idx][oMT] == 1)
			{
				DestroyDynamicObject(ObjectInfo[idx][obj]);
				ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
				format(String, 128, "%s", ObjectInfo[idx][objText]);
				SetDynamicObjectMaterialText(ObjectInfo[idx][obj], 0, ObjectInfo[idx][objText], ObjectInfo[idx][objMSize], "Arial", ObjectInfo[idx][objFSize], 1, 0xFFF5F5F5, 0xFF000000, 1);
				format(String, 128, "Anda telah mengaktifkan Material Text Object ID: %d", idx);
			    SendClientMessage(playerid, COLOR_WHITE, String);
			}
		}
		if(!strcmp(params, "objek", true, 5))
		{
		    new object;
		    if(sscanf(params, "s[128]ii", params, idx, object)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /objedit object [objectid] [new objectid]");
	        if(!ObjectInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
	        if(object == 0)
			{
				format(String, sizeof(String), "%d", object);
				cmd_deleteobject(playerid, String);
				return 1;
			}
			ObjectInfo[idx][oModel] = object;
			DestroyDynamicObject(ObjectInfo[idx][obj]);
			ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
		    format(String, sizeof(String), " You have set object ID %d's object ID to %d.", idx, object);
		    SendClientMessage(playerid, COLOR_WHITE, String);
			SaveObj();
		}
		else if(!strcmp(params, "posisi", true, 5))
		{
		    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /objedit position [objectid]");
	        if(!ObjectInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
			oEdit[playerid] = 1;
			oEditID[playerid] = idx;
			GetDynamicObjectPos(ObjectInfo[idx][obj], oPos[playerid][0], oPos[playerid][1], oPos[playerid][2]);
			GetDynamicObjectRot(ObjectInfo[idx][obj], oRot[playerid][0], oRot[playerid][1], oRot[playerid][2]);
			EditDynamicObject(playerid, ObjectInfo[idx][obj]);
		    format(String, sizeof(String), " You are now editing object ID %d's position.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, String);
		}
		else if(!strcmp(params, "fsize", true, 5))
		{
		    new fsize;
		    if(sscanf(params, "s[128]ii", params, idx, fsize)) return SendClientMessage(playerid, COLOR_WHITE, "/editobject fsize [ObjectID] [Font Size]");
	        if(!ObjectInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
			ObjectInfo[idx][objFSize] = fsize;
			DestroyDynamicObject(ObjectInfo[idx][obj]);
			ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
			SetDynamicObjectMaterialText(ObjectInfo[idx][obj], 0, ObjectInfo[idx][objText], ObjectInfo[idx][objMSize], "Arial", ObjectInfo[idx][objFSize], 1, 0xFFF5F5F5, 0xFF000000, 1);
			SaveObj();
		}
		else if(!strcmp(params, "msize", true, 5))
		{
		    new msize;
		    if(sscanf(params, "s[128]ii", params, idx, msize)) return SendClientMessage(playerid, COLOR_WHITE, "/editobject fsize [ObjectID] [Material Size]");
	        if(!ObjectInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
			ObjectInfo[idx][objMSize] = msize;
			DestroyDynamicObject(ObjectInfo[idx][obj]);
			ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
			SetDynamicObjectMaterialText(ObjectInfo[idx][obj], 0, ObjectInfo[idx][objText], ObjectInfo[idx][objMSize], "Arial", ObjectInfo[idx][objFSize], 1, 0xFFF5F5F5, 0xFF000000, 1);
			SaveObj();
		}
		else if(!strcmp(params, "text", true, 4))
		{
		    new password[256];
		    if(sscanf(params, "s[128]is[256]", params, idx, password)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editobject tulisan [ID Object] [Tulisan]");
	        if(!ObjectInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
			FormatText(password);
			format(ObjectInfo[idx][objText], 256, "%s", password);
			DestroyDynamicObject(ObjectInfo[idx][obj]);
			ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
			SetDynamicObjectMaterialText(ObjectInfo[idx][obj], 0, ObjectInfo[idx][objText], ObjectInfo[idx][objMSize], "Arial", ObjectInfo[idx][objFSize], 1, 0xFFF5F5F5, 0xFF000000, 1);
		    format(String, sizeof(String), " Anda telah menset Teks Objek ID %d menjadi {FF6347}%s", idx, password);
		    SendClientMessage(playerid, COLOR_WHITE, String);
			SaveObj();
		}
	}
	return 1;
}

CMD:deleteobject(playerid, params[])
{
	new idx, String[10000];
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deleteobject [objid]");
		if(!ObjectInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
		ObjectInfo[idx][oModel] = 0;
		ObjectInfo[idx][oX] = 0;
		ObjectInfo[idx][oY] = 0;
		ObjectInfo[idx][oZ] = 0;
		ObjectInfo[idx][oRX] = 0;
		ObjectInfo[idx][oRY] = 0;
		ObjectInfo[idx][oRZ] = 0;
		format(ObjectInfo[idx][objText], 256, "None");
		ObjectInfo[idx][objFSize] = 0;
		ObjectInfo[idx][objMSize] = 0;
		DestroyDynamicObject(ObjectInfo[idx][obj]);
		DestroyDynamic3DTextLabel(ObjectInfo[idx][oText]);
		format(String, sizeof(String), "AdmWarn: %s has deleted object ID %d.", GetName(playerid), idx);
	    ABroadCast(COLOR_DARKRED, String, 2);
		Log("logs/cobjects.log", String);
		SaveObj();
	}
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new String[10000];
	new idx = wsEditID[playerid];
	if(response == EDIT_RESPONSE_UPDATE)
	{
	    SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
	    if(wsEditID[playerid] != 0)
	    {
		    SetDynamicObjectPos(objectid, wsPos[playerid][0], wsPos[playerid][1], wsPos[playerid][2]);
			SetDynamicObjectRot(objectid, wsRot[playerid][0], wsRot[playerid][1], wsRot[playerid][2]);
			wsPos[playerid][0] = 0; wsPos[playerid][1] = 0; wsPos[playerid][2] = 0;
			wsRot[playerid][0] = 0; wsRot[playerid][1] = 0; wsRot[playerid][2] = 0;
			format(String, sizeof(String), " Anda membatalkan Edit Papan WorkShop ID %d.", idx);
			SendClientMessage(playerid, COLOR_WHITE, String);
			wsEdit[playerid] = 0;
			wsEditID[playerid] = 0;
		}
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		if(wsEdit[playerid] == 1)
		{
		    WsInfo[idx][wsPapanX] = x;
			WsInfo[idx][wsPapanY] = y;
			WsInfo[idx][wsPapanZ] = z;
			WsInfo[idx][wsPapanRotX] = rx;
			WsInfo[idx][wsPapanRotY] = ry;
			WsInfo[idx][wsPapanRotZ] = rz;
			SaveWS(idx);
		    wsEdit[playerid] = 0;
		    wsEditID[playerid] = 0;
		    format(String, sizeof(String), " Anda telah menyelesaikan Edit Posisi Papan WorkShop ID %d.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, String);
		}
	}
	idx = wsEditID[playerid];
	if(response == EDIT_RESPONSE_UPDATE)
	{
	    SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
	    if(wsEditID[playerid] != 0)
	    {
		    SetDynamicObjectPos(objectid, wsGatePos[playerid][0], wsGatePos[playerid][1], wsGatePos[playerid][2]);
			SetDynamicObjectRot(objectid, wsGateRot[playerid][0], wsGateRot[playerid][1], wsGateRot[playerid][2]);
			wsGatePos[playerid][0] = 0; wsGatePos[playerid][1] = 0; wsGatePos[playerid][2] = 0;
			wsGateRot[playerid][0] = 0; wsGateRot[playerid][1] = 0; wsGateRot[playerid][2] = 0;
			format(String, sizeof(String), " Anda membatalkan Edit Gate WorkShop ID %d.", idx);
			SendClientMessage(playerid, COLOR_WHITE, String);
			wsEdit[playerid] = 0;
			wsEditID[playerid] = 0;
		}
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		if(wsEdit[playerid] == 2)
		{
		    WsInfo[idx][wsGateCX] = x;
			WsInfo[idx][wsGateCY] = y;
			WsInfo[idx][wsGateCZ] = z;
			WsInfo[idx][wsGateCRX] = rx;
			WsInfo[idx][wsGateCRY] = ry;
			WsInfo[idx][wsGateCRZ] = rz;
			WsInfo[idx][wsStatus] = 0;
			SaveWS(idx);
		    wsEdit[playerid] = 0;
		    wsEditID[playerid] = 0;
		}
		else if(wsEdit[playerid] == 3)
		{
		    WsInfo[idx][wsGateOX] = x;
			WsInfo[idx][wsGateOY] = y;
			WsInfo[idx][wsGateOZ] = z;
			WsInfo[idx][wsGateORX] = rx;
			WsInfo[idx][wsGateORY] = ry;
			WsInfo[idx][wsGateORZ] = rz;
			WsInfo[idx][wsStatus] = 1;
			SaveWS(idx);
		    wsEdit[playerid] = 0;
		    wsEditID[playerid] = 0;
		}
	}
	idx = wsEditID[playerid];
	if(response == EDIT_RESPONSE_UPDATE)
	{
	    SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
	    if(wsEditID[playerid] != 0)
	    {
      		SetDynamicObjectPos(objectid, wsGatePos2[playerid][0], wsGatePos2[playerid][1], wsGatePos2[playerid][2]);
			SetDynamicObjectRot(objectid, wsGateRot2[playerid][0], wsGateRot2[playerid][1], wsGateRot2[playerid][2]);
			wsGatePos2[playerid][0] = 0; wsGatePos2[playerid][1] = 0; wsGatePos2[playerid][2] = 0;
			wsGateRot2[playerid][0] = 0; wsGateRot2[playerid][1] = 0; wsGateRot2[playerid][2] = 0;
			format(String, sizeof(String), " Anda membatalkan Pintu WorkShop ID %d.", idx);
			SendClientMessage(playerid, COLOR_WHITE, String);
			wsEdit[playerid] = 0;
			wsEditID[playerid] = 0;
		}
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		if(wsEdit[playerid] == 4)
		{
		    WsInfo[idx][wsGateCX2] = x;
			WsInfo[idx][wsGateCY2] = y;
			WsInfo[idx][wsGateCZ2] = z;
			WsInfo[idx][wsGateCRX2] = rx;
			WsInfo[idx][wsGateCRY2] = ry;
			WsInfo[idx][wsGateCRZ2] = rz;
			WsInfo[idx][wsStatus] = 0;
			SaveWS(idx);
		    wsEdit[playerid] = 0;
		    wsEditID[playerid] = 0;
		}
		else if(wsEdit[playerid] == 5)
		{
		    WsInfo[idx][wsGateOX2] = x;
			WsInfo[idx][wsGateOY2] = y;
			WsInfo[idx][wsGateOZ2] = z;
			WsInfo[idx][wsGateORX2] = rx;
			WsInfo[idx][wsGateORY2] = ry;
			WsInfo[idx][wsGateORZ2] = rz;
			WsInfo[idx][wsStatus] = 1;
			SaveWS(idx);
		    wsEdit[playerid] = 0;
		    wsEditID[playerid] = 0;
		}
	}
	idx = gymEditID[playerid];
	if(response == EDIT_RESPONSE_UPDATE)
	{
	    SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
	    if(gymEditID[playerid] != 0)
	    {
		    SetDynamicObjectPos(objectid, gymObjectPos[playerid][0], gymObjectPos[playerid][1], gymObjectPos[playerid][2]);
			SetDynamicObjectRot(objectid, gymObjectRot[playerid][0], gymObjectRot[playerid][1], gymObjectRot[playerid][2]);
			gymObjectPos[playerid][0] = 0; gymObjectPos[playerid][1] = 0; gymObjectPos[playerid][2] = 0;
			gymObjectRot[playerid][0] = 0; gymObjectRot[playerid][1] = 0; gymObjectRot[playerid][2] = 0;
			gymEdit[playerid] = 0;
			gymEditID[playerid] = 0;
		}
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		if(gymEdit[playerid] == 1)
		{
		    GYMInfo[idx][GYMOBJPos][0] = x;
	        GYMInfo[idx][GYMOBJPos][1] = y;
	        GYMInfo[idx][GYMOBJPos][2] = z;
	        GYMInfo[idx][GYMOBJPos][3] = rx;
	        GYMInfo[idx][GYMOBJPos][4] = ry;
	        GYMInfo[idx][GYMOBJPos][5] = rz;
	        DestroyDynamic3DTextLabel(GYMInfo[idx][GYMOBJText]);
   			format(String, 128, "[ID:%d]\n{00FF00}Available\n%d/1000", idx, GYMInfo[idx][GYMOBJCondition]);
			GYMInfo[idx][GYMOBJText] = CreateStreamed3DTextLabel(String, COLOR_ARWIN, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], 5.0, 0, 0);
			SaveGYMObject();
		    gymEdit[playerid] = 0;
		    gymEditID[playerid] = 0;
		}
	}
 	idx = oEditID[playerid];
	if(response == EDIT_RESPONSE_UPDATE)
	{
	    SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
	    if(oEditID[playerid] != 0)
	    {
		    SetDynamicObjectPos(objectid, oPos[playerid][0], oPos[playerid][1], oPos[playerid][2]);
			SetDynamicObjectRot(objectid, oRot[playerid][0], oRot[playerid][1], oRot[playerid][2]);
			oPos[playerid][0] = 0; oPos[playerid][1] = 0; oPos[playerid][2] = 0;
			oRot[playerid][0] = 0; oRot[playerid][1] = 0; oRot[playerid][2] = 0;
			format(String, sizeof(String), " Anda membatalkan Edit Object ID %d.", idx);
			SendClientMessage(playerid, COLOR_WHITE, String);
			oEdit[playerid] = 0;
			oEditID[playerid] = 0;
		}
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		if(oEdit[playerid] == 1)
		{
		    ObjectInfo[idx][oX] = x;
			ObjectInfo[idx][oY] = y;
			ObjectInfo[idx][oZ] = z;
			ObjectInfo[idx][oRX] = rx;
			ObjectInfo[idx][oRY] = ry;
			ObjectInfo[idx][oRZ] = rz;
			//O-bjectInfo[idx][oText] = CreateDynamic3DTextLabel(String, COLOR_WHITE, ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], 10);
		    oEdit[playerid] = 0;
		    oEditID[playerid] = 0;
		    format(String, sizeof(String), " Anda telah menyelesaikan Edit Posisi Object ID %d.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, String);
			SaveObj();
		}
	}
	idx = gEditID[playerid];
	if(response == EDIT_RESPONSE_UPDATE)
	{
	    SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
	    if(gEditID[playerid] != 0)
	    {
		    SetDynamicObjectPos(objectid, gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
			SetDynamicObjectRot(objectid, gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
			gPos[playerid][0] = 0; gPos[playerid][1] = 0; gPos[playerid][2] = 0;
			gRot[playerid][0] = 0; gRot[playerid][1] = 0; gRot[playerid][2] = 0;
			format(String, sizeof(String), " Anda telah membatalkan edit Gate ID %d.", idx);
			SendClientMessage(playerid, COLOR_WHITE, String);
			gEdit[playerid] = 0;
			gEditID[playerid] = 0;
		}
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		if(gEdit[playerid] == 1)
		{
		    GateInfo[idx][gCX] = x;
			GateInfo[idx][gCY] = y;
			GateInfo[idx][gCZ] = z;
			GateInfo[idx][gCRX] = rx;
			GateInfo[idx][gCRY] = ry;
			GateInfo[idx][gCRZ] = rz;
			format(String, sizeof(String), "Gate ID: %d", idx);
		    gEdit[playerid] = 0;
		    gEditID[playerid] = 0;
		    format(String, sizeof(String), " Anda telah menyelesaikan editan posisi menutup Gate ID %d.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, String);
		    GateInfo[idx][gStatus] = 0;
			SaveGates();
		}
		else if(gEdit[playerid] == 2)
		{
		    GateInfo[idx][gOX] = x;
			GateInfo[idx][gOY] = y;
			GateInfo[idx][gOZ] = z;
			GateInfo[idx][gORX] = rx;
			GateInfo[idx][gORY] = ry;
			GateInfo[idx][gORZ] = rz;
			gEdit[playerid] = 0;
			gEditID[playerid] = 0;
			format(String, sizeof(String), " Anda telah menyelesaikan editan posisi membuka Gate ID %d.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, String);
		    GateInfo[idx][gStatus] = 1;
		    SaveGates();
		}
	}
	new idxvs = pvEditID[playerid];
	new idxs = pvehEditID[playerid];
	GetDynamicObjectPos(PlayerVehicleInfo[playerid][idxs][pvToy][idxvs], pvPos[playerid][0], pvPos[playerid][1], pvPos[playerid][2]);
	GetDynamicObjectRot(PlayerVehicleInfo[playerid][idxs][pvToy][idxvs], pvRot[playerid][0], pvRot[playerid][1], pvRot[playerid][2]);
	if(response == EDIT_RESPONSE_UPDATE)
	{
	    SetDynamicObjectPos(objectid, z, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
	    if(pvEditID[playerid] != 999)
	    {
		    SetDynamicObjectPos(objectid, pvPos[playerid][0], pvPos[playerid][1], pvPos[playerid][2]);
			SetDynamicObjectRot(objectid, pvRot[playerid][0], pvRot[playerid][1], pvRot[playerid][2]);
			DestroyDynamicObject(PlayerVehicleInfo[playerid][idxs][pvToy][idxvs]);
			format(String, sizeof(String), " Anda membatalkan Edit Posisi Vehicle Object ID %d.", idxvs);
			SendClientMessage(playerid, COLOR_WHITE, String);
			pvEdit[playerid] = 0;
			pvEditID[playerid] = 0;
			pvehEditID[playerid] = 999;
			vslotselection[playerid] = 999;
		}
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
	    SetDynamicObjectPos(objectid, z, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		if(pvEdit[playerid] == 1)
		{
		    new Float:vx, Float:vy, Float:vz, Float:va, Float:ofaz;
		    new Float:ofx, Float:ofy, Float:ofz, Float: finalx;
		    new Float:finaly;
		    GetVehiclePos(PlayerVehicleInfo[playerid][idxs][pvId], vx, vy, vz);
		    GetVehicleZAngle(PlayerVehicleInfo[playerid][idxs][pvId], va);
			ofx = x-vx;
			ofy = y-vy;
			ofz = z-vz;
			ofaz = rz-va;
			finalx = ofx*floatcos(va, degrees)+ofy*floatsin(va, degrees);
			finaly = -ofx*floatsin(va, degrees)+ofy*floatcos(va, degrees);
		    PlayerVehicleInfo[playerid][idxs][pvToyPosX][idxvs] = finalx;
			PlayerVehicleInfo[playerid][idxs][pvToyPosY][idxvs] = finaly;
			PlayerVehicleInfo[playerid][idxs][pvToyPosZ][idxvs] = ofz;
			PlayerVehicleInfo[playerid][idxs][pvToyRotX][idxvs] = rx;
			PlayerVehicleInfo[playerid][idxs][pvToyRotY][idxvs] = ry;
			PlayerVehicleInfo[playerid][idxs][pvToyRotZ][idxvs] = ofaz;
			AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][idxs][pvToy][idxvs], PlayerVehicleInfo[playerid][idxs][pvId], finalx, finaly, ofz, rx, ry, rz);
			format(String, sizeof(String), "Anda telah mengedit Vehicle Object ID: %d", idxvs);
			SendClientMessage(playerid, COLOR_WHITE, String);
		    pvEdit[playerid] = 0;
		    pvEditID[playerid] = 0;
		    pvehEditID[playerid] = 999;
		    vslotselection[playerid] = 999;
		    format(String, sizeof(String), " Anda telah menyelesaikan Edit Posisi Vehicle Object ID %d.", idxvs);
		    SendClientMessage(playerid, COLOR_WHITE, String);
		}
	}
	return 1;
}

CMD:oused(playerid, params[])
{
	new String[10000], id;
	if(PlayerInfo[playerid][pAdmin] >= 10)
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /oused [Page 1-20+99]");
	if(id <= 0 || id > 20 || id == 99) return SendClientMessage(playerid, COLOR_ORANGE, "Halaman 1-20, 99=all");
	format(String, sizeof(String), "ID %d [Used Objects]:", id);
	SendClientMessage(playerid, COLOR_ORANGE, String);
	if(id == 1)
	{
		for(new idx=1; idx<50; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 2)
	{
		for(new idx=51; idx<100; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 3)
	{
		for(new idx=101; idx<150; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 4)
	{
		for(new idx=151; idx<200; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 5)
	{
		for(new idx=201; idx<250; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 6)
	{
		for(new idx=251; idx<300; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 7)
	{
		for(new idx=301; idx<350; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 8)
	{
		for(new idx=351; idx<400; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 9)
	{
		for(new idx=401; idx<450; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 10)
	{
		for(new idx=451; idx<500; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 11)
	{
		for(new idx=501; idx<550; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 12)
	{
		for(new idx=551; idx<600; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 13)
	{
		for(new idx=601; idx<650; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 14)
	{
		for(new idx=651; idx<700; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 15)
	{
		for(new idx=701; idx<750; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 16)
	{
		for(new idx=751; idx<800; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 17)
	{
		for(new idx=801; idx<850; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 18)
	{
		for(new idx=851; idx<900; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 19)
	{
		for(new idx=901; idx<950; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 20)
	{
		for(new idx=951; idx<1000; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	if(id == 99)
	{
		for(new idx; idx; idx++)
		{
		    if(ObjectInfo[idx][oModel])
		    {
				format(String, sizeof(String), "ID: %d | Object: %d", idx, ObjectInfo[idx][oModel]);
				SendClientMessage(playerid, COLOR_ORANGE, String);
		    }
		}
	}
	return 1;
}

CMD:creategate(playerid, params[])
{
	new String[10000], object;
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki ijin untuk menggunakan command tersebut.");
	if(sscanf(params, "i", object)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creategate [objectid]");
	for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(!GateInfo[idx][gModel])
	    {
	        GetPlayerPos(playerid, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]);
  			GateInfo[idx][gModel] = object;
			GateInfo[idx][gCX] = GateInfo[idx][gCX] + 2;
			GateInfo[idx][gCY] = GateInfo[idx][gCY] + 2;
			GateInfo[idx][gCRX] = 0;
			GateInfo[idx][gCRY] = 0;
			GateInfo[idx][gCRZ] = 0;
			GetPlayerPos(playerid, GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ]);
			GateInfo[idx][gOX] = GateInfo[idx][gOX] + 2;
			GateInfo[idx][gOY] = GateInfo[idx][gOY] + 2;
			GateInfo[idx][gORX] = 0;
			GateInfo[idx][gORY] = 0;
			GateInfo[idx][gORZ] = 0;
			GateInfo[idx][gStatus] = 0;
			format(GateInfo[idx][gPassword], 256, "");
			GateInfo[idx][gSpeed] = 2;
			GateInfo[idx][gRange] = 2;
			GateInfo[idx][gOwner] = 999;
			GateInfo[idx][gInt] = GetPlayerInterior(playerid);
			GateInfo[idx][gVW] = GetPlayerVirtualWorld(playerid);
			// Creating
			GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
			// Text
			format(String, sizeof(String), "AdmWarn: %s telah membuat Gate ID %d. (Object: %d)", GetName(playerid), idx, object);
		    ABroadCast(COLOR_DARKRED, String, 4);
			Log("logs/gates.log", String);
			idx = MAX_GATES;
		}
	}
	return 1;
}
CMD:gstatus(playerid, params[])
{
	new gateid;
	if(sscanf(params, "i", gateid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /gstatus [gateid]");
		return 1;
	}
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new String[10000];
		format(String,sizeof(String),"|___________ Gate Status (ID: %d) ___________|", gateid);
		format(String, sizeof(String), "Model: %d | HID: %d | VW: %d | Int: %d | Range: %d | Speed: %d | Pass: %s", GateInfo[gateid][gModel], GateInfo[gateid][gHID], GateInfo[gateid][gVW], GateInfo[gateid][gInt], GateInfo[gateid][gRange], GateInfo[gateid][gSpeed], GateInfo[gateid][gPassword]);
		SendClientMessageEx(playerid, COLOR_WHITE, String);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:gnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing all gates within 30 meters of you");
		new Float:X, Float:Y, Float:Z;
		new Float:X2, Float:Y2, Float:Z2;
  		GetPlayerPos(playerid, X2, Y2, Z2);
		for(new i;i<MAX_GATES;i++)
		{
			GetDynamicObjectPos(GateInfo[i][gGate], X, Y, Z);
			if(IsPlayerInRangeOfPoint(playerid, 30, X, Y, Z))
			{
				if(GateInfo[i][gModel] != 0)
				{
				    new String[10000];
			    	format(String, sizeof(String), "Gate ID %d | %f from you", i, GetDistance(X, Y, Z, X2, Y2, Z2));
			    	SendClientMessageEx(playerid, COLOR_WHITE, String);
				}
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
CMD:gused(playerid, params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used Gates]:");
	for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(GateInfo[idx][gModel])
	    {
			format(String, sizeof(String), "ID: %d | Object: %d | Speed: %f | Password: %s | Jarak: %f | Faction: %d", idx, GateInfo[idx][gModel], GateInfo[idx][gSpeed], GateInfo[idx][gPassword], GateInfo[idx][gRange], GateInfo[idx][gFaction]);
			SendClientMessage(playerid, COLOR_ORANGE, String);
	    }
	}
	return 1;
}

CMD:gotogate(playerid, params[])
{
    new idx, String[10000];
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotogate [gateid]");
	if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
	AC_BS_SetPlayerPos(playerid, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]);
	format(String, sizeof(String), " You have teleported to gate ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, String);
	return 1;
}

CMD:gotoobject(playerid, params[])
{
    new idx, String[10000];
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotoobj [objectid]");
	if(!ObjectInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
	AC_BS_SetPlayerPos(playerid, ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ]);
	format(String, sizeof(String), " You have teleported to object ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, String);
	return 1;
}

CMD:makemoneybag(playerid, params[])
{
	new amount, String[10000];
   	if(PlayerInfo[playerid][pAdmin] < 10) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params,"i", amount)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /makemoneybag [amount]");
	if(amount < 1) return SendClientMessage(playerid, COLOR_GREY, "cannot go below 1.");
	new Float:X,Float:Y,Float:Z;
	new location[MAX_ZONE_NAME];
	GetPlayerPos(playerid,X,Y,Z);
	CreateMoney(X, Y, Z, amount);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		AC_BS_SetPlayerPos(playerid, X, Y-2, Z);
	}
	SendClientMessage(playerid, COLOR_GREY,"* Money bag created.");
	GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
	format(String, sizeof(String), "{FF6347}%s has hidden a money bag in %s worth $%s!", PlayerInfo[playerid][pAdminName], location, FormatMoney(amount));
	SendClientMessageToAll(COLOR_LIGHTRED, String);
	return 1;
}


CMD:deletemoneybag(playerid, params[])
{
   	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
 	DeleteClosestBag(playerid);
	return 1;
}

CMD:deletemoneybags(playerid, params[])
{
	new String[10000];
   	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	DeleteAllBags();
 	SendClientMessage(playerid, COLOR_GREY, "* Money bags destroyed.");
	format(String, sizeof(String), "{FF6347}AdmCmd: %s has destroyed all money bags.", NORPN(playerid));
	SendAdminMessage(COLOR_RED, String);
	return 1;
}


CMD:gedit(playerid, params[])
{
	new String[10000], idx;
	if(PlayerInfo[playerid][pAdmin] < 8) return -1;
 	if(sscanf(params, "s[128]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit [option] [gateid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: objek | tutup | buka | speed | password | jarak | faction | hid | vw | int | owner | nonowner");
		SendClientMessage(playerid, COLOR_RED, "/gedit model 0 untuk menghapus Gate");
		return 1;
	}
	if(!strcmp(params, "owner", true, 5))
	{
	    new value;
		if(sscanf(params, "s[128]iu", params, idx, value)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /gedit owner [Gate ID] [Owner]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
		GateInfo[idx][gOwner] = 1;
		PlayerInfo[value][pGate] = idx;
		format(String, sizeof(String), "Gate Owner assigned to %s", GetPlayerNameEx(value));
   		SendClientMessageEx(playerid, COLOR_WHITE, String);
	    SaveGates();
		format(String, sizeof(String), "%s has edited GateID %d's Owner to %s.", GetName(playerid), idx, GetPlayerNameEx(value));
  		Log("logs/gedit.log", String);
	}
	if(!strcmp(params, "nonowner", true, 8))
	{
		if(sscanf(params, "s[128]i", params, idx)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /gedit owner [Gate ID] [Owner]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
		GateInfo[idx][gOwner] = 999;
   		SendClientMessageEx(playerid, COLOR_WHITE, "Gate Owner assigned to Non Owner");
	    SaveGates();
		format(String, sizeof(String), "%s has edited GateID %d's Owner to Non Owner.", GetName(playerid), idx);
  		Log("logs/gedit.log", String);
	}
	if(!strcmp(params, "vw", true, 2))
	{
		new value;
	    if(sscanf(params, "s[128]ii", params, idx, value)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit vw [gateid] [virtual world]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
		GateInfo[idx][gVW] = value;
		format(String, sizeof(String), "Gate VW assigned to %d", GateInfo[idx][gVW]);
		if(IsValidDynamicObject(GateInfo[idx][gGate])) DestroyDynamicObject(GateInfo[idx][gGate]);
   		SendClientMessageEx(playerid, COLOR_WHITE, String);
	    SaveGates();
		format(String, sizeof(String), "%s has edited GateID %d's VW to %d.", GetName(playerid), idx, value);
  		Log("logs/gedit.log", String);
	}
	if(!strcmp(params, "int", true, 3))
	{
		new value;
	    if(sscanf(params, "s[128]ii", params, idx, value)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit int [gateid] [interior]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
  		GateInfo[idx][gInt] = value;
    	format(String, sizeof(String), "Gate Int assigned to %d", GateInfo[idx][gInt]);
	    if(IsValidDynamicObject(GateInfo[idx][gGate])) DestroyDynamicObject(GateInfo[idx][gGate]);
	    SendClientMessageEx(playerid, COLOR_WHITE, String);
	    SaveGates();
	    format(String, sizeof(String), "%s has edited GateID %d's InteriorID to %d.", GetName(playerid), idx, value);
	    Log("logs/gedit.log", String);
	}
	if(!strcmp(params, "hid", true, 3))
	{
		new value;
		if(value > MAX_HOUSES) return SendClientMessageEx(playerid, COLOR_WHITE, "* Invalid House ID!");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
  		GateInfo[idx][gHID] = value;
		format(String, sizeof(String), "Gate HID assigned to %d", GateInfo[idx][gHID]);
  		SendClientMessageEx(playerid, COLOR_WHITE, String);
		SaveGates();
		format(String, sizeof(String), "%s has edited GateID %d's House ID to %d.", GetName(playerid), idx, value);
		Log("logs/gedit.log", String);
	}
	if(!strcmp(params, "faction", true, 7))
	{
	    new amount;
	    if(sscanf(params, "s[128]ii", params, idx, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit faction [gateid] [factionid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
		GateInfo[idx][gFaction] = amount;
		format(String, sizeof(String), "Anda telah mengganti Faction Pintu ini untuk %s", GetFactionNameEx(amount));
		SendClientMessage(playerid, COLOR_GREY, String);
		SaveGates();
	}
	if(!strcmp(params, "workshop", true, 8))
	{
	    new amount;
	    if(sscanf(params, "s[128]ii", params, idx, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit workshop [gateid] [workshopid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
		GateInfo[idx][gWorkshop] = amount;
		format(String, sizeof(String), "Anda telah mengganti Pintu ini untuk Workshop ID %d", amount);
		SendClientMessage(playerid, COLOR_GREY, String);
		SaveGates();
	}
	if(!strcmp(params, "objek", true, 5))
	{
	    new object;
	    if(sscanf(params, "s[128]ii", params, idx, object)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit object [gateid] [objekid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
        if(object == 0)
		{
			GateInfo[idx][gModel] = 0;
			GateInfo[idx][gCX] = 0;
			GateInfo[idx][gCY] = 0;
			GateInfo[idx][gCZ] = 0;
			GateInfo[idx][gCRX] = 0;
			GateInfo[idx][gCRY] = 0;
			GateInfo[idx][gCRZ] = 0;
			GateInfo[idx][gOX] = 0;
			GateInfo[idx][gOY] = 0;
			GateInfo[idx][gOZ] = 0;
			GateInfo[idx][gORX] = 0;
			GateInfo[idx][gORY] = 0;
			GateInfo[idx][gORZ] = 0;
			GateInfo[idx][gStatus] = 0;
			format(GateInfo[idx][gPassword], 256, "");
			GateInfo[idx][gSpeed] = 0;
			GateInfo[idx][gRange] = 0;
			DestroyDynamicObject(GateInfo[idx][gGate]);
		}
		GateInfo[idx][gModel] = object;
		DestroyDynamicObject(GateInfo[idx][gGate]);
		GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
	    format(String, sizeof(String), " Anda telah menset objeck gate ID %d menjadi %d.", idx, object);
	    SendClientMessage(playerid, COLOR_WHITE, String);
		SaveGates();
	}
	else if(!strcmp(params, "jarak", true, 5))
 	{
	    new Float:range;
	    if(sscanf(params, "s[128]if", params, idx, range)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit [gateid] [jarak]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
		GateInfo[idx][gRange] = range;
	    format(String, sizeof(String), " Anda telah menset Jarak Gate ID %d menjadi %f.", idx, range);
	    SendClientMessage(playerid, COLOR_WHITE, String);
		SaveGates();
  	}
	else if(!strcmp(params, "tutup", true, 5))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit [gateid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
		gEdit[playerid] = 1;
		gEditID[playerid] = idx;
		GetDynamicObjectPos(GateInfo[idx][gGate], gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		GetDynamicObjectRot(GateInfo[idx][gGate], gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		EditDynamicObject(playerid, GateInfo[idx][gGate]);
	    format(String, sizeof(String), " Anda telah menset posisi menutup Gate ID %d.", idx);
	    SendClientMessage(playerid, COLOR_WHITE, String);
	}
	else if(!strcmp(params, "buka", true, 4))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit [gateid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
		gEdit[playerid] = 2;
		gEditID[playerid] = idx;
		GetDynamicObjectPos(GateInfo[idx][gGate], gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		GetDynamicObjectRot(GateInfo[idx][gGate], gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		EditDynamicObject(playerid, GateInfo[idx][gGate]);
	    format(String, sizeof(String), " Anda telah menset posisi membuka Gate ID %d.", idx);
	    SendClientMessage(playerid, COLOR_WHITE, String);
	}
	else if(!strcmp(params, "speed", true, 5))
	{
	    new Float:speed;
	    if(sscanf(params, "s[128]if", params, idx, speed)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit [gateid] [speed]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
		GateInfo[idx][gSpeed] = speed;
	    format(String, sizeof(String), " Anda telah menset kecepatan gerakan Gate ID %d menjadi %f.", idx, speed);
	    SendClientMessage(playerid, COLOR_WHITE, String);
		SaveGates();
	}
	else if(!strcmp(params, "password", true, 8))
	{
	    new password[256];
	    if(sscanf(params, "s[128]is[256]", params, idx, password)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit [gateid] [password]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "ID gate salah.");
		format(GateInfo[idx][gPassword], 256, "%s", password);
	    format(String, sizeof(String), " Anda telah menset password Gate ID %d menjadi {FF6347}%s", idx, password);
	    SendClientMessage(playerid, COLOR_WHITE, String);
		SaveGates();
	}
	return 1;
}

CMD:fedithq(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] > 3)
	{
		new family, x_hq[64], String[10000];
		if(sscanf(params, "is[64]", family, x_hq))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /fedithq [family] [name]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Create, Delete, Editexterior, Editinterior, Custominterior");
			return 1;
		}

		if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 14!"); return 1; }
		family -= 1;
		if(strcmp(x_hq,"create",true) == 0)
		{
	   		SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 1);
			SendClientMessageEx(playerid, COLOR_WHITE, "Please stand where you want the entrance to be at.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Once ready press the fire button.");
		}
		else if(strcmp(x_hq,"delete",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 4);
			format(String,128,"Are you sure you want to delete this HQ?");
			ShowPlayerDialog(playerid,HQDELETE,DIALOG_STYLE_MSGBOX,"Warning:",String,"Yes","No");
		}
		else if(strcmp(x_hq,"editexterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 5);
			SendClientMessageEx(playerid, COLOR_WHITE, "Please stand where you want the entrance to be at.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Once ready press the fire button.");
		}
		else if(strcmp(x_hq,"editinterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 6);
			SendClientMessageEx(playerid, COLOR_WHITE, "Please stand where you want the exit to be at.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Once ready press the fire button.");
		}
		else if(strcmp(x_hq,"custominterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 3);
			format(String,128,"Is '%s' interior a custom mapped one?", FamilyInfo[family][FamilyName]);
			ShowPlayerDialog(playerid,HQCUSTOMINT,DIALOG_STYLE_MSGBOX,"Warning:",String,"Yes","No");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "	Not a valid HQ name.");
		}
		SaveFamilies();
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not an Admin!");
	}
	return 1;
}

CMD:ddname(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000], doorid, doorname[128];

	if(sscanf(params, "ds[128]", doorid, doorname)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ddname [doorid] [name]");
	FormatText(doorname);
	format(DDoorsInfo[doorid][ddDescription], 128, "%s", doorname);
	SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the name of the door!");
	if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
	if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
	CreateDynamicDoor(doorid);
	SaveDynamicDoors();
	format(String, sizeof(String), "%s has edited DoorID %d's Name to %s.", GetName(playerid), doorid, doorname);
	Log("logs/ddedit.log", String);
	return 1;
}

CMD:ddpass(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
		return SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");

	new String[10000],
		doorid,
		doorpass[24];

	if(sscanf(params, "ds[24]", doorid, doorpass)) { SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ddpass [doorid] [pass]"); SendClientMessageEx(playerid, COLOR_WHITE, "To remove the password on the door set the password to 'none' "); return 1; }
	format(DDoorsInfo[doorid][dPass], 24, "%s", doorpass);
	SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the password of that door.");
	SaveDynamicDoors();
	format(String, sizeof(String), "%s has edited DoorID %d's password to %s.", GetName(playerid), doorid, doorpass);
	Log("logs/ddedit.log", String);
	return 1;
}

CMD:dmpedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 8)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000], choice[32], mapiconid, amount;
	if(sscanf(params, "s[32]dD", choice, mapiconid, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /dmpedit [name] [mapiconid] [(Optional)amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Position, MarkerType, Color, Delete");
		return 1;
	}

	if(mapiconid < 0 || mapiconid >= MAX_DMAPICONS)
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "Invalid Map Icon ID!");
	}

	if(strcmp(choice, "position", true) == 0)
	{
		GetPlayerPos(playerid, DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ]);
		DMPInfo[mapiconid][dmpInt] = GetPlayerInterior(playerid);
		DMPInfo[mapiconid][dmpVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the position!");
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		SaveDynamicMapIcons();
		format(String, sizeof(String), "%s has edited MapIconID %d's Position.", GetName(playerid), mapiconid);
		Log("logs/dmpedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You have deleted the map icon!");
		DMPInfo[mapiconid][dmpPosX] = 0.0;
		DMPInfo[mapiconid][dmpPosY] = 0.0;
		DMPInfo[mapiconid][dmpPosZ] = 0.0;
		DMPInfo[mapiconid][dmpVW] = 0;
		DMPInfo[mapiconid][dmpInt] = 0;
		DMPInfo[mapiconid][dmpMarkerType] = 0;
		DMPInfo[mapiconid][dmpColor] = 0;
		SaveDynamicMapIcons();
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		format(String, sizeof(String), "%s has deleted MapIconID %d.", GetName(playerid), mapiconid);
		Log("logs/dmpedit.log", String);
		return 1;

	}
	else if(strcmp(choice, "markertype", true) == 0)
	{
		DMPInfo[mapiconid][dmpMarkerType] = amount;
		format(String, sizeof(String), "You have set the marker type to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, String);
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		format(String, sizeof(String), "%s has edited MapIconID %d's Marker Type to %d.", GetName(playerid), mapiconid, amount);
		Log("logs/dmpedit.log", String);
	}
	else if(strcmp(choice, "color", true) == 0)
	{
		DMPInfo[mapiconid][dmpColor] = amount;
		format(String, sizeof(String), "You have set the color to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, String);
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		format(String, sizeof(String), "%s has edited MapIconID %d's Color to %d.", GetName(playerid), mapiconid, amount);
		Log("logs/dmpedit.log", String);
	}
	SaveDynamicMapIcons();
	return 1;
}
CMD:ddnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing all door within 30 meters of you");
		new Float:X, Float:Y, Float:Z;
  		GetPlayerPos(playerid, X, Y, Z);
		for(new i;i<MAX_DDOORS;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30, DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]))
			{
			    new String[10000];
			   	format(String, sizeof(String), "Door ID %d | %f from you", i, GetDistance(DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ], X, Y, Z));
			   	SendClientMessageEx(playerid, COLOR_WHITE, String);
   			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:closeallcell(playerid, params[]){
 if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	{
		if(PlayerInfo[playerid][pMember] >= 1){
			MoveObject(cell[0],1827.80004883,-1729.19995117,5202.79980469,0.50);
			MoveObject(cell[1],1831.00000000,-1729.19995117,5202.79980469,0.50);
			MoveObject(cell[2],1834.19995117,-1729.19995117,5202.79980469,0.50);
			MoveObject(cell[3],1837.40002441,-1729.19995117,5202.79980469,0.50);
			MoveObject(cell[4],1840.59997559,-1729.19995117,5202.79980469,0.50);
			MoveObject(cell[11],1843.80004883,-1729.19995117,5202.79980469,0.50);
			MoveObject(cell[18],1827.80004883,-1714.30004883,5202.79980469,0.50);
			MoveObject(cell[19],1831.00000000,-1714.30004883,5202.79980469,0.50);
			MoveObject(cell[20],1834.19995117,-1714.30004883,5202.79980469,0.50);
			MoveObject(cell[21],1837.40002441,-1714.30004883,5202.79980469,0.50);
			MoveObject(cell[22],1840.59997559,-1714.30004883,5202.79980469,0.50);
			MoveObject(cell[23],1843.80004883,-1714.30004883,5202.79980469,0.50);
			MoveObject(cell[24],1843.80004883,-1714.30004883,5206.39990234,0.50);
			MoveObject(cell[25],1840.59997559,-1714.30004883,5206.39990234,0.50);
			MoveObject(cell[26],1837.40002441,-1714.30004883,5206.39990234,0.50);
			MoveObject(cell[27],1834.19995117,-1714.30004883,5206.39990234,0.50);
			MoveObject(cell[28],1831.00000000,-1714.30004883,5206.39990234,0.50);
			MoveObject(cell[29],1827.80004883,-1714.30004883,5206.39990234,0.50);
			MoveObject(cell[5],1827.80004883,-1729.19995117,5206.39990234,0.50);
			MoveObject(cell[6],1831.00000000,-1729.19995117,5206.39990234,0.50);
			MoveObject(cell[7],1834.19995117,-1729.19995117,5206.39990234,0.50);
			MoveObject(cell[8],1837.40002441,-1729.19995117,5206.39990234,0.50);
			MoveObject(cell[9],1840.59997559,-1729.19995117,5206.39990234,0.50);
			MoveObject(cell[10],1843.80004883,-1729.19995117,5206.39990234,0.50);
			MoveObject(cell[12],1843.80004883,-1729.19995117,5209.89990234,0.50);
			MoveObject(cell[13],1840.59997559,-1729.19995117,5209.89990234,0.50);
			MoveObject(cell[14],1837.40002441,-1729.19995117,5209.89990234,0.50);
			MoveObject(cell[15],1834.19995117,-1729.19995117,5209.89990234,0.50);
			MoveObject(cell[16],1831.00000000,-1729.19995117,5209.89990234,0.50);
			MoveObject(cell[17],1827.80004883,-1729.19995117,5209.89990234,0.50);
			MoveObject(cell[30],1827.80004883,-1714.30004883,5209.89990234,0.50);
			MoveObject(cell[31],1831.00000000,-1714.30004883,5209.89990234,0.50);
			MoveObject(cell[32],1834.19995117,-1714.30004883,5209.89990234,0.50);
			MoveObject(cell[33],1837.40002441,-1714.30004883,5209.89990234,0.50);
			MoveObject(cell[34],1840.59997559,-1714.30004883,5209.89990234,0.50);
			MoveObject(cell[35],1843.80004883,-1714.30004883,5209.89990234,0.50);
		}
	}
	return 1;
}

CMD:openallcell(playerid, params[]){
 if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3){
		if(PlayerInfo[playerid][pMember] >= 1){
			MoveObject(cell[0],1827.80004883+1.25,-1729.19995117,5202.79980469,0.50);
			MoveObject(cell[1],1831.00000000+1.25,-1729.19995117,5202.79980469,0.50);
			MoveObject(cell[2],1834.19995117+1.25,-1729.19995117,5202.79980469,0.50);
			MoveObject(cell[3],1837.40002441+1.25,-1729.19995117,5202.79980469,0.50);
			MoveObject(cell[4],1840.59997559+1.25,-1729.19995117,5202.79980469,0.50);
			MoveObject(cell[11],1843.80004883+1.25,-1729.19995117,5202.79980469,0.50);
			MoveObject(cell[18],1827.80004883+1.25,-1714.30004883,5202.79980469,0.50);
			MoveObject(cell[19],1831.00000000+1.25,-1714.30004883,5202.79980469,0.50);
			MoveObject(cell[20],1834.19995117+1.25,-1714.30004883,5202.79980469,0.50);
			MoveObject(cell[21],1837.40002441+1.25,-1714.30004883,5202.79980469,0.50);
			MoveObject(cell[22],1840.59997559+1.25,-1714.30004883,5202.79980469,0.50);
			MoveObject(cell[23],1843.80004883+1.25,-1714.30004883,5202.79980469,0.50);
			MoveObject(cell[24],1843.80004883+1.25,-1714.30004883,5206.39990234,0.50);
			MoveObject(cell[25],1840.59997559+1.25,-1714.30004883,5206.39990234,0.50);
			MoveObject(cell[26],1837.40002441+1.25,-1714.30004883,5206.39990234,0.50);
			MoveObject(cell[27],1834.19995117+1.25,-1714.30004883,5206.39990234,0.50);
			MoveObject(cell[28],1831.00000000+1.25,-1714.30004883,5206.39990234,0.50);
			MoveObject(cell[29],1827.80004883+1.25,-1714.30004883,5206.39990234,0.50);
			MoveObject(cell[5],1827.80004883+1.25,-1729.19995117,5206.39990234,0.50);
			MoveObject(cell[6],1831.00000000+1.25,-1729.19995117,5206.39990234,0.50);
			MoveObject(cell[7],1834.19995117+1.25,-1729.19995117,5206.39990234,0.50);
			MoveObject(cell[8],1837.40002441+1.25,-1729.19995117,5206.39990234,0.50);
			MoveObject(cell[9],1840.59997559+1.25,-1729.19995117,5206.39990234,0.50);
			MoveObject(cell[10],1843.80004883+1.25,-1729.19995117,5206.39990234,0.50);
			MoveObject(cell[12],1843.80004883+1.25,-1729.19995117,5209.89990234,0.50);
			MoveObject(cell[13],1840.59997559+1.25,-1729.19995117,5209.89990234,0.50);
			MoveObject(cell[14],1837.40002441+1.25,-1729.19995117,5209.89990234,0.50);
			MoveObject(cell[15],1834.19995117+1.25,-1729.19995117,5209.89990234,0.50);
			MoveObject(cell[16],1831.00000000+1.25,-1729.19995117,5209.89990234,0.50);
			MoveObject(cell[17],1827.80004883+1.25,-1729.19995117,5209.89990234,0.50);
			MoveObject(cell[30],1827.80004883+1.25,-1714.30004883,5209.89990234,0.50);
			MoveObject(cell[31],1831.00000000+1.25,-1714.30004883,5209.89990234,0.50);
			MoveObject(cell[32],1834.19995117+1.25,-1714.30004883,5209.89990234,0.50);
			MoveObject(cell[33],1837.40002441+1.25,-1714.30004883,5209.89990234,0.50);
			MoveObject(cell[34],1840.59997559+1.25,-1714.30004883,5209.89990234,0.50);
			MoveObject(cell[35],1843.80004883+1.25,-1714.30004883,5209.89990234,0.50);
		}
	}
	return 1;
}

CMD:opencell(playerid, params[]){
	new cellid;
 if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3){
		if(PlayerInfo[playerid][pMember] >= 1){
		    if(sscanf(params,"d",cellid)) return SendClientMessage(playerid, COLOR_WHITE," /opencell [cell number]");
		    cellid--;
		    switch(cellid){
				case 0 :MoveObject(cell[0],1827.80004883+1.25,-1729.19995117,5202.79980469,0.50);
				case 1 :MoveObject(cell[1],1831.00000000+1.25,-1729.19995117,5202.79980469,0.50);
				case 2 :MoveObject(cell[2],1834.19995117+1.25,-1729.19995117,5202.79980469,0.50);
				case 3 :MoveObject(cell[3],1837.40002441+1.25,-1729.19995117,5202.79980469,0.50);
				case 4 :MoveObject(cell[4],1840.59997559+1.25,-1729.19995117,5202.79980469,0.50);
				case 5 :MoveObject(cell[11],1843.80004883+1.25,-1729.19995117,5202.79980469,0.50);

				case 11 :MoveObject(cell[18],1827.80004883+1.25,-1714.30004883,5202.79980469,0.50);
				case 10 :MoveObject(cell[19],1831.00000000+1.25,-1714.30004883,5202.79980469,0.50);
				case 9 :MoveObject(cell[20],1834.19995117+1.25,-1714.30004883,5202.79980469,0.50);
				case 8 :MoveObject(cell[21],1837.40002441+1.25,-1714.30004883,5202.79980469,0.50);
				case 7 :MoveObject(cell[22],1840.59997559+1.25,-1714.30004883,5202.79980469,0.50);
				case 6 :MoveObject(cell[23],1843.80004883+1.25,-1714.30004883,5202.79980469,0.50);

				case 17 :MoveObject(cell[24],1843.80004883+1.25,-1714.30004883,5206.39990234,0.50);
				case 16 :MoveObject(cell[25],1840.59997559+1.25,-1714.30004883,5206.39990234,0.50);
				case 15 :MoveObject(cell[26],1837.40002441+1.25,-1714.30004883,5206.39990234,0.50);
				case 14 :MoveObject(cell[27],1834.19995117+1.25,-1714.30004883,5206.39990234,0.50);
				case 13 :MoveObject(cell[28],1831.00000000+1.25,-1714.30004883,5206.39990234,0.50);
				case 12 :MoveObject(cell[29],1827.80004883+1.25,-1714.30004883,5206.39990234,0.50);

				case 23 :MoveObject(cell[5],1827.80004883+1.25,-1729.19995117,5206.39990234,0.50);
				case 22 :MoveObject(cell[6],1831.00000000+1.25,-1729.19995117,5206.39990234,0.50);
				case 21 :MoveObject(cell[7],1834.19995117+1.25,-1729.19995117,5206.39990234,0.50);
				case 20 :MoveObject(cell[8],1837.40002441+1.25,-1729.19995117,5206.39990234,0.50);
				case 19 :MoveObject(cell[9],1840.59997559+1.25,-1729.19995117,5206.39990234,0.50);
				case 18 :MoveObject(cell[10],1843.80004883+1.25,-1729.19995117,5206.39990234,0.50);

				case 29 :MoveObject(cell[12],1843.80004883+1.25,-1729.19995117,5209.89990234,0.50);
				case 28 :MoveObject(cell[13],1840.59997559+1.25,-1729.19995117,5209.89990234,0.50);
				case 27 :MoveObject(cell[14],1837.40002441+1.25,-1729.19995117,5209.89990234,0.50);
				case 26 :MoveObject(cell[15],1834.19995117+1.25,-1729.19995117,5209.89990234,0.50);
				case 25 :MoveObject(cell[16],1831.00000000+1.25,-1729.19995117,5209.89990234,0.50);
				case 24 :MoveObject(cell[17],1827.80004883+1.25,-1729.19995117,5209.89990234,0.50);

				case 35 :MoveObject(cell[30],1827.80004883+1.25,-1714.30004883,5209.89990234,0.50);
				case 34 :MoveObject(cell[31],1831.00000000+1.25,-1714.30004883,5209.89990234,0.50);
				case 33 :MoveObject(cell[32],1834.19995117+1.25,-1714.30004883,5209.89990234,0.50);
				case 32 :MoveObject(cell[33],1837.40002441+1.25,-1714.30004883,5209.89990234,0.50);
			 	case 31 :MoveObject(cell[34],1840.59997559+1.25,-1714.30004883,5209.89990234,0.50);
				case 30 :MoveObject(cell[35],1843.80004883+1.25,-1714.30004883,5209.89990234,0.50);

				default : SendClientMessage(playerid,COLOR_WHITE," /opencell [cell number]");
			}
		}
	}
	return 1;
}

CMD:closecell(playerid, params[])
{
	new cellid;
 if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3){
		if(PlayerInfo[playerid][pMember] >= 1){
		    if(sscanf(params,"d",cellid)) return SendClientMessage(playerid,COLOR_WHITE," /closecell [cell number]");
		    cellid--;
		    switch(cellid){
                case 0 :MoveObject(cell[0],1827.80004883,-1729.19995117,5202.79980469,0.50);
				case 1 :MoveObject(cell[1],1831.00000000,-1729.19995117,5202.79980469,0.50);
				case 2 :MoveObject(cell[2],1834.19995117,-1729.19995117,5202.79980469,0.50);
				case 3 :MoveObject(cell[3],1837.40002441,-1729.19995117,5202.79980469,0.50);
				case 4 :MoveObject(cell[4],1840.59997559,-1729.19995117,5202.79980469,0.50);
				case 5 :MoveObject(cell[11],1843.80004883,-1729.19995117,5202.79980469,0.50);

				case 11 :MoveObject(cell[18],1827.80004883,-1714.30004883,5202.79980469,0.50);
				case 10 :MoveObject(cell[19],1831.00000000,-1714.30004883,5202.79980469,0.50);
				case 9 :MoveObject(cell[20],1834.19995117,-1714.30004883,5202.79980469,0.50);
				case 8 :MoveObject(cell[21],1837.40002441,-1714.30004883,5202.79980469,0.50);
				case 7 :MoveObject(cell[22],1840.59997559,-1714.30004883,5202.79980469,0.50);
				case 6 :MoveObject(cell[23],1843.80004883,-1714.30004883,5202.79980469,0.50);

				case 17 :MoveObject(cell[24],1843.80004883,-1714.30004883,5206.39990234,0.50);
				case 16 :MoveObject(cell[25],1840.59997559,-1714.30004883,5206.39990234,0.50);
				case 15 :MoveObject(cell[26],1837.40002441,-1714.30004883,5206.39990234,0.50);
				case 14 :MoveObject(cell[27],1834.19995117,-1714.30004883,5206.39990234,0.50);
				case 13 :MoveObject(cell[28],1831.00000000,-1714.30004883,5206.39990234,0.50);
				case 12 :MoveObject(cell[29],1827.80004883,-1714.30004883,5206.39990234,0.50);

				case 23 :MoveObject(cell[5],1827.80004883,-1729.19995117,5206.39990234,0.50);
				case 22 :MoveObject(cell[6],1831.00000000,-1729.19995117,5206.39990234,0.50);
				case 21 :MoveObject(cell[7],1834.19995117,-1729.19995117,5206.39990234,0.50);
				case 20 :MoveObject(cell[8],1837.40002441,-1729.19995117,5206.39990234,0.50);
				case 19 :MoveObject(cell[9],1840.59997559,-1729.19995117,5206.39990234,0.50);
				case 18 :MoveObject(cell[10],1843.80004883,-1729.19995117,5206.39990234,0.50);

				case 29 :MoveObject(cell[12],1843.800048835,-1729.19995117,5209.89990234,0.50);
				case 28 :MoveObject(cell[13],1840.59997559,-1729.19995117,5209.89990234,0.50);
				case 27 :MoveObject(cell[14],1837.40002441,-1729.19995117,5209.89990234,0.50);
				case 26 :MoveObject(cell[15],1834.19995117,-1729.19995117,5209.89990234,0.50);
				case 25 :MoveObject(cell[16],1831.00000000,-1729.19995117,5209.89990234,0.50);
				case 24 :MoveObject(cell[17],1827.80004883,-1729.19995117,5209.89990234,0.50);

				case 35 :MoveObject(cell[30],1827.80004883,-1714.30004883,5209.89990234,0.50);
				case 34 :MoveObject(cell[31],1831.00000000,-1714.30004883,5209.89990234,0.50);
				case 33 :MoveObject(cell[32],1834.19995117,-1714.30004883,5209.89990234,0.50);
				case 32 :MoveObject(cell[33],1837.40002441,-1714.30004883,5209.89990234,0.50);
			 	case 31 :MoveObject(cell[34],1840.59997559,-1714.30004883,5209.89990234,0.50);
				case 30 :MoveObject(cell[35],1843.80004883,-1714.30004883,5209.89990234,0.50);
		        default : SendClientMessage(playerid,COLOR_WHITE, " /opencell [cell number]");
			}
		}
	}
	return 1;
}

CMD:opendoors(playerid, params[]){
  if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3){
		if(PlayerInfo[playerid][pMember] >= 1){
			if(IsPlayerInRangeOfPoint(playerid, 2.0,1849.32995605,-1714.31005859,5201.54003906))
	        {
	            MoveObject(door[0],1849.32995605-1.25,-1714.31005859,5201.54003906,0.50);
	            SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: door 1 has been opened!");
	            return 1;
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 2.0,1847.31994629,-1722.56994629,5201.54003906))
	        {
	            MoveObject(door[1],1847.31994629,-1722.56994629-1.25,5201.54003906,0.50);
	            SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: door 2 has been opened!");
	            return 1;
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 2.0,1854.01953125,-1726.27343750,5201.54003906))
	        {
	            MoveObject(door[2],1854.01953125,-1726.27343750-1.25,5201.54003906,0.50);
	            SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: door 3 has been opened!");
	            return 1;
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 2.0,1862.02246094,-1710.91992188,5201.54003906))
	        {
	            MoveObject(door[3],1862.02246094-1.25,-1710.91992188,5201.54003906,0.50);
	            SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: door 4 has been opened!");
	            return 1;
	        }
	       else SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: You are not near any door!");
		}
	}
	return 1;
}

CMD:closedoor(playerid, params[]){
 if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3){
		if(PlayerInfo[playerid][pMember] >= 1){
			if(IsPlayerInRangeOfPoint(playerid, 2.0,1849.32995605,-1714.31005859,5201.54003906))
	        {
	            MoveObject(door[0],1849.32995605,-1714.31005859,5201.54003906,0.50);
	            SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: door 1 has been closed!");
	            return 1;
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 2.0,1847.31994629,-1722.56994629,5201.54003906))
	        {
	            MoveObject(door[1],1847.31994629,-1722.56994629,5201.54003906,0.50);
	            SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: door 2 has been closed!");
	            return 1;
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 2.0,1854.01953125,-1726.27343750,5201.54003906))
	        {
	            MoveObject(door[2],1854.01953125,-1726.27343750,5201.54003906,0.50);
	            SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: door 3 has been closed!");
	            return 1;
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 2.0,1862.02246094,-1710.91992188,5201.54003906))
	        {
	            MoveObject(door[3],1862.02246094,-1710.91992188,5201.54003906,0.50);
	            SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: door 4 has been closed!");
	            return 1;
	        }
	        else SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: You are not near any door!");
		}
	}
	return 1;
}

CMD:ddedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 8)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000], choice[32], doorid, amount;
	if(sscanf(params, "s[32]dD", choice, doorid, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ddedit [name] [doorid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, VIP");
		SendClientMessageEx(playerid, COLOR_GREY, "Family, Faction, Wanted, Admin, VehicleAble, Color, PickupModel, Delete");
		return 1;
	}

	if(doorid >= MAX_DDOORS)
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "Invalid Door ID!");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddInteriorA]);
		DDoorsInfo[doorid][ddInteriorInt] = GetPlayerInterior(playerid);
		DDoorsInfo[doorid][ddInteriorVW] = GetPlayerVirtualWorld(playerid);
		DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(19130, 23, DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ], DDoorsInfo[doorid][ddInteriorVW]);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the interior!");
		SaveDynamicDoors();
		format(String, sizeof(String), "%s has edited DoorID %d's Interior.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomInterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomInterior] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Door set to custom interior!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomInterior] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Door set to normal (not custom) interior!");
		}
		SaveDynamicDoors();
		format(String, sizeof(String), "%s has edited DoorID %d's CustomInterior.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomExterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomExterior] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Door set to custom exterior!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomExterior] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Door set to normal (not custom) exterior!");
		}
		SaveDynamicDoors();
		format(String, sizeof(String), "%s has edited DoorID %d's CustomExterior.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
		DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
		DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the exterior!");
		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);
		SaveDynamicDoors();
		format(String, sizeof(String), "%s has edited DoorID %d's Exterior.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
	}
	else if(strcmp(choice, "vip", true) == 0)
	{
		DDoorsInfo[doorid][ddVIP] = amount;

		format(String, sizeof(String), "You have changed the VIP Level to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, String);

		SaveDynamicDoors();
		format(String, sizeof(String), "%s has edited DoorID %d's VIP Level.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "family", true) == 0)
	{
		DDoorsInfo[doorid][ddFamily] = amount;

		format(String, sizeof(String), "You have changed the Family to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, String);

		SaveDynamicDoors();
		format(String, sizeof(String), "%s has edited DoorID %d's Family.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "faction", true) == 0)
	{
		DDoorsInfo[doorid][ddFaction] = amount;

		format(String, sizeof(String), "You have changed the Faction to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, String);

		SaveDynamicDoors();
		format(String, sizeof(String), "%s has edited DoorID %d's Faction.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "admin", true) == 0)
	{
		DDoorsInfo[doorid][ddAdmin] = amount;

		format(String, sizeof(String), "You have changed the Admin Level to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, String);

		SaveDynamicDoors();
		format(String, sizeof(String), "%s has edited DoorID %d's Admin Level.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "wanted", true) == 0)
	{
		DDoorsInfo[doorid][ddWanted] = amount;

		format(String, sizeof(String), "You have changed the Wanted to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, String);

		SaveDynamicDoors();
		format(String, sizeof(String), "%s has edited DoorID %d's Wanted.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "vehicleable", true) == 0)
	{
		DDoorsInfo[doorid][ddVehicleAble] = amount;

		format(String, sizeof(String), "You have changed the VehicleAble to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, String);

		SaveDynamicDoors();
		format(String, sizeof(String), "%s has edited DoorID %d's VehicleAble.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "color", true) == 0)
	{
		DDoorsInfo[doorid][ddColor] = amount;

		format(String, sizeof(String), "You have changed the Color to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, String);

		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(String, sizeof(String), "%s has edited DoorID %d's Color.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "pickupmodel", true) == 0)
	{
		DDoorsInfo[doorid][ddPickupModel] = amount;

		format(String, sizeof(String), "You have changed the PickupModel to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, String);

		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(String, sizeof(String), "%s has edited DoorID %d's PickupModel.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
	    if (DDoorsInfo[doorid][ddDescription] == 0) {
	        format(String, sizeof(String), "DoorID %d does not exist.", doorid);
			SendClientMessageEx(playerid, COLOR_WHITE, String);
			return 1;
	    }
    	if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
	    DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		DDoorsInfo[doorid][ddDescription] = 0;
		DDoorsInfo[doorid][ddCustomInterior] = 0;
		DDoorsInfo[doorid][ddExteriorVW] = 0;
		DDoorsInfo[doorid][ddExteriorInt] = 0;
		DDoorsInfo[doorid][ddInteriorVW] = 0;
		DDoorsInfo[doorid][ddInteriorInt] = 0;
		DDoorsInfo[doorid][ddExteriorX] = 0;
		DDoorsInfo[doorid][ddExteriorY] = 0;
		DDoorsInfo[doorid][ddExteriorZ] = 0;
		DDoorsInfo[doorid][ddExteriorA] = 0;
		DDoorsInfo[doorid][ddInteriorX] = 0;
		DDoorsInfo[doorid][ddInteriorY] = 0;
		DDoorsInfo[doorid][ddInteriorZ] = 0;
		DDoorsInfo[doorid][ddInteriorA] = 0;
		DDoorsInfo[doorid][ddCustomExterior] = 0;
		DDoorsInfo[doorid][ddVIP] = 0;
		DDoorsInfo[doorid][ddFamily] = 0;
		DDoorsInfo[doorid][ddFaction] = 0;
		DDoorsInfo[doorid][ddAdmin] = 0;
		DDoorsInfo[doorid][ddWanted] = 0;
		DDoorsInfo[doorid][ddVehicleAble] = 0;
		DDoorsInfo[doorid][ddColor] = 0;
		DDoorsInfo[doorid][dPass] = 0;
		DDoorsInfo[doorid][dLocked] = 0;
		SaveDynamicDoors();
		format(String, sizeof(String), "You have deleted DoorID %d.", doorid);
		SendClientMessageEx(playerid, COLOR_WHITE, String);
		format(String, sizeof(String), "%s has deleted DoorID %d.", GetName(playerid), doorid);
		Log("logs/ddedit.log", String);
		return 1;
	}
	return 1;
}

CMD:hedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 8)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}
	new String[255], choice[32], houseid, amount, zone[48];
	if(sscanf(params, "s[32]dD", choice, houseid, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hedit [name] [houseid] [(Optional)amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, Class (1-3), Level, Price");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hInteriorA]);
		HouseInfo[houseid][hHInteriorWorld] = GetPlayerInterior( playerid );
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the interior!" );
		SaveHouses();

		format(String, sizeof(String), "%s has edited HouseID %d's Interior.", GetName(playerid), houseid);
		Log("logs/hedit.log", String);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hExteriorA]);
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the exterior!" );
		DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
		GetHouse2DZone(houseid, zone, 48);
		format(String, sizeof(String), "%s", zone);
		format(HouseInfo[houseid][hAlamat], 128, "%s", String);
		SaveHouses();

		format(String, sizeof(String), "%s has edited HouseID %d's Exterior.", GetName(playerid), houseid);
		Log("logs/hedit.log", String);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(String, sizeof(String), "{00FF00}Rumah Dijual!{00FF00}\nInterior: {FFFFFF}%s{00FF00}\nHarga: {FFFFFF}%s{00FF00}\nLevel: {FFFFFF}%d{00FF00}\nAlamat: {FFFFFF}%s{00FF00}\nID: {FFFFFF}%d{00FF00}\n'/buyhouse' untuk membeli Rumah",HouseInfo[houseid][hDescription],FormatMoney(HouseInfo[houseid][hValue]),HouseInfo[houseid][hLevel],HouseInfo[houseid][hAlamat],houseid);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel( String, COLOR_LIGHTBLUE, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,5.0, .testlos = 1, .streamdistance = 5.0);
			HouseInfo[houseid][hPickupID] = CreateDynamicPickup(19132, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		}
	}
	else if(strcmp(choice, "garage", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hGaragePos][0], HouseInfo[houseid][hGaragePos][1], HouseInfo[houseid][hGaragePos][2]);
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the House Garage!" );
		DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
		GetHouse2DZone(houseid, zone, 48);
		format(String, sizeof(String), "%s", zone);
		format(HouseInfo[houseid][hAlamat], 128, "%s", String);
		SaveHouses();

		format(String, sizeof(String), "%s has edited HouseID %d's Garage.", GetName(playerid), houseid);
		Log("logs/hedit.log", String);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(String, sizeof(String), "{00FF00}Rumah Dijual!{00FF00}\nInterior: {FFFFFF}%s{00FF00}\nHarga: {FFFFFF}%s{00FF00}\nGarage: {FFFFFF}Available{00FF00}\nLevel: {FFFFFF}%d{00FF00}\nAlamat: {FFFFFF}%s{00FF00}\nID: {FFFFFF}%d{00FF00}\n'/buyhouse' untuk membeli Rumah",HouseInfo[houseid][hDescription],FormatMoney(HouseInfo[houseid][hValue]),HouseInfo[houseid][hLevel],HouseInfo[houseid][hAlamat],houseid);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel( String, COLOR_LIGHTBLUE, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,5.0, .testlos = 1, .streamdistance = 5.0);
			HouseInfo[houseid][hPickupID] = CreateDynamicPickup(19132, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		}
	}
	else if(strcmp(choice, "level", true) == 0)
	{
		HouseInfo[houseid][hLevel] = amount;
		format(String, sizeof(String), "You have set the house level to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, String);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(String, sizeof(String), "{00FF00}Rumah Dijual!{00FF00}\n Interior: {FFFFFF}%s{00FF00}\nHarga: {FFFFFF}%s{00FF00}\n Level: {FFFFFF}%d{00FF00}\nAlamat: {FFFFFF}%s{00FF00}\nID: {FFFFFF}%d{00FF00}\nUntuk membeli rumah '/buyhouse' untuk membeli Rumah",HouseInfo[houseid][hDescription],FormatMoney(HouseInfo[houseid][hValue]),HouseInfo[houseid][hLevel],HouseInfo[houseid][hAlamat],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_YELLOW, String);
		}
		format(String, sizeof(String), "%s has edited HouseID %d's Level to %d.", GetName(playerid), houseid, amount);
		Log("logs/hedit.log", String);
	}
	else if(strcmp(choice, "price", true) == 0)
	{
		HouseInfo[houseid][hValue] = amount;
		format(String, sizeof(String), "You have set the houses price to %s.", FormatMoney(amount));
		SendClientMessageEx(playerid, COLOR_WHITE, String);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(String, sizeof(String), "{00FF00}Rumah Dijual!{00FF00}\n Interior: {FFFFFF}%s{00FF00}\nHarga: {FFFFFF}%s{00FF00}\n Level: {FFFFFF}%d{00FF00}\nAlamat: {FFFFFF}%s{00FF00}\nID: {FFFFFF}%d{00FF00}\nUntuk membeli rumah '/buyhouse' untuk membeli Rumah",HouseInfo[houseid][hDescription],FormatMoney(HouseInfo[houseid][hValue]),HouseInfo[houseid][hLevel],HouseInfo[houseid][hAlamat],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_YELLOW, String);
		}

		format(String, sizeof(String), "%s has edited HouseID %d's Price to %s.", GetName(playerid), FormatMoney(amount));
		Log("logs/hedit.log", String);
	}
	else if(strcmp(choice, "class", true) == 0)
	{
		switch(amount)
		{
		case 1:
			{
				format(HouseInfo[houseid][hDescription], 128, "Low" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 1 (Low)" );
			}
		case 2:
			{
				format(HouseInfo[houseid][hDescription], 128, "Medium" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 2 (Medium)" );
			}
		case 3:
			{
				format(HouseInfo[houseid][hDescription], 128, "High" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 3 (High)" );
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(String, sizeof(String), "{00FF00}Rumah Dijual!{00FF00}\n Interior: {FFFFFF}%s{00FF00}\nHarga: {FFFFFF}%s{00FF00}\n Level: {FFFFFF}%d{00FF00}\nAlamat: {FFFFFF}%s{00FF00}\nID: {FFFFFF}%d{00FF00}\nUntuk membeli rumah '/buyhouse' untuk membeli Rumah",HouseInfo[houseid][hDescription],FormatMoney(HouseInfo[houseid][hValue]),HouseInfo[houseid][hLevel],HouseInfo[houseid][hAlamat],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_YELLOW, String);
		}

		format(String, sizeof(String), "%s has edited HouseID %d's Class to %d.", GetName(playerid), houseid, amount);
		Log("logs/hedit.log", String);
	}
	SaveHouses();
	return 1;
}

CMD:deletehouse(playerid, params[])
{
	new id, String[255];
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}
	if(sscanf(params, "d", id)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /deletehouse [ID Rumah]");
	ClearHouse(id);
	DestroyDynamicPickup(HouseInfo[id][hPickupID]);
	DestroyDynamic3DTextLabel(HouseInfo[id][hTextID]);
	format(String, sizeof(String), "Anda telah menghapus Rumah ID: %d", id);
	SendClientMessageEx(playerid, COLOR_WHITE, String);
	return 1;
}

CMD:shophouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 10)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000], choice[32], houseid, amount, invoice[64];
	if(sscanf(params, "s[32]dDs[64]", choice, houseid, amount, invoice))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /shophouse [name] [houseid] [amount] [invoice #]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, Class (1-3), Level, Price");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos( playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ] );
		HouseInfo[houseid][hHInteriorWorld] = GetPlayerInterior( playerid );
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the interior!" );
		SaveHouses();
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomInterior] == 0)
		{
			HouseInfo[houseid][hCustomInterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom interior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomInterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) interior!" );
		}
		SaveHouses();
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomExterior] == 0)
		{
			HouseInfo[houseid][hCustomExterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom exterior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomExterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) exterior!" );
		}
		SaveHouses();
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos( playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ] );
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the exterior!" );
		DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
		SaveHouses();
		if(HouseInfo[houseid][hOwned] ==0)
		{
			DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(String, sizeof(String), "{00FF00}Rumah Dijual!{00FF00}\n Interior: {FFFFFF}%s{00FF00}\nHarga: {FFFFFF}%s{00FF00}\n Level: {FFFFFF}%d{00FF00}\nAlamat: {FFFFFF}%s{00FF00}\nID: {FFFFFF}%d{00FF00}\nUntuk membeli rumah '/buyhouse' untuk membeli Rumah",HouseInfo[houseid][hDescription],FormatMoney(HouseInfo[houseid][hValue]),HouseInfo[houseid][hLevel],HouseInfo[houseid][hAlamat],houseid);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel( String, COLOR_LIGHTBLUE, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,5.0, .testlos = 1, .streamdistance = 5.0);
			HouseInfo[houseid][hPickupID] = CreateDynamicPickup(19132, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		}
	}
	else if(strcmp(choice, "level", true) == 0)
	{
		HouseInfo[houseid][hLevel] = amount;
		format(String, sizeof(String), "You have set the house level to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, String);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(String, sizeof(String), "{00FF00}Rumah Dijual!{00FF00}\n Interior: {FFFFFF}%s{00FF00}\nHarga: {FFFFFF}%s{00FF00}\n Level: {FFFFFF}%d{00FF00}\nAlamat: {FFFFFF}%s{00FF00}\nID: {FFFFFF}%d{00FF00}\nUntuk membeli rumah '/buyhouse' untuk membeli Rumah",HouseInfo[houseid][hDescription],FormatMoney(HouseInfo[houseid][hValue]),HouseInfo[houseid][hLevel],HouseInfo[houseid][hAlamat],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_YELLOW, String);
		}
	}
	else if(strcmp(choice, "price", true) == 0)
	{
		HouseInfo[houseid][hValue] = amount;
		format(String, sizeof(String), "You have set the houses price to %s.", FormatMoney(amount));
		SendClientMessageEx(playerid, COLOR_WHITE, String);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(String, sizeof(String), "{00FF00}Rumah Dijual!{00FF00}\n Interior: {FFFFFF}%s{00FF00}\nHarga: {FFFFFF}%s{00FF00}\n Level: {FFFFFF}%d{00FF00}\nAlamat: {FFFFFF}%s{00FF00}\nID: {FFFFFF}%d{00FF00}\nUntuk membeli rumah '/buyhouse' untuk membeli Rumah",HouseInfo[houseid][hDescription],FormatMoney(HouseInfo[houseid][hValue]),HouseInfo[houseid][hLevel],HouseInfo[houseid][hAlamat],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_YELLOW, String);
		}
	}
	else if(strcmp(choice, "class", true) == 0)
	{
		switch(amount)
		{
		case 1:
			{
				format(HouseInfo[houseid][hDescription], 128, "Low" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 1 (Low)" );
			}
		case 2:
			{
				format(HouseInfo[houseid][hDescription], 128, "Medium" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 2 (Medium)" );
			}
		case 3:
			{
				format(HouseInfo[houseid][hDescription], 128, "High" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 3 (High)" );
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(String, sizeof(String), "{00FF00}Rumah Dijual!{00FF00}\n Interior: {FFFFFF}%s{00FF00}\nHarga: {FFFFFF}%s{00FF00}\n Level: {FFFFFF}%d{00FF00}\nAlamat: {FFFFFF}%s{00FF00}\nID: {FFFFFF}%d{00FF00}\nUntuk membeli rumah '/buyhouse' untuk membeli Rumah",HouseInfo[houseid][hDescription],FormatMoney(HouseInfo[houseid][hValue]),HouseInfo[houseid][hLevel],HouseInfo[houseid][hAlamat],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_YELLOW, String);
		}
	}
	SaveHouses();
	format(String, sizeof(String), "[SHOPHOUSE] %s modified %s on house %d to %d - Invoice %s", GetName(playerid), choice, houseid, amount, invoice);
	Log("logs/shoplog.log", String);
	return 1;
}

CMD:shophousename(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 10)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000], houseid, ownername[24], invoice[64];
	if(sscanf(params, "ds[24]s[64]", houseid, ownername, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /shophousename [houseid] [name] [invoice]");
	format(HouseInfo[houseid][hOwner], 24, "%s", ownername);
	format(String, sizeof(String), "You have set the house owner to %s", ownername);
	HouseInfo[houseid][hOwned] = 1;
	SendClientMessageEx(playerid, COLOR_WHITE, String);
	DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
	HouseInfo[houseid][hPickupID] = CreateDynamicPickup(19132, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
	format(String, sizeof(String), "{00FF00}Pemilik: {FFFFFF}%s{00FF00}\nLevel: {FFFFFF}%d{00FF00}\nAlamat: {FFFFFF}%s{00FF00}\nID: {FFFFFF}%d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],HouseInfo[houseid][hAlamat],houseid);
	UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_YELLOW, String);

	SaveHouses();
	format(String, sizeof(String), "[SHOPHOUSE] %s modified Owner on house %d to %s - Invoice %s", GetName(playerid), houseid, ownername, invoice);
	Log("logs/shoplog.log", String);
	return 1;
}

CMD:houseinvite(playerid, params[])
{
	new giveplayerid, houseslot;
	if(PlayerInfo[playerid][pPhousekey] == INVALID_HOUSE_ID && PlayerInfo[playerid][pPhousekey2] == INVALID_HOUSE_ID)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You don't own a house.");
		return 1;
	}
	else
	{
		if(sscanf(params, "ud", giveplayerid, houseslot)) SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /houseinvite [playerid] [house 1 or 2]");
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(houseslot < 1 || houseslot > 2)
			{
				return SendClientMessageEx(playerid, COLOR_GRAD2, "Only house 1 or 2 can be specified.");
			}
			new String[59 + MAX_PLAYER_NAME];
			//hInviteHouse[giveplayerid] = (houseslot == 1) ? (PlayerInfo[playerid][pPhousekey]) : (PlayerInfo[playerid][pPhousekey2]);
			hInviteSlot[giveplayerid] = houseslot;
			hInviteOffer[giveplayerid] = playerid;
			format(String, sizeof(String), "   %s has invited you to their house (type /accept invite).", GetName(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
			format(String, sizeof(String), "   You have invited %s to your house.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	return 1;
}

CMD:hq(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /hq [hq text]");

	format(String, sizeof(String), "HQ: %s", params);
	if (!IsACop(playerid)){SendClientMessageEx(playerid, COLOR_DBLUE, String);}
	SendTeamBeepMessage(COLOR_DBLUE, String);

	return 1;
}

CMD:spec(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}
	new tmp[32];
	if(sscanf(params, "s[32]", tmp)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /spec (playerid/off)");

	if(strcmp("off", tmp, true, strlen(tmp)) == 0)
	{
		if(Spectating[playerid] > 0 && PlayerInfo[playerid][pAdmin] >= 1)
		{
			GettingSpectated[Spectate[playerid]] = 999;
			Spectating[playerid] = 0;
			Spectate[playerid] = 999;
			SetPVarInt(playerid, "SpecState", -1);
			SetPVarInt(playerid, "SpecOff", 1 );
			TogglePlayerSpectating( playerid, false );
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You're not spectating anyone.");
			return 1;
		}
	}
	new giveplayerid = ReturnUser(tmp);
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if( InsideTut[giveplayerid] >= 1 )
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "NOTE: This player is in the tutorial. Please consider this before assuming that they're air-breaking.");
			}
			if(Spectating[playerid] == 0)
			{
				new Float: pPositions[ 3 ];
				GetPlayerPos(playerid, pPositions[ 0 ], pPositions[ 1 ], pPositions[ 2 ]);
				SetPVarFloat(playerid, "SpecPosX", pPositions[ 0 ]);
				SetPVarFloat(playerid, "SpecPosY", pPositions[ 1 ]);
				SetPVarFloat(playerid, "SpecPosZ", pPositions[ 2 ]);
				SetPVarInt(playerid, "SpecInt", GetPlayerInterior(playerid));
				SetPVarInt(playerid, "SpecVW", GetPlayerVirtualWorld(playerid));
				//SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				if(IsPlayerInAnyVehicle(giveplayerid))
				{
					TogglePlayerSpectating(playerid, true);
					new carid = GetPlayerVehicleID( giveplayerid );
					PlayerSpectateVehicle( playerid, carid );
					AC_BS_SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
					AC_BS_SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				}
				else
				{
					TogglePlayerSpectating(playerid, true);
					PlayerSpectatePlayer( playerid, giveplayerid );
					AC_BS_SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
					AC_BS_SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				}
				GettingSpectated[giveplayerid] = playerid;
				Spectate[playerid] = giveplayerid;
				Spectating[playerid] = 1;
				for(new j=0; j<11; j++) GetPlayerWeaponData(playerid, j, PlayerInfo[playerid][pGuns][j], PlayerInfo[playerid][pGunsAmmo][j]);
			}
			else
			{
				if(IsPlayerInAnyVehicle(giveplayerid))
				{
					TogglePlayerSpectating(playerid, true);
					new carid = GetPlayerVehicleID( giveplayerid );
					PlayerSpectateVehicle( playerid, carid );
					AC_BS_SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
					AC_BS_SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				}
				else
				{
					TogglePlayerSpectating(playerid, true);
					PlayerSpectatePlayer( playerid, giveplayerid );
					AC_BS_SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
					AC_BS_SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				}
				GettingSpectated[Spectate[playerid]] = 999;
				GettingSpectated[giveplayerid] = playerid;
				Spectate[playerid] = giveplayerid;
				Spectating[playerid] = 1;
				new String[10000];
				format(String, sizeof(String), "SPECINFO: {FFFF00}%s {FFFFFF}has been Spectated by {FFFF00}%s", GetName(giveplayerid), GetName(playerid));
				ABroadCast(COLOR_ARWIN, String, 10);
				for(new j=0; j<11; j++) GetPlayerWeaponData(playerid, j, PlayerInfo[playerid][pGuns][j], PlayerInfo[playerid][pGunsAmmo][j]);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Target is not available.");
	}
	return 1;
}

CMD:wt(playerid, params[])
{
	if(PlayerInfo[playerid][pRadio] == 1)
	{
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /wt [chat]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: Type /setfreq to set the frequency of your Walkie Talkie.");
			return 1;
		}

		if(PlayerInfo[playerid][pRadioFreq] >= 1 || PlayerInfo[playerid][pRadioFreq] <= -1)
		{
			RadioBroadCast(playerid, COLOR_GREY, params);
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "The frequency of your radio is set to 0, you can not broadcast over that frequency.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have a Walkie Talkie!");
	}
	return 1;
}

CMD:setfq(playerid, params[])
{
	new String[10000], frequency;
	if(sscanf(params, "d", frequency))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /setfq[frequency]");
		return 1;
	}

	if(frequency > 99999 || frequency < 0) { SendClientMessageEx(playerid, COLOR_GREY, "Frequency can not be lower than 0 or higher than 99999"); return 1; }
	if (PlayerInfo[playerid][pRadio] == 1)
	{
		PlayerInfo[playerid][pRadioFreq] = frequency;
		format(String, sizeof(String), "[WT] Channel set to '%d'.",frequency);
		SendClientMessageEx(playerid, COLOR_WHITE, String);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have a Walkie Talkie!");
	}
	return 1;
}

CMD:calculate(playerid, params[])
{
	new String[10000], method[20], value1, value2;
	if(sscanf(params, "ds[20]d", value1, method, value2))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /calculate [value] [operation] [value].");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Operations: Add, Subtract, Multiply, Divide.");
		return 1;
	}

	if(strcmp(method,"multiply",true) == 0 || strcmp(method,"*",true) == 0)
	{
		new sum = value1*value2;
		format(String,sizeof(String),"%d multiplied by %d equals %d.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,String);
	}
	if(strcmp(method,"divide",true) == 0 || strcmp(method,"/",true) == 0)
	{
		if(value2 == 0)
		{
			SendClientMessageEx(playerid,COLOR_WHITE,"The world will implode in 10 seconds - you divided by zero, idiot!");
			return 1;
		}
		new sum = value1/value2;
		format(String,sizeof(String),"%d divided by %d equals %d.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,String);
	}
	if(strcmp(method,"add",true) == 0 || strcmp(method,"+",true) == 0)
	{
		new sum = value1+value2;
		format(String,sizeof(String),"%d added to %d equals %d.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,String);
	}
	if(strcmp(method,"subtract",true) == 0 || strcmp(method,"-",true) == 0)
	{
		new sum = value1-value2;
		format(String,sizeof(String),"%d subtracted by %d equals %d.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,String);
	}
	return 1;
}

CMD:rjail(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], name[MAX_PLAYER_NAME], minutes, reason[64];
		if(sscanf(params, "s[24]ds[64]", name, minutes, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /prisonaccount [playername] [time (minutes)] [reason]");

        new giveplayerid = ReturnUser(name);
        if(IsPlayerConnected(giveplayerid))
		{
			new year, month,day;
			//ResetPlayerWeapons(giveplayerid);
			getdate(year, month, day);
			format(String, sizeof(String), "AdmCmd: %s has jailed %s for %d minute(s)", PlayerInfo[playerid][pAdminName], PlayerInfo[giveplayerid][pNormalName], minutes);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			format(String, sizeof(String), "Reason: %s", reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			PlayerInfo[giveplayerid][pJailed] = 1000;
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			PhoneOnline[giveplayerid] = 1;
			AC_BS_SetPlayerInterior(giveplayerid, 0);
			new rand = random(sizeof(OOCPrisonSpawns));
			SetPlayerFacingAngle(giveplayerid, 0);
			TogglePlayerControllable(giveplayerid, 1);
			AC_BS_SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			PlayerInfo[giveplayerid][pVW] = 1;
			AC_BS_SetPlayerVirtualWorld(giveplayerid, 1);
		}
		else if(doesAccountExist(name))
		{
			OnPlayerOfflineLogin(name);
			if( PlayerInfo[MAX_PLAYERS][pPermaBanned] == 3 || PlayerInfo[MAX_PLAYERS][pBanned] >= 1 )
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "That player is banned." );
				return 1;
			}
			else
			{
				PlayerInfo[MAX_PLAYERS][pJailTime] = minutes*60;
				PlayerInfo[MAX_PLAYERS][pJailed] = 4;
				OnPlayerOfflineSave(name);
				new year, month,day;
				getdate(year, month, day);
				format(String, sizeof(String), "AdmCmd: %s has remote-jailed %s for %d minute(s)", PlayerInfo[playerid][pAdminName], name, minutes);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				format(String, sizeof(String), "Reason: %s", reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			}
		}
	}
	return 1;
}

CMD:release(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], str[1024], giveplayerid;
		if(sscanf(params, "us[64]", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /release [playerid] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			new year, month,day;
			getdate(year, month, day);
			format(String, sizeof(String), "{FF6347}AdmCmd: %s has released %s from Admin Jail", PlayerInfo[playerid][pAdminName], PlayerInfo[giveplayerid][pNormalName]);
            strcat(str, String);
			Log("logs/admin.log", String);
			SendClientMessageToAllEx(COLOR_LIGHTRED, str);
			WantedPoints[giveplayerid] = 0;
			PlayerInfo[giveplayerid][pJailed] = 0;
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			PlayerInfo[giveplayerid][pBeingSentenced] = 0;
			SetPlayerToTeamColor(giveplayerid);
			PlayerInfo[giveplayerid][pJailTime] = 0;
			AC_BS_SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
			AC_BS_SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			AC_BS_SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
			PlayerInfo[giveplayerid][pLocal] = 255;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:prison(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new String[10000], giveplayerid, minutes, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, minutes, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /jail [playerid] [minutes] [reason]");
		else
		{
		    if(IsPlayerConnected(giveplayerid))
			{
					//ResetPlayerWeapons(giveplayerid);
					new year, month,day;
					getdate(year, month, day);
     				format(String, sizeof(String), "AdmCmd: %s has prisoned %s for %d minute(s)", PlayerInfo[playerid][pAdminName], PlayerInfo[giveplayerid][pNormalName], minutes);
					SendClientMessageToAllEx(COLOR_LIGHTRED, String);
					format(String, sizeof(String), "Reason: %s", reason);
					SendClientMessageToAllEx(COLOR_LIGHTRED, String);
					PlayerInfo[giveplayerid][pJailed] = 1;
					PhoneOnline[giveplayerid] = 1;
					PlayerInfo[giveplayerid][pJailTime] = minutes*60;
					AC_BS_SetPlayerInterior(giveplayerid, 0);
					new rand = random(sizeof(LSPDJail));
					SetPlayerFacingAngle(giveplayerid, 0);
					TogglePlayerControllable(giveplayerid, 1);
					AC_BS_SetPlayerPos(giveplayerid, LSPDJail[rand][0], LSPDJail[rand][1], LSPDJail[rand][2]);
					PlayerInfo[giveplayerid][pVW] = 0;
					AC_BS_SetPlayerVirtualWorld(giveplayerid, 0);
					return 1;
			}
		}
	}
	return 1;
}

CMD:jail(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new String[10000], giveplayerid, minutes, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, minutes, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /jail [playerid] [minutes] [reason]");
		else
		{
		    if(IsPlayerConnected(giveplayerid))
			{
					//ResetPlayerWeapons(giveplayerid);
					new year, month,day;
					getdate(year, month, day);
     				format(String, sizeof(String), "AdmCmd: %s has jailed %s for %d minute(s)", PlayerInfo[playerid][pAdminName], PlayerInfo[giveplayerid][pNormalName], minutes);
					SendClientMessageToAllEx(COLOR_LIGHTRED, String);
					format(String, sizeof(String), "Reason: %s", reason);
					SendClientMessageToAllEx(COLOR_LIGHTRED, String);
					PlayerInfo[giveplayerid][pJailed] = 1000;
					PhoneOnline[giveplayerid] = 1;
					PlayerInfo[giveplayerid][pJailTime] = minutes*60;
					AC_BS_SetPlayerInterior(giveplayerid, 0);
					new rand = random(sizeof(OOCPrisonSpawns));
					SetPlayerFacingAngle(giveplayerid, 0);
					TogglePlayerControllable(giveplayerid, 1);
					AC_BS_SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
					PlayerInfo[giveplayerid][pVW] = 1;
					AC_BS_SetPlayerVirtualWorld(giveplayerid, 1);
					return 1;
			}
		}
	}
	return 1;
}

CMD:setmood(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 10)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}
	new choice[32], String[10000], log[126], giveplayerid, amount;
	if(sscanf(params, "s[32]dd", choice, giveplayerid, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setmood [hunger,bladder,energy] [giveplayerid] [amount]");
		return 1;
	}
	if(strcmp(choice, "hunger", true) == 0)
	{
		PlayerInfo[giveplayerid][pHunger] = amount;
		format(String, sizeof(String), "MOODINFO: {FFFFFF}You've seet %s Hunger to %d", GetName(giveplayerid), amount);
		format(log, sizeof(log), "%s by %s", String, GetName(playerid));
		Log("logs/mood.log", log);
		SendClientMessage(playerid, COLOR_WHITE, String);
	}
	else if(strcmp(choice, "bladder", true) == 0)
	{
		PlayerInfo[giveplayerid][pBladder] = amount;
		format(String, sizeof(String), "MOODINFO: {FFFFFF}You've seet %s Bladder to %d", GetName(giveplayerid), amount);
		format(log, sizeof(log), "%s by %s", String, GetName(playerid));
		Log("logs/mood.log", log);
		SendClientMessage(playerid, COLOR_WHITE, String);
	}
	else if(strcmp(choice, "energy", true) == 0)
	{
		PlayerInfo[giveplayerid][pEnergi] = amount;
		format(String, sizeof(String), "MOODINFO: {FFFFFF}You've seet %s Energy to %d", GetName(giveplayerid), amount);
		format(log, sizeof(log), "%s by %s", String, GetName(playerid));
		Log("logs/mood.log", log);
		SendClientMessage(playerid, COLOR_WHITE, String);
	}
	else if(strcmp(choice, "condition", true) == 0)
	{
		PlayerInfo[giveplayerid][pCondition] = amount;
		format(String, sizeof(String), "MOODINFO: {FFFFFF}You've seet %s Condition to %d", GetName(giveplayerid), amount);
		format(log, sizeof(log), "%s by %s", String, GetName(playerid));
		Log("logs/mood.log", log);
		SendClientMessage(playerid, COLOR_WHITE, String);
	}
	return 1;
}

CMD:setskill(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 10)
	{
		new choice[128], String[10000], log[256], giveplayerid, amount;
		if(sscanf(params, "s[128]dd", choice, giveplayerid, amount))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setskill [sc,de,sg,spass,mp5,ak47,m4,sniper,truck,mech] [giveplayerid] [amount]");
			return 1;
		}
		if(strcmp(choice, "sc", true) == 0)
		{
			PlayerInfo[giveplayerid][pSilincedSkill] = amount;
			format(String, sizeof(String), "SKILLINFO: You've set %s Silinced Skill to Level %d", GetName(giveplayerid), amount);
			format(log, sizeof(log), "%s by %s", String, GetName(playerid));
			Log("logs/skill.log", log);
			SendClientMessage(playerid, COLOR_WHITE, String);
		}
		else if(strcmp(choice, "de", true) == 0)
		{
			PlayerInfo[giveplayerid][pDesertEagleSkill] = amount;
			format(String, sizeof(String), "SKILLINFO: You've set %s Desert Eagle Skill to Level %d", GetName(giveplayerid), amount);
			format(log, sizeof(log), "%s by %s", String, GetName(playerid));
			Log("logs/skill.log", log);
			SendClientMessage(playerid, COLOR_WHITE, String);
		}
		else if(strcmp(choice, "sg", true) == 0)
		{
			PlayerInfo[giveplayerid][pShotgunSkill] = amount;
			format(String, sizeof(String), "SKILLINFO: You've set %s Shotgun Skill to Level %d", GetName(giveplayerid), amount);
			format(log, sizeof(log), "%s by %s", String, GetName(playerid));
			Log("logs/skill.log", log);
			SendClientMessage(playerid, COLOR_WHITE, String);
		}
		else if(strcmp(choice, "spass", true) == 0)
		{
			PlayerInfo[giveplayerid][pSpassSkill] = amount;
			format(String, sizeof(String), "SKILLINFO: You've set %s Spass-12 Skill to Level %d", GetName(giveplayerid), amount);
			format(log, sizeof(log), "%s by %s", String, GetName(playerid));
			Log("logs/skill.log", log);
			SendClientMessage(playerid, COLOR_WHITE, String);
		}
		else if(strcmp(choice, "mp5", true) == 0)
		{
			PlayerInfo[giveplayerid][pMP5Skill] = amount;
			format(String, sizeof(String), "SKILLINFO: You've set %s MP5 Skill to Level %d", GetName(giveplayerid), amount);
			format(log, sizeof(log), "%s by %s", String, GetName(playerid));
			Log("logs/skill.log", log);
			SendClientMessage(playerid, COLOR_WHITE, String);
		}
		else if(strcmp(choice, "ak47", true) == 0)
		{
			PlayerInfo[giveplayerid][pAK47Skill] = amount;
			format(String, sizeof(String), "SKILLINFO: You've set %s AK47 Skill to Level %d", GetName(giveplayerid), amount);
			format(log, sizeof(log), "%s by %s", String, GetName(playerid));
			Log("logs/skill.log", log);
			SendClientMessage(playerid, COLOR_WHITE, String);
		}
		else if(strcmp(choice, "m4", true) == 0)
		{
			PlayerInfo[giveplayerid][pM4Skill] = amount;
			format(String, sizeof(String), "SKILLINFO: You've set %s M4 Skill to Level %d", GetName(giveplayerid), amount);
			format(log, sizeof(log), "%s by %s", String, GetName(playerid));
			Log("logs/skill.log", log);
			SendClientMessage(playerid, COLOR_WHITE, String);
		}
		else if(strcmp(choice, "sniper", true) == 0)
		{
			PlayerInfo[giveplayerid][pSniperSkill] = amount;
			format(String, sizeof(String), "SKILLINFO: You've set %s Sniper Skill to Level %d", GetName(giveplayerid), amount);
			format(log, sizeof(log), "%s by %s", String, GetName(playerid));
			Log("logs/skill.log", log);
			SendClientMessage(playerid, COLOR_WHITE, String);
		}
		else if(strcmp(choice, "truck", true) == 0)
		{
			PlayerInfo[giveplayerid][pTruckingSkill] = amount;
			format(String, sizeof(String), "SKILLINFO: You've set %s Trucking Skill to %d", GetName(giveplayerid), amount);
			format(log, sizeof(log), "%s by %s", String, GetName(playerid));
			Log("logs/skill.log", log);
			SendClientMessage(playerid, COLOR_WHITE, String);
		}
		else if(strcmp(choice, "mech", true) == 0)
		{
			PlayerInfo[giveplayerid][pMechSkill] = amount;
			format(String, sizeof(String), "SKILLINFO: You've set %s Mechanic Skill to %d", GetName(giveplayerid), amount);
			format(log, sizeof(log), "%s by %s", String, GetName(playerid));
			Log("logs/skill.log", log);
			SendClientMessage(playerid, COLOR_WHITE, String);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "ERROR: You don't have the privilege to use this command!");
	return 1;
}

CMD:setstat(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 10)
	{
		new String[10000], giveplayerid, statcode, amount;
		if(sscanf(params, "udd", giveplayerid, statcode, amount))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setstat [playerid] [1Level, 2PH, 3JOB] [amount]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			switch (statcode)
			{
			case 1:
				{
					PlayerInfo[giveplayerid][pLevel] = amount;
					format(String, sizeof(String), "ACCOUNT: {FFFFFF}%s's Level has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
					SetPlayerScore(giveplayerid, PlayerInfo[giveplayerid][pLevel]);
				}
			case 2:
				{
					ReplacePH(PlayerInfo[giveplayerid][pPnumber], amount);
					PlayerInfo[giveplayerid][pPnumber] = amount;
					format(String, sizeof(String), "ACCOUNT: {FFFFFF}%s's Phone Number has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 3:
				{
					PlayerInfo[giveplayerid][pJob] = amount;
					format(String, sizeof(String), "ACCOUNT: {FFFFFF}%s's Job has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			default:
				{
					format(String, sizeof(String), "ERROR: {ffffff}Invalid stat code.", amount);
				}
			}

			new log[256];
			format(log, sizeof(log), "%s by %s", String, GetName(playerid));
			Log("logs/stats.log", log);
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
			ABroadCast(COLOR_ARWIN, String, 1);
		}
	}
	return 1;
}

CMD:setvw(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], giveplayerid, vw;
		if(sscanf(params, "ud", giveplayerid, vw)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setvw [playerid] [virtual world]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pVW] =  vw;
			AC_BS_SetPlayerVirtualWorld(giveplayerid,  vw);
			format(String, sizeof(String), "You have set %s's virtual world to %d.", GetPlayerNameEx(giveplayerid),  vw);
			SendClientMessageEx(playerid, COLOR_GRAD2, String);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:setint(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], giveplayerid, int;
		if(sscanf(params, "ud", giveplayerid, int)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setint [playerid] [interiorid]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pInt] = int;
			AC_BS_SetPlayerInterior(giveplayerid, int);
			format(String, sizeof(String), "You have set %s's interior to %d.", GetPlayerNameEx(giveplayerid), int);
			SendClientMessageEx(playerid, COLOR_GRAD2, String);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:setskin(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new String[10000], giveplayerid, skinid;
		if(sscanf(params, "ud", giveplayerid, skinid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setskin [playerid] [skinid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(!IsInvalidSkin(skinid))
			{
				if(GetPlayerSkin(giveplayerid) == skinid)
				{
					SendClientMessageEx( playerid, COLOR_WHITE, "The player you're trying to change skins of already is using the skin you're trying to set." );
				}
				else
				{
					PlayerInfo[giveplayerid][pChar] = skinid;
					PlayerInfo[giveplayerid][pModel] = skinid;
					format(String, sizeof(String), "Your skin has been changed to ID %d by Administrator %s.", skinid, GetName(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
					format(String, sizeof(String), "You have given %s skin ID %d.", GetPlayerNameEx(giveplayerid), skinid);
					SendClientMessageEx(playerid, COLOR_WHITE, String);
					SetPlayerSkin(giveplayerid, PlayerInfo[giveplayerid][pChar]);
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid skin ID!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:invite(playerid, params[])
{
	if (PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pRank] == 9)
	{
		new String[10000], ftext[50], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /invite [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if (PlayerInfo[giveplayerid][pLeader] == 0 && PlayerInfo[giveplayerid][pMember] == 0 && PlayerInfo[giveplayerid][pFMember] == 255)
			{
				if(PlayerInfo[playerid][pLeader] == 1) { ftext = "San Andreas Police Department"; }
				else if(PlayerInfo[playerid][pLeader] == 2) { ftext = "FBI"; }
				else if(PlayerInfo[playerid][pLeader] == 3) { ftext = "SFPD"; }
				else if(PlayerInfo[playerid][pLeader] == 4) { ftext = "San Andreas Medical Department"; }
				else if(PlayerInfo[playerid][pLeader] == 5) { ftext = "Judicial System"; }
				else if(PlayerInfo[playerid][pLeader] == 6) { ftext = "San Andreas Goverment Service"; }
				else if(PlayerInfo[playerid][pLeader] == 7) { ftext = "SASD"; }
				else if(PlayerInfo[playerid][pLeader] == 9) { ftext = "San Andreas Network"; }
				else if(PlayerInfo[playerid][pLeader] == 10) { ftext = "Transport Company"; }
				else if(PlayerInfo[playerid][pLeader] == 12) { ftext = "Tierra Robada"; }
				else if(PlayerInfo[playerid][pLeader] == 13) { ftext = "PMC"; }
				else { return 1; }
				InviteOffer[giveplayerid] = playerid;
				InviteFamily[giveplayerid] = 255;
				InviteFaction[giveplayerid] = PlayerInfo[playerid][pLeader];
				format(String, sizeof(String), "You have been invited to join the %s by %s - type /accept faction.", ftext, GetName(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
				format(String, sizeof(String), "You have invited %s to join the %s.", GetPlayerNameEx(giveplayerid),ftext);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "The player you're trying to invite is already in another faction or family.");
				return 1;
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only leaders can do this.");
	}
	return 1;
}

CMD:newsdiv(playerid, params[])
{
	if (PlayerInfo[playerid][pLeader] == 9)
	{
		new String[10000], giveplayerid, division;
		if(sscanf(params, "ud", giveplayerid, division))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /newsdiv [playerid] [division]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available division names: 0 (None), 1 (Security), 2 (Reporter), 3 (Tech Support), 4 (TnR)");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pMember] != 9) return 1;
			switch(division)
			{
				case 0:
				{
					PlayerInfo[giveplayerid][pDivision] = 0;
					format(String, sizeof(String), "You haved been kicked out of your current division by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "You have kicked %s from their division.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				}
				case 1:
				{
					PlayerInfo[giveplayerid][pDivision] = 1;
					format(String, sizeof(String), "You are now in the security division, invited by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "You have invited %s into the security division.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				}
				case 2:
				{
					PlayerInfo[giveplayerid][pDivision] = 2;
					format(String, sizeof(String), "You are now in the Reporter division, invited by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "You have invited %s into the Reporter division.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				}
				case 3:
				{
					PlayerInfo[giveplayerid][pDivision] = 3;
					format(String, sizeof(String), "You are now in the Tech Support division, invited by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "You have invited %s into the Tech Support division.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				}
				case 4:
				{
					PlayerInfo[giveplayerid][pDivision] = 4;
					format(String, sizeof(String), "You are now in the Training and recruitment division, invited by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "You have invited %s into the Training and recruitment division.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				}
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, " That player isn't connected" );
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, " You can't use this command." );
	return 1;
}
CMD:givelic(playerid, params[])
{
	if(IsACop(playerid))
	{
		new String[10000], giveplayerid, type;
		if(sscanf(params, "ud", giveplayerid, type))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /givelicense [playerid] [type]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Weapon, 2 = Trucker, 3 = Lumberjack");
			return 1;
		}

		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
			return 1;
		}
		new year, month, day, hour, minute, second;
		switch(type)
		{
		case 1:
			{
				if(PlayerInfo[giveplayerid][pGunLic] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player already has a Weapon's license.");
					return 1;
				}
				format(String, sizeof(String), "You have given a driver's Weapon to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, String);
				format(String, sizeof(String), "%s has given you a driver's Weapon.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
				gettime(hour,minute,second);
				getdate(year,month,day);
				format(String, sizeof(String), "[%d/%d/%d][%d:%d:%d] %s has given a Weapon's license to %s.",day,month,year,hour,minute,second,GetName(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", String);
				PlayerInfo[giveplayerid][pGunLic] = 1;
				PlayerInfo[giveplayerid][pCTime] = 604800;
				return 1;
			}
		case 2:
			{
				if(PlayerInfo[giveplayerid][pTruckerLic] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player already has a Trucking license.");
					return 1;
				}
				format(String, sizeof(String), "You have given a Trucking license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, String);
				format(String, sizeof(String), "%s has given you a Trucking license.",GetName(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
				gettime(hour,minute,second);
				getdate(year,month,day);
				format(String, sizeof(String), "[%d/%d/%d][%d:%d:%d] %s has given a Trucking license to %s.",day,month,year,hour,minute,second,GetName(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", String);
				PlayerInfo[giveplayerid][pTruckerLic] = 1;
				PlayerInfo[giveplayerid][pCTime] = 200000;
				return 1;
			}
		case 3:
			{
				if(PlayerInfo[giveplayerid][pLumberLic] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player already has a Lumberjack license.");
					return 1;
				}
				format(String, sizeof(String), "You have given a Lumberjack license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, String);
				format(String, sizeof(String), "%s has given you a Lumberjack license.",GetName(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
				gettime(hour,minute,second);
				getdate(year,month,day);
				format(String, sizeof(String), "[%d/%d/%d][%d:%d:%d]%s has given a Lumberjack license to %s.",day,month,year,hour,minute,second,GetName(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", String);
				PlayerInfo[giveplayerid][pLumberLic] = 1;
				PlayerInfo[giveplayerid][pCTime] = 200000;
				return 1;
			}
		default:
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Invalid license type! /givelicense [playerid] [type]");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Weapon, 2 = Trucker, 3 = Lumberjack");
			}
		}
	}
	return 1;
}

CMD:sapddiv(playerid, params[])
{
	if(IsACop(playerid))
	{
		new String[10000], giveplayerid, division;
		if(sscanf(params, "ud", giveplayerid, division))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /sapddiv [playerid] [division]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available division names: 1 (None), 2 (II), 3 (FTO), 4 (IA), 5 (SWAT)");
			return 1;
		}

		if (PlayerInfo[playerid][pRank] >= 4)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(PlayerInfo[playerid][pMember] == 1)
				{
					if(division == 3)
					{
						PlayerInfo[giveplayerid][pDivision] = 3;
						format(String, sizeof(String), "You are now in the IA division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
						format(String, sizeof(String), "You have invited %s into the IA division.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					}
					else if(division == 2)
					{
						PlayerInfo[giveplayerid][pDivision] = 2;
						format(String, sizeof(String), "You are now in the HSIU division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
						format(String, sizeof(String), "You have invited %s to join the HSIU division.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					}
					else if(division == 4)
					{
						PlayerInfo[giveplayerid][pDivision] = 4;
						format(String, sizeof(String), "You are now in the BEU division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
						format(String, sizeof(String), "You have invited %s to join the BEU division.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					}
					else if(division == 5)
					{
						PlayerInfo[giveplayerid][pDivision] = 5;
						format(String, sizeof(String), "You are now in the SWAT division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
						format(String, sizeof(String), "You have invited %s to join the SWAT division.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					}
					else if(division == 1)
					{
						PlayerInfo[giveplayerid][pDivision] = 1;
						format(String, sizeof(String), "You have been kicked from your division by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
						format(String, sizeof(String), "You have kicked %s out of their division.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					}
				}

			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only R4+ can do this.");
		}
	}
	return 1;
}
CMD:sagsdiv(playerid, params[])
{
	if(IsACop(playerid))
	{
		new String[10000], giveplayerid, division;
		if(sscanf(params, "ud", giveplayerid, division))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /sapddiv [playerid] [division]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available division names: 1 (None), 2 (II), 3 (FTO), 4 (IA), 5 (SWAT)");
			return 1;
		}

		if (PlayerInfo[playerid][pRank] >= 4)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(PlayerInfo[playerid][pMember] == 1)
				{
					if(division == 3)
					{
						PlayerInfo[giveplayerid][pDivision] = 3;
						format(String, sizeof(String), "You are now in the Towing division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
						format(String, sizeof(String), "You have invited %s into the Towing division.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					}
					else if(division == 2)
					{
						PlayerInfo[giveplayerid][pDivision] = 2;
						format(String, sizeof(String), "You are now in the Transport division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
						format(String, sizeof(String), "You have invited %s to join the Transport division.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					}
					else if(division == 4)
					{
						PlayerInfo[giveplayerid][pDivision] = 4;
						format(String, sizeof(String), "You are now in the Taxing division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
						format(String, sizeof(String), "You have invited %s to join the Taxing division.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					}
					else if(division == 5)
					{
						PlayerInfo[giveplayerid][pDivision] = 5;
						format(String, sizeof(String), "You are now in the Employing division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
						format(String, sizeof(String), "You have invited %s to join the Employing division.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					}
					else if(division == 1)
					{
						PlayerInfo[giveplayerid][pDivision] = 1;
						format(String, sizeof(String), "You have been kicked from your division by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
						format(String, sizeof(String), "You have kicked %s out of their division.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					}
				}

			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only R4+ can do this.");
		}
	}
	return 1;
}

CMD:samddiv(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5)
	{
		new String[10000], giveplayerid, division;
		if(sscanf(params, "ud", giveplayerid, division))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /samddiv [playerid] [division]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available division names: 0 (None), 1 (FD), 2 (Life Flight), 3 (T&R)");
			return 1;
		}

		if (PlayerInfo[playerid][pRank] >= 5)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5)
				{
				    if(division == 3)
					{
						if (PlayerInfo[giveplayerid][pMember] == 4)
						{
							PlayerInfo[giveplayerid][pDivision] = 3;
							format(String, sizeof(String), "You are now in the Training and Recruitement division, invited by %s.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
							format(String, sizeof(String), "You have invited %s to join the Training and Recruitement Division.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
						}
					}
					if(division == 2)
					{
						if (PlayerInfo[giveplayerid][pMember] == 4)
						{
							PlayerInfo[giveplayerid][pDivision] = 2;
							format(String, sizeof(String), "You are now in the Life Flight division, invited by %s.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
							format(String, sizeof(String), "You have invited %s to join the Life Flight Division.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
						}
					}
					else if(division == 1)
					{
						if (PlayerInfo[giveplayerid][pMember] == 4)
						{
							PlayerInfo[giveplayerid][pDivision] = 1;
							format(String, sizeof(String), "You are now in the Fire Department division, invited by %s.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
							format(String, sizeof(String), "You have invited %s to join the Fire Department division.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
						}
					}
					else if(division == 0)
					{
						if (PlayerInfo[giveplayerid][pMember] == 4)
						{
							PlayerInfo[giveplayerid][pDivision] = 0;
							format(String, sizeof(String), "You have been kicked from your division by %s.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
							format(String, sizeof(String), "You have kicked %s out of their division.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
						}
					}
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only R4+ can do this.");
		}
	}
	return 1;
}
CMD:ouninvite(playerid, params[]) {
	if (PlayerInfo[playerid][pLeader] >= 1) {
		if(isnull(params)) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /uninvite [name]");
		}
		if(!doesAccountExist(params)) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "That account does not exist!");
		}
		OnPlayerOfflineLogin(params);

		if(PlayerInfo[MAX_PLAYERS][pAdmin] >= 4) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "You can not uninvite this person.");
		}
		else if ((PlayerInfo[MAX_PLAYERS][pMember] == PlayerInfo[playerid][pLeader]) && (PlayerInfo[MAX_PLAYERS][pLeader] == 0 || PlayerInfo[MAX_PLAYERS][pRank] < PlayerInfo[playerid][pRank])) {

			PlayerInfo[MAX_PLAYERS][pMember] = 0;
			PlayerInfo[MAX_PLAYERS][pRank] = 0;
			PlayerInfo[MAX_PLAYERS][pChar] = 0;
			PlayerInfo[MAX_PLAYERS][pDuty] = 0;
			PlayerInfo[MAX_PLAYERS][pLeader] = 0;

			if(!IsValidSkin(PlayerInfo[MAX_PLAYERS][pModel])) {
				PlayerInfo[MAX_PLAYERS][pModel] = CIV[random(sizeof(CIV))];
			}

			if(PlayerInfo[MAX_PLAYERS][pDonateRank] < 3) for(new iToyIter; iToyIter < MAX_PLAYER_ATTACHED_OBJECTS; ++iToyIter) {
				for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsCop); ++LoopRapist) {
					if(HoldingObjectsCop[LoopRapist][holdingmodelid] == PlayerToyInfo[MAX_PLAYERS][iToyIter][ptModelID]) {
						PlayerToyInfo[MAX_PLAYERS][iToyIter][ptModelID] = 0;
						PlayerToyInfo[MAX_PLAYERS][iToyIter][ptBone] = 0;
						PlayerToyInfo[MAX_PLAYERS][iToyIter][ptPosX] = 0.0;
						PlayerToyInfo[MAX_PLAYERS][iToyIter][ptPosY] = 0.0;
						PlayerToyInfo[MAX_PLAYERS][iToyIter][ptPosZ] = 0.0;
						PlayerToyInfo[MAX_PLAYERS][iToyIter][ptPosX] = 0.0;
						PlayerToyInfo[MAX_PLAYERS][iToyIter][ptPosY] = 0.0;
						PlayerToyInfo[MAX_PLAYERS][iToyIter][ptPosZ] = 0.0;
					}
				}
			}

			new
				szMessage[36 + MAX_PLAYER_NAME];

			format(szMessage, sizeof(szMessage), "You have kicked %s from the faction.", params);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
			OnPlayerOfflineSave(params);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "That player can not be uninvited by you.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only leaders can do this.");
	return 1;
}
CMD:lockserver(playerid, params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(ServerLocked)
    {
        ServerLocked = false;
        SendRconCommand("password 0");
		SendRconCommand("hostname Enterplay Gaming Roleplay [0.3.7]");
		format(String, sizeof(String), "Admin %s unlocked the server.", PlayerInfo[playerid][pAdminName]);
		SendClientMessageToAll(COLOR_LIGHTRED, String);
    }
    else
    {
        ServerLocked = true;
        SendRconCommand("password ArWin14");
    	SendRconCommand("hostname Enterplay Gaming Roleplay [Maintenance]");
		format(String, sizeof(String), "Admin %s locked the server.", PlayerInfo[playerid][pAdminName]);
		SendClientMessageToAll(COLOR_LIGHTRED, String);
    }
    return 1;
}
CMD:deleteaccount(playerid, params[])
{
	new String[10000];
   	if(PlayerInfo[playerid][pAdmin] < 10) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[32]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deleteaccount [name]");
	format(String, sizeof(String), "users/%s.ini", params);
	if(!dini_Exists(String)) return SendClientMessage(playerid, COLOR_GREY, "Userfile not found.");
	dini_Remove(String);
	format(String, sizeof(String), "AdmCmd: %s has deleted %s's userfile.", PlayerInfo[playerid][pAdminName], params);
	ABroadCast(COLOR_LIGHTRED, String, 1);
	Log("logs/deleteaccount.log", String);
	return 1;
}
CMD:oremoveadmin(playerid, params[])
{
    new playerb[32], String[10000], file[32];
   	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not allowed to use command.");
	if(PlayerInfo[playerid][pAdmin] < 10) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[32]s[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /oremoveadmin [playername] [confirm]");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	if(PlayerInfo[playerid][pAdmin] < dini_Int(file, "Admin")) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	format(String, sizeof(String), "{FF6347}AdmCmd: %s has {FF9900}offline demoted {FF6347}%s to level {FF9900}0 {FF6347}admin.", PlayerInfo[playerid][pAdminName], playerb);
	SendAdminMessage(COLOR_DARKRED, String);
	// Removing Admin
	dini_IntSet(file, "AdminLevel", 0);
	return 1;
}
CMD:uninvite(playerid, params[])
{
	if (PlayerInfo[playerid][pLeader] >= 1)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /uninvite [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if ((PlayerInfo[giveplayerid][pMember] == PlayerInfo[playerid][pLeader]) && (PlayerInfo[giveplayerid][pLeader] == 0 || PlayerInfo[giveplayerid][pRank] < PlayerInfo[playerid][pRank]))
			{
				format(String, sizeof(String), "* You have been kicked from the faction by leader %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "* You are now a civilian again.");
				PlayerInfo[giveplayerid][pTeam] = TEAM_GREEN;
				gTeam[giveplayerid] = PlayerInfo[giveplayerid][pTeam];
				PlayerInfo[giveplayerid][pMember] = 0;
				PlayerInfo[giveplayerid][pRank] = 0;
				PlayerInfo[giveplayerid][pChar] = 0;
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pLeader] = 0;
				PlayerInfo[giveplayerid][pDivision] = 0;
				if(!IsValidSkin(GetPlayerSkin(giveplayerid)))
				{
					new rand = random(sizeof(CIV));
					SetPlayerSkin(giveplayerid,CIV[rand]);
					PlayerInfo[giveplayerid][pModel] = CIV[rand];
				}
				player_remove_vip_toys(giveplayerid);
				SetPlayerToTeamColor(giveplayerid);
				pTazer[giveplayerid] = 0;
				format(String, sizeof(String), "You have kicked %s from the faction.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "That player can not be uninvited by you.");
		}
		SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only leaders can do this.");
	}
	return 1;
}

CMD:makeleader(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 10)
	{
		new String[10000], giveplayerid, faction;
		if(sscanf(params, "ud", giveplayerid, faction))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /makeleader [playerid] [factionid]");
			SendClientMessageEx(playerid, COLOR_GRAD3, "|1 LSPD |4 SAMD |5 Judicial System");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|6 SAGS |7 SASD |9 SA News");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|10 Transport Company");
			return 1;
		}
		if(faction > 13 || faction < 0) { SendClientMessageEx(playerid, COLOR_GREY, "   Don't go below number 0, or above number 13!"); return 1; }

		if(IsPlayerConnected(giveplayerid))
		{
			new ftext[10000];
			PlayerInfo[giveplayerid][pLeader] = faction;
			if(faction == 1) { PlayerInfo[giveplayerid][pRank] = 10; }
			if(faction == 2) { PlayerInfo[giveplayerid][pRank] = 6; }
			if(faction == 3) { PlayerInfo[giveplayerid][pRank] = 6; }
			if(faction == 4) { PlayerInfo[giveplayerid][pRank] = 10; }
			if(faction == 5) { PlayerInfo[giveplayerid][pRank] = 6; }
			if(faction == 6) { PlayerInfo[giveplayerid][pRank] = 10; }
			if(faction == 7) { PlayerInfo[giveplayerid][pRank] = 10; }
			if(faction == 9) { PlayerInfo[giveplayerid][pRank] = 10; }
			if(faction == 10) { PlayerInfo[giveplayerid][pRank] = 6; }
			PlayerInfo[giveplayerid][pMember] = faction;
			if(PlayerInfo[giveplayerid][pLeader] == 1) { ftext = "San Andreas Police Department"; }
			else if(PlayerInfo[giveplayerid][pLeader] == 2) { ftext = "FBI"; }
			else if(PlayerInfo[giveplayerid][pLeader] == 3) { ftext = "SFPD"; }
			else if(PlayerInfo[giveplayerid][pLeader] == 4) { ftext = "San Andreas Medical Department"; }
			else if(PlayerInfo[giveplayerid][pLeader] == 5) { ftext = "Judicial System"; }
			else if(PlayerInfo[giveplayerid][pLeader] == 6) { ftext = "San Andreas Goverment Service"; }
			else if(PlayerInfo[giveplayerid][pLeader] == 7) { ftext = "SASD"; }
			else if(PlayerInfo[giveplayerid][pLeader] == 9) { ftext = "San Andreas Network"; }
			else if(PlayerInfo[giveplayerid][pLeader] == 10) { ftext = "Transport Company"; }
			else { return 1; }


			format(String, sizeof(String), "You have been made the leader of the %s by Administrator %s.",ftext, GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
			format(String, sizeof(String), "You have made %s the leader of the %s.", GetPlayerNameEx(giveplayerid),ftext);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);

			if(faction < 4 && faction > 0 || faction > 4 && faction < 7)
			{
				gTeam[giveplayerid] = 2;
				PlayerInfo[giveplayerid][pTeam] = 2;
			}
			PlayerInfo[giveplayerid][pFMember] = 255;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:giverank(playerid, params[])
{
	if (PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pRank] == 9)
	{
		new String[10000], giveplayerid, rank;
		if(sscanf(params, "ud", giveplayerid, rank)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /giverank [playerid] [Rank (1-10)]");

		if(rank > 10 || rank < 0) { SendClientMessageEx(playerid, COLOR_GREY, "   Don't go below number 0, or above number 10!"); return 1; }

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pLeader] != PlayerInfo[giveplayerid][pMember])
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "   That person is not in your faction!");
				return 1;
			}

			if(rank > PlayerInfo[giveplayerid][pRank])
			{
				format(String, sizeof(String), "   You have been promoted to a higher rank by %s.", GetPlayerNameEx(playerid));
			}
			if(rank < PlayerInfo[giveplayerid][pRank])
			{
				format(String, sizeof(String), "   You have been demoted to a lower rank by %s.", GetPlayerNameEx(playerid));
			}
			PlayerInfo[giveplayerid][pRank] = rank;
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
			format(String, sizeof(String), "   You have given %s rank %d.", GetPlayerNameEx(giveplayerid),rank);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command (leaders only)!");
	}
	return 1;
}

CMD:entercar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /entercar [carid]");

		new
			iVehID = strval(params);

		PutPlayerInVehicle(playerid, iVehID, 0);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
CMD:gentercar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /entercar [carid]");

		new
			iVehID = strval(params);

		PutPlayerInVehicle(playerid, iVehID, random(1+2));
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
CMD:gotocar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		new carid;
		if(sscanf(params, "d", carid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /gotocar [carid]");

		new Float:cwx2,Float:cwy2,Float:cwz2;
		GetVehiclePos(carid, cwx2, cwy2, cwz2);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			AC_BS_SetPlayerPos(playerid, cwx2, cwy2, cwz2);
		}
		SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		AC_BS_SetPlayerInterior(playerid,0);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:seteventpos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 1)
		{
			new String[1024];

			GetPlayerPos(playerid, EventKernel[EventPositionX], EventKernel[EventPositionY], EventKernel[EventPositionZ]);
			EventKernel[EventInterior] = GetPlayerInterior(playerid);
			EventKernel[EventWorld] = GetPlayerVirtualWorld(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event position, type /seteventinfo to change the event properties.");
			format(String, sizeof( String ), "{AA3333}AdmWarning{FFFF00}: %s has started an event", GetName(playerid) );
			ABroadCast(COLOR_YELLOW, String, 1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You are not making an event, or you're not the correct admin level.");
		}
	}
	return 1;
}

CMD:seteventtype(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 1)
		{
			if(isnull(params))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /seteventtype [type]");
				SendClientMessageEx(playerid, COLOR_GREY, "Available names: DM, TDM, Race");
				return 1;
			}

			if(strcmp(params,"dm",true) == 0)
			{
				EventKernel[ EventType ] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to DM.");
			}
			else if(strcmp(params,"tdm",true) == 0)
			{
				EventKernel[ EventType ] = 2;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to TDM.");
			}
			else if(strcmp(params,"race",true) == 0)
			{
				EventKernel[ EventType ] = 3;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to Race.");
			}
			else if(strcmp(params,"none",true) == 0)
			{
				EventKernel[ EventType ] = 3;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to None.");
			}
		}
	}
	return 1;
}

CMD:editevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 1)
		{
			new choice[32], opString[64];
			if(sscanf(params, "s[32]S[64]", choice, opString))
			{
				if(EventKernel[EventType] == 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent [name]");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: Jointext, Limit, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					return 1;
				}
				else if(EventKernel[EventType] == 2)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent [name]");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: Jointext, Limit, Team1Skin, Team2Skin, Team1Color, Team2Color");
					SendClientMessageEx(playerid, COLOR_GREY, "Team1Spawn, Team2Spawn, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					return 1;
				}
				else if(EventKernel[EventType] == 3)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent [name]");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: Jointext, Limit, Health");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You need to set the event type first!");
					return 1;
				}
			}

			if(strcmp(choice, "jointext",true) == 0)
			{
				if(!opString[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent jointext [text]");
					return 1;
				}
				strmid(EventKernel[EventInfo], opString, 0, strlen(opString), 64);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event join text.");
			}
			else if(strcmp(choice, "health", true) == 0)
			{
				if(EventKernel[EventType] != 2 && EventKernel[EventType] != 1 && EventKernel[EventType] != 3)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opString[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent health [health]");
					return 1;
				}
				new Float: health;
				health = floatstr(opString);
				EventKernel[EventHealth] = health;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event health.");
			}
			else if(strcmp(choice, "armor", true) == 0)
			{
				if(EventKernel[EventType] != 2 && EventKernel[EventType] != 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "This name is not available for this event type.");
					return 1;
				}

				if(!opString[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent armor [armor]");
					return 1;
				}

				new Float: armor;
				armor = floatstr(opString);
				EventKernel[EventArmor] = armor;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event armor.");
			}
			else if(strcmp(choice, "team1skin", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "This name is not available for this event type.");
					return 1;
				}

				if(!opString[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent team1skin [skinid]");
					return 1;
				}

				new skin;
				skin = strval(opString);
				EventKernel[EventTeamSkin][0] = skin;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 1 skin.");
			}
			else if(strcmp(choice, "team2skin", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opString[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent team2skin [skinid]");
					return 1;
				}

				new skin;
				skin = strval(opString);
				EventKernel[EventTeamSkin][1] = skin;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 2 skin.");
			}
			else if(strcmp(choice, "team1color", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!strlen(opString))
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent team1color [color]");
					SendClientMessageEx(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessageEx(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				EventKernel[EventTeamColor][0] = GetColorCode(opString);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 1 color.");
			}
			else if(strcmp(choice, "team2color", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!strlen(opString))
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent team2color [color]");
					SendClientMessageEx(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessageEx(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				EventKernel[EventTeamColor][1] = GetColorCode(opString);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 2 color.");
			}
			else if(strcmp(choice, "team1spawn", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}
				GetPlayerPos(playerid, EventKernel[ EventTeamPosX1 ], EventKernel[ EventTeamPosY1 ], EventKernel[ EventTeamPosZ1 ] );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted team 1's spawn position.");
			}
			else if(strcmp(choice, "team2spawn", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}
				GetPlayerPos(playerid, EventKernel[ EventTeamPosX2 ], EventKernel[ EventTeamPosY2 ], EventKernel[ EventTeamPosZ2 ]);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted team 2's spawn position.");
			}
			else if(strcmp(choice, "limit", true) == 0)
			{
				if(!opString[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent limit [limit 0-60]");
					return 1;
				}

				new limitt;
				limitt = strval(opString);
				if(limitt < 0 || limitt > 60) return SendClientMessageEx(playerid, COLOR_RED, "You cannot adjust the event limit higher than 60 or below 0");
				EventKernel[EventLimit] = limitt;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the players in event limit.");
			}
			else if(strcmp(choice, "gun1", true) == 0)
			{
				if(EventKernel[EventType] != 2 && EventKernel[EventType] != 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opString[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opString);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][0] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 1.");
			}
			else if(strcmp(choice, "gun2", true) == 0)
			{
				if(EventKernel[EventType] != 2 && EventKernel[EventType] != 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opString[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opString);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][1] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 2.");
			}
			else if(strcmp(choice, "gun3", true) == 0)
			{
				if(EventKernel[EventType] != 2 && EventKernel[EventType] != 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opString[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opString);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][2] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 3.");
			}
			else if(strcmp(choice, "gun4", true) == 0)
			{
				if(EventKernel[EventType] != 2 && EventKernel[EventType] != 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opString[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opString);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][3] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 4.");
			}
			else if(strcmp(choice, "gun5", true) == 0)
			{
				if(EventKernel[EventType] != 2 && EventKernel[EventType] != 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opString[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opString);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][4] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 5.");
			}
		}
	}
	return 1;
}

CMD:seteventinfo(playerid, params[])
{
	if( PlayerInfo[ playerid ][ pAdmin ] >= 2)
	{
		if( EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 1 )
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /editevent /seteventtype /seteventviponly (once ready, type /startevent)");
			return 1;
		}
	}
	return 1;
}

CMD:endevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1 || EventKernel[EventCreator] == playerid)
	{
		if(EventKernel[EventStatus] != 0)
		{
			foreach(Player, i)
			{
				if( GetPVarInt( i, "EventToken" ) == 1 )
				{
					ResetPlayerWeapons( i );
					SetPlayerWeapons(i);
					SetPlayerToTeamColor(i);
					SetPlayerSkin(i, PlayerInfo[i][pModel]);
					AC_BS_SetPlayerPos(i,EventFloats[i][1],EventFloats[i][2],EventFloats[i][3]);
					AC_BS_SetPlayerVirtualWorld(i, EventLastVW[i]);
					SetPlayerFacingAngle(i, EventFloats[i][0]);
					AC_BS_SetPlayerInterior(i,EventLastInt[i]);
					SetPlayerHealth(i, EventFloats[i][4]);
					SetPlayerArmour(i, EventFloats[i][5]);
					for(new d = 0; d < 6; d++)
					{
						EventFloats[i][d] = 0.0;
					}
					EventLastVW[i] = 0;
					EventLastInt[i] = 0;
					SetPVarInt(i, "EventToken", 0);
					SendClientMessageEx( i, COLOR_YELLOW, "You have been removed from the event as it has been terminated by an administrator." );
				}
			}

			EventKernel[ EventPositionX ] = 0;
			EventKernel[ EventPositionY ] = 0;
			EventKernel[ EventPositionZ ] = 0;
			EventKernel[ EventTeamPosX1 ] = 0;
			EventKernel[ EventTeamPosY1 ] = 0;
			EventKernel[ EventTeamPosZ1 ] = 0;
			EventKernel[ EventTeamPosX2 ] = 0;
			EventKernel[ EventTeamPosY2 ] = 0;
			EventKernel[ EventTeamPosZ2 ] = 0;
			EventKernel[ EventStatus ] = 0;
			EventKernel[ EventType ] = 0;
			EventKernel[ EventHealth ] = 0;
			EventKernel[ EventLimit ] = 0;
			EventKernel[ EventPlayers ] = 0;
			EventKernel[ EventWeapons ][0] = 0;
			EventKernel[ EventWeapons ][1] = 0;
			EventKernel[ EventWeapons ][2] = 0;
			EventKernel[ EventWeapons ][3] = 0;
			EventKernel[ EventWeapons ][4] = 0;
			EventKernel[EventCreator] = 999;
			EventKernel[VipOnly] = 0;
			SendClientMessageToAllEx( COLOR_LIGHTBLUE, "* The event has been finished by an Administrator." );
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There isn't an active event at the moment." );
		}

	}
	return 1;
}

CMD:startevent(playerid, params[])
{
	if( PlayerInfo[ playerid ][ pAdmin ] >= 2)
	{
		if( EventKernel[EventCreator] == playerid)
		{
				if(EventKernel[ EventHealth ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set the event health!" );
					return 1;
				}
				if(EventKernel[ EventPositionX ] == 0 || EventKernel[ EventPositionY ] == 0 || EventKernel[ EventPositionZ ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set the event position!" );
					return 1;
				}
				if(EventKernel[ EventLimit ] == 0)
				{
					EventKernel[ EventLimit ] = 60;
				}
				foreach(Player, i)
				{
					TogglePlayerControllable(playerid, 1);
				}
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
		}
	}

	return 1;
}
CMD:joinevent(playerid, params[]) {
	if( EventKernel[ EventStatus ] == 0 ) {
		SendClientMessageEx( playerid, COLOR_WHITE, "Saat ini ada kegiatan aktif." );
	}
	else if( GetPVarInt( playerid, "EventToken" ) == 1 ) {
		SendClientMessageEx( playerid, COLOR_WHITE, "Anda sudah dalam event tersebut." );
	}
	else if(GetPVarInt(playerid, "IsInArena") >= 0) {
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
	}
	else if( PlayerCuffed[ playerid ] >= 1 || PlayerInfo[ playerid ][ pJailTime ] > 0 || GetPVarInt(playerid, "Hospital") > 0 ) {
		SendClientMessageEx( playerid, COLOR_WHITE, "Anda tidak dapat melakukan ini sekarang Tunggu sebentar." );
	}
	else if(EventKernel[VipOnly] == 1 && PlayerInfo[playerid][pDonateRank] < 1) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "This event is restricted to VIP's only.");
	}
	else if(EventKernel[EventPlayers] >= EventKernel[EventLimit]) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "This event has reached the max players limit.");
	}
	else if( EventKernel[ EventStatus ] == 2 || (EventKernel[ EventStatus ] == 1 && PlayerInfo[playerid][pDonateRank] >= 3)) {

		if(IsPlayerInAnyVehicle(playerid)) {
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Anda tidak dapat bergabung saat di kendaraan.");
		}

		SetPVarInt( playerid, "EventToken", 1 );
		pTazer[playerid] = 0;
		GetPlayerHealth(playerid, EventFloats[playerid][4]);
		GetPlayerArmour(playerid, EventFloats[playerid][5]);
		EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
		EventLastInt[playerid] = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
		GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
		if(EventKernel[EventType] != 2)
		{
			AC_BS_SetPlayerPos( playerid, EventKernel[ EventPositionX ], EventKernel[ EventPositionY ], EventKernel[ EventPositionZ ] );
		}
		AC_BS_SetPlayerInterior( playerid, EventKernel[ EventInterior ] );
		AC_BS_SetPlayerVirtualWorld( playerid, EventKernel[ EventWorld ] );
		SendClientMessageEx( playerid, COLOR_WHITE, EventKernel[ EventInfo ] );
		SetPlayerHealth( playerid, EventKernel[ EventHealth ] );
		SetPlayerArmour( playerid, EventKernel[ EventArmor ] );
		AC_BS_SetPlayerVirtualWorld( playerid, 0 );

		if(EventKernel[EventType] == 2)
		{
			SetPlayerSkin(playerid, EventKernel[EventTeamSkin][nextteam]);
			new color = EventKernel[EventTeamColor][nextteam];
			if (color==0) SetPlayerColor(playerid, 0x00000000);
			if (color==1) SetPlayerColor(playerid, 0xFFFFFF00);
			if (color==2) SetPlayerColor(playerid, 0x2641FE00);
			if (color==3) SetPlayerColor(playerid, 0xAA333300);
			if (color==16) SetPlayerColor(playerid, 0x33AA3300);
			if (color==5) SetPlayerColor(playerid, 0xC2A2DA00);
			if (color==6) SetPlayerColor(playerid, 0xFFFF0000);
			if (color==7) SetPlayerColor(playerid, 0x33CCFF00);
			//if (strcmp(clr, "navy", true)==0) color=94;
			//if (strcmp(clr, "beige", true)==0) color=102;
			if (color==51) SetPlayerColor(playerid, 0x2D6F0000);
			if (color==103) SetPlayerColor(playerid, 0x0B006F00);
			if (color==13) SetPlayerColor(playerid, 0x52525200);
			if (color==55) SetPlayerColor(playerid, 0xB46F0000);
			if (color==84) SetPlayerColor(playerid, 0x814F0000);
			if (color==74) SetPlayerColor(playerid, 0x750A0000);
			//if (strcmp(clr, "maroon", true)==0) color=115;
			if (color==126) SetPlayerColor(playerid, 0xFF51F100);
			if(nextteam == 0)
			{
			    TogglePlayerControllable(playerid, 0);
				AC_BS_SetPlayerPos(playerid, EventKernel[EventTeamPosX1], EventKernel[EventTeamPosY1], EventKernel[EventTeamPosZ1]);
			}
			else
			{
				AC_BS_SetPlayerPos(playerid, EventKernel[EventTeamPosX2], EventKernel[EventTeamPosY2], EventKernel[EventTeamPosZ2]);
				TogglePlayerControllable(playerid, 0);
			}
			if(nextteam == 0) nextteam++;
			else if(nextteam == 1) nextteam--;
		}

		EventKernel[EventPlayers] ++;
		if(EventKernel[EventPlayers] == EventKernel[EventLimit])
		{
			ABroadCast(COLOR_YELLOW, "The event has now reached the max players limit, you can now start it.", 2);
		}
	}

	else if( EventKernel[ EventStatus ] == 3 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "The event is already locked. You are unable to join." );
	}
	else if( EventKernel[ EventStatus ] == 4 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "The event is already started. You are unable to join." );
	}

	return 1;
}
CMD:quitevent(playerid, params[])
{
    if( GetPVarInt( playerid, "EventToken" ) == 1 ) {
        if( EventKernel[ EventStatus ] == 1 || EventKernel[ EventStatus ] == 2 ) {
            SendClientMessageEx( playerid, COLOR_WHITE, "You can not quit the event at this stage of the event." );
            return 1;
        }
        ResetPlayerWeapons( playerid );
        SetPVarInt(playerid, "EventToken", 0);
        SetPlayerWeapons(playerid);
        SetPlayerToTeamColor(playerid);
        SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
        AC_BS_SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
        AC_BS_SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
        SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
        AC_BS_SetPlayerInterior(playerid,EventLastInt[playerid]);
        SetPlayerHealth(playerid, EventFloats[playerid][4]);
        SetPlayerArmour(playerid, EventFloats[playerid][5]);
        for(new i = 0; i < 6; i++) {
            EventFloats[playerid][i] = 0.0;
        }
        EventLastVW[playerid] = 0;
        EventLastInt[playerid] = 0;
        SendClientMessageEx( playerid, COLOR_LIGHTBLUE, "* You have quit the event." );
    }
    return 1;
}

CMD:beginevent(playerid, params[])
{
	if( PlayerInfo[ playerid ][ pAdmin ] >= 4 || EventKernel[EventCreator] == playerid)
	{
		if( EventKernel[ EventStatus ] == 3 )
		{
			EventKernel[ EventStatus ] = 4;
			foreach(Player, i)
			{
				if( GetPVarInt( i, "EventToken" ) == 1 )
				{
					if( EventKernel[ EventType ] == 1 )
					{
						//GivePlayerEventWeapons( i );
						SendClientMessageEx( i, COLOR_LIGHTBLUE, "GO! The Event has started." );
						SetPlayerHealth( i, EventKernel[ EventHealth ] );
						SetPlayerArmour( i, EventKernel[ EventArmor ] );
						GivePlayerEventWeapons( i );
					}
					else if( EventKernel[ EventType ] == 2 )
					{
						//GivePlayerEventWeapons( i );
						SendClientMessageEx( i, COLOR_LIGHTBLUE, "GO! The Event has started." );
						SetPlayerHealth( i, EventKernel[ EventHealth ] );
						SetPlayerArmour( i, EventKernel[ EventArmor ] );
						GivePlayerEventWeapons( i );
					}
				}
				else
				{
					SendClientMessageEx( i, COLOR_WHITE, "The event has now started. If you wish to join next time, please use /joinevent." );
				}
			}

		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
		}
	}
	return 1;
}

CMD:announceevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1 || EventKernel[EventCreator] == playerid)
	{
		if( EventKernel[ EventStatus ] == 1)
		{
			EventKernel[ EventStatus ] = 2;
			SendClientMessageEx(playerid, COLOR_GRAD2, "To lock the event use /lockevent");
			SendClientMessageToAllEx( COLOR_LIGHTBLUE, "* An event has been started by an Administrator, type /joinevent to participate." );
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
		}
	}
	return 1;
}

CMD:lockevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1 || EventKernel[EventCreator] == playerid)
	{
		if( EventKernel[ EventStatus ] == 2 )
		{
			EventKernel[ EventStatus ] = 3;
			SendClientMessageEx( playerid, COLOR_GRAD2, "You have locked an event, use /beginevent to officially start the event." );
			SendClientMessageToAllEx( COLOR_LIGHTBLUE, "* The event has been locked by an Administrator." );
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
		}
	}
	return 1;
}

CMD:gotoid(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /gotoid [playerid]");

	new Float:plocx,Float:plocy,Float:plocz;
	if (IsPlayerConnected(giveplayerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is spectating someone.");
				return 1;
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can not do this while spectating.");
				return 1;
			}
			GetPlayerPos(giveplayerid, plocx, plocy, plocz);
			AC_BS_SetPlayerVirtualWorld(playerid, PlayerInfo[giveplayerid][pVW]);
			Streamer_UpdateEx(playerid, plocx, plocy, plocz);

			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, plocx, plocy, plocz);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				AC_BS_SetPlayerPos(playerid,plocx,plocy, plocz+1.5);
				AC_BS_SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				AC_BS_SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}

			SendClientMessageEx(playerid, COLOR_ARWIN, "TELE:{ffffff} You have been teleported!");
			SendClientMessageEx(giveplayerid, COLOR_ARWIN, "TELE:{ffffff} You have been teleported!");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		}

	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:agethere(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /agethere [playerid]");

	new Float:plocx,Float:plocy,Float:plocz;
	if (IsPlayerConnected(giveplayerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is spectating someone.");
				return 1;
			}
			GetPlayerPos(playerid, plocx, plocy, plocz);
			Streamer_UpdateEx(giveplayerid, plocx, plocy, plocz);
			SetPVarInt(playerid, "BeingTeleported", 1);
			AC_BS_SetPlayerVirtualWorld(giveplayerid, PlayerInfo[playerid][pVW]);

			PlayerInfo[giveplayerid][pLocal] = PlayerInfo[playerid][pLocal];

			if (GetPlayerState(giveplayerid) == 2)
			{
				TelePos[giveplayerid][0] = 0.0;
				TelePos[giveplayerid][1] = 0.0;
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, plocx, plocy, plocz);
				LinkVehicleToInterior(GetPlayerVehicleID(giveplayerid), GetPlayerInterior(playerid));
				AC_BS_SetPlayerInterior(giveplayerid, GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(GetPlayerVehicleID(giveplayerid), GetPlayerVirtualWorld(playerid));
				AC_BS_SetPlayerVirtualWorld(giveplayerid, GetPlayerVirtualWorld(playerid));
			}
			else
			{
				AC_BS_SetPlayerPos(giveplayerid,plocx,plocy, plocz+1.5);
				AC_BS_SetPlayerInterior(giveplayerid, GetPlayerInterior(playerid));
				AC_BS_SetPlayerVirtualWorld(giveplayerid, GetPlayerVirtualWorld(playerid));
			}

			SendClientMessageEx(playerid, COLOR_ARWIN, "TELE:{ffffff} You have been teleported!");
			SendClientMessageEx(giveplayerid, COLOR_ARWIN, "TELE:{ffffff} You have been teleported!");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		}

	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}
CMD:agetcar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new carid;
		if(sscanf(params, "d", carid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /agetcar [carid]");
		new Float:plocx,Float:plocy,Float:plocz;

		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetVehiclePos(carid,plocx,plocy+4, plocz);
		SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:atow(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) { return 1; }
	if(IsPlayerInAnyVehicle(playerid))
   	{
		new carid = GetPlayerVehicleID(playerid);
		new closestcar = GetClosestCar(playerid, carid);
		if(GetDistanceToCar(playerid,closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid))
		{
			foreach(Player, i)
			{
				if(GetPlayerVehicle(i, closestcar) != -1)
				{
					if(ProxDetectorS(30.0,playerid,i))
					SendClientMessageEx(i, COLOR_LIGHTBLUE, "Someone is attempting to tow your vehicle away!");
					arr_Towing[playerid] = closestcar;
				    SendClientMessageEx(playerid, COLOR_GRAD2, "You have towed this vehicle.");
					return AttachTrailerToVehicle(closestcar,carid);
				}
			}
			SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle has no registration, it is available for impounding.");
			AttachTrailerToVehicle(closestcar,carid);
			arr_Towing[playerid] = closestcar;
			return 1;
		}
	}
    else SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be inside a vehicle to use this command!");
	return 1;
}
CMD:setvhealth(playerid, params[])
{
	new vehicleid, Float:amount;
	if(sscanf(params, "df", vehicleid, amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setvhealth [VID] [amount]");
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		SetVehicleHealth(vehicleid, amount);
	}
	return 1;
}
CMD:lastdriver(playerid, params[])
{
	new String[10000], vehicleid;
	if(sscanf(params, "d", vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /lastdriver [VID]");
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		foreach(Player, i)
		{
			if(gLastCar[i] == vehicleid)
			{
				format(String, sizeof(String), "Last driven vehicle was %s.",GetName(i));
				SendClientMessageEx(playerid, COLOR_GREY, String);
			}
		}
	}
	return 1;
}
CMD:oldcar(playerid, params[])
{
	new String[10000];
	format(String, sizeof(String), "Your last driven vehicle ID was %d.",gLastCar[playerid]);
	SendClientMessageEx(playerid, COLOR_GREY, String);
	return 1;
}
CMD:vehowner(playerid, params[])
{
	new String[10000], vehicleid;
	if(sscanf(params, "d", vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /vehowner [VID]");
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		for(new i; i < MAX_PLAYERVEHICLES; ++i)
	 	{
	 	    foreach(Player, a)
	 	    {
	 	        if(PlayerVehicleInfo[a][i][pvId] == vehicleid)
	 	        {
					format(String, sizeof(String), "Owner this vehicle is %s.", GetName(a));
					SendClientMessageEx(playerid, COLOR_GREY, String);
				}
			}
		}
	}
	return 1;
}
CMD:respawncar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[1024], carid;
		if(sscanf(params, "d", carid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /respawncar [carid]");

		SetVehicleToRespawn(carid);
		format(string, sizeof(string), "You have respawned vehicle ID %d.", carid);
		SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
	}
	return 1;
}
CMD:rac(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Dibutuhkan admin LVL 3+");
	}
	else
	{
		for(new x;x<MAX_VEHICLES;x++)
		{
			if(!IsVehicleOccupied(x))
   			{
	    		SetVehicleToRespawn(x);
			}
		}
		SendClientMessageToAll(COLOR_ARWIN,"Information : {FFFF00}Semua kendaraan yang tidak terpakai telah {FF8000}DIRESPAWN.");
	}
	return 1;
}
CMD:respawndmv(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Dibutuhkan admin LVL 3+");
	}
	else
	{
		for(new x;x<sizeof(DMVCar);x++)
		{
		    if(!IsVehicleOccupied(x))
		    {
	 	    	SetVehicleToRespawn(DMVCar[x]);
			}
		}
		SendClientMessageToAll(COLOR_ARWIN,"Information : {FFFF00}Kendaraan DMV telah {FF8000}DIRESPAWN.");
	}
	return 1;
}
CMD:respawnsapd(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Dibutuhkan admin LVL 3+");
	}
	else
	{
		for(new x;x<sizeof(LSPDVehicles);x++)
		{
		    if(!IsVehicleOccupied(x))
		    {
	 	    	SetVehicleToRespawn(LSPDVehicles[x]);
	 	    	SetVehicleHealth(Kopassus[x], 10000.0);
				SetVehicleHealth(Cruiser[x], 2000.0);
				SetVehicleHealth(Lincoln[x], 2000.0);
				AddVehicleComponent(Cruiser[x], 1079);
				AddVehicleComponent(Lincoln[x], 1080);
			}
		}
		SendClientMessageToAll(COLOR_ARWIN,"Information : {FFFF00}'San Andreas Police Department' vehicle has been respawned.");
	}
	return 1;
}
CMD:respawnsamd(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Dibutuhkan admin LVL 3+");
	}
	else
	{
		for(new x;x<sizeof(LSMDVehicles);x++)
		{
		    if(!IsVehicleOccupied(x))
		    {
		   		SetVehicleToRespawn(LSMDVehicles[x]);
			}
		}
		SendClientMessageToAll(COLOR_ARWIN,"Information : {FFFF00}'San Andreas Medical Department' vehicle has been respawned.");
	}
	return 1;
}
CMD:respawnsannews(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Dibutuhkan admin LVL 3+");
	}
	else
	{
		for(new x;x<sizeof(SanNewsVehicles);x++)
		{
		    if(!IsVehicleOccupied(x))
		    {
			   	SetVehicleToRespawn(SanNewsVehicles[x]);
			}
		}
	   	SendClientMessageToAll(COLOR_ARWIN,"Information : {FFFF00}'San Andreas Network' vehicle has been respawned.");
	}
	return 1;
}
CMD:respawnsags(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Dibutuhkan admin LVL 3+");
	}
	else
	{
		for(new x;x<sizeof(GovVehicles);x++)
		{
		    if(!IsVehicleOccupied(x))
		    {
			   	SetVehicleToRespawn(GovVehicles[x]);
			}
		}
	   	SendClientMessageToAll(COLOR_ARWIN,"Information : {FFFF00}'San Andreas Goverment Service' vehicle has been respawned.");
	}
	return 1;
}

stock IsVehicleOccupied(vehicleid)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    	{
	        if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER || PlayerVehicleInfo[i][v][pvId] == vehicleid)
			{
	            return 1;
			}
		}
	}
    return 0;
}

CMD:gotoco(playerid, params[])
{
 if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new Float: pos[3], int;
		if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /gotoco [x coordinate] [y coordinate] [z coordinate] [interior]");

		SendClientMessageEx(playerid, COLOR_GRAD2, "You have been teleported to the coordinates specified.");
		AC_BS_SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		AC_BS_SetPlayerInterior(playerid, int);
	}
	return 1;
}

CMD:setweather(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new weather, string[1024];
	if(sscanf(params, "d", weather)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /weatherall [weatherid]");

	if(weather < 0||weather > 45) { SendClientMessageEx(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45!"); return 1; }
	SetWeather(weather);
	format(string, sizeof(string), "WEATHER: %s telah mengganti Weather!", PlayerInfo[playerid][pNormalName]);
	SendClientMessageToAllEx(COLOR_WHITE, string);
	return 1;
}
CMD:setpc(playerid, params[])
{
 	if(PlayerInfo[playerid][pAdmin] >= 10)
	{
		new String[10000], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /givepc [playerid] [amount]");

		if(IsPlayerConnected(giveplayerid))
		{
		    PlayerInfo[giveplayerid][pConnectTime] = money;
			format(String, sizeof(String), "%s have set %s's PayCheck to %d (/setpc)", PlayerInfo[playerid][pAdminName], GetName(giveplayerid),money);
			ABroadCast(COLOR_TWAQUA, String, 1);
			Log("logs/setpc.log", String);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
CMD:givepc(playerid, params[])
{
 	if(PlayerInfo[playerid][pAdmin] >= 10)
	{
		new String[10000], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /givepc [playerid] [amount]");

		if(IsPlayerConnected(giveplayerid))
		{
		    PlayerInfo[giveplayerid][pConnectTime] += money;
			format(String, sizeof(String), "%s have give %s's %d PayCheck (/givepc)", PlayerInfo[playerid][pAdminName], GetName(giveplayerid),money);
			ABroadCast(COLOR_TWAQUA, String, 1);
			Log("logs/givepc.log", String);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
CMD:setmask(playerid, params[])
{
 	if(PlayerInfo[playerid][pAdmin] >= 10)
	{
		new String[10000], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setmask [playerid] [masknumb]");

		if(IsPlayerConnected(giveplayerid))
		{
		    PlayerInfo[giveplayerid][pMaskID] = money;
			format(String, sizeof(String), "%s have set %s's Mask_Number to %d (/setmask)", PlayerInfo[playerid][pAdminName], GetName(giveplayerid),money);
			ABroadCast(COLOR_TWAQUA, String, 1);
			Log("logs/setmask.log", String);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
/*CMD:arwinpackage(playerid, params[])
{
	if(PlayerInfo[playerid][pUseSorry] == 0)
	{
	    if(PlayerInfo[playerid][pLevel] < 2)
	    {
		    GivePlayerCash(playerid, 100000);
		    PlayerInfo[playerid][pLevel] = 2;
		    PlayerInfo[playerid][pAccount] += 50000;
		    PlayerInfo[playerid][pUseSorry] = 1;
		    SendClientMessage(playerid, COLOR_ARWIN, "ARWIN14: {FFFFFF}Anda telah menerima uang $1,000.00 cash dan $500.00 di ATM anda, serta level anda saya set menjadi 2");
		}
		else
		{
		    GivePlayerCash(playerid, 100000);
		    PlayerInfo[playerid][pAccount] += 50000;
		    PlayerInfo[playerid][pUseSorry] = 1;
		    SendClientMessage(playerid, COLOR_ARWIN, "ARWIN14: {FFFFFF}Anda telah menerima uang $1,000.00 cash dan $500.00 di ATM anda");
		}
		return 1;
	}
	else SendClientMessage(playerid, -1, "ERROR: Anda tidak bisa menggunakan perintah ini lebih dari satu kali");
	return 1;
}*/

CMD:refundinsurances(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 10)
	{
		new
			String[128],
		    targetID,
			slot,
			amount;

		if(sscanf(params, "udd", targetID, slot,amount)) return SendClientMessage(playerid, COLOR_GREY, SYNTAX_MESSAGE"/setcarinsurance [playerid] [slot 1 - 5] [amount]");
		if(targetID == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player yang dimaksud tidak terhubung ke server atau tidak terdaftar.The specified player ID is either not connected or has not authenticated.");
		PlayerVehicleInfo[targetID][slot][pvInsurances] += amount;
		format(String, sizeof(String), "REFUNDCMD: %s telah merefund %d asuransi kendaraan milik %s ", PlayerInfo[playerid][pAdminName], amount, GetName(targetID));
		ABroadCast(COLOR_LIGHTRED, String, 1);
	}
	return 1;
}
CMD:refundmoney(playerid, params[])
    {
        new id, cash[32], String[10000];
        new dollars, cents, totalcash[25];
        if(sscanf(params, "us[32]", id, cash)) return SendClientMessage(playerid, COLOR_GREY, "/refundmoney [playerid] [Jumlah(dollar.cents)]");
        if((norefund) && PlayerInfo[playerid][pAdmin] < 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "Perintah untuk Refund dalam status DISABLED");
        if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "ERROR: Player yang ingin anda refund sedang tidak online");
		if(strfind(cash, ".", true) != -1)
        {
			sscanf(cash, "p<.>dd", dollars, cents);
			format(totalcash, sizeof(totalcash), "%d%02d", dollars, cents);
			if(IsPlayerConnected(id) && id != playerid)
		    {
						if(strval(totalcash) < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
				       	GivePlayerCash(id, strval(totalcash));
		           		format(String, sizeof(String), "REFUNDCMD: %s telah me-refund uang %s sebesar $%s",PlayerInfo[playerid][pAdminName], PlayerInfo[id][pNormalName], FormatMoney(strval(totalcash)));
						ABroadCast(COLOR_LIGHTRED, String, 1);
						format(String, sizeof(String), "%s has given %s %s '/refundmoney'", PlayerInfo[playerid][pAdminName], GetPlayerNameEx(id),FormatMoney(strval(totalcash)));
						Log("logs/refundmoney.log", String);
			}
		}
		else
		{
			sscanf(cash, "d", dollars);
			format(totalcash, sizeof(totalcash), "%d00", dollars);
			if(IsPlayerConnected(id) && id != playerid)
		    {
						if(strval(totalcash) < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
		       			GivePlayerCash(id, strval(totalcash));
						format(String, sizeof(String), "REFUNDCMD: %s telah me-refund uang %s sebesar $%s",PlayerInfo[playerid][pAdminName], PlayerInfo[id][pNormalName], FormatMoney(strval(totalcash)));
						ABroadCast(COLOR_LIGHTRED, String, 1);
						format(String, sizeof(String), "%s has given %s %s '/refundmoney'", PlayerInfo[playerid][pAdminName], GetPlayerNameEx(id),FormatMoney(strval(totalcash)));
						Log("logs/refundmoney.log", String);
			}
		}
	    return 1;
}
CMD:getpt(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /getpt(patient) [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
		    if (giveplayerid == playerid)
		    {
		        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You cannot accept your own Emergency Dispatch call!");
				return 1;
		    }
			if(GetPVarInt(giveplayerid,"MedicCall") == 1)
			{
				if(PlayerInfo[giveplayerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
				format(String, sizeof(String), "EMS Driver %s has accepted the Emergency Dispatch call for (%d) %s.",GetPlayerNameEx(playerid),giveplayerid,GetPlayerNameEx(giveplayerid));
				SendRadioMessage(4, TEAM_MED_COLOR, String);
				format(String, sizeof(String), "* You have accepted EMS Call from %s, you will see the marker until you have reached it.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				format(String, sizeof(String), "* EMS Driver %s has accepted your EMS Call; please wait at your current position.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
				GameTextForPlayer(playerid, "~w~EMS Caller~n~~r~Go to the red marker.", 5000, 1);
				EMSCallTime[playerid] = 1;
				EMSAccepted[playerid] = giveplayerid;
				SetPVarInt(giveplayerid, "EMSAttempt", 1);
				PlayerInfo[playerid][pCallsAccepted]++;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "The player has not requested any EMS attention!");
			}
		}
	}
	return 1;
}

CMD:movept(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 3))
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /movepatient [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid,"Injured") == 1)
			{
				if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command while in a vehicle.");
				if(PlayerInfo[giveplayerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
				if(GetPVarInt(giveplayerid, "OnStretcher") == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "The player is already on a stretcher, you can't do this right now!");
					return 1;
				}

				new Float:mX, Float:mY, Float:mZ;
				GetPlayerPos(giveplayerid, mX, mY, mZ);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, mX, mY, mZ))
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "You have to be close to the patient to be able to move them!");
					return 1;
				}
				SendClientMessageEx(playerid, COLOR_GRAD2, "You have 30 seconds to move to another location or you can either press the '{AA3333}FIRE{BFC0C2}' button.");
				format(String, sizeof(String), "* You have been put on a stretcher by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
				format(String, sizeof(String), "* You have put %s on a stretcher, you may move them now.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				SetPVarInt(giveplayerid, "OnStretcher", 1);
				SetPVarInt(playerid, "TickEMSMove", SetTimerEx("MoveEMS", 30000, false, "d", playerid));
				SetPVarInt(playerid, "MovingStretcher", giveplayerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "The player has to be injured in-order to move them!");
			}
		}
	}
	return 1;
}

CMD:aslap(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >=1)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /aslap [playerid]");
		new Float:slx, Float:sly, Float:slz;
		if(IsPlayerConnected(giveplayerid))
		{
			GetPlayerPos(giveplayerid, slx, sly, slz);
			AC_BS_SetPlayerPos(giveplayerid, slx, sly, slz+5);
			PlayerPlaySound(giveplayerid, 1130, slx, sly, slz+5);
			format(String, sizeof(String), "{FF6347}AdmCmd: %s telah di slap oleh %s",GetName(giveplayerid), PlayerInfo[playerid][pAdminName]);
			ABroadCast(COLOR_LIGHTRED,String,2);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
CMD:up(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >=1)
	{
		new Float:slx, Float:sly, Float:slz;

		if(IsPlayerConnected(playerid))
		{
			GetPlayerPos(playerid, slx, sly, slz);
			AC_BS_SetPlayerPos(playerid, slx, sly, slz+5);
			PlayerPlaySound(playerid, 1130, slx, sly, slz+5);
		}
	}
	return 1;
}
CMD:mute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /mute [playerid]");
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can not use this command on yourself!");
				return 1;
			}

			if(PlayerInfo[giveplayerid][pMuted] == 0)
			{
				if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
				{
					format(String, sizeof(String), "%s just tried to /mute you.",GetName(playerid));
					SendClientMessageEx(giveplayerid, COLOR_YELLOW, String);
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
					return 1;
				}
				PlayerInfo[giveplayerid][pMuted] = 1;
				format(String, sizeof(String), "{FF6347}AdmCmd: %s was silenced by %s.",GetPlayerNameEx(giveplayerid),GetName(playerid));
				ABroadCast(COLOR_LIGHTRED,String,2);
			}
			else
			{
				PlayerInfo[giveplayerid][pMuted] = 0;
				format(String, sizeof(String), "{FF6347}AdmCmd: %s was unsilenced by %s.",GetPlayerNameEx(giveplayerid),GetName(playerid));
				ABroadCast(COLOR_LIGHTRED,String,2);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:rmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 5)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /rmute [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 0)
			{
				PlayerInfo[giveplayerid][pRMuted] = 1;
				format(String, sizeof(String), "{FF6347}AdmCmd: %s has indefinitely blocked %s from submitting reports.",GetName(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_LIGHTRED,String,2);
				format(String, sizeof(String), "You have been blocked from submitting /reports by %s.", GetName(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, String);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "You will not be able to submit reports until you are unblocked. To appeal this action contact.");
				new year, month,day;
				getdate(year, month, day);
				format(String, sizeof(String), "{FF6347}AdmCmd: %s was blocked from /report by %s (%d-%d-%d)", GetPlayerNameEx(giveplayerid), GetName(playerid), day,month,year);
				Log("logs/mute.log", String);
			}
			else
			{
				PlayerInfo[giveplayerid][pRMuted] = 0;
				format(String, sizeof(String), "{FF6347}AdmCmd: %s has been re-allowed to submit reports by %s",GetPlayerNameEx(giveplayerid),GetName(playerid));
				ABroadCast(COLOR_LIGHTRED,String,2);
				format(String, sizeof(String), "You have been re-allowed to submitting /reports again by %s.", GetName(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, String);
				new year, month,day;
				getdate(year, month, day);
				format(String, sizeof(String), "{FF6347}AdmCmd: %s was unblocked from /report by %s (%d-%d-%d)", GetPlayerNameEx(giveplayerid), GetName(playerid), day,month,year);
				Log("logs/mute.log", String);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}
CMD:missions(playerid,params[])
{
	if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
	{
	    new String[10000];
	    if(PlayerInfo[playerid][pMissionsTime] > 0) { SendFormattedMessage(playerid,COLOR_WHITE,"Error: Kamu harus menunggu %d menit untuk mengangkat kotak kembali", PlayerInfo[playerid][pMissionsTime]/60); return 1; }
		if(SedangTrucking[playerid] == 1) { SendClientMessageEx(playerid,COLOR_WHITE,"Kamu sedang dalam pengiriman."); return 1; }
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 456 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 499 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 455)
		{
			if(IsPlayerInRangeOfPoint(playerid, 10, 1769.2200,-1700.5023,13.4871)) // pusat
			{
				if(StockIkan < 250) { SendClientMessageEx(playerid,COLOR_WHITE,"Saat ini stock ikan terlalu sedikit untuk di antar."); return 1; }
			    ShowPlayerDialog(playerid, 15772, DIALOG_STYLE_LIST,"Deliver Points" ,"Export Fish","OK", "Cancel");
			    return 1;
			}
            else if(IsPlayerInRangeOfPoint(playerid, 10, 19.5219, 867.7570, 20.3990)) // deliver comp
			{
				if(stockcomp > 5000) { SendClientMessageEx(playerid,COLOR_WHITE,"Saat ini stock component terlalu banyak, pengiriman GAGAL."); return 1; }
				ShowPlayerDialog(playerid, 15774, DIALOG_STYLE_LIST,"Deliver Points" ,"Component Storage","OK", "Cancel");
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 5, -377.4544, -1449.8357, 25.7266)) // tanaman
			{
				if(stockplant < 250) { SendClientMessageEx(playerid,COLOR_WHITE,"Saat ini stock tanaman terlalu sedikit untuk di antar"); return 1; }
				FishHolding[playerid] = 6;
			    SedangTrucking[playerid] = 1;
			    stockplant -= 250;
                SetPlayerRaceCheckpoint(playerid,1,2787.0144, -2417.9524, 13.5702,2787.0144, -2417.9524, 13.5702,5);
			    SendClientMessageEx(playerid, COLOR_WHITE,"Muatan telah dinaikkan segera kirim ikan ini ke gudang yang berada di Ocean Dock");
			    format(String, sizeof(String), "[Plant Storage]\nPlant Available: %d\n'/missions' untuk mengangkut barang", stockplant);
				UpdateDynamic3DTextLabelText(pickupPlant, COLOR_WHITE, String);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 5, -1446.9056,-1544.0217,101.7685)) // kayu
			{
				if(cutt < 250) { SendClientMessageEx(playerid,COLOR_WHITE,"Saat ini stock tanaman terlalu sedikit untuk di antar"); return 1; }
				FishHolding[playerid] = 7;
			    SedangTrucking[playerid] = 1;
			    cutt -= 250;
			    format(String, sizeof(String), "[Wood Storage]\nWood Available: %d\n'/missions' untuk mengangkut barang", cutt);
				UpdateDynamic3DTextLabelText(Wood3DText, COLOR_WHITE, String);
                SetPlayerRaceCheckpoint(playerid,1,2787.0144, -2417.9524, 13.5702,2787.0144, -2417.9524, 13.5702,5);
			    SendClientMessageEx(playerid, COLOR_WHITE,"Muatan telah dinaikkan segera kirim kayu ini ke gudang yang berada di Ocean Dock");
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_WHITE,"Kamu tidak berada di Load Point manapun!");
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE,"Kamu harus memakai Yankee, Benson, atau Flatbed.");
		return 1;
	}
	SendClientMessageEx(playerid, COLOR_WHITE,"Kamu bukan sopir truck.");
	return 1;
}
CMD:hauling(playerid,params[])
{
    new S3MP4K[10000], String[10000];
	if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
	{
	    if(PlayerInfo[playerid][pHaulingTime] > 0)
		{
	    	format(String, sizeof(String),"ERROR: Kamu harus menunggu %d menit untuk memulai Trucking Mission kembali", PlayerInfo[playerid][pHaulingTime]/60);
	    	SendClientMessage(playerid, COLOR_GRAD2, String);
	    	return 1;
		}
		if(SedangHauling[playerid] >= 1) { SendClientMessageEx(playerid,COLOR_WHITE,"Kamu sedang dalam pengiriman."); return 1; }
		if(PlayerInfo[playerid][pTruckingSkill] < 32) { SendClientMessageEx(playerid,COLOR_WHITE,"Skills anda kurang untuk melakukan Hauling Missions."); return 1; }
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 515)
		{
			strcat(S3MP4K, "Order\tPrice\n");
			format(String, sizeof(String), "Ocean Dock Imports\t%s\n", (DialogHauling[0] == true) ? ("{FF0000}Taken") : ("{33AA33}$350.00"));
			strcat(S3MP4K, String);
			format(String, sizeof(String), "Ocean Dock Imports\t%s\n", (DialogHauling[1] == true) ? ("{FF0000}Taken") : ("{33AA33}$300.00"));
			strcat(S3MP4K, String);
			format(String, sizeof(String), "Angel Pine Exports\t%s\n", (DialogHauling[2] == true) ? ("{FF0000}Taken") : ("{33AA33}$250.00"));
			strcat(S3MP4K, String);
			format(String, sizeof(String), "Angel Pine Exports\t%s\n", (DialogHauling[3] == true) ? ("{FF0000}Taken") : ("{33AA33}$270.00"));
			strcat(S3MP4K, String);
			format(String, sizeof(String), "Chilliad Deport\t%s\n", (DialogHauling[4] == true) ? ("{FF0000}Taken") : ("{33AA33}$399.00"));
			strcat(S3MP4K, String);
			format(String, sizeof(String), "Chilliad Deport\t%s\n", (DialogHauling[5] == true) ? ("{FF0000}Taken") : ("{33AA33}$200.00"));
			strcat(S3MP4K, String);
			format(String, sizeof(String), "Easter Import\t%s\n", (DialogHauling[6] == true) ? ("{FF0000}Taken") : ("{33AA33}$310.00"));
			strcat(S3MP4K, String);
			format(String, sizeof(String), "Blueberry Export\t%s\n", (DialogHauling[7] == true) ? ("{FF0000}Taken") : ("{33AA33}$333.00"));
			strcat(S3MP4K, String);
			format(String, sizeof(String), "Las Venturas Deport\t%s\n", (DialogHauling[8] == true) ? ("{FF0000}Taken") : ("{33AA33}$290.00"));
			strcat(S3MP4K, String);
			format(String, sizeof(String), "Las Venturas Fuel & Gas\t%s", (DialogHauling[9] == true) ? ("{FF0000}Taken") : ("{33AA33}$255.00"));
			strcat(S3MP4K, String);
		   	//format(S3MP4K, sizeof(S3MP4K), "%sMissions 1\t$350.00\nMissions 2\t$300.00\nMissions 3\t$250.00\nMissions 4\t$270.00\nMissions 5\t$399.00\nMissions 6\t$200.00\nMissions 7\t$310.00\nMissions 8\t$333.00\nMissions 9\t$290.00\nMissions 10\t$225.00", S3MP4K);
			ShowPlayerDialog(playerid, HAULING, DIALOG_STYLE_TABLIST_HEADERS, "Hauling Missions", S3MP4K, "Select", "Cancel");
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_WHITE,"You are not in the Truck.");
		return 1;
	}
	SendClientMessageEx(playerid, COLOR_WHITE,"You are not Trucker.");
	return 1;
}
CMD:sellallfish(playerid,params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pBeratIkan] == 0) { SendClientMessageEx(playerid, COLOR_WHITE,"Kamu tidak memiliki ikan."); return 1; }
	if(PlayerInfo[playerid][pFTime] > 0) { SendClientMessageEx(playerid, COLOR_WHITE,"Saat ini kamu tidak dapat menjual ikan"); return 1; }
	if(!IsPlayerInRangeOfPoint(playerid, 3, 1778.7888,-1720.7598,13.5469))
	{
		SendClientMessageEx(playerid,COLOR_WHITE,"ERROR:Kamu tidak berada di sellfish point.");
		return 1;
	}
    if(StockIkan >= 5000) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR:Stock ikan sudah penuh."); return 1; }
    format(String, sizeof(String), "Apakah kamu akan menjual ikan kamu?\n Total Berat %d Kg dengan harga $%s", PlayerInfo[playerid][pBeratIkan], FormatMoney(PlayerInfo[playerid][pBeratIkan] * FishPrice/2));
	ShowPlayerDialog(playerid,15917,DIALOG_STYLE_MSGBOX,"Toko Ikan",String,"Sell","Cancel");
	return 1;
}
forward TimeMancingRendah(playerid);
public TimeMancingRendah(playerid)
{
	new rand = random(4);
	new String[10000];
	new randberat = random(25)+10;
	SedangMancing[playerid] = 0;
	PlayerInfo[playerid][pPancingan] --;
	if(rand == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"FISH-INFO: Kail Anda terputus Karena Deras nya air laut.");
		ClearAnimations(playerid);
		RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid,1);
		return 1;
	}
	else if(rand == 1)
	{
	 	format(String, sizeof(String), "* Kamu mendapatkan ikan seberat {FF0000} %d gram", randberat);
	  	SendClientMessageEx(playerid, COLOR_YELLOW,String);
	  	PlayerInfo[playerid][pBeratIkan] += randberat;
	  	PlayerInfo[playerid][pFMax] += 1;
	  	RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid,1);
	  	return 1;
 	}
 	else if(rand == 2)
	{
	 	SendClientMessageEx(playerid, COLOR_WHITE,"FISH-INFO: Kail Anda terputus Karena kuatnya tarikan Ikan.");
	 	RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid,1);
		return 1;
 	}
 	else if(rand == 3)
	{
	 	format(String, sizeof(String), "* Kamu mendapatkan ikan seberat {FF0000} %d gram", randberat);
	  	SendClientMessageEx(playerid, COLOR_YELLOW,String);
	  	PlayerInfo[playerid][pBeratIkan] += randberat;
	  	PlayerInfo[playerid][pFMax] += 1;
	  	RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid,1);
	  	return 1;
 	}
  	return 1;
}

forward TimeMancingTinggi(playerid);
public TimeMancingTinggi(playerid)
{
	new rand = random(4);
	new String[10000];
	new randberat = random(100)+200;
	SedangMancing[playerid] = 0;
	PlayerInfo[playerid][pPancingan] --;
	if(rand == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"FISH-INFO: Kail Anda terputus Karena Deras nya air laut.");
		RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid,1);
		return 1;
	}
	else if(rand == 1)
	{
	 	format(String, sizeof(String), "* Kamu mendapatkan ikan seberat {FF0000} %d gram", randberat);
	  	SendClientMessageEx(playerid, COLOR_YELLOW,String);
	  	PlayerInfo[playerid][pBeratIkan] += randberat;
	  	PlayerInfo[playerid][pFMax] += 1;
	  	RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid,1);
	  	return 1;
 	}
 	else if(rand == 2)
	{
	 	SendClientMessageEx(playerid, COLOR_WHITE,"FISH-INFO: Anda mendapatkan Jaket Bekas Lalu membuang nya.");
	 	RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid,1);
		return 1;
 	}
 	else if(rand == 3)
	{
	 	format(String, sizeof(String), "* Kamu mendapatkan ikan seberat {FF0000} %d gram", randberat);
	  	SendClientMessageEx(playerid, COLOR_YELLOW,String);
	  	PlayerInfo[playerid][pBeratIkan] += randberat;
	  	PlayerInfo[playerid][pFMax] += 1;
	  	RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid,1);
	  	return 1;
 	}
  	return 1;
}

forward TimeMancingTengah(playerid);
public TimeMancingTengah(playerid)
{
	new rand = random(4);
	new String[10000];
	new randberat = random(100)+100;
	SedangMancing[playerid] = 0;
	PlayerInfo[playerid][pPancingan] --;
	if(rand == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"FISH-INFO: Kail Anda terputus Karena Deras nya air laut.");
		RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid,1);
		return 1;
	}
	else if(rand == 1)
	{
	 	format(String, sizeof(String), "* Kamu mendapatkan ikan seberat {FF0000} %d gram", randberat);
	  	SendClientMessageEx(playerid, COLOR_YELLOW,String);
	  	PlayerInfo[playerid][pBeratIkan] += randberat;
	  	PlayerInfo[playerid][pFMax] += 1;
	  	RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid,1);
	  	return 1;
 	}
 	else if(rand == 2)
	{
	 	SendClientMessageEx(playerid, COLOR_WHITE,"FISH-INFO: Anda mendapatkan Jaket Bekas Lalu membuang nya.");
	 	RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid,1);
		return 1;
 	}
 	else if(rand == 3)
	{
	 	format(String, sizeof(String), "* Kamu mendapatkan ikan seberat {FF0000} %d gram", randberat);
	  	SendClientMessageEx(playerid, COLOR_YELLOW,String);
	  	PlayerInfo[playerid][pBeratIkan] += randberat;
	  	PlayerInfo[playerid][pFMax] += 1;
	  	RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid,1);
	  	return 1;
 	}
  	return 1;
}

CMD:fish(playerid,params[])
{
	if(PlayerInfo[playerid][pPancingan] <= 0) { SendClientMessageEx(playerid, COLOR_WHITE,"Kamu tidak memiliki pancingan untuk memancing"); return 1; }
	if(PlayerInfo[playerid][pCacing] <= 0) { SendClientMessageEx(playerid, COLOR_WHITE,"Kamu tidak memiliki umpan"); return 1; }
	if(PlayerInfo[playerid][pFMax] >= 5) { SendClientMessageEx(playerid, COLOR_WHITE,"Kamu tidak dapat membawa ikan lagi"); return 1; }
	if(PlayerInfo[playerid][pFTime] > 0)
	{
	    new String[10000];
	    format(String, sizeof(String), "FISH-INFO: Kamu bisa memancing setelah %d detik lagi",PlayerInfo[playerid][pFTime]);
		SendClientMessageEx(playerid, COLOR_YELLOW,String);
		return 1;
	}
	if(SedangMancing[playerid] == 1) { SendClientMessageEx(playerid,COLOR_YELLOW,"EROR : Anda sedang memancing."); return 1; }
	if(!IsPlayerInAnyVehicle(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 50, 558.72, -2845.66, 0.00))
		{
		    new rand = random(10);
		    new ftimer = Random(10000, 30000);
		    if(rand == 0)
		    {
	  			SetTimerEx("TimeMancingRendah", ftimer, false, "i", playerid);
			}
			if(rand == 1)
		    {
	  			SetTimerEx("TimeMancingRendah", ftimer, false, "i", playerid);
			}
			if(rand == 2)
		    {
	  			SetTimerEx("TimeMancingTinggi", ftimer, false, "i", playerid);
			}
			if(rand == 3)
		    {
	  			SetTimerEx("TimeMancingTinggi", ftimer, false, "i", playerid);
			}
			if(rand == 4)
		    {
	  			SetTimerEx("TimeMancingTinggi", ftimer, false, "i", playerid);
			}
			if(rand == 5)
		    {
	  			SetTimerEx("TimeMancingTengah", ftimer, false, "i", playerid);
			}
			if(rand == 6)
		    {
	  			SetTimerEx("TimeMancingTinggi", ftimer, false, "i", playerid);
			}
			if(rand == 7)
		    {
	  			SetTimerEx("TimeMancingTinggi", ftimer, false, "i", playerid);
			}
			if(rand == 8)
		    {
	  			SetTimerEx("TimeMancingTinggi", ftimer, false, "i", playerid);
			}
			if(rand == 9)
		    {
	  			SetTimerEx("TimeMancingRendah", ftimer, false, "i", playerid);
			}
		    SedangMancing[playerid] = 1;
		    PlayerInfo[playerid][pCacing] -= 1;
	 		SendClientMessageEx(playerid, COLOR_RED,"FISH-INFO: Memulai memancing tunggu beberapa saat . .");
 			SetPlayerAttachedObject(playerid, 0, 18632, 6, 0.00000, 0.00000, 0.00000, 0.00000, 180.00000, 90.00000, 1, 1, 1);
			PlayerInfo[playerid][pEnergi] -= 1;
			PlayerInfo[playerid][pHunger] -= 1;
			PlayerInfo[playerid][pCondition] -= 1;
			ApplyAnimation(playerid,"SWORD","sword_block",4.0,0,1,1,1,1);
	    	return 1;
      	}
		else
		{
		    SendClientMessageEx(playerid,COLOR_RED,"FISH-INFO: Kamu tidak menaiki kapal laut/Daerah nya.");
		    return 1;
		}
	}
	return 1;
}
CMD:buytruck(playerid, params[])
{
		new String[128];
		if(IsPlayerInRangeOfPoint(playerid,5, -76.8255,-1136.7314,1.0781))
		{
		    if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
		    {
	       		format(String, sizeof(String), "Name\tCosts\n");
	    		format(String, sizeof(String), "%sYankee\t$250.00\nBenson\t$250.00\nFlatbed\t$500.00\nLinerunner\t$2,000.00\nPetrol Tanker\t$2,000.00\nRoad Train\t$2,000.00", String);
		    	ShowPlayerDialog(playerid, 9000, DIALOG_STYLE_TABLIST_HEADERS, "Truck Dealership", String, "Buy", "Cancel");
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "You are not Trucker.");
		}
		return 1;
}
CMD:buybike(playerid, params[])
{
		new String[128];
		if(IsPlayerInRangeOfPoint(playerid,5,701.7152,-518.4803,16.3245))
		{
	    	format(String, sizeof(String), "Name\tCosts\n");
    		format(String, sizeof(String), "%sBike\t$100.00\nBMX\t$200.00\nMountain Bike\t$500.00", String);
	    	ShowPlayerDialog(playerid, 9002, DIALOG_STYLE_TABLIST_HEADERS, "Bike Dealership", String, "Buy", "Cancel");
		}
		return 1;
}
CMD:buystock(playerid,params[])
{
	if(!IsPlayerInRangeOfPoint(playerid,3,-76.8255,-1136.7314,1.0781))
	{
	    SendClientMessageEx(playerid, COLOR_WHITE,"Harus berada di toko product");
	    return 1;
	}
		new amount;
		if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /buystock [Jumlah]");
		new idx = PlayerInfo[playerid][pPBiskey];
		if(GetPlayerCash(playerid) < amount*12) { SendClientMessageEx(playerid, COLOR_GRAD2, "Uang Anda Kurang !"); return 1; }
		if(amount < 1) return SendClientMessage(playerid, COLOR_RED, "GAK BISA BUG WOI, MAU BANGAT KAYAKNYA!");
		BizzInfo[idx][bFuelStock] += (amount);
		GivePlayerCash(playerid, -(amount*12));
		return 1;
}

CMD:buyprods(playerid,params[])
{
	if(!IsPlayerInRangeOfPoint(playerid,3,-76.8255,-1136.7314,1.0781))
	{
	    SendClientMessageEx(playerid, COLOR_WHITE,"Harus berada di toko product");
	    return 1;
	}
		if(GetPlayerCash(playerid) < 100) { SendClientMessageEx(playerid, COLOR_GRAD2, "Uang Anda Kurang !"); return 1; }
		new String[10000], amount;
		if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /buyprods [Slot Biz] [Jumlah]");
		new id = PlayerInfo[playerid][pPBiskey];
		format( String, sizeof( String ), "Businesses/Business_%d.ini", id);
  		if(!dini_Exists( String) )
    	{
	    	SendClientMessage( playerid, COLOR_GREY, "Invalid business ID!" );
     		return 1;
	    }
    	BizzInfo[id][bProducts] += amount;
		GivePlayerCash(playerid, -amount*100);
		return 1;
}

CMD:ame(playerid, params[])
{
        new String[10000],msg[1024],pname[MAX_PLAYER_NAME];
        GetPlayerName(playerid,pname,sizeof(pname));
        if(sscanf(params,"s[1024]",msg)) return SendClientMessage(playerid,COLOR_WHITE, "USAGE: /ame <text>");
        SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 5.0, 5000);
        format(String,sizeof(String),"AME: {C2A2DA}%s",msg);
        SendClientMessageEx(playerid,COLOR_WHITE, String);
        return 1;
}

CMD:ado(playerid, params[])
{
    static
		String[225],
		msg[128],
		Float:x,
		Float:y,
		Float:z;

    GetPlayerPos(playerid, x, y, z);

	if (sscanf(params,"s[128]",msg))
		return SendClientMessage(playerid,COLOR_WHITE, "USAGE: /ado [text]");

	SendClientMessage(playerid,COLOR_GREY,"Type /delado to delete your ADO");

	FormatText(msg);
	if (PlayerInfo[playerid][pMaskUse] == 1)
	{
		format(String,sizeof(String),"%s\n(( Mask %d ))", msg, pMaskID);
	}
	else
	{
		format(String,sizeof(String),"%s\n((%s))", msg, GetPlayerNameEx(playerid));
	}
	if (IsPlayerInAnyVehicle(playerid))
	{
	    RemovePlayerADO(playerid);
		new carid = GetPlayerVehicleID(playerid);
		PlayerADO[playerid] = CreateDynamic3DTextLabel(String, COLOR_PURPLE, x, y, 200, 20, INVALID_PLAYER_ID, carid);
	}
	else {
	    RemovePlayerADO(playerid);
		PlayerADO[playerid] = CreateDynamic3DTextLabel(String, COLOR_PURPLE, x, y, z, 20);
	}
	SetPVarInt(playerid, "HaveADO", 1);
	return 1;
}

CMD:delado(playerid, params[]){
	if (GetPVarInt(playerid, "HaveADO") == 1) {
		RemovePlayerADO(playerid);
		SendClientMessage(playerid,COLOR_WHITE, "You have successfully deleted your ADO.");
	}
	else
		return SendClientMessage(playerid,COLOR_WHITE, "You doesn't have ADO to delete.");
	return 1;
}

CMD:destroyallpado(playerid, params[]){
	if (PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid,COLOR_GREY, "You are not authorized to do this command.");
	foreach(Player, i)
	{
		if(GetPVarInt(i, "HaveADO") == 1) RemovePlayerADO(i);
	}
	SendClientMessage(playerid,COLOR_WHITE, "You have successfully deleted all player's ADO.");
	return 1;
}
forward KickT(giveplayerid);
public KickT(giveplayerid)
{
	Kick(giveplayerid);
	return 1;
}

public DisplayActionMessage(playerid)
{
    Kick(playerid);
}

CMD:kick(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /kick [playerid] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
				format(String, sizeof(String), "AdmCmd: %s has been kicked by %s",PlayerInfo[giveplayerid][pNormalName], PlayerInfo[playerid][pAdminName]);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				format(String, sizeof(String), "Reason: %s", reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetTimerEx("KickT",100,0,"i",giveplayerid);
				return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:fine(playerid, params[])
    {
        new id, cash[32], string[1024], reason[1024];
        new dollars, cents, totalcash[25];
        new year, month,day;
		getdate(year, month, day);
        if(sscanf(params, "us[32]s[32]", id, cash, reason)) return SendClientMessage(playerid, COLOR_GREY, "/fine [playerid] [Jumlah(dollar.cents)] [reason]");
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			if(strfind(cash, ".", true) != -1)
			{
				sscanf(cash, "p<.>dd", dollars, cents);
				format(totalcash, sizeof(totalcash), "%d%02d", dollars, cents);
				if(IsPlayerConnected(id) && id != playerid)
				{
							if(strval(totalcash) < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
							GivePlayerCash(id, -strval(totalcash));
							format(string, sizeof(string), "AdmCmd: %s has fined %s for $%s", PlayerInfo[playerid][pAdminName],PlayerInfo[id][pNormalName], FormatMoney(strval(totalcash)));
							SendClientMessageToAllEx(COLOR_LIGHTRED, string);
							format(string, sizeof(string), "Reason: %s", reason);
							SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				}
			}
			else
			{
				sscanf(cash, "d", dollars);
				format(totalcash, sizeof(totalcash), "%d00", dollars);
				if(IsPlayerConnected(id) && id != playerid)
				{
							if(strval(totalcash) < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
							GivePlayerCash(id, -strval(totalcash));
							format(string, sizeof(string), "AdmCmd: %s has fined %s for $%s", PlayerInfo[playerid][pAdminName],PlayerInfo[id][pNormalName], FormatMoney(strval(totalcash)));
							SendClientMessageToAllEx(COLOR_LIGHTRED, string);
							format(string, sizeof(string), "Reason: %s", reason);
							SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				}
			}
		}
	    return 1;
}
CMD:warns(playerid, params[])
{
	new String[10000], playerb;
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
//    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /warns [playerid]");
	if(!IsPlayerConnected(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWarns]) return SendClientMessage(playerid, COLOR_GREY, "Player has no warnings.");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Player Warnings Information]:");
	if(PlayerInfo[playerb][pWarns] >= 1) {format(String, sizeof(String), "1) {FFFFFF}%s", PlayerInfo[playerb][pWarn1]); SendClientMessage(playerid, COLOR_ORANGE, String);}
	if(PlayerInfo[playerb][pWarns] >= 2) {format(String, sizeof(String), "2) {FFFFFF}%s", PlayerInfo[playerb][pWarn2]); SendClientMessage(playerid, COLOR_ORANGE, String);}
	if(PlayerInfo[playerb][pWarns] >= 3) {format(String, sizeof(String), "3) {FFFFFF}%s", PlayerInfo[playerb][pWarn3]); SendClientMessage(playerid, COLOR_ORANGE, String);}
	if(PlayerInfo[playerb][pWarns] >= 4) {format(String, sizeof(String), "4) {FFFFFF}%s", PlayerInfo[playerb][pWarn4]); SendClientMessage(playerid, COLOR_ORANGE, String);}
	if(PlayerInfo[playerb][pWarns] >= 5) {format(String, sizeof(String), "5) {FFFFFF}%s", PlayerInfo[playerb][pWarn5]); SendClientMessage(playerid, COLOR_ORANGE, String);}
	if(PlayerInfo[playerb][pWarns] >= 6) {format(String, sizeof(String), "6) {FFFFFF}%s", PlayerInfo[playerb][pWarn6]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 7) {format(String, sizeof(String), "7) {FFFFFF}%s", PlayerInfo[playerb][pWarn7]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 8) {format(String, sizeof(String), "8) {FFFFFF}%s", PlayerInfo[playerb][pWarn8]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 9) {format(String, sizeof(String), "9) {FFFFFF}%s", PlayerInfo[playerb][pWarn9]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 10) {format(String, sizeof(String), "10) {FFFFFF}%s", PlayerInfo[playerb][pWarn10]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 11) {format(String, sizeof(String), "11) {FFFFFF}%s", PlayerInfo[playerb][pWarn11]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 12) {format(String, sizeof(String), "12) {FFFFFF}%s", PlayerInfo[playerb][pWarn12]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 13) {format(String, sizeof(String), "13) {FFFFFF}%s", PlayerInfo[playerb][pWarn13]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 14) {format(String, sizeof(String), "14) {FFFFFF}%s", PlayerInfo[playerb][pWarn14]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 15) {format(String, sizeof(String), "15) {FFFFFF}%s", PlayerInfo[playerb][pWarn15]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 16) {format(String, sizeof(String), "16) {FFFFFF}%s", PlayerInfo[playerb][pWarn16]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 17) {format(String, sizeof(String), "17) {FFFFFF}%s", PlayerInfo[playerb][pWarn17]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 18) {format(String, sizeof(String), "18) {FFFFFF}%s", PlayerInfo[playerb][pWarn18]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 19) {format(String, sizeof(String), "19) {FFFFFF}%s", PlayerInfo[playerb][pWarn19]); SendClientMessage(playerid, COLOR_ORANGE, String);}
    if(PlayerInfo[playerb][pWarns] >= 20) {format(String, sizeof(String), "20) {FFFFFF}%s", PlayerInfo[playerb][pWarn20]); SendClientMessage(playerid, COLOR_ORANGE, String);}
	return 1;
}
CMD:unwarn(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
 	{
	  	new String[512], giveplayerid, amount;
		if(sscanf(params, "udd", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /unwarn [playerid] [amount]");
		if(IsPlayerConnected(giveplayerid) && PlayerInfo[giveplayerid][pWarns] >= 1)
		{
			PlayerInfo[giveplayerid][pWarns] -= amount;
			format(String, sizeof(String), "AdmCmd: %s has removed %d warning(s) from %s. Total warning: %d", PlayerInfo[playerid][pAdminName], amount, PlayerInfo[giveplayerid][pNormalName], PlayerInfo[giveplayerid][pWarns]);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:warn(playerid, params[])
{
	new String[10000], playerb;
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
//    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "us[64]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /warn [playerid] [reason]");
	PlayerInfo[playerb][pWarns] ++;
	if(PlayerInfo[playerb][pWarns] == 1) format(PlayerInfo[playerb][pWarn1], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 2) format(PlayerInfo[playerb][pWarn2], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 3) format(PlayerInfo[playerb][pWarn3], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 4) format(PlayerInfo[playerb][pWarn4], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 5) format(PlayerInfo[playerb][pWarn5], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 6) format(PlayerInfo[playerb][pWarn6], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 7) format(PlayerInfo[playerb][pWarn7], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 8) format(PlayerInfo[playerb][pWarn8], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 9) format(PlayerInfo[playerb][pWarn9], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 10) format(PlayerInfo[playerb][pWarn10], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 11) format(PlayerInfo[playerb][pWarn11], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 12) format(PlayerInfo[playerb][pWarn12], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 13) format(PlayerInfo[playerb][pWarn13], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 14) format(PlayerInfo[playerb][pWarn14], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 15) format(PlayerInfo[playerb][pWarn15], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 16) format(PlayerInfo[playerb][pWarn16], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 17) format(PlayerInfo[playerb][pWarn17], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 18) format(PlayerInfo[playerb][pWarn18], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 19) format(PlayerInfo[playerb][pWarn19], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 20) format(PlayerInfo[playerb][pWarn20], 64, "%s", params);
	format(String, sizeof(String), "AdmCmd: %s has been warned by %s, Total warning: %d",PlayerInfo[playerb][pNormalName], PlayerInfo[playerid][pAdminName], PlayerInfo[playerb][pWarns]);
    SendClientMessageToAllEx(COLOR_LIGHTRED, String);
	format(String, sizeof(String), "Reason: %s", params);
	SendClientMessageToAllEx(COLOR_LIGHTRED, String);
	Log("logs/warn.log", String);
	return 1;
}
CMD:oclearbiz(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 10)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000], name[MAX_PLAYER_NAME], reason[64];
	if(sscanf(params, "s[24]s[64]", name, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Gunakan: /oclearbiz [name] [reason]");

	new giveplayerid = ReturnUser(name);
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "That player is online, use /clearbiz for online players.");
		return 1;
	}

	if(doesAccountExist(name))
	{
		OnPlayerOfflineLogin(name);
		PlayerInfo[MAX_PLAYERS][pPBiskey] = 0;
		new year, month, day;
		getdate(year, month, day);
		format(String, sizeof(String), "{FF6347}AdmCmd: %s has been remote-clearbiz by %s",name, PlayerInfo[playerid][pAdminName]);
		SendClientMessageToAllEx(COLOR_LIGHTRED, String);
		format(String, sizeof(String), "Reason: %s", reason);
		SendClientMessageToAllEx(COLOR_LIGHTRED, String);
		OnPlayerOfflineSave(name);
		return 1;

	}
	return 1;
}
CMD:oclearws(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 10)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000], name[MAX_PLAYER_NAME], reason[64];
	if(sscanf(params, "s[24]s[64]", name, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Gunakan: /oclearws [name] [reason]");

	new giveplayerid = ReturnUser(name);
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "That player is online, use /clearws for online players.");
		return 1;
	}

	if(doesAccountExist(name))
	{
		OnPlayerOfflineLogin(name);
		PlayerInfo[MAX_PLAYERS][pWS] = 0;
  		PlayerInfo[MAX_PLAYERS][pWSJob] = 0;
    	PlayerInfo[MAX_PLAYERS][pWSid] = 0;
	    PlayerInfo[MAX_PLAYERS][pWSBos] = 0;
		new year, month, day;
		getdate(year, month, day);
		format(String, sizeof(String), "{FF6347}AdmCmd: %s has been remote-clearws by %s",name, PlayerInfo[playerid][pAdminName]);
		SendClientMessageToAllEx(COLOR_LIGHTRED, String);
		format(String, sizeof(String), "Reason: %s", reason);
		SendClientMessageToAllEx(COLOR_LIGHTRED, String);
		OnPlayerOfflineSave(name);
		return 1;

	}
	return 1;
}
CMD:oclearfarm(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 10)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000], name[MAX_PLAYER_NAME], reason[64];
	if(sscanf(params, "s[24]s[64]", name, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Gunakan: /oclearfarm [name] [reason]");

	new giveplayerid = ReturnUser(name);
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "That player is online, use /clearfarm for online players.");
		return 1;
	}

	if(doesAccountExist(name))
	{
		OnPlayerOfflineLogin(name);
		PlayerInfo[MAX_PLAYERS][pFarm] = 0;
  		PlayerInfo[MAX_PLAYERS][pFarmJob] = 0;
    	PlayerInfo[MAX_PLAYERS][pFarmid] = 0;
	    PlayerInfo[MAX_PLAYERS][pFarmBos] = 0;
		new year, month, day;
		getdate(year, month, day);
		format(String, sizeof(String), "{FF6347}AdmCmd: %s has been remote-clearfarm by %s",name, PlayerInfo[playerid][pAdminName]);
		SendClientMessageToAllEx(COLOR_LIGHTRED, String);
		format(String, sizeof(String), "Reason: %s", reason);
		SendClientMessageToAllEx(COLOR_LIGHTRED, String);
		OnPlayerOfflineSave(name);
		return 1;

	}
	return 1;
}
CMD:owarn(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000], name[MAX_PLAYER_NAME], reason[64];
	if(sscanf(params, "s[24]s[64]", name, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Gunakan: /owarn [name] [reason]");

	new giveplayerid = ReturnUser(name);
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "That player is online, use /warn for online players.");
		return 1;
	}

	if(doesAccountExist(name))
	{
		OnPlayerOfflineLogin(name);
		if( PlayerInfo[MAX_PLAYERS][pPermaBanned] == 3 )
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "That player is already permabanned!" );
			return 1;
		}
		if( PlayerInfo[MAX_PLAYERS][pBanned] > 0 )
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "That player is already banned!" );
			return 1;
		}
		if( PlayerInfo[MAX_PLAYERS][pAdmin] >= 2 )
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "You can not warn admin accounts!" );
			return 1;
		}
		PlayerInfo[MAX_PLAYERS][pWarns] += 1;
		new year, month, day;
		getdate(year, month, day);
		format(String, sizeof(String), "{FF6347}AdmCmd: %s has been remote-warned by %s, Total warning: %d",name, PlayerInfo[playerid][pAdminName], PlayerInfo[MAX_PLAYERS][pWarns]);
		SendClientMessageToAllEx(COLOR_LIGHTRED, String);
		format(String, sizeof(String), "Reason: %s", params);
		SendClientMessageToAllEx(COLOR_LIGHTRED, String);
		OnPlayerOfflineSave(name);
		return 1;

	}
	return 1;
}
CMD:rban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000], name[MAX_PLAYER_NAME], reason[64];
	if(sscanf(params, "s[24]s[64]", name, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Gunakan: /rban [name] [reason]");

	new giveplayerid = ReturnUser(name);
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "That player is online, use /ban for online players.");
		return 1;
	}

	if(doesAccountExist(name))
	{
		OnPlayerOfflineLogin(name);
		if( PlayerInfo[MAX_PLAYERS][pPermaBanned] == 3 )
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "That player is already permabanned!" );
			return 1;
		}
		if( PlayerInfo[MAX_PLAYERS][pBanned] > 0 )
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "That player is already banned!" );
			return 1;
		}
		PlayerInfo[MAX_PLAYERS][pBanned] = 1;
		new year, month, day;
		getdate(year, month, day);
		new hour,minuite,second;
		gettime(hour,minuite,second);
		hour = shifthour;
		strcpy(PlayerInfo[MAX_PLAYERS][pAdminban], PlayerInfo[playerid][pAdminName], MAX_PLAYER_NAME);
		format(PlayerInfo[MAX_PLAYERS][pBanReason], 128, "%s",reason);
		format(PlayerInfo[MAX_PLAYERS][pBanExpired],150, "%d:%d:%d",hour,minuite,second);
		format(PlayerInfo[MAX_PLAYERS][pBanExpired2],150, "%d-%d-%d",day,month,year);
		format(String, sizeof(String), "{FF6347}AdmCmd: %s has been remote-banned by %s",name, PlayerInfo[playerid][pAdminName]);
		SendClientMessageToAllEx(COLOR_LIGHTRED, String);
		format(String, sizeof(String), "Reason: %s", reason);
		SendClientMessageToAllEx(COLOR_LIGHTRED, String);
		OnPlayerOfflineSave(name);
		return 1;

	}
	return 1;
}
CMD:raban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new String[10000], name[MAX_PLAYER_NAME], reason[64];
	if(sscanf(params, "s[24]s[64]", name, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Gunakan: /raban [name] [reason]");

	new giveplayerid = ReturnUser(name);
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "That player is online, use /ban for online players.");
		return 1;
	}

	if(doesAccountExist(name))
	{
		OnPlayerOfflineLogin(name);
		if( PlayerInfo[MAX_PLAYERS][pPermaBanned] == 3 )
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "That player is already permabanned!" );
			return 1;
		}
		if( PlayerInfo[MAX_PLAYERS][pBanned] > 0 )
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "That player is already banned!" );
			return 1;
		}
		PlayerInfo[MAX_PLAYERS][pBanned] = 1;
		new year, month, day;
		getdate(year, month, day);
		new hour,minuite,second;
		gettime(hour,minuite,second);
		hour = shifthour;
		strcpy(PlayerInfo[MAX_PLAYERS][pAdminban], PlayerInfo[playerid][pAdminName], MAX_PLAYER_NAME);
		format(PlayerInfo[MAX_PLAYERS][pBanReason], 128, "%s",reason);
		format(PlayerInfo[MAX_PLAYERS][pBanExpired],150, "%d:%d:%d",hour,minuite,second);
		format(PlayerInfo[MAX_PLAYERS][pBanExpired2],150, "%d-%d-%d",day,month,year);
		format(String, sizeof(String), "{FF6347}AdmCmd: %s has been remote-account banned by %s",name, PlayerInfo[playerid][pAdminName]);
		SendClientMessageToAllEx(COLOR_LIGHTRED, String);
		format(String, sizeof(String), "Reason: %s", params);
		SendClientMessageToAllEx(COLOR_LIGHTRED, String);
		OnPlayerOfflineSave(name);
		return 1;

	}
	return 1;
}
CMD:aban(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new String[1024], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ban [playerid] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
				GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);
				new year, month,day;
				getdate(year, month, day);
				new hour,minuite,second;
				gettime(hour,minuite,second);
				hour = shifthour;
				PlayerInfo[giveplayerid][pBanned] = 1;
				strcpy(PlayerInfo[giveplayerid][pAdminban], PlayerInfo[playerid][pAdminName], MAX_PLAYER_NAME);
				format(PlayerInfo[giveplayerid][pBanReason], 128, "%s",reason);
				format(PlayerInfo[giveplayerid][pBanExpired],150, "%d:%d:%d",hour,minuite,second);
				format(PlayerInfo[giveplayerid][pBanExpired2],150, "%d-%d-%d",day,month,year);
				format(String, sizeof(String), "AdmCmd: %s has been account banned by %s", GetName(giveplayerid), PlayerInfo[playerid][pAdminName]);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				format(String, sizeof(String),"Reason: %s.", reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				format(String, sizeof(String), "Akun atau IP anda telah di banned!\n\n{FFFFFF}Account: {FF0000}%s\n{FFFFFF}IP: {FF0000}%s\n{FFFFFF}Di banned oleh: {FF0000}%s\n{FFFFFF}Alasan: {FF0000}%s \n{FFFFFF}Pada Waktu: {FF0000}%s | {FFFFFF}Tanggal: {FF0000}%s\n\n{FFFFFF}Sihlakan Post forum bagian unban request",PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pIP],PlayerInfo[playerid][pAdminban],PlayerInfo[playerid][pBanReason],PlayerInfo[playerid][pBanExpired],PlayerInfo[playerid][pBanExpired2]);
				ShowPlayerDialog(giveplayerid,BAN_DIALOG,DIALOG_STYLE_MSGBOX,"BANNED",String,"Ok :(","");
				FixedKick(giveplayerid);
				return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}
CMD:ban(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new String[1024], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ban [playerid] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
				GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);
				new year, month,day;
				getdate(year, month, day);
				new hour,minuite,second;
				gettime(hour,minuite,second);
				hour = shifthour;
				PlayerInfo[giveplayerid][pBanned] = 1;
				strcpy(PlayerInfo[giveplayerid][pAdminban], PlayerInfo[playerid][pAdminName], MAX_PLAYER_NAME);
				format(PlayerInfo[giveplayerid][pBanReason], 128, "%s",reason);
				format(PlayerInfo[giveplayerid][pBanExpired],150, "%d:%d:%d",hour,minuite,second);
				format(PlayerInfo[giveplayerid][pBanExpired2],150, "%d-%d-%d",day,month,year);
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				AddBan(ip);
				format(String, sizeof(String), "AdmCmd: %s has been banned by %s", GetName(giveplayerid), PlayerInfo[playerid][pAdminName]);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				format(String, sizeof(String),"Reason: %s.", reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				format(String, sizeof(String), "Akun atau IP anda telah di banned!\n\n{FFFFFF}Account: {FF0000}%s\n{FFFFFF}IP: {FF0000}%s\n{FFFFFF}Di banned oleh: {FF0000}%s\n{FFFFFF}Alasan: {FF0000}%s \n{FFFFFF}Pada Waktu: {FF0000}%s | {FFFFFF}Tanggal: {FF0000}%s\n\n{FFFFFF}Sihlakan Post forum bagian unban request",PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pIP],PlayerInfo[playerid][pAdminban],PlayerInfo[playerid][pBanReason],PlayerInfo[playerid][pBanExpired],PlayerInfo[playerid][pBanExpired2]);
				ShowPlayerDialog(giveplayerid,BAN_DIALOG,DIALOG_STYLE_MSGBOX,"BANNED",String,"Ok :(","");
				FixedKick(giveplayerid);
				return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}
CMD:banip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
			return 1;
		}

	new String[10000], str[1024], IP[32], reason[64], bannedby[MAX_PLAYER_NAME];
	GetPlayerName(playerid, bannedby, sizeof(bannedby));
	if(sscanf(params, "s[32]s[64]", IP, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /banip [IP] [reason]");
	if(IsValidIP(IP)) return SendClientMessageEx(playerid, COLOR_WHITE, "That is not a valid IP address!");
	if ( CheckBan(IP) == 0 )
	{
		new year, month,day;
		getdate(year, month, day);
		format(String, sizeof(String), "AdmCmd: %s has banned IP Address %s", PlayerInfo[playerid][pAdminName], IP);
		SendClientMessageToAllEx(COLOR_LIGHTRED, str);
		format(String, sizeof(String), "Reason: %s", reason);
		SendClientMessageToAllEx(COLOR_LIGHTRED, str);
		Log("logs/ban.log", String);
		AddBan(IP);
		return 1;
	}
	else {	SendClientMessageEx( playerid, COLOR_WHITE, "Already a banned IP!" );	}
	return 1;
}

CMD:freeze(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /freeze [playerid]");
		if(IsPlayerConnected(giveplayerid))
		{
			TogglePlayerControllable(giveplayerid, 0);
			SetPVarInt(giveplayerid, "IsFrozen", 1);
			format(String, sizeof(String), "%s was frozen by %s",GetName(giveplayerid), PlayerInfo[playerid][pAdminName]);
			ABroadCast(COLOR_LIGHTRED,String,1);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /unfreeze [playerid]");


		if(IsPlayerConnected(giveplayerid))
		{
			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);
			format(String, sizeof(String), "%s was unfrozen by %s.",GetName(giveplayerid),PlayerInfo[playerid][pAdminName]);
			ABroadCast(COLOR_LIGHTRED,String,2);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Invalid player specified.");
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
	}
	return 1;
}

CMD:leaders(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "Faction leaders online:");

		new	String[10000], sz_FacInfo[3][64];

		foreach(Player, i) if(PlayerInfo[i][pLeader] >= 1) {
			GetPlayerFactionInfo(i, sz_FacInfo[0], sz_FacInfo[1], sz_FacInfo[2]);
			format(String, sizeof(String), "(%s) %s %s", sz_FacInfo[2], sz_FacInfo[0], GetPlayerNameEx(i));
			SendClientMessageEx(playerid, COLOR_GRAD2, String);
		}
	}
	return 1;
}

CMD:buyplate(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 2, 240.4523,112.9773,1003.2188))
	{
	    new String [128];
        if(GetPlayerVehicleCount(playerid) != 0)
		{
			if(GetPlayerCash(playerid) < 2500) { SendClientMessageEx(playerid, COLOR_GRAD2, "Tidak memiliki uang sebesar $25,00!"); return 1; }
			for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	        {
				if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
				{
     				format(String, sizeof(String), "Vehicle %d| Name: %s.",i+1,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
		            SendClientMessageEx(playerid, COLOR_WHITE, String);
			 	}
		    }
	    	ShowPlayerDialog(playerid, 8220, DIALOG_STYLE_INPUT, "DMV","Pilih mobil yang akan diberi plat\nNote: Harga plate $25.00", "Select", "Cancel");
			return 1;
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Kamu tidak memiliki mobil satu pun!");
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "Kamu tidak berada di dalam DMV!");
	}
	return 1;
}
//ACTOR SYSTEM -ARIWIWIN14
//------------------------------------------------------------------------------------------------------
SSCANF:actormenu(string[])
{
	if(!strcmp(string,"create",true)) 			return 1;
	else if(!strcmp(string,"add",true)) 		return 1;
	else if(!strcmp(string,"destroy",true)) 	return 2;
	else if(!strcmp(string,"delete",true)) 		return 2;
	else if(!strcmp(string,"remove",true)) 		return 2;
	else if(!strcmp(string,"clear",true)) 		return 3;
	else if(!strcmp(string,"reset",true)) 		return 3;
    else if(!strcmp(string,"goto",true)) 		return 4;
    else if(!strcmp(string,"gethere",true)) 	return 5;
    else if(!strcmp(string,"text",true))        return 6;
    else if(!strcmp(string,"anim",true))        return 7;
    else if(!strcmp(string,"stopanim",true))    return 8;
	return 0;
}

//------------------------------------------------------------------------------

CMD:actor(playerid,params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 10)
	{
		new action,subparam[128],string[256];
		unformat(params,"k<actormenu>S()[128]",action,subparam);
		switch(action)
		{
		    case 1:
		    {
		        if(IsNull(subparam)) return SEM(playerid,"<SYNTAX> : /actor create [skin]");
				new model = strval(subparam);
				new slot = Iter_Free(DynamicActors);
				if(slot != -1)
				{
				    new Float:cPos[4];
				    GetPlayerPos(playerid,cPos[0],cPos[1],cPos[2]);
				    GetPlayerFacingAngle(playerid,cPos[3]);
					DynamicActor[slot] = CreateActor(model,cPos[0],cPos[1],cPos[2],cPos[3]);
					format(string,32,"{00B6FF}[Actor:%d]",slot);
					DynamicActorLabel[slot] = CreateDynamic3DTextLabel(string,0xFFFFFFFF,cPos[0],cPos[1],(cPos[2]+0.9),10.0);
					Streamer_Update(playerid);
					AC_BS_SetPlayerPos(playerid,cPos[0],cPos[1],(cPos[2]+2.0));
					Iter_Add(DynamicActors,slot);
					format(string,128,"ACTOR: {FFFFFF}Actor model [%d] with slot id [%d] created, total actors: %d",model,slot,Iter_Count(DynamicActors));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else SEM(playerid,"<ERROR> : No actor free slot!");
		    }
		    case 2:
		    {
	            if(IsNull(subparam)) return SEM(playerid,"<SYNTAX> : /actor destroy [slot]");
	            new slot = strval(subparam);
	            if(Iter_Contains(DynamicActors,slot))
	            {
	                DestroyActor(DynamicActor[slot]);
	                DestroyDynamic3DTextLabel(DynamicActorLabel[slot]);
	                Iter_Remove(DynamicActors,slot);
	                format(string,128,"ACTOR: {FFFFFF}Actor with slot id [%d] has been deleted, total actors: %d",slot,Iter_Count(DynamicActors));
					SendClientMessage(playerid, COLOR_ARWIN, string);
	            }
	            else SEM(playerid,"<ERROR> : Invalid actor slot id!");
		    }
		    case 3:
		    {
				if(IsNull(subparam)) return SEM(playerid,"<SYNTAX> : /actor clear [confirm]");
				if(!strcmp(subparam,"confirm",true))
				{
				    new count = Iter_Count(DynamicActors);
					if(count > 0)
					{
					    foreach(new i : DynamicActors)
					    {
					        DestroyActor(DynamicActor[i]);
					        DestroyDynamic3DTextLabel(DynamicActorLabel[i]);
					    }
					    Iter_Clear(DynamicActors);
					    format(string,128,"ACTOR: {FFFFFF}%d actors have been cleared",count);
						SendClientMessage(playerid, COLOR_ARWIN, string);
					}
					else SEM(playerid,"<ERROR> : There are no actors!");
				}
				else SEM(playerid,"<SYNTAX> : /actor clear [confirm]");
		    }
		    case 4:
		    {
		        if(IsNull(subparam)) return SEM(playerid,"<SYNTAX> : /actor goto [slot]");
		        new slot = strval(subparam);
				if(Iter_Contains(DynamicActors,slot))
				{
					new Float:cPos[3];
					GetActorPos(DynamicActor[slot],cPos[0],cPos[1],cPos[2]);
					Streamer_UpdateEx(playerid,cPos[0],cPos[1],cPos[2]);
					AC_BS_SetPlayerPos(playerid,cPos[0],cPos[1],(cPos[2]+1.5));
					format(string,128,"ACTOR: {FFFFFF}You've been teleported to actor id %d!",slot);
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else SEM(playerid,"<ERROR> : Invalid actor slot id!");
		    }
		    case 5:
		    {
		        if(IsNull(subparam)) return SEM(playerid,"<SYNTAX> : /actor gethere [slot]");
		        new slot = strval(subparam);
				if(Iter_Contains(DynamicActors,slot))
				{
					new Float:cPos[3];
					GetPlayerPos(playerid,cPos[0],cPos[1],cPos[2]);
					SetActorPos(DynamicActor[slot],cPos[0],cPos[1],cPos[2]);
	                Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL,DynamicActorLabel[slot],E_STREAMER_X,cPos[0]);
				    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL,DynamicActorLabel[slot],E_STREAMER_Y,cPos[1]);
				    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL,DynamicActorLabel[slot],E_STREAMER_Z,(cPos[2]+0.8));
					Streamer_Update(playerid);
					AC_BS_SetPlayerPos(playerid,cPos[0],cPos[1],(cPos[2]+1.5));
					format(string,128,"ACTOR: {FFFFFF}You've been teleported actor id %d to your location!",slot);
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else SEM(playerid,"<ERROR> : Invalid actor slot id!");
		    }
		    case 6:
		    {
				new slot,text[128];
				if(sscanf(subparam,"ds[128]",slot,text)) return SEM(playerid,"<SYNTAX> : /actor text [slot] [text]");
				if(Iter_Contains(DynamicActors,slot))
				{
				   format(string,128,"[Actor:%d]\n{FFFFFF}%s",slot,text);
				   UpdateDynamic3DTextLabelText(DynamicActorLabel[slot],0x00B6FFFF,string);
				   format(string,128,"ACTOR: {FFFFFF}Actor id [%d] has been changed text!",slot);
				   SendClientMessage(playerid, COLOR_ARWIN, string);
	               Streamer_Update(playerid);
	            }
				else SEM(playerid,"<ERROR> : Invalid actor slot id!");
			}
			case 7:
			{
				new slot,anim[32],animlib[32];
				if(sscanf(subparam,"ds[32]s[32]",slot,animlib,anim)) return SEM(playerid,"<SYNTAX> : /actor anim [slot] [animlib] [anim] || Note: Check animations list from Google!");
				if(Iter_Contains(DynamicActors,slot))
				{
	               ApplyActorAnimation(DynamicActor[slot], animlib, anim, 4.1, 0, 0, 0, 0, 9999999);
	               Streamer_Update(playerid);
	               format(string,128,"ACTOR: {FFFFFF}Actor id [%d] has been added anim!",slot);
	               SendClientMessage(playerid, COLOR_ARWIN, string);
	            }
	            else SEM(playerid,"<ERROR> : Invalid actor slot id!");
	        }
	        case 8:
	        {
				if(IsNull(subparam)) return SEM(playerid,"<SYNTAX> : /actor stopanim [slot]");
				new slot = strval(subparam);
				if(Iter_Contains(DynamicActors,slot))
				{
	               ClearActorAnimations(DynamicActor[slot]);
	               format(string,128,"ACTOR: {FFFFFF}Actor id [%d] has been stoped from animation!",slot);
	               SendClientMessage(playerid, COLOR_ARWIN, string);
	            }
				else SEM(playerid,"<ERROR> : Invalid actor slot id!");
			}
		    default:
		    {
		        SEM(playerid,"<SYNTAX> : /actor [action]");
		        SEM(playerid,"<ACTIONS> : create,destroy,clear,goto,gethere,text,anim,stopanim");
		    }
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
CMD:ah(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, 0x80FF80C8, "*** Volunteer *** /a /kick /ar /tr /lastdrive /vehowner");
	}
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		SendClientMessageEx(playerid, 0x80FF80C8, "*** Junior Helper *** /a /aod /fine /kick /agethere /goto /gotoid /jail /release");
		SendClientMessageEx(playerid, 0x80FF80C8, "*** Junior Helper *** /ban /banip /ipcheck /warn /unwarn /rban /rjail /spec");
	}
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		SendClientMessageEx(playerid, 0x80FF00C8,"*** Senior Helper *** /kick /freeze /unfreeze /cnn /hospital /requestevent");
		SendClientMessageEx(playerid, 0x80FF00C8,"*** Senior Helper *** /gotoplayerscar /jetpack /god /check /ipcheck /ip /hlmute /nrn /listguns /setvw /setint /vehname /watch /showflags");
	}
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessageEx(playerid, 0x00FF00C8,"*** Admin Level 1 *** /mole /setskin /countdown /release /force(death/hospital) /rto(reset) /jailaccount /(o)clearflag /mark /reloadpvehicles");
		SendClientMessageEx(playerid, 0x00FF00C8,"*** Admin Level 1 *** /gotoco /n(un)mute /ad(un)mute /leaders /dm /wepreset /ocheck /owarn /ofine /okills /respawncar(s) /arevive");
	}
	if (PlayerInfo[playerid][pAdmin] >= 5)
	{
		SendClientMessageEx(playerid, 0x008000C8,"*** Admin Level 2 *** /veh /fixveh /sethp /setarmor /setfightstyle /switchfac /switchfam /facpay");
		SendClientMessageEx(playerid, 0x008000C8,"*** Admin Level 2 *** /fcreate /fdelete /adivorce /destroycar /destroycars /eventhelp /contracts /sprison /sjail /listfacpay");
		SendClientMessageEx(playerid, 0x008000C8,"*** Admin Level 2 *** /facban /faccsfban /unban /unbanip /deletehit /clearall /setinsurance /cmotd /givelicense /adestroyplant");
		SendClientMessageEx(playerid, 0x008000C8,"*** Admin Level 2 *** /destroypvehicle /creategvehicle /vipparty /vto /vtoreset /forceskin /admingatepw /gotogate");
		SendClientMessageEx(playerid, 0x008000C8,"*** Admin Level 2 *** /hnext /dmpnext /g(status/near/next/edit) /(goto/goin)door /(goto/goin)house /(create/delete/goto)point");
		SendClientMessageEx(playerid, 0x008000C8,"*** Admin Level 2 *** /dd(next/name/pass) /dmpnear /gotomapicon /gangwarn /gangunban /twmenu /setcapping /banaccount /ddnear");
	}
	if (PlayerInfo[playerid][pAdmin] >= 6)
	{
		SendClientMessageEx(playerid, 0x004000C8,"*** Admin Level 3 *** /weather /weatherall /makeleader /tod /dedit /pedit /facunban /faccsfunban /giftall /hedit");
		SendClientMessageEx(playerid, 0x004000C8,"*** Admin Level 3 *** /permaban /clearallreports /eventreset /amotd /givetoken /gotodealership /unwarn");
	}
	if (PlayerInfo[playerid][pAdmin] >= 7)
	{
		SendClientMessageEx(playerid, 0xFF8000C8,"*** Admin Level 4 *** /suspend /osuspend /rmute /motd /specreset /pausespec /random /vrandom /gedit /deletehouse");
	}
	if (PlayerInfo[playerid][pAdmin] >= 8)
	{
		SendClientMessageEx(playerid, 0xFF0000C8,"*** Second Manager *** /createdealership /destroydealership /createcdveh /destroycdveh /fedit /vmute /vsuspend /ddedit");
	}
	if (PlayerInfo[playerid][pAdmin] >= 9)
	{
		SendClientMessageEx(playerid, 0xFF0000C8,"*** First Manager *** /spypm /edit /asellhouse /setharga /asellbiz /setchamp /setarmorall /fixvehall /givenos /blowup /setname");
	}
	if (PlayerInfo[playerid][pAdmin] >= 10)
	{
		SendClientMessageEx(playerid, 0xFF0000C8,"*** Vice Head Admin *** /respawn(lspd/LSMD/fbi) /noooc /nonewbie /prison /sendtols /prisonaccount");
		SendClientMessageEx(playerid, 0xFF0000C8,"*** Vice Head Admin *** /oclearbiz /oclearws /oclearfarm /gotocar /entercar /agetcar");
	}
	if (PlayerInfo[playerid][pAdmin] >= 11)
	{
	    SendClientMessageEx(playerid, 0xFF0000C8,"*** Head Admin *** /createdealership /destroydealership /createcdveh /destroycdveh /gvt /cpv /createws /setbiz");
		SendClientMessageEx(playerid, 0xFF0000C8,"*** Head Admin *** /spawnweapon /cpv /setstock (RCON Admin) /settaxmoney /dmpedit /setstat /givemoney /setmoney");
	}
	return 1;
}

CMD:taketest(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1490.1873, 1305.3954, 1092.8691)) return SendClientMessage(playerid, COLOR_ORANGE, "Anda tidak berada di DMV");
    if(PlayerInfo[playerid][pCarLic] == 1) return SendClientMessage(playerid, COLOR_GREY, "Anda sudah memiliki SIM.");
    if(LicenseTest[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Anda telah memulai test mengemudi.");
    if(GetPlayerCash(playerid) < 2500) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki cukup uang untuk test mengemudi. ($25.00)");
	GivePlayerCash(playerid, -2500);
	LicenseTest[playerid] = 1;
	CPD[playerid] = 1;
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Silahkan Memasuki Mobil di depan DMV untuk memulai tes mengemudi.");
	return 1;
}

CMD:renewlic(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1491.1862, 1307.7758, 1092.9943)) return SendClientMessage(playerid, COLOR_ORANGE, "  **Anda tidak berada di dalam DMV**  ");
	if(PlayerInfo[playerid][pCarLicID] != 1) return SendClientMessage(playerid, COLOR_GREY, "  **Anda belum pernah mendaftar Tes Mengemudi di DMV**  ");
	if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, COLOR_GREY, "  **Uang Anda Kurang Untuk Perpanjangan SIM ($50.00)**  ");
	GivePlayerCash(playerid, -5000);
	PlayerInfo[playerid][pCTime] = 604800;
	PlayerInfo[playerid][pCarLic] = 1;
	SendClientMessage(playerid, COLOR_ORANGE, "  **Anda Telah Memperpanjang Masa Aktif SIM Anda**  ");
	return 1;
}

CMD:revokedl(playerid, params[])
{
	if(((PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 1) && PlayerInfo[playerid][pRank] >= 3) || (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 2) || ((PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pMember] == 3) && PlayerInfo[playerid][pRank] >= 4) || PlayerInfo[playerid][pMember] == 7)
	{
		new String[10000], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /revokedl [playerid] [reason]");

		new copveh = GetPlayerVehicleID(playerid);
		if(((IsACopCar(copveh))
					|| (IsAnMPSCar(copveh)) || (IsAnSFPDCar(copveh)) || (IsAnSASDCar(copveh)) || (IsAnWPCar(copveh))
					|| (IsAnEPCar(copveh))) && IsPlayerInAnyVehicle(playerid))
		{
			if((IsPlayerConnected(giveplayerid)) && (giveplayerid != INVALID_PLAYER_ID))
			{
				if(PlayerInfo[giveplayerid][pCarLic] == 0)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player has no driver's license to revoke.");
					return 1;
				}
				switch(PlayerInfo[playerid][pMember])
				{
				case 1: // LSPD
					{
						format(String,sizeof(String),"The Los Santos Police Department has revoked your driver's license, reason: %s.",reason);
						SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE,String);
						switch(PlayerInfo[playerid][pRank])
						{
						case 3: format(String,sizeof(String),"HQ: LSPD Sergeant %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						case 4: format(String,sizeof(String),"HQ: LSPD Captain %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						case 5: format(String,sizeof(String),"HQ: LSPD Assistant Chief %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						case 6: format(String,sizeof(String),"HQ: Chief of Police %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						}
					}
				case 2: // FBI
					{
						format(String,sizeof(String),"The Federal Bureau of Investigation has revoked your driver's license, reason: %s.",reason);
						SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE,String);
						switch(PlayerInfo[playerid][pRank])
						{
						case 0: format(String,sizeof(String),"HQ: FBI Intern %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						case 1: format(String,sizeof(String),"HQ: FBI Staff %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						case 2: format(String,sizeof(String),"HQ: FBI Agent %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						case 3: format(String,sizeof(String),"HQ: FBI Agent %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						case 4: format(String,sizeof(String),"HQ: FBI Special Agent %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						case 5: format(String,sizeof(String),"HQ: FBI Assistant Director %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						case 6: format(String,sizeof(String),"HQ: FBI Director %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						}

					}
				case 3: // SFPD
					{
						format(String,sizeof(String),"San Andreas State Police has revoked your driver's license, reason: %s.",reason);
						SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE,String);
						switch(PlayerInfo[playerid][pRank])
						{
						case 4: format(String,sizeof(String),"HQ: SFPD Lieutenant %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						case 5: format(String,sizeof(String),"HQ: SFPD Major %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						case 6: format(String,sizeof(String),"HQ: SFPD Colonel %s has revoked %s's driver's license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
						}
					}
				}
				SendRadioMessage(1,TEAM_BLUE_COLOR,String);
				SendRadioMessage(2,TEAM_BLUE_COLOR,String);
				SendRadioMessage(3,TEAM_BLUE_COLOR,String);
				SendRadioMessage(4,TEAM_BLUE_COLOR,String);
				SendRadioMessage(7, TEAM_BLUE_COLOR, String);
				SendRadioMessage(11, TEAM_BLUE_COLOR, String);
				SendRadioMessage(12,TEAM_BLUE_COLOR,String);
				SendRadioMessage(13,TEAM_BLUE_COLOR,String);
				SendClientMessageEx(giveplayerid,COLOR_WHITE,"(( A new driver's license can be acquired at City Hall. If you deem this action as abuse, contact an admin. ))");
				format(String,sizeof(String),"You have revoked %s's driver's license.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid,COLOR_WHITE,String);
				new hour, minute, second, year, month, day;
				gettime(hour,minute,second);
				getdate(year,month,day);
				format(String, sizeof(String), "[%d/%d/%d][%d:%d:%d] %s took %s's driver's license. REASON: %s.",day,month,year,hour,minute,second,GetName(playerid),GetPlayerNameEx(giveplayerid),reason);
				Log("logs/licenses.log", String);
				PlayerInfo[giveplayerid][pCarLic] = 0;
				PlayerInfo[giveplayerid][pCTime] = 0;
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2,"You must be in a faction vehicle to do this.");
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorised to do this.");
	return 1;
}

CMD:revokeboatdl(playerid, params[])
{
	if( (PlayerInfo[playerid][pMember] == 4) || ( (PlayerInfo[playerid][pMember] == 3) && (PlayerInfo[playerid][pDivision] == 3) ))
	{
		new String[10000], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /revokeboatdl [playerid] [reason]");

		new carid = GetPlayerVehicleID(playerid);
		if(!IsAnAmbulance(carid))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2,"You must be in a faction vehicle to do this.");
			return 1;
		}
		if((IsPlayerConnected(giveplayerid)) && (giveplayerid != INVALID_PLAYER_ID))
		{
			if(PlayerInfo[giveplayerid][pBoatLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "This player has no boating license to revoke.");
				return 1;
			}
			format(String,sizeof(String),"The Coast Guard has revoked your boating license, reason: %s.",reason);
			SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE,String);
			format(String,sizeof(String),"HQ: Coast Guardsman %s has revoked %s's boating license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
			SendRadioMessage(1,TEAM_BLUE_COLOR,String);
			SendRadioMessage(2,TEAM_BLUE_COLOR,String);
			SendRadioMessage(3,TEAM_BLUE_COLOR,String);
			SendRadioMessage(4,TEAM_BLUE_COLOR,String);
			SendRadioMessage(7, TEAM_BLUE_COLOR, String);
			SendRadioMessage(11, TEAM_BLUE_COLOR, String);
			SendRadioMessage(12,TEAM_BLUE_COLOR,String);
			SendRadioMessage(13,TEAM_BLUE_COLOR,String);
			SendClientMessageEx(giveplayerid,COLOR_WHITE,"(( A new boating license can be acquired at City Hall. If you deem this action as abuse, contact an admin. ))");
			format(String,sizeof(String),"You have revoked %s's boating license.",GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid,COLOR_WHITE,String);
			new hour, minute, second, year, month, day;
			gettime(hour,minute,second);
			getdate(year,month,day);
			format(String, sizeof(String), "[%d/%d/%d][%d:%d:%d] %s took %s's boating license. REASON: %s.",day,month,year,hour,minute,second,GetName(playerid),GetPlayerNameEx(giveplayerid),reason);
			Log("logs/licenses.log", String);
			PlayerInfo[giveplayerid][pBoatLic] = 0;
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		return 1;
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to do this.");
	return 1;
}

CMD:revokeairdl(playerid, params[])
{
	if((PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 2) && PlayerInfo[playerid][pRank] >= 3)
	{
		new String[10000], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "No player specified. USAGE: /revokeairdl [playerid] [reason]");
		if((IsPlayerConnected(giveplayerid)) && (giveplayerid != INVALID_PLAYER_ID))
		{
			if(PlayerInfo[giveplayerid][pFlyLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "This player has no pilot license to revoke.");
				return 1;
			}
			format(String,sizeof(String),"The Federal Bureau of Investigation has revoked your pilot license, reason: %s.",reason);
			SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE,String);
			switch(PlayerInfo[playerid][pRank])
			{
			case 3: format(String,sizeof(String),"HQ: FBI Agent %s has revoked %s's pilot license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
			case 4: format(String,sizeof(String),"HQ: FBI Special Agent %s has revoked %s's pilot license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
			case 5: format(String,sizeof(String),"HQ: FBI Assistant Director %s has revoked %s's pilot license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
			case 6: format(String,sizeof(String),"HQ: FBI Director %s has revoked %s's pilot license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
			}
			SendRadioMessage(1,TEAM_BLUE_COLOR,String);
			SendRadioMessage(2,TEAM_BLUE_COLOR,String);
			SendRadioMessage(3,TEAM_BLUE_COLOR,String);
			SendRadioMessage(4,TEAM_BLUE_COLOR,String);
			SendRadioMessage(7, TEAM_BLUE_COLOR, String);
			SendRadioMessage(11, TEAM_BLUE_COLOR, String);
			SendRadioMessage(12,TEAM_BLUE_COLOR,String);
			SendRadioMessage(13,TEAM_BLUE_COLOR,String);
			SendClientMessageEx(giveplayerid,COLOR_WHITE,"(( A new pilot license can be acquired at City Hall. If you deem this action as abuse, contact an admin. ))");
			format(String,sizeof(String),"You have revoked %s's pilot license.",GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid,COLOR_WHITE,String);
			new hour, minute, second, year, month, day;
			gettime(hour,minute,second);
			getdate(year,month,day);
			format(String, sizeof(String), "[%d/%d/%d][%d:%d:%d] %s took %s's pilot license. REASON: %s.",day,month,year,hour,minute,second,GetName(playerid),GetPlayerNameEx(giveplayerid),reason);
			Log("logs/licenses.log", String);
			PlayerInfo[giveplayerid][pFlyLic] = 0;
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		return 1;
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to do this.");
	return 1;
}

CMD:givelicense(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin]>=7)
	{
		new String[10000], giveplayerid, type;
		if(sscanf(params, "ud", giveplayerid, type))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /givelicense [playerid] [type]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying, 4 = KTP");
			return 1;
		}

		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
			return 1;
		}
		new year, month, day, hour, minute, second;

		switch(type)
		{
		case 1:
			{
				if(PlayerInfo[giveplayerid][pCarLic] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player already has a driver's license.");
					return 1;
				}
				format(String, sizeof(String), "You have given a driver's license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, String);
				format(String, sizeof(String), "Administrator %s has given you a driver's license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
				gettime(hour,minute,second);
				getdate(year,month,day);
				format(String, sizeof(String), "[%d/%d/%d][%d:%d:%d] Administrator %s has given a driver's license to %s.",day,month,year,hour,minute,second,GetName(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", String);
				PlayerInfo[giveplayerid][pCarLic] = 1;
				PlayerInfo[giveplayerid][pCTime] = 604800;
				return 1;
			}
		case 2:
			{
				if(PlayerInfo[giveplayerid][pBoatLic] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player already has a boating license.");
					return 1;
				}
				format(String, sizeof(String), "You have given a boating license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, String);
				format(String, sizeof(String), "Administrator %s has given you a boating license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
				gettime(hour,minute,second);
				getdate(year,month,day);
				format(String, sizeof(String), "[%d/%d/%d][%d:%d:%d] Administrator %s has given a boating license to %s.",day,month,year,hour,minute,second,GetName(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", String);
				PlayerInfo[giveplayerid][pBoatLic] = 1;
				return 1;
			}
		case 3:
			{
				if(PlayerInfo[giveplayerid][pFlyLic] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player already has a pilot license.");
					return 1;
				}
				format(String, sizeof(String), "You have given a pilot license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, String);
				format(String, sizeof(String), "Administrator %s has given you a pilot license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
				gettime(hour,minute,second);
				getdate(year,month,day);
				format(String, sizeof(String), "[%d/%d/%d][%d:%d:%d] Administrator %s has given a pilot license to %s.",day,month,year,hour,minute,second,GetName(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", String);
				PlayerInfo[giveplayerid][pFlyLic] = 1;
				return 1;
			}
		case 4:
			{
				if(PlayerInfo[giveplayerid][pKTP] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player already has a KTP.");
					return 1;
				}
				format(String, sizeof(String), "You have given a KTP to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, String);
				format(String, sizeof(String), "Administrator %s has given you a KTP.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
				gettime(hour,minute,second);
				getdate(year,month,day);
				format(String, sizeof(String), "[%d/%d/%d][%d:%d:%d] Administrator %s has given a KTP to %s.",day,month,year,hour,minute,second,GetName(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", String);
				PlayerInfo[giveplayerid][pKTP] = 1;
				PlayerInfo[giveplayerid][pKTime] = 1209600;
				PlayerInfo[giveplayerid][pLumberLic] = 1;
				return 1;
			}
		default:
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Invalid license type! /givelicense [playerid] [type]");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying, 4 = KTP.");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You're not authorised to use this command.");
	return 1;
}

CMD:droplicense(playerid, params[])
{
	new String[10000], type;
	if(sscanf(params, "d", type))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /droplicense [type]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying, 4 = Taxi.");
	}

	switch(type)
	{
	case 1:
		{
			if(PlayerInfo[playerid][pCarLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a driver's license to drop.");
				return 1;
			}
			format(String, sizeof(String), "You have dropped your driver's license.");
			SendClientMessageEx(playerid, COLOR_WHITE, String);
			PlayerInfo[playerid][pCarLic] = 0;
			PlayerInfo[playerid][pCTime] = 0;
			return 1;
		}
	case 2:
		{
			if(PlayerInfo[playerid][pBoatLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a boating license to drop.");
				return 1;
			}
			format(String, sizeof(String), "You have dropped your boating license.");
			SendClientMessageEx(playerid, COLOR_WHITE, String);
			PlayerInfo[playerid][pBoatLic] = 0;
			return 1;
		}
	case 3:
		{
			if(PlayerInfo[playerid][pFlyLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a pilot license to drop.");
				return 1;
			}
			format(String, sizeof(String), "You have dropped your pilot license.");
			SendClientMessageEx(playerid, COLOR_WHITE, String);
			PlayerInfo[playerid][pFlyLic] = 0;
			return 1;
		}
	default:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Invalid license type! /droplicense [type]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying.");
		}
	}
	return 1;
}
CMD:families(playerid, params[])
{
	new String[10000], familyid;

	if(sscanf(params, "d", familyid))
	{
		new number = 0;
		for(new i = 0; i < sizeof(FamilyInfo); i++)
		{
			number ++;
			format(String, sizeof(String), "Family %d | Name: %s | Leader: %s",number,FamilyInfo[i][FamilyName],FamilyInfo[i][FamilyLeader]);
			SendClientMessageEx(playerid, COLOR_TWAQUA, String);
	   	}
		return 1;
	}

	if(familyid < 1 || familyid > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_GREY, "Family slot must be between 1 and 14."); return 1; }
	familyid -= 1;
	if(FamilyInfo[familyid][FamilyTaken] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "That family slot is empty.");
		return 1;
	}
 	if(PlayerInfo[playerid][pFMember] != familyid)
 	{
 	    SendClientMessageEx(playerid,COLOR_WHITE,"Kamu hanya bisa memeriksa family kau saja.");
 	    return 1;
	}
	foreach(Player, i)
	{
		if(PlayerInfo[i][pFMember] == familyid && (PlayerInfo[i][pTogReports] == 1))
		{
			if(PlayerInfo[i][pRank] == 1)
			{
				format(String, sizeof(String), "* %s: %s | Rank: %s (1).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank1]);
			}
			else if(PlayerInfo[i][pRank] == 2)
			{
				format(String, sizeof(String), "* %s: %s | Rank: %s (2).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank2]);
			}
			else if(PlayerInfo[i][pRank] == 3)
			{
				format(String, sizeof(String), "* %s: %s | Rank: %s (3).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank3]);
			}
			else if(PlayerInfo[i][pRank] == 4)
			{
				format(String, sizeof(String), "* %s: %s | Rank: %s (4).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank4]);
			}
			else if(PlayerInfo[i][pRank] == 5)
			{
				format(String, sizeof(String), "* %s: %s | Rank: %s (5).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank5]);
			}
			else if(PlayerInfo[i][pRank] == 6)
			{
				format(String, sizeof(String), "* %s: %s | Rank: %s (6).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank6]);
			}
			else
			{
				format(String, sizeof(String), "* %s: %s | Rank: %s.",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank1]);
			}
			SendClientMessageEx(playerid, COLOR_GREY, String);
		}
	}
	return 1;
}

CMD:fbalance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}

	new family, String[10000];
	if(PlayerInfo[playerid][pFMember] < 255)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}

	format(String, sizeof(String), "Your family has %s in their account.", FormatMoney(FamilyInfo[family][FamilyBank]));
	SendClientMessageEx(playerid, COLOR_YELLOW, String);
	return 1;
}

CMD:fdeposit(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pFMember] < 255)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}

	new String[10000], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /fdeposit [amount]");
		format(String, sizeof(String), "Your family has %s in their account.", FormatMoney(FamilyInfo[family][FamilyBank]));
		SendClientMessageEx(playerid, COLOR_GRAD3, String);
		return 1;
	}

	if (amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have that much.");
		return 1;
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = FamilyInfo[family][FamilyBank];
	FamilyInfo[family][FamilyBank]=amount+FamilyInfo[family][FamilyBank];
	SendClientMessageEx(playerid, COLOR_WHITE, "|___ FAMILY BANK STATEMENT ___|");
	format(String, sizeof(String), "  Old balance: %s", FormatMoney(curfunds));
	SendClientMessageEx(playerid, COLOR_GRAD2, String);
	format(String, sizeof(String), "  Deposit: %s",FormatMoney(amount));
	SendClientMessageEx(playerid, COLOR_GRAD4, String);
	SendClientMessageEx(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(String, sizeof(String), "  New balance: %s", FormatMoney(FamilyInfo[family][FamilyBank]));
	SendClientMessageEx(playerid, COLOR_WHITE, String);
	new ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(String,sizeof(String),"%s (IP: %s) has deposited %s into family %d's bank account.",GetName(playerid),ip,FormatMoney(amount),PlayerInfo[playerid][pFMember]+1);
	Log("logs/family.log", String);
	return 1;
}

CMD:fwithdraw(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
	new family;
	if(PlayerInfo[playerid][pFMember] < 255)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Only ranks five and six may use the family bank.");
		return 1;
	}

	new String[10000], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /fwithdraw [amount]");
		format(String, sizeof(String), "Your family has %s in their account.", FormatMoney(FamilyInfo[family][FamilyBank]));
		SendClientMessageEx(playerid, COLOR_GRAD3, String);
		return 1;
	}

	if (amount > FamilyInfo[family][FamilyBank] || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Your family doesn't have that much.");
		return 1;
	}

	GivePlayerCash(playerid,amount);
	FamilyInfo[family][FamilyBank]=FamilyInfo[family][FamilyBank]-amount;
	format(String, sizeof(String), "  You have withdrawn %s from your family account. Total: %s", FormatMoney(amount),FormatMoney(FamilyInfo[family][FamilyBank]));
	SendClientMessageEx(playerid, COLOR_YELLOW, String);
	new ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(String,sizeof(String),"%s (IP: %s) has withdrawn %s from family %d's bank account.",GetName(playerid),ip,FormatMoney(amount),PlayerInfo[playerid][pFMember]+1);
	Log("logs/family.log", String);
	return 1;
}

CMD:fstoregun(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		return 1;
	}
	if(GetPVarInt( playerid, "EventToken") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	if(PlayerInfo[playerid][pDonateRank] > 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give away weapons if you're Gold+ VIP!");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You can not store weapons from a vehicle!");
		return 1;
	}
	new Float:health;
	GetPlayerHealth(playerid, health);
	if (health < 80)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not store weapons if your health is below 80!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0||GetPlayerState(playerid) == 7)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
		return 1;
	}
	if(PlayerInfo[playerid][pMember] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not store weapons in a family safe when in a faction!");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pFMember] < 255)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at your family safe.");
		return 1;
	}

	new String[10000], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /fstoregun [weapon] [slot]");


	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(String, sizeof(String), "   You must wait %d seconds before depositing another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,String);
		return 1;
	}

	if(slot < 1 || slot > 10)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
		return 1;
	}

	if( FamilyInfo[family][FamilyGuns][slot-1] != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Your family has a weapon stored in that slot already.");
		return 1;
	}

	new weapon, ammo;
	if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a silenced pistol into your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			ammo = PlayerInfo[playerid][pGunsAmmo][2];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a Desert Eagle in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			ammo = PlayerInfo[playerid][pGunsAmmo][2];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a shotgun in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][3];
			ammo = PlayerInfo[playerid][pGunsAmmo][3];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a combat shotgun in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][3];
			ammo = PlayerInfo[playerid][pGunsAmmo][3];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an MP5 in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][4];
			ammo = PlayerInfo[playerid][pGunsAmmo][4];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an AK-47 in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][5];
			ammo = PlayerInfo[playerid][pGunsAmmo][5];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an M4 in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][5];
			ammo = PlayerInfo[playerid][pGunsAmmo][5];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a rifle in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][6];
			ammo = PlayerInfo[playerid][pGunsAmmo][6];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a sniper rifle in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][6];
			ammo = PlayerInfo[playerid][pGunsAmmo][6];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else { SendClientMessageEx(playerid,COLOR_GREY,"   Invalid weapon name!"); return 1; }
	if(weapon == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that weapon.");
	if(FamilyInfo[family][FamilyGuns][slot-1] == 0)
	{
		FamilyInfo[family][FamilyGuns][slot-1] = weapon;
		FamilyInfo[family][FamilyGunsAmmo][slot-1] = ammo;
		removePlayerWeapon(playerid, weapon);
		SaveFamilies();
		return 1;
	}
	return 1;
}

CMD:fgetgun(playerid, params[])
{
	new String[10000], slot;
	if(PlayerInfo[playerid][pConnectTime] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

	new family;
	if(PlayerInfo[playerid][pFMember] < 255)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at your family safe.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can not get weapons from a vehicle!");
		return 1;
	}

	if(sscanf(params, "d", slot))
	{
		new weaponname[50];
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		format(String, sizeof(String), "*** %s Safe ***", FamilyInfo[family][FamilyName]);
		SendClientMessageEx(playerid, COLOR_WHITE, String);
		for(new s = 0; s < 10; s++)
		{
			if( FamilyInfo[family][FamilyGuns][s] != 0 )
			{
				GetWeaponName(FamilyInfo[family][FamilyGuns][s], weaponname, sizeof(weaponname));
				format(String, sizeof(String), "Slot %d: %s", s+1, weaponname);
				SendClientMessageEx(playerid, COLOR_WHITE, String);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /fgetgun [slot]");
		return 1;
	}

	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(String, sizeof(String), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,String);
		return 1;
	}

	if(slot < 1 || slot > 10)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
		return 1;
	}

	if(PlayerInfo[playerid][pRank] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Only rank 4+ can withdraw guns from the family safe.");
		return 1;
	}
	if(FamilyInfo[family][FamilyGuns][slot-1] != 0)
	{
		new weaponname[50];
		GetWeaponName(FamilyInfo[family][FamilyGuns][slot-1], weaponname, sizeof(weaponname));
		givePlayerValidWeapon(playerid, FamilyInfo[family][FamilyGuns][slot-1], FamilyInfo[family][FamilyGunsAmmo][slot-1]);
		FamilyInfo[family][FamilyGuns][slot-1] = 0;
		FamilyInfo[family][FamilyGunsAmmo][slot-1] = 0;
		if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a silenced pistol from your family's gun locker.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a Desert Eagle from your family's gun locker.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a shotgun from your family's gun locker.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a combat shotgun from your family's gun locker.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an MP5 from your family's gun locker.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an AK-47 from your family's gun locker.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an M4 from your family's gun locker.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a rifle from your family's gun locker.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a sniper rifle from your family's gun locker.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		SaveFamilies();
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
		return 1;
	}
}

CMD:safedeposit(playerid, params[])
{
	new String[10000], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /safedeposit [name] [amount]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available names: Cash, Materials, Pot, Crack.");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pFMember] < 255)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}
	if(FamilyInfo[family][FamilyUSafe] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Your family has not upgraded their safe.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at your family safe.");
		return 1;
	}
	if(strcmp(choice,"Cash",true) == 0)
	{
		if (amount > GetPlayerCash(playerid) || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have that much.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyCash] += amount;
		GivePlayerCash(playerid, -amount);
		format(String, sizeof(String), "You have successfully deposited %s into your family safe", FormatMoney(amount));
		SendClientMessageEx(playerid, COLOR_YELLOW, String);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(String,sizeof(String),"%s (IP: %s) has deposited %s into family safe %d.",GetName(playerid),ip,FormatMoney(amount),PlayerInfo[playerid][pFMember]);
		Log("logs/pay.log", String);
	}
	else if(strcmp(choice,"Materials",true) == 0)
	{
		if (amount > PlayerInfo[playerid][pMats] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have that much.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyMats] += amount;
		PlayerInfo[playerid][pMats] -= amount;
		format(String, sizeof(String), "You have successfully deposited %d materials into your family safe", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, String);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(String,sizeof(String),"%s (IP: %s) has deposited %d materials into family safe %d.",GetName(playerid),ip,amount,PlayerInfo[playerid][pFMember]);
		Log("logs/pay.log", String);
	}
	else if(strcmp(choice,"pot",true) == 0)
	{
		if (amount > PlayerInfo[playerid][pPot] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have that much.");
			return 1;
		}
		if(amount < 1 || amount > 50)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't deposit more than 50 grams at a time!");
			return 1;
		}
		if(FamilyInfo[family][FamilyPot] >= 500)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Your family safe is already full of pot!");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyPot] += amount;
		PlayerInfo[playerid][pPot] -= amount;
		format(String, sizeof(String), "You have successfully deposited %d grams of pot into your family safe", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, String);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(String,sizeof(String),"%s (IP: %s) has deposited %d grams of pot into family safe %d.",GetName(playerid),ip,amount,PlayerInfo[playerid][pFMember]);
		Log("logs/pay.log", String);
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if (amount > PlayerInfo[playerid][pCrack] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have that much.");
			return 1;
		}
		if(amount < 1 || amount > 25)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't deposit more than 25 grams at a time!");
			return 1;
		}
		if(FamilyInfo[family][FamilyCrack] >= 250)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Your family safe is already full of crack!");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyCrack] += amount;
		PlayerInfo[playerid][pCrack] -= amount;
		format(String, sizeof(String), "You have successfully deposited %d grams of crack into your family safe", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, String);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(String,sizeof(String),"%s (IP: %s) has deposited %d grams of crack into family safe %d.",GetName(playerid),ip,amount,PlayerInfo[playerid][pFMember]);
		Log("logs/pay.log", String);
	}
	return 1;
}

CMD:safewithdraw(playerid, params[])
{
	new String[10000], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /safewithdraw [name] [amount]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available names: Cash, Materials, Pot, Crack.");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pFMember] < 255)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}
	if(FamilyInfo[family][FamilyUSafe] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Your family hasn't upgraded their safe.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at your family safe.");
		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Only ranks 5 and 6 can withdraw items from the family safe.");
		return 1;
	}
	if(strcmp(choice,"Cash",true) == 0)
	{
		if (amount > FamilyInfo[family][FamilyCash] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Your family doesn't have that much.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyCash] -= amount;
		GivePlayerCash(playerid, amount);
		format(String, sizeof(String), "You have successfully withdrawn %s from your family safe.", FormatMoney(amount));
		SendClientMessageEx(playerid, COLOR_YELLOW, String);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(String,sizeof(String),"%s (IP: %s) has withdrawn %s from family safe %d.",GetName(playerid),ip,FormatMoney(amount),PlayerInfo[playerid][pFMember]+1);
		Log("logs/family.log", String);
	}
	else if(strcmp(choice,"Materials",true) == 0)
	{
		if (amount > FamilyInfo[family][FamilyMats] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Your family doesn't have that much.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyMats] -= amount;
		PlayerInfo[playerid][pMats] += amount;
		format(String, sizeof(String), "You have successfully withdrawn %d materials from your family safe.", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, String);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(String,sizeof(String),"%s (IP: %s) has withdrawn %d materials from family safe %d.",GetName(playerid), ip,amount,PlayerInfo[playerid][pFMember]+1);
		Log("logs/family.log", String);
	}
	else if(strcmp(choice,"pot",true) == 0)
	{
		if (amount > FamilyInfo[family][FamilyPot] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Your family doesn't have that much.");
			return 1;
		}
		if(PlayerInfo[playerid][pPot] > 50)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You already have 50 grams of pot.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyPot] -= amount;
		PlayerInfo[playerid][pPot] += amount;
		format(String, sizeof(String), "You have successfully withdrawn %d grams of pot from your family safe.", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, String);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(String,sizeof(String),"%s (IP: %s) has withdrawn %d grams of pot from family safe %d.",GetName(playerid),ip,amount,PlayerInfo[playerid][pFMember]+1);
		Log("logs/family.log", String);
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if (amount > FamilyInfo[family][FamilyCrack] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Your family doesn't have that much.");
			return 1;
		}
		if(PlayerInfo[playerid][pCrack] > 25)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You already have 25 grams of crack.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyCrack] -= amount;
		PlayerInfo[playerid][pCrack] += amount;
		format(String, sizeof(String), "You have successfully withdrawn %d grams of crack from your family safe.", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, String);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(String,sizeof(String),"%s (IP: %s) has withdrawn %d grams of crack from family safe %d.",GetName(playerid),ip,amount,PlayerInfo[playerid][pFMember]+1);
		Log("logs/family.log", String);
	}
	return 1;
}

CMD:adjust(playerid, params[])
{
	if(PlayerInfo[playerid][pFMember] == 255)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't in a family.");
		return 1;
	}
	new family = PlayerInfo[playerid][pFMember];
	new String[10000];
	if(PlayerInfo[playerid][pRank] == 6)
	{
		new choice[32], opString[100];
		if(sscanf(params, "s[32]S[100]", choice, opString))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /adjust [name]");
			SendClientMessageEx(playerid, COLOR_WHITE, "Available Names: Name, MOTD, Safe, Invite, Uninvite");
			return 1;
		}

		if(strcmp(choice,"name",true) == 0)
		{
			if(PlayerInfo[playerid][pRank] == 6)
			{
				if(!opString[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /adjust name [family name]");
					return 1;
				}
				if(strfind(opString, "|", true) != -1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2,  "You can't use '|' in a family name.");
					return 1;
				}
				if(strlen(opString) >= 40 )
				{
					SendClientMessageEx( playerid, COLOR_GRAD1, "That family name is too long, please refrain from using more than 40 characters." );
					return 1;
				}
				strmid(FamilyInfo[family][FamilyName], opString, 0, strlen(opString), 100);
				SaveFamilies();
				SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted your family's name.");
				format(String, sizeof(String), "%s adjusted family %d's name to %s", GetName(playerid), family+1, opString);
				Log("logs/family.log", String);
			}
		}
		else if(strcmp(choice,"motd",true) == 0)
		{
			if(!opString[0])
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /adjust MOTD [family MOTD text]");
				return 1;
			}
			if(strfind(opString, "|", true) != -1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2,  "You can't use '|' in a family name.");
				return 1;
			}
			if(strlen(opString) >= 60 )
			{
				SendClientMessageEx( playerid, COLOR_GRAD1, "That MOTD is too long, please refrain from using more than 60 characters." );
				return 1;
			}
			strmid(FamilyInfo[family][FamilyMOTD], opString, 0, strlen(opString), 100);
			SaveFamilies();
			SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted your family's MOTD.");
			format(String, sizeof(String), "%s adjusted family %d's MOTD to %s", GetName(playerid), family+1, opString);
			Log("logs/family.log", String);
		}
		else if(strcmp(choice,"safe",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Adjusting your Family Safe will reset all your safe stats.");
			SendClientMessageEx(playerid, COLOR_GRAD1, "If you want to adjust your safe, type /adjust confirm.");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Upgrading your family safe will cost $50,000.");
			return 1;
		}
		else if(strcmp(choice,"confirm",true) == 0)
		{
			if(GetPlayerCash(playerid) < 50000)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have $50,000 to upgrade your family safe.");
				return 1;
			}
			GivePlayerCash(playerid, -50000);
			GetPlayerPos(playerid, FamilyInfo[family][FamilySafe][0],FamilyInfo[family][FamilySafe][1],FamilyInfo[family][FamilySafe][2]);
			FamilyInfo[family][FamilyCash] = 0;
			FamilyInfo[family][FamilyMats] = 0;
			FamilyInfo[family][FamilyPot] = 0;
			FamilyInfo[family][FamilyCrack] = 0;
			if(FamilyInfo[family][FamilyUSafe]) DestroyDynamicPickup(FamilyInfo[family][FamilyPickup]);
			FamilyInfo[family][FamilyUSafe] = 1;
			FamilyInfo[family][FamilyPickup] = CreateDynamicPickup(1239, 23, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]);
			SaveFamilies();
			SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted your family's Safe.");
			format(String, sizeof(String), "%s adjusted family %d's safe", GetName(playerid), family+1);
			Log("logs/family.log", String);
		}
		else if(strcmp(choice,"invite",true) == 0)
		{
			if(!strlen(opString))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /adjust invite [playerid]");
				return 1;
			}
			new giveplayerid = ReturnUser(opString);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if (PlayerInfo[giveplayerid][pFMember] == 255)
					{
						if(PlayerInfo[giveplayerid][pLeader] == 0 && PlayerInfo[giveplayerid][pMember] == 0)
						{
							if(PlayerInfo[giveplayerid][pGangWarn] >= 3)
							{
								SendClientMessageEx(playerid, COLOR_WHITE, "That player can not be invited. They are banned from being in a gang.");
								return 1;
							}
							format(String, sizeof(String), "* You've invited %s to join '%s'.",GetPlayerNameEx(giveplayerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
							format(String, sizeof(String), "* %s has invited you to join '%s'. (type /accept family)",GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
							InviteFaction[giveplayerid] = 0;
							InviteOffer[giveplayerid] = playerid;
							InviteFamily[giveplayerid] = family;
							format(String, sizeof(String), "%s invited %s to family %d ", GetName(playerid), GetPlayerNameEx(giveplayerid), family+1);
							Log("logs/family.log", String);
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_GREY, "That player is already in a family/faction.");
						}
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That player is already in a family/faction.");
					}
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"uninvite",true) == 0)
		{
			if(!strlen(opString))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /adjust uninvite [playerid]");
				return 1;
			}
			new giveplayerid = ReturnUser(opString);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(PlayerInfo[giveplayerid][pFMember] != family)
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That player isn't in your family.");
						return 1;
					}
					if(PlayerInfo[giveplayerid][pRank] > PlayerInfo[playerid][pRank])
					{
						SendClientMessageEx(playerid, COLOR_GREY, "You can't uninvite higher ranks.");
						return 1;
					}
					format(String, sizeof(String), "* You've kicked %s out of your family.",GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* Family leader %s has kicked your out of the family.",GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					PlayerInfo[giveplayerid][pFMember] = 255;
					PlayerInfo[giveplayerid][pRank] = 0;
					FamilyInfo[family][FamilyMembers] --;
					SaveFamilies();
					format(String, sizeof(String), "%s uninvited %s from family %d ", GetName(playerid), GetPlayerNameEx(giveplayerid), family+1);
					Log("logs/family.log", String);
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"rank",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Error! Please use /adjustrank instead of /adjust rank.");
		}
		else if(strcmp(choice,"rankname",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Error! Please use /adjustrankname instead of /adjust rankname.");
		}
	}
	else if(PlayerInfo[playerid][pRank] == 5)
	{
		new choice[32], opString[100];
		if(sscanf(params, "s[32]S[100]", choice, opString))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /adjust [name]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: MOTD, Safe, Invite, Uninvite, Rank");
			return 1;
		}

		if(strcmp(choice,"motd",true) == 0)
		{
			if(!opString[0])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /adjust MOTD [Family MOTD Text]");
				return 1;
			}
			if(strfind(opString, "|", true) != -1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2,  "Can't use the '|' character!");
				return 1;
			}
			if(strlen(opString) >= 60 )
			{
				SendClientMessageEx( playerid, COLOR_GRAD1, "That MOTD is too long, please refrain from using more than 60 characters." );
				return 1;
			}
			strmid(FamilyInfo[family][FamilyMOTD], opString, 0, strlen(opString), 100);
			SaveFamilies();
			SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted your Family's MOTD.");
			format(String, sizeof(String), "%s adjusted family %d's MOTD to %s", GetName(playerid), family+1, opString);
			Log("logs/family.log", String);
		}
		else if(strcmp(choice,"safe",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Adjusting your Family Safe will reset all your Safe Stats.");
			SendClientMessageEx(playerid, COLOR_GRAD1, "If you want to adjust your Safe type /adjust confirm.");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Upgrading your family Safe will cost $50,000.");
			return 1;
		}
		else if(strcmp(choice,"confirm",true) == 0)
		{
			if(GetPlayerCash(playerid) < 50000)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "	You don't have $50,000 to upgrade your family safe.");
				return 1;
			}
			GivePlayerCash(playerid, -50000);
			GetPlayerPos(playerid, FamilyInfo[family][FamilySafe][0],FamilyInfo[family][FamilySafe][1],FamilyInfo[family][FamilySafe][2]);
			FamilyInfo[family][FamilyCash] = 0;
			FamilyInfo[family][FamilyMats] = 0;
			FamilyInfo[family][FamilyPot] = 0;
			FamilyInfo[family][FamilyCrack] = 0;
			if(FamilyInfo[family][FamilyUSafe]) DestroyDynamicPickup(FamilyInfo[family][FamilyPickup]);
			FamilyInfo[family][FamilyUSafe] = 1;
			FamilyInfo[family][FamilyPickup] = CreateDynamicPickup(1239, 23, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]);
			SaveFamilies();
			SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted your Family's Safe.");
			format(String, sizeof(String), "%s adjusted family %d's safe", GetName(playerid), family+1);
			Log("logs/family.log", String);
		}
		else if(strcmp(choice,"invite",true) == 0)
		{
			if(!strlen(opString))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /adjust invite [playerid]");
				return 1;
			}
			new giveplayerid = ReturnUser(opString);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if (PlayerInfo[giveplayerid][pFMember] == 255)
					{
						if(PlayerInfo[giveplayerid][pLeader] == 2 || PlayerInfo[giveplayerid][pMember] == 2 && PlayerInfo[giveplayerid][pDivision] == 2)
						{
							format(String, sizeof(String), "* You've invited %s to join '%s'.",GetPlayerNameEx(giveplayerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
							format(String, sizeof(String), "* %s has invited you to join '%s'. (type /accept family)",GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
							InviteFaction[giveplayerid] = 0;
							InviteOffer[giveplayerid] = playerid;
							InviteFamily[giveplayerid] = family;
						}
						else if(PlayerInfo[giveplayerid][pLeader] == 0 && PlayerInfo[giveplayerid][pMember] == 0)
						{
							format(String, sizeof(String), "* You've invited %s to join '%s'.",GetPlayerNameEx(giveplayerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
							format(String, sizeof(String), "* %s has invited you to join '%s'. (type /accept family)",GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
							InviteFaction[giveplayerid] = 0;
							InviteOffer[giveplayerid] = playerid;
							InviteFamily[giveplayerid] = family;
							format(String, sizeof(String), "%s invited %s to family %d ", GetName(playerid), GetPlayerNameEx(giveplayerid), family+1);
							Log("logs/family.log", String);
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_GREY, "That player is already in a family/faction.");
						}
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That player is already in a family/faction.");
					}
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"uninvite",true) == 0)
		{
			if(!strlen(choice))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /adjust uninvite [playerid]");
				return 1;
			}
			new giveplayerid = ReturnUser(opString);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(PlayerInfo[giveplayerid][pFMember] != family)
					{
						SendClientMessageEx(playerid, COLOR_GREY, "   That player is not in your Family!");
						return 1;
					}
					if(PlayerInfo[giveplayerid][pRank] > PlayerInfo[playerid][pRank])
					{
						SendClientMessageEx(playerid, COLOR_GREY, "   You can't uninvite higher ranks!");
						return 1;
					}
					format(String, sizeof(String), "* You've kicked %s out of your Family.",GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* Family Leader %s has kicked your out of the Family.",GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					PlayerInfo[giveplayerid][pFMember] = 255;
					PlayerInfo[giveplayerid][pRank] = 0;
					FamilyInfo[family][FamilyMembers] --;
					SaveFamilies();
					format(String, sizeof(String), "%s uninvited %s from family %d ", GetName(playerid), GetPlayerNameEx(giveplayerid), family+1);
					Log("logs/family.log", String);
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"rank",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Error! Please use /adjustrank instead of /adjust rank.");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   Invalid adjust name!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not high rank enough to use this command!");
		return 1;
	}
	return 1;
}

CMD:adjustrank(playerid, params[])
{
	if(PlayerInfo[playerid][pFMember] == 255)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't in a family.");
		return 1;
	}
	new family = PlayerInfo[playerid][pFMember];
	new String[10000], rank, giveplayerid;
	if(sscanf(params, "du", rank, giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /adjustrank [RankNr] [playerid]");


	if(PlayerInfo[playerid][pRank] == 6)
	{
		if(rank < 1 || rank > 6) { SendClientMessageEx(playerid, COLOR_GREY, "Rank number must be from 1 to 6."); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(PlayerInfo[giveplayerid][pFMember] != family)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't in your family.");
					return 1;
				}
				if(PlayerInfo[giveplayerid][pRank] > PlayerInfo[playerid][pRank])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You can't adjust higher ranks.");
					return 1;
				}
				format(String, sizeof(String), "* You've given %s rank %d.",GetPlayerNameEx(giveplayerid),rank);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				format(String, sizeof(String), "* Family leader %s has given you rank %d.",GetPlayerNameEx(playerid),rank);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
				PlayerInfo[giveplayerid][pRank] = rank;
				format(String, sizeof(String), "%s set %s rank to %d in family %d ", GetName(playerid), GetPlayerNameEx(giveplayerid), rank, family+1);
				Log("logs/family.log", String);
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else if(PlayerInfo[playerid][pRank] == 5)
	{
		if(rank < 1 || rank > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   RankNr can't be below 1 or above 5!"); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(PlayerInfo[giveplayerid][pFMember] != family)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   That player is not in your Family!");
					return 1;
				}
				format(String, sizeof(String), "* You've given %s Rank %d.",GetPlayerNameEx(giveplayerid),rank);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				format(String, sizeof(String), "* Family Leader %s has given you Rank %d.",GetPlayerNameEx(playerid),rank);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
				PlayerInfo[giveplayerid][pRank] = rank;
				format(String, sizeof(String), "%s set %s rank to %d in family %d ", GetName(playerid), GetPlayerNameEx(giveplayerid), rank, family+1);
				Log("logs/family.log", String);
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not high rank enough to use this command!");
		return 1;
	}
	return 1;
}

CMD:adjustrankname(playerid, params[])
{
	if(PlayerInfo[playerid][pFMember] == 255)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't in a family.");
		return 1;
	}
	new family = PlayerInfo[playerid][pFMember];
	new String[10000], rank, rankname[32];
	if(sscanf(params, "ds[32]", rank, rankname)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /adjustrankname [rank number 1-6] [rank name]");

	if(PlayerInfo[playerid][pRank] == 6)
	{
		if(rank < 1 || rank > 6)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Rank number must be from 1 to 6.");
			return 1;
		}
		if(strfind(rankname, "|", true) != -1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2,  "You can't use '|' in a rank name.");
			return 1;
		}
		if(strlen(rankname) >= 19 )
		{
			SendClientMessageEx( playerid, COLOR_GRAD1, "That rank name is too long, please refrain from using more than 19 characters." );
			return 1;
		}
		if(rank == 1)
		{
			strmid(FamilyInfo[family][FamilyRank1], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(String, sizeof(String), "* You have changed Rank 1 to %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
		}
		if(rank == 2)
		{
			strmid(FamilyInfo[family][FamilyRank2], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(String, sizeof(String), "* You have changed Rank 2 to %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
		}
		if(rank == 3)
		{
			strmid(FamilyInfo[family][FamilyRank3], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(String, sizeof(String), "* You have changed Rank 3 to %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
		}
		if(rank == 4)
		{
			strmid(FamilyInfo[family][FamilyRank4], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(String, sizeof(String), "* You have changed Rank 4 to %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
		}
		if(rank == 5)
		{
			strmid(FamilyInfo[family][FamilyRank5], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(String, sizeof(String), "* You have changed Rank 5 to %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
		}
		if(rank == 6)
		{
			strmid(FamilyInfo[family][FamilyRank6], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(String, sizeof(String), "* You have changed Rank 6 to %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
		}

		format(String, sizeof(String), "%s adjusted family %d's rank %d to %s", GetName(playerid), family+1, rank, rankname);
		Log("logs/family.log", String);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not high rank enough to use this command!");
		return 1;
	}
	return 1;
}

CMD:fcreate(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 10)
	{
		new String[10000], family, giveplayerid;
		if(sscanf(params, "du", family, giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /fcreate [FamilyNr] [playerid]");
		if(family < 1 || family > 14) { SendClientMessageEx(playerid, COLOR_GREY, "   Family Slot can't be below 1 or above 14!"); return 1; }

		if(IsPlayerConnected(giveplayerid))
		{
			if(FamilyInfo[family-1][FamilyTaken] == 1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That Family Slot is already taken!" );
				return 1;
			}

			format(String, sizeof(String), "* You've made %s the Leader of Family Slot %d.",GetPlayerNameEx(giveplayerid),family);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
			format(String, sizeof(String), "* Admin %s has made you a Family Leader.", GetName(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);

			new sendername[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, sendername, sizeof(sendername));
			format(String, sizeof(String), "%s",sendername);
			strmid(FamilyInfo[family-1][FamilyLeader], String, 0, strlen(String), 24);
			FamilyInfo[family-1][FamilyMembers] ++;
			FamilyInfo[family-1][FamilyTaken] = 1;
			PlayerInfo[giveplayerid][pFMember] = family-1;
			PlayerInfo[giveplayerid][pRank] = 6;
			SaveFamilies();

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	return 1;
}

CMD:fdelete(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 10)
	{
		new family;
		if(sscanf(params, "d", family)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /fdelete [familyid]");

		if(family < 1 || family > 14) { SendClientMessageEx(playerid, COLOR_GREY, "   Family Slot can't be below 1 or above 14!"); return 1; }
		if(FamilyInfo[family-1][FamilyTaken] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That Family Slot isn't taken!");
			return 1;
		}
		ClearFamily(family-1);
		SaveFamilies();
	}
	return 1;
}

CMD:divorce(playerid, params[])
{
	if(PlayerInfo[playerid][pMarried] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't Married!");
		return 1;
	}

	new String[10000], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /divorce [playerid]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			new dString[MAX_PLAYER_NAME];
			new wString[MAX_PLAYER_NAME];
			new giveplayer[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(String, sizeof(String), "%s", giveplayer);
			strmid(wString, String, 0, strlen(String), 24);
			format(String, sizeof(String), "%s", PlayerInfo[playerid][pMarriedTo]);
			strmid(dString, String, 0, strlen(String), 24);
			if(strcmp(dString ,wString, true ) == 0 )
			{
				format(String, sizeof(String), "* You've sent Divorce Papers to %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				format(String, sizeof(String), "* %s just sent you their Divorce Papers (type /accept divorce) to accept.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
				DivorceOffer[giveplayerid] = playerid;
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That player is not Married to you!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
}

CMD:adivorce(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 3)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /adivorce [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			ClearMarriage(giveplayerid);
			format(String, sizeof(String), "* You've admin divorced %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
			format(String, sizeof(String), "* You have been admin divorced by an admin.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
			DivorceOffer[giveplayerid] = playerid;
			return 1;

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}
}

CMD:propose(playerid, params[])
{
	if(GetPlayerCash(playerid) < 100000)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "The Marriage & Reception costs $1,000.00!");
		return 1;
	}
	if(PlayerInfo[playerid][pMarried] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are already Married!");
		return 1;
	}

	new String[10000], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /propose [playerid]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[giveplayerid][pMarried] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player is already married!");
			return 1;
		}
		else if(MarryWitness[playerid] == giveplayerid) {
			return SendClientMessageEx(playerid, COLOR_GREY, "You can't marry the witness!");
		}
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Propose to yourself!"); return 1; }
			format(String, sizeof(String), "* You proposed to %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
			format(String, sizeof(String), "* %s just proposed to you (type /accept marriage) to accept.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
			ProposeOffer[giveplayerid] = playerid;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:witness(playerid, params[])
{
	new String[10000], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /witness [playerid]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Propose to yourself!"); return 1; }
			format(String, sizeof(String), "* You requested %s to be your Marriage Witness.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
			format(String, sizeof(String), "* %s just requested you to be their Marriage Witness (type /accept witness) to accept.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
			MarryWitnessOffer[giveplayerid] = playerid;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:settax(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] != 6)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not the San Andreas Goverment Service.");
		return 1;
	}
	if(PlayerInfo[playerid][pRank] != 6)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not the San Andreas Goverment Service.");
		return 1;
	}

	new String[10000], tax;
	if(sscanf(params, "d", tax)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /settax [percentage]");

	if (tax < 1 || tax > 29)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Percentage must be greater than 0 and below 30.");
		return 1;
	}
	TaxValue = tax;
	SaveStuff();
	format(String, sizeof(String), "The income tax has been set to %d percent (of each paycheck).", TaxValue);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
	return 1;
}

CMD:taxwithdraw(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] != 6)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a Government Leader.");
		return 1;
	}

 	new String[10000], amount[32], dollars, cents, duit[32];

	if(sscanf(params, "s[32]", amount))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /taxwithdraw [jumlah[dollars.cents]]");
		return 1;
	}
	if(strfind(amount, ".", true) != 1)
	{
	    	sscanf(amount, "p<.>dd", dollars, cents);
	        format(duit, sizeof(duit), "%d%02d", dollars, cents);
			if(strval(duit) > Tax)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "Insufficient funds are available.");
				return 1;
			}
			if(strval(duit) < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
			GivePlayerCash(playerid,strval(duit));
			Tax -= strval(duit);
			format(String, sizeof(String), "TAXBANK: {ffffff}You've withdrawn {ffff00}$%s{ffffff} from Tax Bank", FormatMoney(strval(duit)));
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
			format(String, sizeof(String), "BALANCE: {ffff00}$%s",FormatMoney(Tax));
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
	}
	else
	{
	    	sscanf(amount, "d", dollars);
	        format(duit, sizeof(duit), "%d00", dollars);
			if(strval(duit) > Tax)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "Insufficient funds are available.");
				return 1;
			}
			if(strval(duit) < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
   			GivePlayerCash(playerid,strval(duit));
			Tax -= strval(duit);
			format(String, sizeof(String), "TAXBANK: {ffffff}You've withdrawn {ffff00}$%s{ffffff} from Tax Bank", FormatMoney(strval(duit)));
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
			format(String, sizeof(String), "BALANCE: {ffff00}$%s",FormatMoney(Tax));
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
	}
	return 1;
}

CMD:taxdeposit(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] != 6)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a Government Leader.");
		return 1;
	}

	new String[10000], amount[32], dollars, cents, duit[32];
	if(sscanf(params, "s[32]", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /taxdeposit [amount(dollars.cents)]");
  		return 1;
	}
	if(strfind(amount, ".", true) != -1)
	{
	    	sscanf(amount, "p<.>dd", dollars, cents);
	        format(duit, sizeof(duit), "%d%02d", dollars, cents);
	        if(intLen(cents) > 2) return SendClientMessageEx(playerid, COLOR_GREY, "Format Cents salah");
			if (strval(duit) > GetPlayerCash(playerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Anda tidak memiliki uang sebesar itu.");
				return 1;
			}
			if(strval(duit) < 0) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Tidak bisa dibawah $0.00 ."); return 1; }
			GivePlayerCash(playerid,-strval(duit));
			Tax += strval(duit);
			format(String, sizeof(String), "TAXBANK: {ffffff}You've stored {ffff00}$%s{ffffff} into Tax Bank", FormatMoney(strval(duit)));
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
			format(String, sizeof(String), "BALANCE: {ffff00}$%s", FormatMoney(Tax));
   			SendClientMessageEx(playerid, COLOR_ARWIN, String);
	}
	else
	{
	    	sscanf(amount, "d", dollars);
	        format(duit, sizeof(duit), "%d00", dollars);
			if (strval(duit) > GetPlayerCash(playerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Anda tidak memiliki uang sebesar itu.");
				return 1;
			}
			if(strval(duit) < 0) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Tidak bisa dibawah $0.00 ."); return 1; }
			GivePlayerCash(playerid,-strval(duit));
			Tax += strval(duit);
			format(String, sizeof(String), "TAXBANK: {ffffff}You've stored {ffff00}$%s{ffffff} into Tax Bank", FormatMoney(strval(duit)));
			SendClientMessageEx(playerid, COLOR_ARWIN, String);
			format(String, sizeof(String), "BALANCE: {ffff00}$%s", FormatMoney(Tax));
   			SendClientMessageEx(playerid, COLOR_ARWIN, String);
	}
	return 1;
}

CMD:settaxmoney(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 7)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not authorised to use this command.");
		return 1;
	}

	new String[10000], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /settaxmoney [amount]");
		format(String, sizeof(String), "* CURRENT VAULT BALANCE: %s.", FormatMoney(Tax));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
		return 1;
	}

	Tax = amount;
	format( String, sizeof( String ), "You have set the tax money amount to %s.", FormatMoney(amount));
	SendClientMessageEx( playerid, COLOR_WHITE, String );
	return 1;
}

CMD:checktax(playerid, params[])
{
	new String[10000];
	if(PlayerInfo[playerid][pMember] != 6)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a government official.");
		return 1;
	}
	format(String, sizeof(String), "* CURRENT VAULT BALANCE: %s.", FormatMoney(Tax));
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
	return 1;
}
CMD:report(playerid, params[])
{
	if(JustReported[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Wait 120 seconds before sending another report!");
		return 1;
	}

	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /report [text]");

	JustReported[playerid] = 180;
	SendReportToQue(playerid, params);
	SendClientMessageEx(playerid, COLOR_ARWIN, "REPORT: {ffffff}Your report has been issued to the queue, use '{ffff00}/reports{ffffff}' to see your report");
	return 1;
}
CMD:reports(playerid, params[])
{
	new reportdialog[1000], itemid = 0;
	format(reportdialog, sizeof(reportdialog), "#Reports\tIssuer\tMessage\n");
	for(new i; i < MAX_REPORTS; ++i)
	{
		if(Reports[i][BeingUsed] == 1 && itemid < 40)
		{
			ListItemReportId[playerid][itemid] = i;
			itemid++;
			format(reportdialog, sizeof(reportdialog), "%s%i\t%s\t%s", reportdialog, i, GetName(Reports[i][ReportFrom]), (Reports[i][Report]));
			format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
		}
	}
	CancelReport[playerid] = itemid;
	format(reportdialog, sizeof(reportdialog), "%s", reportdialog);
	ShowPlayerDialog(playerid, REPORTSMENU, DIALOG_STYLE_TABLIST_HEADERS, "Reports", reportdialog, "Close", "");
	return 1;
}

CMD:ar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new String[10000], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ar [reportid]");
		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0) return SendClientMessage(playerid, COLOR_GREY, "   That report ID is not being used!");
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(String, sizeof(String), "RESPOND: {FF0000}%s {FFFFFF}has accepted the report from {00FFFF}%s[id:%d].", PlayerInfo[playerid][pAdminName], PlayerInfo[Reports[reportid][ReportFrom]][pNormalName],Reports[reportid][ReportFrom]);
		ABroadCast(COLOR_ARWIN, String, 1);
		format(String, sizeof(String), "RESPOND: {FF0000}%s {FFFFFF}has responded to your report", PlayerInfo[playerid][pAdminName]);
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_ARWIN, String);
		PlayerInfo[playerid][pAcceptReport]++;
	    Reports[reportid][BeingUsed] = 0;
		Reports[reportid][ReportFrom] = 999;
	    Reports[reportid][CheckingReport] = 999;
		Reports[reportid][CheckingReport] = playerid;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}
CMD:tr(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[1024], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE,"USAGE: /tr [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0) return SendClientMessage(playerid, COLOR_GREY, "   That report ID is not being used!");
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "RESPOND: {FF0000}%s {FFFFFF}has trashed the report from {00FFFF}%s[id:%d].", PlayerInfo[playerid][pAdminName], PlayerInfo[Reports[reportid][ReportFrom]][pNormalName],Reports[reportid][ReportFrom]);
		ABroadCast(COLOR_ARWIN, string, 1);
		PlayerInfo[playerid][pTrashReport]++;
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}
forward UnfreezePee(playerid);
public UnfreezePee(playerid)
{
    TogglePlayerControllable(playerid, 1);
    PlayerInfo[playerid][pBladder] = 100;
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	return 1;
}

CMD:piss(playerid, params[])
{
	new time = (100 - PlayerInfo[playerid][pBladder]) * (300);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid]!=0 || GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage(playerid, COLOR_GREY, "  **Anda tidak bisa melakukannya saat ini**");
		return 1;
	}
    TogglePlayerControllable(playerid, 1);
    SetTimerEx("UnfreezePee", time, 0, "i", playerid);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
    return 1;
}

CMD:buytoysvip(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 4, 2787.095947, 2390.353027, 1240.531127))
	{
		if(PlayerInfo[playerid][pDonateRank] < 3)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* You are not a Professional or Lifetime Donator!");
		}
		else
		{
			ShowPlayerDialog( playerid, BUYTOYSGOLD, DIALOG_STYLE_MSGBOX, "Toy Store", "Welcome to the VIP toy store! Here you can buy accessories to attach to your player.\n\nFirst, we will choose a slot to store the toy in.","Continue", "Cancel" );
		}
	}
	SendClientMessageEx( playerid, COLOR_WHITE, "   You are not in a Clothing Shop!" );
 	return 1;
}

CMD:toyhelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** TOY HELP ***");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To buy a toy, go to any clothing store and type {AA3333}/buy");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To attach/dettach, edit, or delete a toy type {AA3333}/toys");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To quickly attach all your toys, type {AA3333}/wat");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To quickly detach all your toys, type {AA3333}/dat");
	return 1;
}

CMD:toys(playerid, params[])
{
	ShowPlayerDialog( playerid, TOYS, DIALOG_STYLE_LIST, "Toy Menu", "Attach/Dettach a Toy\nEdit a Toy\nDelete a Toy","Select", "Cancel" );
	return 1;
}

CMD:fly(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessageEx(playerid, COLOR_GREY, "Anda tidak memiliki ijin untuk menggunakan command tersebut.");
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x,y,z);
	flyPos[playerid][0] = x;
	flyPos[playerid][1] = y;
	flyPos[playerid][2] = z;
	if(GetPVarType(playerid, "FlyMode")) CancelFlyMode(playerid);
	else FlyMode(playerid);
	return 1;
}

CMD:flip(playerid, params[])
{
    new VehicleID,Float:Angle;

    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
    if(!IsPlayerInAnyVehicle(playerid))
    {
    SendClientMessage(playerid, COLOR_DARKRED, "You are not in vehicle");
	return 1;
	}
    VehicleID = GetPlayerVehicleID(playerid);
    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
    GetVehicleZAngle(VehicleID, Angle);
    SetVehicleZAngle(VehicleID, Angle);
    SendClientMessage(playerid, COLOR_YELLOW, "Vehicle has been flipped.");
    }else{
    SendClientMessageEx(playerid, COLOR_WHITE, "{25FF00}SERVER: {FFFFFF}Command tidak ada, Gunakan /help untuk melihat daftar Command.");
    }
	return 1;
}

CMD:wat(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "* Attached all toys.");
	for(new x;x<MAX_PLAYERTOYS;x++)
	{
		if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ], PlayerToyInfo[playerid][x][ptScaX], PlayerToyInfo[playerid][x][ptScaY], PlayerToyInfo[playerid][x][ptScaZ]);
	}
	return 1;
}

CMD:dat(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "* Deattached all toys.");
	for(new x;x<MAX_PLAYERTOYS;x++)
	{
		RemovePlayerAttachedObject(playerid, x);
    }
    return 1;
}

CMD:take(playerid, params[])
{
	if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pDivision] == 2)
	{
		new String[10000], choice[32], giveplayerid;
		if(sscanf(params, "s[32]u", choice, giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /take [name] [playerid]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Weapons, Pot, Crack, Materials, Cellphone, Radio, Schematic.");
			return 1;
		}
		if(strcmp(choice,"radio",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(String, sizeof(String), "* You have taken away %s's radio.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* Officer %s has taken away your radio.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					PlayerInfo[giveplayerid][pRadio] = 0;
					PlayerInfo[giveplayerid][pRadioFreq] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		if(strcmp(choice,"cellphone",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(String, sizeof(String), "* You have taken away %s's cellphone.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* Officer %s has taken away your cellphone.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					PlayerInfo[giveplayerid][pPnumber] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"weapons",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(String, sizeof(String), "* You have taken away %s's weapons.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* Officer %s has taken away your weapons.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					ResetPlayerWeapons(giveplayerid);
					removePlayerWeapon(giveplayerid, GetPlayerWeapon(giveplayerid));
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"pot",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(String, sizeof(String), "* You have taken away %s's pot.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* Officer %s has taken away your pot.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					PlayerInfo[giveplayerid][pPot] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"schematic",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(String, sizeof(String), "* You have taken away %s's Gun Schematic.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* Officer %s has taken away your Gun Schematic.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					PlayerInfo[giveplayerid][pScrewdriver] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"crack",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(String, sizeof(String), "* You have taken away %s's crack.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* Officer %s has taken away your crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					PlayerInfo[giveplayerid][pCrack] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"materials",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(String, sizeof(String), "* You have taken away %s's materials.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* Officer %s as taken away your materials.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					PlayerInfo[giveplayerid][pMats] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   Invalid item specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a law enforcement officer.");
		return 1;
	}
	return 1;
}

/*CMD:train(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 757.3734,5.7227,1000.7012) || IsPlayerInRangeOfPoint(playerid, 3.0, 758.43,-78.0,1000.65))
	{
		if(PlayerInfo[playerid][pDonateRank] >= 1)
		{
			ShowPlayerDialog(playerid, FIGHTMENU, DIALOG_STYLE_LIST, "Fighting Moves", "Boxing		$40000\nElbow		$40000\nKneehead	$40000\nKung-Fu	$40000\nGrabKick	$40000\nNormal", "Learn", "Cancel");
		}
		else
		{
			ShowPlayerDialog(playerid, FIGHTMENU, DIALOG_STYLE_LIST, "Fighting Moves", "Boxing		$50000\nElbow		$50000\nKneehead	$50000\nKung-Fu	$50000\nGrabKick	$50000\nNormal", "Learn", "Cancel");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You are not at the learning area !(inside gym)");
	}
	return 1;
}*/

CMD:shakehand(playerid, params[])
{
	new String[10000], giveplayerid, style;
	if(sscanf(params, "ud", giveplayerid, style)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /shakehand [playerid] [style (1-8)]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid == playerid)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't shake your own hand.");
			return 1;
		}
		if(style >= 1 && style < 9)
		{
			new Float: ppFloats[3];

			GetPlayerPos(giveplayerid, ppFloats[0], ppFloats[1], ppFloats[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2]))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You're too far away. You can't shake hands right now.");
				return 1;
			}

			SetPVarInt(playerid, "shrequest", giveplayerid);
			SetPVarInt(playerid, "shstyle", style);

			format(String, sizeof(String), "You have requested to shake %s's hand, please wait for them to respond.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, String);

			format(String, sizeof(String), "%s has requested to shake your hand, please use '/accept handshake' to approve the hand shake.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /shakehand [playerid] [style (1-8)]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}

CMD:service(playerid, params[])
{
	new String[10000], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /service [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Taxi, Bus, Medic, Mechanic, EMS");
		return 1;
	}

	if(PlayerInfo[playerid][pJailed] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this in jail/prison.");
		return 1;
	}
	if(PlayerInfo[playerid][pServiceTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You must wait 30 seconds before using this command again. " );

	if(strcmp(choice,"ems",true) == 0)
	{
		if(GetPVarInt(playerid, "Injured") == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You are not injured, you can't call for EMS now!");
			return 1;
		}
		new zone[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
		SetPVarInt(playerid, "EMSAttempt", 1);
		SendClientMessageEx(playerid, COLOR_WHITE, "The EMS have been informed of your current location and are on their way.");
		format(String, sizeof(String), "Emergency Dispatch has reported (%d) %s to be wounded at %s, They require immediate emergency transport.",playerid, GetPlayerNameEx(playerid), zone);
		SendRadioMessage(4, TEAM_MED_COLOR, String);
		PlayerInfo[playerid][pServiceTime] = 30;
		return 1;
	}
	else if(strcmp(choice,"medic",true) == 0)
	{
		if(Medics < 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   There are no medics on duty at the moment, try again later!");
			return 1;
		}
		format(String, sizeof(String), "** %s is in need of a Medic - use /accept medic to accept the call.", GetPlayerNameEx(playerid));
		SendRadioMessage(4, TEAM_AZTECAS_COLOR, String);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have called for a medic, wait for a reply.");
		MedicCall = playerid;
		PlayerInfo[playerid][pServiceTime] = 30;
		return 1;
	}
	else if(strcmp(choice,"mechanic",true) == 0)
	{
		if(Mechanics < 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   There are no car mechanics on duty at the moment, try again later!");
			return 1;
		}
		format(String, sizeof(String), "** %s is in need of a car mechanic - use /accept mechanic to accept the call.", GetPlayerNameEx(playerid));
		SendJobMessage(7, TEAM_AZTECAS_COLOR, String);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have called for a car mechanic, wait for a reply.");
		MechanicCall = playerid;
		PlayerInfo[playerid][pServiceTime] = 30;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   Unknown service name!");
		return 1;
	}
}

CMD:tie(playerid, params[])
{
	if(PlayerInfo[playerid][pRope] > 0)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /tie [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerTied[giveplayerid] > 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Player already Tied!");
				return 1;
			}
			if(PlayerCuffed[giveplayerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't tie a cuffed/tazed player.");
			if(PlayerInfo[giveplayerid][pJailed] >= 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't tie a jailed player." );
				return 1;
			}
			if( PlayerInfo[playerid][pRope] == 0 )
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "You don't have any rope left." );
			}
			else
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					new car = GetPlayerVehicleID(playerid);
					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot tie up yourself!"); return 1; }
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
					{
						if(PlayerCuffed[giveplayerid] == 1 || PlayerCuffed[giveplayerid] == 2) {
							SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this right now.");
							return 1;
						}

						format(String, sizeof(String), "* You were tied up by %s, till untie.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
						format(String, sizeof(String), "* You tied %s up, till untie.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
						GameTextForPlayer(giveplayerid, "~r~Tied", 2500, 3);
						SetPVarInt(giveplayerid, "IsFrozen", 1);
						TogglePlayerControllable(giveplayerid, 0);
						PlayerTied[giveplayerid] = 1;
						PlayerInfo[playerid][pRope]--;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "   Player not in your Car, or you are not the Driver!");
						return 1;
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}
			}

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You don't have a Rope!");
	}
	return 1;
}

CMD:untie(playerid, params[])
{
	new String[10000], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /untie [playerid]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Untie yourself!"); return 1; }
			if(PlayerCuffed[giveplayerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't untie a cuffed/tazed player.");
			if(PlayerTied[giveplayerid])
			{
				DeletePVar(giveplayerid, "IsFrozen");
				format(String, sizeof(String), "* You were untied by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
				format(String, sizeof(String), "* You untied %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				GameTextForPlayer(giveplayerid, "~g~Untied", 2500, 3);
				TogglePlayerControllable(giveplayerid, 1);
				PlayerTied[giveplayerid] = 0;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That player isn't Tied up!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:usesprunk(playerid, params[])
{
	if(PlayerInfo[playerid][pSprunk] > 0)
	{
		if( PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
			return 1;
		}

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(IsABike(GetPlayerVehicleID(playerid)))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this on a bike.");
				return 1;
			}
		}
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		SetPVarInt(playerid, "xd", 1);
		PlayerInfo[playerid][pSprunk]--;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any sprunk");
		return 1;
	}
}

CMD:usecigar(playerid, params[])
{
	if(PlayerInfo[playerid][pCigar] > 0)
	{
		if( PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1 )
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
			return 1;
		}
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
		PlayerInfo[playerid][pCigar]--;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any cigars");
		return 1;
	}
}
CMD:usesnack(playerid, params[])
{
	if(PlayerInfo[playerid][pSnack] > 0)
	{
		new Float:Health;
		GetPlayerHealth(playerid, Health);
		AC_BS_SetPlayerHealth(playerid, Health+5);
		PlayerInfo[playerid][pHunger] += 5;
		PlayerInfo[playerid][pSnack] --;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any Snack");
		return 1;
	}
}
CMD:usewater(playerid, params[])
{
	if(PlayerInfo[playerid][pMineralWater] > 0)
	{
	    PlayerInfo[playerid][pBladder] -= 3;
		PlayerInfo[playerid][pEnergi] += 5;
		PlayerInfo[playerid][pMineralWater] --;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any Mineral Water");
		return 1;
	}
}

CMD:paintcar(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 7 || PlayerInfo[playerid][pJob2] != 7) return SendClientMessage(playerid, COLOR_GREY, "Anda bukan Montir");
	new idx = PlayerInfo[playerid][pWSBos];
	new giveplayerid, str[128], col, price[32], dollars, cents, duit[32];
	if(IsPlayerInRangeOfPoint(playerid, 100, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ]) || IsPlayerInRangeOfPoint(playerid, 100.0, 2184.7800,-2203.9988,13.5469))
	{		if( PlayerInfo[playerid][pMechTime] > 0)
		{
			format(str, sizeof(str), "Anda harus menunggu %d detik!", PlayerInfo[playerid][pMechTime]);
	  		SendClientMessage(playerid, COLOR_GRAD1,str);
	  		return 1;
		}
		if(PlayerInfo[playerid][pWSJob] != 1) return SendClientMessage(playerid, COLOR_GREEN, "Anda bukan Montir");
		if(sscanf(params, "uis[32]", giveplayerid, col, price)) return SendClientMessage(playerid, -1, "USAGE: /paintcar [ID/Name][PaintJob ID 1-6(3 for delete)][Harga]");
		if(PlayerInfo[playerid][pSpraycan] < 3) return SendClientMessage(playerid, COLOR_GREEN, "Anda kehabisan Kaleng Cat");
		if(strfind(price, ".", true) != -1)
		{
		    sscanf(price, "p<.>dd", dollars, cents);
      		format(duit, sizeof(duit), "%d%02d", dollars, cents);
        	if(intLen(cents) > 2) return SendClientMessageEx(playerid, COLOR_GREY, "Format Cents salah");
			if(strval(duit) < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
			if(col > 6 || col < 0) return SendClientMessage(playerid, COLOR_RED,"Color ID can't be lower than 0 and higher than 6.");
			idveh[playerid] = GetPlayerVehicleID(giveplayerid);
			idveh2[giveplayerid] = GetPlayerVehicle(giveplayerid, GetPlayerVehicleID(giveplayerid));
			SprayPrice[giveplayerid] = strval(duit);
			SprayPaint[giveplayerid] = col;
			SprayOffer[giveplayerid] = playerid;
			format(str, sizeof(str), "{33CCFF}%s telah menawarkan anda Jasa PaintJob seharga %s. {00CED1}(/accept paintjob) {FFFFFF}untuk menerimanya.", GetName(playerid), FormatMoney(strval(duit)));
			SendClientMessage(giveplayerid, COLOR_WHITE, str);
			format(str, sizeof(str), "{33CCFF}Anda telah menawarkan %s Jasa PaintJob seharga %s.", GetPlayerNameEx(giveplayerid), FormatMoney(strval(duit)));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, str);
		}
		else
		{
	    	sscanf(price, "d", dollars);
	        format(duit, sizeof(duit), "%d00", dollars);
			if(col > 6 || col < 0) return SendClientMessage(playerid, COLOR_RED,"Color ID can't be lower than 0 and higher than 6.");
        	if(intLen(cents) > 2) return SendClientMessageEx(playerid, COLOR_GREY, "Format Cents salah");
			if(strval(duit) < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Tidak bisa dibawah $0.00");
			idveh[playerid] = GetPlayerVehicleID(giveplayerid);
			idveh2[giveplayerid] = GetPlayerVehicle(giveplayerid, GetPlayerVehicleID(giveplayerid));
			SprayPrice[giveplayerid] = strval(duit);
			SprayPaint[giveplayerid] = col;
			SprayOffer[giveplayerid] = playerid;
			format(str, sizeof(str), "{33CCFF}%s telah menawarkan anda Jasa PaintJob seharga %s. {00CED1}(/accept paintjob) {FFFFFF}untuk menerimanya.", GetName(playerid), FormatMoney(strval(duit)));
			SendClientMessage(giveplayerid, COLOR_WHITE, str);
			format(str, sizeof(str), "{33CCFF}Anda telah menawarkan %s Jasa PaintJob seharga %s.", GetPlayerNameEx(giveplayerid), FormatMoney(strval(duit)));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, str);
		}
	}
	else return SendClientMessage(playerid, COLOR_RED, "You must be in the garage to repair vehicles!");
	return 1;
}


CMD:licenses(playerid, params[])
{
	new String[10000], text1[1401], text2[1401], text4[1401], text5[1401], text6[1401], text7[1401];
	if(PlayerInfo[playerid][pCarLic]) { text1 = "{33AA33}Acquired"; } else { text1 = "{FF0000}Not acquired"; }
	if(PlayerInfo[playerid][pFlyLic]) { text4 = "{33AA33}Acquired"; } else { text4 = "{FF0000}Not acquired"; }
	if(PlayerInfo[playerid][pBoatLic]) { text2 = "{33AA33}Acquired"; } else { text2 = "{FF0000}Not acquired"; }
	if(PlayerInfo[playerid][pGunLic]) { text5 = "{33AA33}Acquired"; } else { text5 = "{FF0000}Not acquired"; }
	if(PlayerInfo[playerid][pTruckerLic]) { text6 = "{33AA33}Acquired"; } else { text6 = "{FF0000}Not acquired"; }
	if(PlayerInfo[playerid][pLumberLic]) { text7 = "{33AA33}Acquired"; } else { text7 = "{FF0000}Not acquired"; }
	SendClientMessageEx(playerid, COLOR_WHITE, "Your licenses...");
	format(String, sizeof(String), "** Driver's license: %s.", text1);
	SendClientMessageEx(playerid, COLOR_GREY, String);
	format(String, sizeof(String), "** Pilot license: %s.", text4);
	SendClientMessageEx(playerid, COLOR_GREY, String);
	format(String, sizeof(String), "** Boating license: %s.", text2);
	SendClientMessageEx(playerid, COLOR_GREY, String);
	format(String, sizeof(String), "** Weapon license: %s.", text5);
	SendClientMessageEx(playerid, COLOR_GREY, String);
	format(String, sizeof(String), "** Trucker license: %s.", text6);
	SendClientMessageEx(playerid, COLOR_GREY, String);
	format(String, sizeof(String), "** Lumberjack license: %s.", text7);
	SendClientMessageEx(playerid, COLOR_GREY, String);
	return 1;
}

CMD:showlicenses(playerid, params[])
{
	new String[10000], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /showlicenses [playerid]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You can't show licenses to yourself - use /licenses for that."); return 1; }
			new text1[1401], text2[1401], text4[1401], text5[1401], text6[1401], text7[1401];
			if(PlayerInfo[playerid][pCarLic]) { text1 = "{33AA33}Acquired"; } else { text1 = "{FF0000}Not acquired"; }
			if(PlayerInfo[playerid][pFlyLic]) { text4 = "{33AA33}Acquired"; } else { text4 = "{FF0000}Not acquired"; }
			if(PlayerInfo[playerid][pBoatLic]) { text2 = "{33AA33}Acquired"; } else { text2 = "{FF0000}Not acquired"; }
			if(PlayerInfo[playerid][pGunLic]) { text5 = "{33AA33}Acquired"; } else { text5 = "{FF0000}Not acquired"; }
			if(PlayerInfo[playerid][pTruckerLic]) { text6 = "{33AA33}Acquired"; } else { text6 = "{FF0000}Not acquired"; }
			if(PlayerInfo[playerid][pLumberLic]) { text7 = "{33AA33}Acquired"; } else { text7 = "{FF0000}Not acquired"; }
			format(String, sizeof(String), "Listing %s's licenses...", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
			format(String, sizeof(String), "** Driver's license: %s.", text1);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
			format(String, sizeof(String), "** Pilot license: %s.", text4);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
			format(String, sizeof(String), "** Boating license: %s.", text2);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
			format(String, sizeof(String), "** Weapon license: %s.", text5);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
			format(String, sizeof(String), "** Trucker license: %s.", text6);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
			format(String, sizeof(String), "** Lumberjack license: %s.", text7);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, String);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:frisk(playerid, params[])
{
	new String[10000], giveplayerid;
  	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /frisk [playerid]");
 	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
		    format(String, sizeof(String), "FRISK: {FF0000}%s {FFFFFF}ingin mem-frisk anda, {FFFF00}/accept frisk {FFFFFF}untuk memberi izin untuk frisk", GetPlayerNameEx(playerid));
            SendClientMessageEx(giveplayerid, COLOR_ARWIN, String);
            format(String, sizeof(String), "FRISK: {FFFFFF}Anda telah merequest izin kepada {FF0000}%s {FFFFFF}untuk frisk", GetPlayerNameEx(giveplayerid));
            SendClientMessageEx(playerid, COLOR_ARWIN, String);
	        FriskOffer[giveplayerid] = playerid;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:inspect(playerid, params[])
{
	new String[10000], giveplayerid;
  	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /inspect [playerid]");
 	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
		    format(String, sizeof(String), "INSPECT: {FF0000}%s {FFFFFF}ingin meng-inspect anda, {FFFF00}/accept inspect {FFFFFF}untuk memberi izin untuk meng-inspect anda", GetPlayerNameEx(playerid));
            SendClientMessageEx(giveplayerid, COLOR_ARWIN, String);
            format(String, sizeof(String), "INSPECT: {FFFFFF}Anda telah merequest izin kepada {FF0000}%s {FFFFFF}untuk memeriksa kondisi anda", GetPlayerNameEx(giveplayerid));
            SendClientMessageEx(playerid, COLOR_ARWIN, String);
	        InspectOffer[giveplayerid] = playerid;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:profile(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /profile [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			new ftext[24];
			if(PlayerInfo[giveplayerid][pMember] == 1 || PlayerInfo[giveplayerid][pLeader] == 1)
			{ ftext = "SAPD"; }
			else if(PlayerInfo[giveplayerid][pMember] == 2 || PlayerInfo[giveplayerid][pLeader] == 2)
			{ ftext = "FBI"; }
			else if(PlayerInfo[giveplayerid][pMember] == 4 || PlayerInfo[giveplayerid][pLeader] == 4)
			{ ftext = "SAMD"; }
			else if(PlayerInfo[giveplayerid][pMember] == 6 || PlayerInfo[giveplayerid][pLeader] == 6)
			{ ftext = "SAGS"; }
			else if(PlayerInfo[giveplayerid][pMember] == 7 || PlayerInfo[giveplayerid][pLeader] == 7)
			{ ftext = "SASD"; }
			else if(PlayerInfo[giveplayerid][pMember] == 9 || PlayerInfo[giveplayerid][pLeader] == 9)
			{ ftext = "SANews"; }
			else if(PlayerInfo[giveplayerid][pMember] == 10 || PlayerInfo[giveplayerid][pLeader] == 10)
			{ ftext = "Taxi Faction"; }
			else
			{ ftext = "None"; }
			new f2text[64];
			if(PlayerInfo[giveplayerid][pFMember] < 255)
			{
				format(f2text, sizeof(f2text), "%s", FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyName]);
			}
			else { f2text = "None"; }
			SendClientMessageEx(playerid, COLOR_WHITE, "Profile Information:");
			format(String, sizeof(String), "Name: %s", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, String);
			format(String, sizeof(String), "Origin: %s", PlayerInfo[giveplayerid][pAge]);
			SendClientMessageEx(playerid, COLOR_GRAD2, String);
			format(String, sizeof(String), "Organization: %s", ftext);
			SendClientMessageEx(playerid, COLOR_GRAD2, String);
			format(String, sizeof(String), "Family: %s", f2text);
			SendClientMessageEx(playerid, COLOR_GRAD2, String);
		}
	}
	return 1;
}
CMD:usepainkiller(playerid, params[])
{
	if(PlayerInfo[playerid][pPainkiller] > 0)
	{
	    if(PlayerInfo[playerid][pCondition] < 20)
	    {
			PlayerInfo[playerid][pPainkiller] --;
			ApplyAnimation(playerid,LIBRARY,ANIMATION,4.1,false,false,false,false,3000,false);
			SendClientMessage(playerid, COLOR_ARWIN, "PAINKILLER: {ffff00}You've used Painkiller, please wait 5 minute to use again");
			SetTimer("usepainkiller",60000*5,false);
		}
		else SendClientMessage(playerid, -1, "ERROR: Anda tidak bisa menggunakan perintah pada saat kondisi anda sedang baik-baik saja");
	}
	else SendClientMessage(playerid, -1, "ERROR: You dont have Painkiller");
	return 1;
}
CMD:usemedicine(playerid, params[])
{
	ShowPlayerDialog(playerid, 15599, DIALOG_STYLE_LIST, "Medicine","Paracetamol (Condition +5)\nAmoxicillin (Condition +10)\nUltraFluenza (Condition +17)","Use","Cancel");
	return 1;
}
CMD:givemedicine(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 4)
	{
		new choice[32], giveplayerid, amount;
		if(sscanf(params, "s[32]dd", choice, giveplayerid, amount))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /givemedicine [paracetamol,amoxicilin,ultrafluenza] [giveplayerid] [amount]");
			return 1;
		}
		if(strcmp(choice, "paracetamol", true) == 0)
		{
		    if(PlayerInfo[playerid][pParacetamol] >= 1)
		    {
				PlayerInfo[giveplayerid][pParacetamol] += amount;
				PlayerInfo[playerid][pParacetamol] -= amount;
				SendFormattedMessage(playerid, COLOR_ARWIN, "MEDICINEINFO: {FFFF00}You've give %d Paracetamol to %s", amount, GetPlayerNameEx(giveplayerid));
				SendFormattedMessage(giveplayerid, COLOR_ARWIN, "MEDICINEINFO: {FFFF00}You've given %d Paracetamol from %s", amount, GetPlayerNameEx(playerid));
			}
			else SendClientMessage(playerid, -1, "ERROR: You dont have Paracetamol");
			return 1;
		}
		else if(strcmp(choice, "amoxicilin", true) == 0)
		{
			if(PlayerInfo[playerid][pAmoxicilin] >= 1)
		    {
				PlayerInfo[giveplayerid][pAmoxicilin] += amount;
				PlayerInfo[playerid][pAmoxicilin] -= amount;
				SendFormattedMessage(playerid, COLOR_ARWIN, "MEDICINEINFO: {FFFF00}You've give %d Amoxicilin to %s", amount, GetPlayerNameEx(giveplayerid));
				SendFormattedMessage(giveplayerid, COLOR_ARWIN, "MEDICINEINFO: {FFFF00}You've given %d Amoxicilin from %s", amount, GetPlayerNameEx(playerid));
			}
			else SendClientMessage(playerid, -1, "ERROR: You dont have Amoxicilin");
			return 1;
		}
		else if(strcmp(choice, "ultrafluenza", true) == 0)
		{
			if(PlayerInfo[playerid][pUltrafluenza] >= 1)
		    {
				PlayerInfo[giveplayerid][pUltrafluenza] += amount;
				PlayerInfo[playerid][pUltrafluenza] -= amount;
				SendFormattedMessage(playerid, COLOR_ARWIN, "MEDICINEINFO: {FFFF00}You've give %d Ultrafluenza to %s", amount, GetPlayerNameEx(giveplayerid));
				SendFormattedMessage(giveplayerid, COLOR_ARWIN, "MEDICINEINFO: {FFFF00}You've given %d Ultrafluenza from %s", amount, GetPlayerNameEx(playerid));
			}
			else SendClientMessage(playerid, -1, "ERROR: You dont have Ultrafluenza");
			return 1;
		}
	}
	else SendClientMessage(playerid, -1, "ERROR: You are not a part of San Andreas Medical Department");
	return 1;
}
CMD:takemedicine(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 4)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, -196.3475, -1748.7661, 675.7687))
		{
		    	ShowPlayerDialog(playerid, 15598, DIALOG_STYLE_LIST, "Medicine","Paracetamol (Condition +5)\nAmoxicillin (Condition +10)\nUltraFluenza (Condition +17)","Take","Cancel");
				return 1;
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_WHITE,"ERROR: Harus berada di dalam ASGH");
		}
	}
	return 1;
}

CMD:ogethere(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have the privilege to use this command!");
		return 1;
	}

	new name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", name)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ogethere [account name]");

	new giveplayerid = ReturnUser(name);
	if(giveplayerid != INVALID_PLAYER_ID) {
	    SendClientMessageEx(playerid, COLOR_GRAD2, "That player is online, use /ogethere for online players.");
	    return 1;
	}

	if(doesAccountExist(name)) {
		OnPlayerOfflineLogin(name);
		GetPlayerPos(playerid, PlayerInfo[MAX_PLAYERS][pPos_x], PlayerInfo[MAX_PLAYERS][pPos_y], PlayerInfo[MAX_PLAYERS][pPos_z]);
		GetPlayerFacingAngle(playerid, PlayerInfo[MAX_PLAYERS][pPos_r]);
		OnPlayerOfflineSave(name);
	}
	return 1;
}

CMD:lockhq(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9  || PlayerInfo[playerid][pLeader] == 9)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, 626.4980,21.4223,1107.9686) || IsPlayerInRangeOfPoint(playerid, 4.0, 648.7888,-1360.7708,13.5875))
		{
			if(SANewsLock == 0)
			{
				SANewsLock = 1;
			}
			else
			{
				SANewsLock = 0;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* You are not near the door!");
		}
	}
	return 1;
}

CMD:houselock(playerid, params[]) {
	if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorZ]))) {

		new
			szMessage[30 + MAX_PLAYER_NAME];

		if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hLock] == 1)
		{
			HouseInfo[PlayerInfo[playerid][pPhousekey]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s has unlocked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[PlayerInfo[playerid][pPhousekey]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s has locked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorZ]))) {

		new
			szMessage[30 + MAX_PLAYER_NAME];

		if(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hLock] == 1)
		{
			HouseInfo[PlayerInfo[playerid][pPhousekey2]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s has unlocked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[PlayerInfo[playerid][pPhousekey2]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s has locked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You either don't own a house, or are not at one of them.");
	return 1;
}

CMD:firstaid(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
		return 1;
	}
	if(PlayerInfo[playerid][pFirstaid] > 0)
	{
		if(GetPVarInt(playerid, "usingfirstaid") == 0)
		{
			PlayerInfo[playerid][pFirstaid]--;
			SetPVarInt(playerid, "firstaid5", SetTimerEx("firstaid5", 5000, 1, "d", playerid));
			SetPVarInt(playerid, "firstaidexpire", SetTimerEx("firstaidexpire",10*60000, 0, "d", playerid));
			SetPVarInt(playerid, "usingfirstaid", 1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You're already using first aid!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a first aid kit!");
	}
	return 1;
}

CMD:getpot(playerid, params[]){
	new String[1024], amount;
	if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /getpot [amount]");
	new price;
	if(PlayerInfo[playerid][pIllegalJob] == 2)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, 316.9504,1121.8683,1083.8828)){
			if (PlayerInfo[playerid][pPot] >= 1001) return ShowDescriptionText(playerid,"Tidak boleh lebih dari 1KG Pot");
			price = amount * 100;
			if(GetPlayerMoney(playerid) > price){
				format(String, sizeof(String), "* You bought %d grams for $%s.", amount, FormatMoney(price));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				GivePlayerCash(playerid, -price);
				PlayerInfo[playerid][pPot] += amount;
				stockpot -= amount;
			}
			else{
				return ShowDescriptionText(playerid,"Uang anda tidak cukup!");
			}
		}
		else{
			return ShowDescriptionText(playerid,"Harus berada di crack lab");
		}
	}
	else SendClientMessage(playerid, -1, "ERROR: You are not Drug Dealer");
	return 1;
}

CMD:getcrack(playerid, params[]){
	new String[1024], amount;
	if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /getcrack [amount]");
	new price;
	if(PlayerInfo[playerid][pFMember] == 255) return ShowDescriptionText(playerid,"harus Official Family");
	if(PlayerInfo[playerid][pIllegalJob] == 2)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, 316.9504,1121.8683,1083.8828)){
			if (PlayerInfo[playerid][pCrack] >= 1001) return ShowDescriptionText(playerid,"Tidak boleh lebih dari 1KG Crack");
			price = amount * 100;
			if(GetPlayerMoney(playerid) > price){
				format(String, sizeof(String), "* You bought %d grams for $%s.", amount, FormatMoney(price));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				GivePlayerCash(playerid, -price);
				PlayerInfo[playerid][pCrack] += amount;
				stockcrack -= amount;
			}
			else{
				return ShowDescriptionText(playerid,"Uang anda tidak cukup!");
			}
		}
		else{
			return ShowDescriptionText(playerid,"Harus berada di crack lab");
		}
    }
	else SendClientMessage(playerid, -1, "ERROR: You are not Drug Dealer");
	return 1;
}

CMD:tazer(playerid, params[])
{
	if(gTeam[playerid] == 2 || IsACop(playerid))
	{
		if(PlayerInfo[playerid][pConnectTime] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");
			return 1;
		}

		if(GetPVarInt(playerid, "IsInArena") >= 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
			return 1;
		}
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use the tazer while you're in an event.");
			return 1;
		}
		if(PlayerCuffedTime[playerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this right now.");
			return 1;
		}
		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this right now.");
			return 1;
		}

		if(PlayerInfo[playerid][pJailed] > 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this in jail/prison.");
			return 1;
		}
		if(PlayerCuffed[playerid] >= 1) {
			SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this while tazed/cuffed.");
			return 1;
		}

		if(pTazer[playerid] == 0)
		{
			pTazerReplace[playerid] = PlayerInfo[playerid][pGuns][2];
			if(PlayerInfo[playerid][pGuns][2] != 0) removePlayerWeapon(playerid, PlayerInfo[playerid][pGuns][2]);
			givePlayerValidWeapon(playerid, 23, AMMO_MELEE);
			GetPlayerWeaponData(playerid, 2, PlayerInfo[playerid][pGuns][2], PlayerInfo[playerid][pGunsAmmo][2]);

			GivePlayerWeapon(playerid, 23, 20000);
			pTazer[playerid] = 1;
		}
		else
		{
		    SetPlayerWeapons(playerid);
			pTazer[playerid] = 0;
			SetPlayerArmedWeapon(playerid, PlayerInfo[playerid][pGuns][2]);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Cop / FBI!");
		return 1;
	}
	return 1;
}
//=======================================
CMD:unimpound(playerid, params[])
{
    switch(PlayerInfo[playerid][pMember])
	{
		case 6:
		{
			new giveplayerid;
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, WHITE, "SYNTAX: /unimpound [playerid]");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2820.2354, -1475.2073, 16.2500))
			{
    				new
					vstring[1024];

				for(new i; i < MAX_PLAYERVEHICLES; i++)
				{
					if(PlayerVehicleInfo[giveplayerid][i][pvImpounded])
					{
						format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400]);
					}
					else format(vstring, sizeof(vstring), "%s\nNone", vstring);
				}
				ShowPlayerDialog(playerid, MPSPAYTICKETS, DIALOG_STYLE_LIST, "Vehicles", vstring, "Release", "Cancel");
				SetPVarInt(playerid, "playeraffectedImpound", giveplayerid);
			}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not at the Impound point in East Los Santos.");
		}
		default: SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:impound(playerid, params[]) {
	switch(PlayerInfo[playerid][pMember]) {
		case 6: {
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 2813.7676, -1472.8700, 16.2363))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You are not near the impound point, you can't impound!");
				return 1;
			}
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{

				new
					iVehType,
					iVehIndex,
					iTargetOwner,
					iVehTowed = GetVehicleTrailer(GetPlayerVehicleID(playerid));

				if(!GetVehicleModel(iVehTowed)) {
					return SendClientMessageEx(playerid, COLOR_GREY, "The vehicle in tow has been desynced and therefore cannot be impounded.");
				}
				foreach(Player, i)
				{
					iVehIndex = GetPlayerVehicle(i, iVehTowed);
					if(iVehIndex != -1)
					{
						iVehType = 1;
						iTargetOwner = i;
						break;
					}
				}
				if(!iVehType)
				{
					for(new i; i < MAX_FAMILY; ++i)
					{
						iVehIndex = GetGangVehicle(i, iVehTowed);
						if(iVehIndex != -1)
						{
							iVehType = 2;
							iTargetOwner = i;
							break;
						}
					}
				}
				switch(iVehType)
				{
					case 0, 2:
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "The impound administration could not find any registration on the vehicle and has returned it.");
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
						SetVehicleToRespawn(iVehTowed);
					}
					case 1:
					{
                        for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++)
	        			{
				            DestroyDynamicObject(PlayerVehicleInfo[iTargetOwner][iVehIndex][pvToy][vt]);
				            DestroyDynamicObject(PlayerVehicleInfo[iTargetOwner][iVehIndex][pvNeonObj]);
							DestroyDynamicObject(PlayerVehicleInfo[iTargetOwner][iVehIndex][pvNeonObj2]);
							DestroyDynamicObject(PlayerVehicleInfo[iTargetOwner][iVehIndex][pvNeonObj3]);
							DestroyDynamicObject(PlayerVehicleInfo[iTargetOwner][iVehIndex][pvNeonObj4]);
							PlayerVehicleInfo[iTargetOwner][iVehIndex][pvImpounded] = 1;
							PlayerVehicleInfo[iTargetOwner][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
							SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
							LinkVehicleToInterior(iVehTowed, 99);
							SetVehicleVirtualWorld(iVehTowed, 99);
							DestroyVehicle(iVehTowed);
							--PlayerCars;

							new
								szMessage[96];

							format(szMessage, sizeof(szMessage),"* You have impounded %s's %s.",GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

							format(szMessage, sizeof(szMessage), "VEHICLEINFO: {FFFFFF}Your {FFFF00}%s {FFFFFF}has been impounded by {00FFFF}Authority.", VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
							SendClientMessageEx(iTargetOwner, COLOR_ARWIN, szMessage);

							format(szMessage, sizeof(szMessage), "HQ: %s has impounded %s's %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
							SendRadioMessage(PlayerInfo[playerid][pMember], RADIO, szMessage);
						}
					}
				}
				arr_Towing[playerid] = INVALID_VEHICLE_ID;
			}
		}
		default: SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	}
	return 1;
}
CMD:unlocktire(playerid, params[])
{
    if(IsACop(playerid))
    {
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: '/unlocktire' [vehicle registration]");
        new Float: x, Float: y, Float: z, vehicleid = strval(params);
        GetVehiclePos(vehicleid, x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
		{
            if(vehicleid != INVALID_VEHICLE_ID)
			{
                foreach(Player, i)
				{
                    new v = GetPlayerVehicle(i, vehicleid);
                    if(v != -1)
					{
						new String[62 + MAX_PLAYER_NAME];
                        PlayerVehicleInfo[i][v][pvImpounded] = 0;
                        format(String, sizeof(String), "Anda telah melepaskan kunci ban kendaraan milik %s.",GetPlayerNameEx(i));
                        SendClientMessageEx(playerid, COLOR_WHITE, String);
                        return 1;
                    }
                }
                for(new f = 0; f < MAX_FAMILY; f++)
				{
                    new v = GetGangVehicle(f, vehicleid);
                    if(v != -1)
					{
						new String[62 + MAX_PLAYER_NAME];
                        FamilyVehicleInfo[f][v][fvImpounded] = 0;
                        format(String, sizeof(String), "Anda telah melepaskan kunci ban kendaraan milik %s.",FamilyInfo[f][FamilyName]);
                        SendClientMessageEx(playerid, COLOR_WHITE, String);
                        return 1;
                    }
                }
                SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle does not have any registration!");
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be near such vehicle!");
        }
    }
    return 1;
}


CMD:locktire(playerid, params[])
{
    if(IsACop(playerid))
    {
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: '/locktire' [vehicle registration]");

        new Float: x, Float: y, Float: z, vehicleid = strval(params);
        GetVehiclePos(vehicleid, x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
		{
            if(vehicleid != INVALID_VEHICLE_ID)
			{
                foreach(Player, i)
				{
				    if(vehicleid == PlayerRentInfo[i][prId]) return SendClientMessageEx(playerid, COLOR_GREY, "Anda tidak bisa menyita Kendaraan Rental.");
                    new v = GetPlayerVehicle(i, vehicleid);
                    if(v != -1)
					{
						new String[62 + MAX_PLAYER_NAME];
                        PlayerVehicleInfo[i][v][pvImpounded] = 2;
                        format(String, sizeof(String), "Anda telah mengunci ban kendaraan milik %s.",GetPlayerNameEx(i));
                        SendClientMessageEx(playerid, COLOR_WHITE, String);
                        return 1;
                    }
                }
                for(new f = 0; f < MAX_FAMILY; f++)
				{
                    new v = GetGangVehicle(f, vehicleid);
                    if(v != -1)
					{
						new String[62 + MAX_PLAYER_NAME];
                        FamilyVehicleInfo[f][v][fvImpounded] = 2;
                        format(String, sizeof(String), "Anda telah mengunci ban kendaraan milik %s.",FamilyInfo[f][FamilyName]);
                        SendClientMessageEx(playerid, COLOR_WHITE, String);
                        return 1;
                    }
                }
                SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle does not have any registration!");
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be near such vehicle!");
        }
    }
    return 1;
}

CMD:cuff(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 2))
	{
		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this right now.");
			return 1;
		}

		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /cuff [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot cuff yourself!"); return 1; }
				format(String, sizeof(String), "* You have been handcuffed by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
				format(String, sizeof(String), "* You handcuffed %s, till uncuff.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				GameTextForPlayer(giveplayerid, "~r~Cuffed", 2500, 3);
				SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
     			SetPlayerAttachedObject(giveplayerid, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
				PlayerCuffed[giveplayerid] = 2;
				SetPVarInt(giveplayerid, "PlayerCuffed", 2);
				PlayerCuffedTime[giveplayerid] = 300;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:uncuff(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 2))
	{
		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /uncuff [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(PlayerInfo[giveplayerid][pJailed] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't uncuff a jailed player.");
					return 1;
				}
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You can't uncuff yourself."); return 1; }
				if(PlayerCuffed[giveplayerid]>1)
				{
					DeletePVar(giveplayerid, "IsFrozen");
					format(String, sizeof(String), "* You have been uncuffed by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* You uncuffed %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					GameTextForPlayer(giveplayerid, "~g~Uncuffed", 2500, 3);
					TogglePlayerControllable(giveplayerid, 1);
					SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
					ClearAnimations(giveplayerid);
					PlayerCuffed[giveplayerid] = 0;
                    PlayerCuffedTime[playerid] = 0;
					DeletePVar(giveplayerid, "PlayerCuffed");
     				for(new i=0; i<MAX_PLAYER_ATTACHED_OBJECTS; i++)
        			{
            			RemovePlayerAttachedObject(giveplayerid, i);
        			}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't cuffed.");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:detain(playerid, params[])
{
	if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 2))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");
			return 1;
		}

		new String[10000], giveplayerid, seat;
		if(sscanf(params, "ud", giveplayerid, seat)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /detain [playerid] [seatid 1-3]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(seat < 1 || seat > 3)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "The seat ID cannot be above 3 or below 1.");
				return 1;
			}
			if(gTeam[giveplayerid] == 2 || IsACop(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You can't detain other law enforcement officers.");
				return 1;
			}
			if(IsPlayerInAnyVehicle(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person is in a car - get them out first.");
				return 1;
			}
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot detain yourself!"); return 1; }
				if(PlayerCuffed[giveplayerid] == 2)
				{
					new carid = gLastCar[playerid];
					if(IsSeatAvailable(carid, seat))
					{
						new Float:pos[6];
						GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
						GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
						GetVehiclePos( carid, pos[0], pos[1], pos[2]);
						if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
						floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
						floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
						format(String, sizeof(String), "* You were detained by %s .", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
						format(String, sizeof(String), "* You detained %s .", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
						GameTextForPlayer(giveplayerid, "~r~Detained", 2500, 3);
						ClearAnimations(giveplayerid);
						PutPlayerInVehicle(giveplayerid, carid, seat);
						TogglePlayerControllable(giveplayerid, 0);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That seat isn't available!");
						return 1;
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't cuffed.");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, " You're not close enough to the player or your car!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not a Cop / FBI!");
	}
	return 1;
}

CMD:cancel(playerid, params[])
{
	new String[10000], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Cancel __________________|");
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /cancel [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Sex, Mats, Pot, Crack, Weapon, Craft, Repair, Bodyguard, Live, Refill, Car, Boxing");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Taxi, Bus, Medic, Mechanic, Ticket, Witness, Marriage, Divorce, Drink, House, Truck");
		SendClientMessageEx(playerid, COLOR_WHITE, "|____________________________________________|");
		return 1;
	}

	if(strcmp(choice,"mats",true) == 0) { MatsOffer[playerid] = 999; MatsPrice[playerid] = 0; MatsAmount[playerid] = 0; }
	else if(strcmp(choice,"pot",true) == 0) { PotOffer[playerid] = 999; PotPrice[playerid] = 0; PotGram[playerid] = 0; }
	else if(strcmp(choice,"crack",true) == 0) { CrackOffer[playerid] = 999; CrackPrice[playerid] = 0; CrackGram[playerid] = 0; }
	else if(strcmp(choice,"weapon",true) == 0) { GunOffer[playerid] = 999; GunId[playerid] = 0; }
	else if(strcmp(choice,"live",true) == 0) { LiveOffer[playerid] = 999; }
	else if(strcmp(choice,"car",true) == 0) { VehicleOffer[playerid] = 999; VehiclePrice[playerid] = 0; VehicleId[playerid] = -1; }
	else if(strcmp(choice,"house",true) == 0) { HouseOffer[playerid] = 999; HousePrice[playerid] = 0; House[playerid] = 0; }
	else if(strcmp(choice,"witness",true) == 0) { MarryWitnessOffer[playerid] = 999; }
	else if(strcmp(choice,"marriage",true) == 0) { ProposeOffer[playerid] = 999; }
	else if(strcmp(choice,"divorce",true) == 0) { DivorceOffer[playerid] = 999; }
	else if(strcmp(choice,"drink",true) == 0) { DrinkOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"ticket",true) == 0) { TicketOffer[playerid] = 999; TicketMoney[playerid] = 0; }
	else if(strcmp(choice,"medic",true) == 0) { if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = 999; } else { SendClientMessageEx(playerid, COLOR_GREY, "   You are not the current Caller!"); return 1; } } }
	else if(strcmp(choice,"mechanic",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } else { SendClientMessageEx(playerid, COLOR_GREY, "   You are not the current Caller!"); return 1; } } }
	format(String, sizeof(String), "* You have canceled: %s.", choice);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
	return 1;
}

CMD:f(playerid, params[])
{
	if(gFam[playerid] == 1)
	{
		SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "You have your family chat disabled. /togfamily!");
		return 1;
	}

	new String[10000];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: (/f)amily [family chat]");

	if((8 <= PlayerInfo[playerid][pMember] <= 10) || PlayerInfo[playerid][pFMember] < 255)
	{
		new member = PlayerInfo[playerid][pMember];
		new fam = PlayerInfo[playerid][pFMember];
		if(member==8)
		{
			if(PlayerInfo[playerid][pRank] == 6) { format(String, sizeof(String), "** (6) Director %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(String, sizeof(String), "** (5) Vice Director %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(String, sizeof(String), "** (4) Special Agent %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(String, sizeof(String), "** (3) Agent %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(String, sizeof(String), "** (2) Marksman %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(String, sizeof(String), "** (1) Freelancer %s: %s **", GetPlayerNameEx(playerid), params); }
			else { format(String, sizeof(String), "** (1) Freelancer %s: %s **", GetPlayerNameEx(playerid), params); }
			SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_AZTECAS_COLOR, String);
		}
		else if(member==10)
		{
			if(PlayerInfo[playerid][pRank] == 6) { format(String, sizeof(String), "** (6) Transport Company Director %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(String, sizeof(String), "** (5) Assistant Director %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(String, sizeof(String), "** (4) Pilot %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(String, sizeof(String), "** (3) Dispatcher %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(String, sizeof(String), "** (2) Driver %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(String, sizeof(String), "** (1) Trainee %s: %s **", GetPlayerNameEx(playerid), params); }
			else { format(String, sizeof(String), "** (1) Trainee %s: %s. **", GetPlayerNameEx(playerid), params); }
			SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_AZTECAS_COLOR, String);
		}
		else if(PlayerInfo[playerid][pFMember] < 255)
		{
			if(PlayerInfo[playerid][pRank] == 6) { format(String, sizeof(String), "** (6) %s %s: %s **", FamilyInfo[fam][FamilyRank6], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(String, sizeof(String), "** (5) %s %s: %s **", FamilyInfo[fam][FamilyRank5], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(String, sizeof(String), "** (4) %s %s: %s  **", FamilyInfo[fam][FamilyRank4], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(String, sizeof(String), "** (3) %s %s: %s  **", FamilyInfo[fam][FamilyRank3], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(String, sizeof(String), "** (2) %s %s: %s  **", FamilyInfo[fam][FamilyRank2], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(String, sizeof(String), "** (1) %s %s: %s  **", FamilyInfo[fam][FamilyRank1], GetPlayerNameEx(playerid), params); }
			else { format(String, sizeof(String), "** (0) %s %s: %s **", FamilyInfo[fam][FamilyRank1], GetPlayerNameEx(playerid), params); }
			SendNewFamilyMessage(PlayerInfo[playerid][pFMember], TEAM_AZTECAS_COLOR, String);
		}
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a part of a Family!");
		return 1;
	}
}

CMD:nr(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
		new String[10000];
		if(shutdown == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "The news system is currently shut down." );
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /nr [text]");

		new newcar = GetPlayerVehicleID(playerid);
		if(IsANewsCar(newcar) || IsPlayerInRangeOfPoint(playerid,7.0,639.7627,-11.1346,1107.9656))
		{
			if(PlayerInfo[playerid][pRank] < 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You must be at least rank 1.");
			}
			else
			{
				format(String, sizeof(String), "[NEWS] %s: %s", GetPlayerNameEx(playerid), params);
				OOCNews(COLOR_NEWS,String);
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You're not in a news van or chopper or in the studio.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a News Reporter!");
	}
	return 1;
}

CMD:watchtv(playerid, params[])
{
	if( (GetPlayerVirtualWorld(playerid) >= 6000 && GetPlayerVirtualWorld(playerid) <= (6000 + MAX_HOUSES)) || WatchingTV[playerid] != 0)
	{
		if(broadcasting == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Nothings on TV!");
			return 1;
		}

		new String[10000];
		if(WatchingTV[playerid] == 0)
		{
			format(String, sizeof(String), "* %s starts watching TV", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, String, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Type /watchtv again to stop watching TV");
			BroadcastLastVW[playerid] = GetPlayerVirtualWorld(playerid);
			BroadcastLastInt[playerid] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, BroadcastFloats[playerid][1], BroadcastFloats[playerid][2], BroadcastFloats[playerid][3]);
			GetPlayerFacingAngle(playerid, BroadcastFloats[playerid][0]);

			WatchingTV[playerid] = 1;
			viewers++;
			UpdateSANewsBroadcast();

			TogglePlayerControllable(playerid, false);
			AC_BS_SetPlayerInterior(playerid, 1);
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
			AC_BS_SetPlayerPos(playerid, 639.2813,-11.8090,1111.4656);

			if(cameraangle == 0)
			{
				SetPlayerCameraPos(playerid, 635.6883,-11.1890,1108.6041);
				SetPlayerCameraLookAt(playerid, 641.3040,-12.2565,1108.1642);
			}
			else if(cameraangle == 1)
			{
				SetPlayerCameraPos(playerid, 637.9041,-8.3097,1108.9656);
				SetPlayerCameraLookAt(playerid, 640.9764,-14.7714,1107.9656);
			}
			else if(cameraangle == 2)
			{
				SetPlayerCameraPos(playerid, 638.6522,-15.6267,1108.9656);
				SetPlayerCameraLookAt(playerid, 640.7208,-9.5926,1107.2006);
			}
			else
			{
				SetPlayerCameraPos(playerid, 635.6883,-11.1890,1108.6041);
				SetPlayerCameraLookAt(playerid, 641.3040,-12.2565,1108.1642);
			}
		}
		else
		{
			TogglePlayerControllable(playerid, 1);
			GameTextForPlayer(playerid, "Objects loading...", 4000, 5);
			SetPVarInt(playerid, "LoadingObjects", 1);
			SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
			AC_BS_SetPlayerPos(playerid,BroadcastFloats[playerid][1],BroadcastFloats[playerid][2],BroadcastFloats[playerid][3]);
			AC_BS_SetPlayerVirtualWorld(playerid, BroadcastLastVW[playerid]);
			PlayerInfo[playerid][pVW] = BroadcastLastVW[playerid];
			AC_BS_SetPlayerInterior(playerid, BroadcastLastInt[playerid]);
			PlayerInfo[playerid][pInt] = BroadcastLastInt[playerid];
			SetPlayerFacingAngle(playerid, BroadcastFloats[playerid][0]);
			SetCameraBehindPlayer(playerid);

			WatchingTV[playerid] = 0;
			viewers--;
			UpdateSANewsBroadcast();

			format(String, sizeof(String), "* %s stops watching TV", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, String, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You must be in a house!");
	}
	return 1;
}

CMD:cam(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 1)
	{
		if(IsPlayerInRangeOfPoint(playerid,4.0,267.3568,119.7420,1004.6172) || IsPlayerInRangeOfPoint(playerid, 3.0, 1572.2177,-1666.4858,5.4247))
		{
			new number;
			if(sscanf(params, "d", number)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /cam [number 1 - 7]  (8 = OFF)");
			if(number < 1 || number > 8) { SendClientMessageEx(playerid, COLOR_GREY, "Camera Number can't be below 1 or above 8!"); return 1; }

			TogglePlayerControllable(playerid, 1);
			GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
			if(number == 1) { AC_BS_SetPlayerPos(playerid, 1572.2177,-1666.4858,5.4247); SetPlayerCameraPos(playerid, 1555.4822,-1676.1384,31.6471); SetPlayerCameraLookAt(playerid, 1531.2300,-1674.2351,13.3828); AC_BS_SetPlayerInterior(playerid, 0); AC_BS_SetPlayerVirtualWorld(playerid, 0); }
			else if(number == 2) { AC_BS_SetPlayerPos(playerid, 267.3568,119.7420,1004.6172); SetPlayerCameraPos(playerid, 240.95, 108.50, 1010.10); SetPlayerCameraLookAt(playerid, 245.07, 111.34, 1005.66); AC_BS_SetPlayerInterior(playerid, 10); AC_BS_SetPlayerVirtualWorld(playerid, 0); }
			else if(number == 3) { AC_BS_SetPlayerPos(playerid, 267.3568,119.7420,1004.6172); SetPlayerCameraPos(playerid, 229.66, 116.30, 1001.52); SetPlayerCameraLookAt(playerid, 225.47, 113.58, 999.56); AC_BS_SetPlayerInterior(playerid, 10); AC_BS_SetPlayerVirtualWorld(playerid, 0); }
			else if(number == 4) { AC_BS_SetPlayerPos(playerid, 267.3568,119.7420,1004.6172); SetPlayerCameraPos(playerid, 233.27, 128.35, 1012.36); SetPlayerCameraLookAt(playerid, 237.44, 125.60, 1010.19); AC_BS_SetPlayerInterior(playerid, 10); AC_BS_SetPlayerVirtualWorld(playerid, 0); }
			else if(number == 5) { AC_BS_SetPlayerPos(playerid, 267.3568,119.7420,1004.6172); SetPlayerCameraPos(playerid, 278.98, 113.07, 1007.32); SetPlayerCameraLookAt(playerid, 274.73, 115.72, 1004.74); AC_BS_SetPlayerInterior(playerid, 10); AC_BS_SetPlayerVirtualWorld(playerid, 0); }
			else if(number == 6) { AC_BS_SetPlayerPos(playerid, 1572.2177,-1666.4858,5.4247); SetPlayerCameraPos(playerid, 1525.2576,-1634.5444,9.6892); SetPlayerCameraLookAt(playerid, 1542.5669,-1672.9388,5.8906); AC_BS_SetPlayerInterior(playerid, 0); AC_BS_SetPlayerVirtualWorld(playerid, 0); }
			else if(number == 7) { AC_BS_SetPlayerPos(playerid, 1572.2177,-1666.4858,5.4247); SetPlayerCameraPos(playerid, 1611.7991,-1721.5706,9.6892); SetPlayerCameraLookAt(playerid, 1560.8820,-1694.7605,5.8970); AC_BS_SetPlayerInterior(playerid, 0); AC_BS_SetPlayerVirtualWorld(playerid, 0); }
			else if(number == 8) { AC_BS_SetPlayerPos(playerid, 267.3568,119.7420,1004.6172); SetCameraBehindPlayer(playerid); TogglePlayerControllable(playerid, 1); AC_BS_SetPlayerInterior(playerid, 10); AC_BS_SetPlayerVirtualWorld(playerid, 0); }
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You are not at the Security Panel!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "kamu bukan anggota dari LSPD!");
		return 1;
	}
	return 1;
}

CMD:cameraangle(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pDivision] == 3 || PlayerInfo[playerid][pLeader] == 9)
	{
		if(IsPlayerInRangeOfPoint(playerid,10.0,631.8096,-10.9424,1107.9729))
		{
			if(broadcasting == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Not currently broadcasting!");
				return 1;
			}

			new String[10000], choice[32];
			if(sscanf(params, "s[32]", choice))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /cameraangle [location]");
				SendClientMessageEx(playerid, COLOR_GRAD1, "Locations: Center,Left,Right");
				return 1;
			}

			if(strcmp(choice,"center",true) == 0)
			{
				format(String, sizeof(String), "** %s changes the camera angle to the center **", GetPlayerNameEx(playerid));
				SendRadioMessage(9, RADIO, String);
				cameraangle = 0;
				DestroyDynamic3DTextLabel(camera);
				camera = CreateDynamic3DTextLabel("*The Camera*",COLOR_RED,635.6883,-11.1890,1108.6041,13.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
			}
			else if(strcmp(choice,"left",true) == 0)
			{
				format(String, sizeof(String), "** %s changes the camera angle to the left **", GetPlayerNameEx(playerid));
				SendRadioMessage(9, RADIO, String);
				cameraangle = 1;
				DestroyDynamic3DTextLabel(camera);
				camera = CreateDynamic3DTextLabel("*The Camera*",COLOR_RED,637.9041,-8.3097,1107.9656,13.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
			}
			else if(strcmp(choice,"right",true) == 0)
			{
				format(String, sizeof(String), "** %s changes the camera angle to the right **", GetPlayerNameEx(playerid));
				SendRadioMessage(9, RADIO, String);
				cameraangle = 2;
				DestroyDynamic3DTextLabel(camera);
				camera = CreateDynamic3DTextLabel("*The Camera*",COLOR_RED,638.6522,-15.6267,1107.9656,13.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Unrecognized camera angle");
				return 1;
			}
			foreach(Player, i)
			{
				if(WatchingTV[i] == 1)
				{
					if(cameraangle == 0)
					{
						SetPlayerCameraPos(i, 635.6883,-11.1890,1108.6041);
						SetPlayerCameraLookAt(i, 641.3040,-12.2565,1108.1642);
					}
					else if(cameraangle == 1)
					{
						SetPlayerCameraPos(i, 637.9041,-8.3097,1108.9656);
						SetPlayerCameraLookAt(i, 640.9764,-14.7714,1107.9656);
					}
					else if(cameraangle == 2)
					{
						SetPlayerCameraPos(i, 638.6522,-15.6267,1108.9656);
						SetPlayerCameraLookAt(i, 640.7208,-9.5926,1107.2006);
					}
					else
					{
						SetPlayerCameraPos(i, 635.6883,-11.1890,1108.6041);
						SetPlayerCameraLookAt(i, 641.3040,-12.2565,1108.1642);
					}
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Not in the studio!");
		}
	}
	return 1;
}

CMD:stoplive(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pRank] > 5)
	{
	    if(shutdown == 0)
	    {
	        shutdown = 1;
	        SendClientMessageEx(playerid, COLOR_WHITE, "You have just shutdown the whole news system and are ending anything in progres..." );
	        if(broadcasting == 1)
	        {
	            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Broadcasting has just been shutdown..");
				broadcasting = 0;
				UpdateSANewsBroadcast();
				DestroyDynamic3DTextLabel(camera);
	            foreach(Player, i)
				{
					if(WatchingTV[i] == 1)
					{
						TogglePlayerControllable(i, 0);
						GameTextForPlayer(i, "Objects loading...", 4000, 5);
						SetPVarInt(i, "LoadingObjects", 1);
						SetTimerEx("SafeLoadObjects", 4000, 0, "d", i);
						AC_BS_SetPlayerPos(i,BroadcastFloats[i][1],BroadcastFloats[i][2],BroadcastFloats[i][3]);
						AC_BS_SetPlayerVirtualWorld(i, BroadcastLastVW[i]);
						PlayerInfo[i][pInt] = BroadcastLastVW[i];
						AC_BS_SetPlayerInterior(i, BroadcastLastInt[i]);
						PlayerInfo[i][pInt] = BroadcastLastInt[i];
						SetPlayerFacingAngle(i, BroadcastFloats[i][0]);
						SetCameraBehindPlayer(i);
						WatchingTV[i] = 0;
						viewers = 0;
						UpdateSANewsBroadcast();
					}
				}
	        }
	        foreach(Player, i)
	        {
	            if(TalkingLive[i] != INVALID_PLAYER_ID)
				{
					SendClientMessageEx(i, COLOR_LIGHTBLUE, "* Live conversation ended.");
					SendClientMessageEx(TalkingLive[i], COLOR_LIGHTBLUE, "* Live conversation ended.");
					TogglePlayerControllable(i, 1);
					TogglePlayerControllable(TalkingLive[i], 1);
					TalkingLive[TalkingLive[i]] = INVALID_PLAYER_ID;
					TalkingLive[i] = INVALID_PLAYER_ID;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Live has just been shutdown..");
					return 1;
				}
	        }
	    }
	    else
	    {
	        shutdown = 0;
	        SendClientMessageEx(playerid, COLOR_WHITE, "You have just turned on the news system. " );
	    }
	}
	return 1;
}

CMD:liveban(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pRank] >= 1 || PlayerInfo[playerid][pLeader] == 9)
	{
	    new giveplayerid,
	        String[10000];

	    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /liveban [playerid]");
	    if(PlayerInfo[giveplayerid][pLiveBanned] == 0)
	    {
	        PlayerInfo[giveplayerid][pLiveBanned] = 1;
	        format(String, sizeof(String), "%s has interview banned %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	        SendRadioMessage(9, RADIO, String);
	        return 1;
	    }
	    else
	    {
	        PlayerInfo[giveplayerid][pLiveBanned] = 0;
	        format(String, sizeof(String), "%s has unbanned %s from interviews", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	        SendRadioMessage(9, RADIO, String);
	        return 1;
	    }
	}
	return 1;
}

CMD:stuck(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    ShowPlayerDialog(playerid, BUGGED, DIALOG_STYLE_LIST, "Available Bug", "Freeze Bug\nBug VirtualWorld\nBug Interior\nBlueberry BUG", "Pilih", "Tidak");
	}
	return 1;
}

CMD:broadcast(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pDivision] == 3 || PlayerInfo[playerid][pLeader] == 9)
	{
	    if(shutdown == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "The news system is currently shut down." );
		if(IsPlayerInRangeOfPoint(playerid,10.0,631.8096,-10.9424,1107.9729))
		{
			new String[10000];
			if(broadcasting == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Now broadcasting LIVE");
				broadcasting = 1;
				cameraangle = 0;
				UpdateSANewsBroadcast();
				format(String, sizeof(String), "%s will now broadcast LIVE from the studio! /watchtv to tune in!", GetPlayerNameEx(playerid));
				OOCNews(COLOR_NEWS,String);
				camera = CreateDynamic3DTextLabel("*The Camera*",COLOR_RED,635.6883,-11.1890,1108.6041,13.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* No longer broadcasting");
				broadcasting = 0;
				UpdateSANewsBroadcast();
				DestroyDynamic3DTextLabel(camera);
				foreach(Player, i)
				{
					if(WatchingTV[i] == 1)
					{
						TogglePlayerControllable(i, 0);
						GameTextForPlayer(i, "Objects loading...", 4000, 5);
						SetPVarInt(i, "LoadingObjects", 1);
						SetTimerEx("SafeLoadObjects", 4000, 0, "d", i);
						AC_BS_SetPlayerPos(i,BroadcastFloats[i][1],BroadcastFloats[i][2],BroadcastFloats[i][3]);
						AC_BS_SetPlayerVirtualWorld(i, BroadcastLastVW[i]);
						PlayerInfo[i][pInt] = BroadcastLastVW[i];
						AC_BS_SetPlayerInterior(i, BroadcastLastInt[i]);
						PlayerInfo[i][pInt] = BroadcastLastInt[i];
						SetPlayerFacingAngle(i, BroadcastFloats[i][0]);
						SetCameraBehindPlayer(i);
						WatchingTV[i] = 0;
						viewers = 0;
						UpdateSANewsBroadcast();
					}
				}
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You aren't in the studio!");
		}
	}
	return 1;
}

CMD:live(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
	    if(shutdown == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "The news system is currently shut down." );
		if(TalkingLive[playerid] != INVALID_PLAYER_ID)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Live conversation ended.");
			SendClientMessageEx(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Live conversation ended.");
			TogglePlayerControllable(playerid, 1);
			TogglePlayerControllable(TalkingLive[playerid], 1);
			TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
			TalkingLive[playerid] = INVALID_PLAYER_ID;
			return 1;
		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /live [playerid]");

		if (IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
			    if(PlayerInfo[giveplayerid][pLiveBanned] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "That player is interview banned.");
				if(PlayerCuffed[giveplayerid] >= 1 || PlayerCuffed[playerid] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "You are unable to do this right now.");
				}
				else
				{
					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot talk live with yourself!"); return 1; }
					format(string, sizeof(string), "* You offered %s to have a live conversation.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s offered you to have a live conversation, type /accept live to accept.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					LiveOffer[giveplayerid] = playerid;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
				return 1;
			}

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a News Reporter!");
	}
	return 1;
}

CMD:usepot(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
		return 1;
	}
	if(UsedWeed[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 5 seconds before using more drugs.");
		return 1;
	}
	new Float:health, healthint;
	GetPlayerHealth(playerid, health);
	healthint = floatround(health, floatround_round);
	if(healthint >= 100 )
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You already have full health.");
		return 1;
	}
	if(PlayerInfo[playerid][pPot] > 1)
	{
		if(PlayerStoned[playerid] > 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are too stoned to use pot.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 3)
		{
			GameTextForPlayer(playerid, "~w~you are ~b~stoned", 5000, 3);
		}
		if(healthint > 80)
		{
			AC_BS_SetPlayerHealth(playerid, 100);
			PlayerInfo[playerid][pHealth] = 100.0;
		}
		else
		{
			AC_BS_SetPlayerHealth(playerid, health + 20.0);
			PlayerInfo[playerid][pHealth] += 20.0;
		}
		SendClientMessageEx(playerid, COLOR_GREY, " You used 2 grams of pot!");
		PlayerInfo[playerid][pPot] -= 1;
		UsedWeed[playerid] = 1;
		SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
		if(!IsPlayerInAnyVehicle(playerid)) LoopingAnim(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		if(STDPlayer[playerid]==1)
		{
			STDPlayer[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are no longer infected with a STI anymore because of the Drugs!");
		}
		else if(STDPlayer[playerid]==2)
		{
			STDPlayer[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You lowered the STI to Chlamydia because of the Drugs!");
		}
		else if(STDPlayer[playerid]==3)
		{
			STDPlayer[playerid] = 2;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You lowered the STI to Gonorrhea because of the Drugs!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY,"You don't have any pot left!");
	}
	return 1;
}

CMD:usecrack(playerid, params[])
{
	new Float:armour;
	GetPlayerArmour(playerid, armour);
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
		return 1;
	}
	if(UsedCrack[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 5 seconds before using more drugs.");
		return 1;
	}
	if(armour >= 100)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You already have full armor.");
		return 1;
	}
	if(PlayerInfo[playerid][pCrack] > 1)
	{
		if(PlayerStoned[playerid] > 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are too stoned to use crack.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 5)
		{
			GameTextForPlayer(playerid, "~w~you are ~b~stoned", 5000, 3);
		}
		new Float:PlayersArmour;
		GetPlayerArmour(playerid, PlayersArmour);
		PlayerInfo[playerid][pCrack] -= 1;
		UsedCrack[playerid] = 1;
		SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
		if(PlayersArmour > 90)
		{
			AC_BS_SetPlayerArmour(playerid, 100);
			PlayerInfo[playerid][pArmor] = 100.0;
		}
		else
		{
			AC_BS_SetPlayerArmour(playerid, PlayersArmour + 10.0);
			PlayerInfo[playerid][pArmor] += 10.0;
		}
		if(!IsPlayerInAnyVehicle(playerid)) LoopingAnim(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		if(STDPlayer[playerid]==1)
		{
			STDPlayer[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are no longer infected with a STI anymore because of the Drugs!");
		}
		else if(STDPlayer[playerid]==2)
		{
			STDPlayer[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You lowered the STI to Chlamydia because of the Drugs!");
		}
		else if(STDPlayer[playerid]==3)
		{
			STDPlayer[playerid] = 2;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You lowered the STI to Gonorrhea because of the Drugs!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any crack left!");
	}
	return 1;
}

CMD:eject(playerid, params[])
{
	new State;
	if(IsPlayerInAnyVehicle(playerid))
	{
		State=GetPlayerState(playerid);
		if(State!=PLAYER_STATE_DRIVER)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"   You can only eject people as the driver!");
			return 1;
		}

		new String[10000], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /eject [playerid]");

		new test;
		test = GetPlayerVehicleID(playerid);
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Eject yourself!"); return 1; }
				if(IsPlayerInVehicle(giveplayerid,test))
				{
					if(GetPVarInt(giveplayerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't eject patients!");
					format(String, sizeof(String), "* You have thrown %s out of the car.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* You have been thrown out the car by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					RemovePlayerFromVehicle(giveplayerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(giveplayerid, slx, sly, slz);
					AC_BS_SetPlayerPos(giveplayerid, slx, sly, slz+1.2);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   That player is not in your Car!");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, " Invalid ID/Name!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You need to be in a Vehicle to use this!");
	}
	return 1;
}

CMD:wanted(playerid, params[])
{
	if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5)
	{
		new String[10000], x;

		SendClientMessageEx(playerid, COLOR_GREEN, "Current Wanted Suspects:");
		foreach(Player, i)
		{
			if(PlayerInfo[i][pWantedLevel] >= 1)
			{
				format(String, sizeof(String), "%s%s: %d", String,GetPlayerNameEx(i),PlayerInfo[i][pWantedLevel]);
				x++;
				if(x > 3) {
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					x = 0;
					format(String, sizeof(String), " ");
				} else {
					format(String, sizeof(String), "%s, ", String);
				}
			}
		}
		if(x <= 3 && x > 0)
		{
			String[strlen(String)-2] = '.';
			SendClientMessageEx(playerid, COLOR_YELLOW, String);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a Cop / FBI!");
	}
	return 1;
}

CMD:drop(playerid, params[])
{
	new String[10000], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /drop [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Weapons, Pot, Crack, Materials, Packages, Crates, Radio");
		return 1;
	}

	if(strcmp(choice,"materials",true) == 0)
	{
		if(PlayerInfo[playerid][pMats] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(String, sizeof(String), "You have dropped %d materials.", PlayerInfo[playerid][pMats]);
			SendClientMessageEx(playerid, COLOR_WHITE, String);
			PlayerInfo[playerid][pMats] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any materials to throw away!");
		}
	}
	else if(strcmp(choice,"radio",true) == 0)
	{
		if(PlayerInfo[playerid][pRadio] != 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			PlayerInfo[playerid][pRadio] = 0;
			PlayerInfo[playerid][pRadioFreq] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying a portable radio to throw away!");
		}
	}
	else if(strcmp(choice,"weapons",true) == 0)
	{
		if(GetPVarInt(playerid, "IsInArena") >= 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
			return 1;
		}
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
			return 1;
		}
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
  		//ResetPlayerWeapons(playerid);
		removePlayerWeapon(playerid, GetPlayerWeapon(playerid));
	}
	else if(strcmp(choice,"pot",true) == 0)
	{
		if(PlayerInfo[playerid][pPot] > 0)
		{
			format(String, sizeof(String), "You have dropped %d grams of pot.", PlayerInfo[playerid][pPot]);
			SendClientMessageEx(playerid, COLOR_WHITE, String);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			PlayerInfo[playerid][pPot] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any pot to throw away!");
		}
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if(PlayerInfo[playerid][pCrack] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(String, sizeof(String), "You have dropped %d grams of crack.", PlayerInfo[playerid][pCrack]);
			SendClientMessageEx(playerid, COLOR_WHITE, String);
			PlayerInfo[playerid][pCrack] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any crack to throw away!");
		}
	}
	else if(strcmp(choice,"packages",true) == 0)
	{
		if(GetPVarInt(playerid, "Packages") > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			DeletePVar(playerid, "Packages");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any material packages to throw away!");
		}
	}
	else if(strcmp(choice,"crates",true) == 0)
	{
		if(PlayerInfo[playerid][pCrates] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			PlayerInfo[playerid][pCrates] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any drug crates to throw away!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /drop [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Weapons, Pot, Crack, Materials, Packages, Crates, Radio");
	}
	return 1;
}

CMD:show(playerid, params[])
{
	new String[10000], giveplayerid, choice[32];
	if(sscanf(params, "us[32]", giveplayerid, choice))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /show [playerid] [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Materials");
		return 1;
	}

	if(giveplayerid == playerid)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You can not show this to yourself!");
		return 1;
	}

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if (!ProxDetectorS(5.0, playerid, giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
				return 1;
			}

			if (strcmp(choice, "materials", true) == 0)
			{
			    new amount = PlayerInfo[playerid][pMats];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You do not have any materials!");
					return 1;
			    }
				format(String, sizeof(String), "%s has shown you their %d Materials.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, String);

				format(String, sizeof(String), "You have shown %s your %d Materials.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_GRAD2, String);

				format(String, sizeof(String), "* %s has shown %s some Materials.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if (strcmp(choice, "pot", true) == 0)
			{
			    new amount = PlayerInfo[playerid][pPot];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You do not have any pot!");
					return 1;
			    }
				format(String, sizeof(String), "%s has shown you their %d grams of pot.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, String);

				format(String, sizeof(String), "You have shown %s your %d grams of pot.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_GRAD2, String);

				format(String, sizeof(String), "* %s has shown %s some Pot.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if (strcmp(choice, "crack", true) == 0)
			{
			    new amount = PlayerInfo[playerid][pCrack];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You do not have any crack!");
					return 1;
			    }
				format(String, sizeof(String), "%s has shown you their %d grams of crack.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, String);

				format(String, sizeof(String), "You have shown %s your %d grams of crack.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_GRAD2, String);

				format(String, sizeof(String), "* %s has shown %s some Crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
		}
	}
	return 1;
}

CMD:give(playerid, params[])
{
	new String[10000], giveplayerid, choice[32], amount;
	if(sscanf(params, "us[32]d", giveplayerid, choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /give [playerid] [name] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Materials, Component");
		return 1;
	}

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(amount < 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You don't have that much!");
				return 1;
			}

			if (!ProxDetectorS(5.0, playerid, giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
				return 1;
			}

			if(giveplayerid == playerid)
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on yourself!");
			    return 1;
			}

			if (strcmp(choice, "component", true) == 0)
			{
				if(PlayerInfo[playerid][pComponent] >= amount)
				{
					format(String, sizeof(String), "GIVE: {ffffff}You have recieved {ffff00}%d Component {ffffff}from {ffff00}%s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_ARWIN, String);
					PlayerInfo[giveplayerid][pComponent] += amount;
					PlayerInfo[playerid][pComponent] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(String, sizeof(String), "%s(IP:%s) has given %s(IP:%s) %d Component.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/pay.log", String);
					if(PlayerInfo[playerid][pAdmin] >= 1)
					{

						format(String, sizeof(String), "[Admin] %s(IP:%s) has given %s(IP:%s) %d component.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/admingive.log", String);
						format(String, sizeof(String), "{FF6347}AdmCmd: %s(IP:%s) has given %s(IP:%s) %d component.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						ABroadCast(COLOR_YELLOW, String, 1);
					}
					format(String, sizeof(String), "GIVE: {ffffff}You have given {FFFF00}%s %d Component.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_ARWIN, String);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You don't have that much!");
					return 1;
				}
			}
			if (strcmp(choice, "materials", true) == 0)
			{
				if(PlayerInfo[playerid][pMats] >= amount)
				{
					format(String, sizeof(String), "GIVE: {ffffff}You have recieved {FFFF00}%d Materials {ffffff}from {ffff00}%s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_ARWIN, String);
					PlayerInfo[giveplayerid][pMats] += amount;
					PlayerInfo[playerid][pMats] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(String, sizeof(String), "%s(IP:%s) has given %s(IP:%s) %d materials.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/pay.log", String);
					if(PlayerInfo[playerid][pAdmin] >= 1)
					{

						format(String, sizeof(String), "[Admin] %s(IP:%s) has given %s(IP:%s) %d materials.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/admingive.log", String);
						format(String, sizeof(String), "{FF6347}AdmCmd: %s(IP:%s) has given %s(IP:%s) %d materials.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						ABroadCast(COLOR_YELLOW, String, 1);
					}
					format(String, sizeof(String), "GIVE: {ffffff}You have given {ffff00}%s %d Materials.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_ARWIN, String);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You don't have that much!");
					return 1;
				}
			}
			if (strcmp(choice, "pot", true) == 0)
			{
				if(PlayerInfo[playerid][pPot] >= amount)
				{
					if(amount + PlayerInfo[giveplayerid][pPot] >= 1000 )
					{
						SendClientMessageEx( playerid, COLOR_GREY, "That player can not carry more than 1000 pot!" );
						return 1;
					}
					format(String, sizeof(String), "GIVE: {ffffff}You have recieved {FFFF00}%d Pot {FFFFFF}from {FFFF00}%s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_ARWIN, String);
					PlayerInfo[giveplayerid][pPot] += amount;
					PlayerInfo[playerid][pPot] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(String, sizeof(String), "%s(IP:%s) has given %s(IP:%s) %d pot.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/pay.log", String);
					if(PlayerInfo[playerid][pAdmin] >= 1)
					{
						format(String, sizeof(String), "[Admin] %s(IP:%s) has given %s(IP:%s) %d pot.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/admingive.log", String);
						format(String, sizeof(String), "{FF6347}AdmCmd: %s(IP:%s) has given %s(IP:%s) %d pot.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						ABroadCast(COLOR_YELLOW, String, 1);
					}
					format(String, sizeof(String), "GIVE: {ffffff}You have given {FFFF00}%s %d Pot.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_ARWIN, String);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You don't have that much!");
					return 1;
				}
			}
			if (strcmp(choice, "crack", true) == 0)
			{
				if(PlayerInfo[playerid][pCrack] >= amount)
				{
					if(amount + PlayerInfo[giveplayerid][pCrack] >= 1000 )
					{
						SendClientMessageEx( playerid, COLOR_GREY, "That player can not carry more than 1000 crack!" );
						return 1;
					}
					format(String, sizeof(String), "GIVE: {ffffff}You have recieved {FFFF00}%d Crack {ffffff}from {FFFF00}%s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_ARWIN, String);
					PlayerInfo[giveplayerid][pCrack] += amount;
					PlayerInfo[playerid][pCrack] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(String, sizeof(String), "%s(IP:%s) has given %s(IP:%s) %d crack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/pay.log", String);
					if(PlayerInfo[playerid][pAdmin] >= 1)
					{
						format(String, sizeof(String), "[Admin] %s(IP:%s) has given %s(IP:%s) %d crack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/admingive.log", String);
						format(String, sizeof(String), "{FF6347}AdmCmd: %s(IP:%s) has given %s(IP:%s) %d crack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						ABroadCast(COLOR_YELLOW, String, 1);
					}
					format(String, sizeof(String), "GIVE: {ffffff}You have given {FFFF00}%s %d Crack.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, String);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You don't have that much!");
					return 1;
				}
			}
		}
	}
	return 1;
}

CMD:quitjob(playerid, params[])
{
	    if(PlayerInfo[playerid][pJTime] > 0)
		{
		    new String[10000];
		    format(String, sizeof(String), "JOB : Kamu masih memiliki kontrak kerja selama %d menit lagi",PlayerInfo[playerid][pJTime]/60);
			SendClientMessageEx(playerid, COLOR_YELLOW,String);
			return 1;
		}
		new jobid;
		if(sscanf(params, "d", jobid))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /quitjob [jobid]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available: 1, 2 (Secondary Job), 3 (Illegal Job)");
			return 1;
		}
		switch(jobid)
		{
			case 1:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit your Job.");
				PlayerInfo[playerid][pJob] = 0;
			}
			case 2:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit your Secondary Job.");
				PlayerInfo[playerid][pJob2] = 0;
			}
			case 3:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit your Illegal Job.");
				PlayerInfo[playerid][pIllegalJob] = 0;
			}
			default:
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /quitjob [jobid]");
				SendClientMessageEx(playerid, COLOR_GREY, "Available: 1, 2 (Secondary Job), 3 (Illegal Job");
			}
		}
	return 1;
}

CMD:ticket(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 7) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "  **Anda bukan anggota LSPD ataupun SASD**  ");
	{
		new String[10000], giveplayerid, moneys, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, moneys, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ticket [playerid] [harga] [alasan]");

		if(giveplayerid == playerid)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Anda tidak bisa ticket diri anda sendiri.");
			return 1;
		}

		if(moneys < 1 || moneys > 10000) { SendClientMessageEx(playerid, COLOR_GREY, "Harga ticket tidak bisa dibawah $0,01 dan diatas $100,00"); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					if(giveplayerid == playerid) return 1;

					format(String, sizeof(String), "* Anda telah diberi %s ticket seharga %s, Alasan: %s", GetPlayerNameEx(giveplayerid), FormatMoney(moneys), reason);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* Opsir %s telah memberikan anda ticket seharga %s, Alasan: %s", GetPlayerNameEx(playerid), FormatMoney(moneys), reason);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "* Ketik /accept ticket, untuk menerimanya.");
					TicketOffer[giveplayerid] = playerid;
					TicketMoney[giveplayerid] = moneys;
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Player tidak dekat dengan anda.");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	return 1;
}

CMD:arrest(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	{
		if(!IsAtArrestPoint(playerid))
		{// Jail spot
			SendClientMessageEx(playerid, COLOR_GREY, "You aren't at the arrest point.");
			return 1;
		}

		new String[10000], moneys, time;
		if(sscanf(params, "dd", moneys, time)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /arrest [price] [time (minutes)] [bail (0=no 1=yes)] [bailprice]");

		if(moneys < 1 || moneys > 30000) { SendClientMessageEx(playerid, COLOR_GREY, "The jail price can't be below $1 or above $30,000."); return 1; }
		if(time < 1 || time > 30) { SendClientMessageEx(playerid, COLOR_GREY, "Jail time can't be below 1 or above 30 minutes - take the person to prison for more time."); return 1; }
		new suspect = GetClosestPlayer(playerid);
		if(IsPlayerConnected(suspect))
		{
			if(ProxDetectorS(5.0, playerid,suspect))
			{
				if(PlayerInfo[suspect][pWantedLevel] < 1 && PlayerInfo[playerid][pMember] != 12)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "The player must have a wanted level of at least one star.");
					return 1;
				}
				format(String, sizeof(String), "* You arrested %s!", GetPlayerNameEx(suspect));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
				GivePlayerCash(suspect, -moneys);
				Tax += moneys;
				if(IsPlayerInRangeOfPoint(playerid, 4.0, -800.397094, -1877.925903, 11.668975) || IsPlayerInRangeOfPoint(playerid, 3.0,1528.4888,-1677.7632,5.8906) || IsPlayerInRangeOfPoint(playerid, 3.0,1566.4901,-1653.9076,28.3956) || IsPlayerInRangeOfPoint(playerid,4.0,680.2208,-1546.9856,14.8516) || IsPlayerInRangeOfPoint(playerid,20,1772.0134,-1548.0470,9.9070) || PlayerInfo[playerid][pVW] == 133337)
				{
					AC_BS_SetPlayerInterior(suspect, 0);
					new rand = random(sizeof(LSPDJail));
					SetPlayerFacingAngle(suspect, 0);
					AC_BS_SetPlayerPos(suspect, LSPDJail[rand][0], LSPDJail[rand][1], LSPDJail[rand][2]);
					PlayerInfo[suspect][pJailTime] = time * 60;
					DeletePVar(suspect, "IsFrozen");
					//Frozen[suspect] = 0;
					PlayerInfo[suspect][pJailed] = 1;
					PhoneOnline[suspect] = 1;
					PlayerInfo[suspect][pArrested] += 1;
					SetPlayerFree(suspect,playerid, "was arrested");
					WantedPoints[suspect] = 0;
					PlayerInfo[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					TogglePlayerControllable(suspect, 1);
					ClearAnimations(suspect);
					SetPlayerSpecialAction(suspect, SPECIAL_ACTION_NONE);
					PlayerCuffed[suspect] = 0;
					DeletePVar(suspect, "PlayerCuffed");
					PlayerCuffedTime[suspect] = 0;
					PlayerInfo[suspect][pVW] = 0;
					AC_BS_SetPlayerVirtualWorld(suspect, 0);
				}
				else if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1)
				{
				    new rand = random(sizeof(LSPDJail));
					TogglePlayerControllable(suspect, 0);
					GameTextForPlayer(suspect, "Objects loading...", 4000, 5);
					SetPVarInt(suspect, "LoadingObjects", 1);
					SetTimerEx("SafeLoadObjects", 4000, 0, "d", suspect);
					AC_BS_SetPlayerPos(suspect, LSPDJail[rand][0], LSPDJail[rand][1], LSPDJail[rand][2]);
					PlayerInfo[suspect][pJailTime] = time * 60;
					DeletePVar(suspect, "IsFrozen");
					//Frozen[suspect] = 0;
					PlayerInfo[suspect][pJailed] = 1;
					PhoneOnline[suspect] = 1;
					PlayerInfo[suspect][pArrested] += 1;
					SetPlayerFree(suspect,playerid, "was arrested");
					WantedPoints[suspect] = 0;
					PlayerInfo[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					TogglePlayerControllable(suspect, 1);
					ClearAnimations(suspect);
					PlayerCuffed[suspect] = 0;
					DeletePVar(suspect, "PlayerCuffed");
					PlayerCuffedTime[suspect] = 0;
					PlayerInfo[suspect][pVW] = 0;
					AC_BS_SetPlayerVirtualWorld(suspect, 0);
					AC_BS_SetPlayerInterior(suspect, 0);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 3.0,611.96, -587.25, 17.22))
				{
					AC_BS_SetPlayerInterior(suspect, 0);
					new rand = random(sizeof(LSPDJail));
					SetPlayerFacingAngle(suspect, 0);
					AC_BS_SetPlayerPos(suspect, LSPDJail[rand][0], LSPDJail[rand][1], LSPDJail[rand][2]);
					PlayerInfo[suspect][pJailTime] = time * 60;
					SetPVarInt(suspect, "IsFrozen", 0);
					//Frozen[suspect] = 0;
					PlayerInfo[suspect][pJailed] = 5;
					PhoneOnline[suspect] = 1;
					PlayerInfo[suspect][pArrested] += 1;
					SetPlayerFree(suspect,playerid, "was arrested");
					WantedPoints[suspect] = 0;
					PlayerInfo[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					TogglePlayerControllable(suspect, 1);
					ClearAnimations(suspect);
					PlayerCuffed[suspect] = 0;
					SetPVarInt(suspect, "PlayerCuffed", 0);
					PlayerCuffedTime[suspect] = 0;
					PlayerInfo[suspect][pVW] = 0;
					AC_BS_SetPlayerVirtualWorld(suspect, 0);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 3.0,2334.65, 566.84, 7.78) || IsPlayerInRangeOfPoint(playerid, 3.0,2182.20, 530.32, 1.19))
				{
					AC_BS_SetPlayerInterior(suspect, 0);
					new rand = random(sizeof(LSPDJail));
					SetPlayerFacingAngle(suspect, 0);
					AC_BS_SetPlayerPos(suspect, LSPDJail[rand][0], LSPDJail[rand][1], LSPDJail[rand][2]);
					PlayerInfo[suspect][pJailTime] = time * 60;
					SetPVarInt(suspect, "IsFrozen", 0);
					//Frozen[suspect] = 0;
					PlayerInfo[suspect][pJailed] = 5;
					PhoneOnline[suspect] = 1;
					PlayerInfo[suspect][pArrested] += 1;
					SetPlayerFree(suspect,playerid, "was arrested");
					WantedPoints[suspect] = 0;
					PlayerInfo[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					TogglePlayerControllable(suspect, 1);
					ClearAnimations(suspect);
					PlayerCuffed[suspect] = 0;
					SetPVarInt(suspect, "PlayerCuffed", 0);
					PlayerCuffedTime[suspect] = 0;
					PlayerInfo[suspect][pVW] = 0;
					AC_BS_SetPlayerVirtualWorld(suspect, 0);
				}
				JailPrice[suspect] = moneys;
				format(String, sizeof(String), "You are jailed for %d seconds. Fined: $%s", PlayerInfo[suspect][pJailTime], FormatMoney(JailPrice[suspect]));
				SendClientMessageEx(suspect, COLOR_ARWIN, String);
			}//distance
		}//not connected
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   No-one close enough to arrest.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Cop / FBI!");
		return 1;
	}
	return 1;
}
CMD:track(playerid, params[])
{
	new
		id,
		String[1024],
		Float:FindFloats[3];

	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, SYNTAX_MESSAGE"/track [playerid]");
		if(IsACop(playerid))
		{
	        if(IsPlayerConnected(id))
			{

				if(id == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't track yourself.");
				else if(PhoneOnline[id] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "kamu tidak dapat melacaknya karena Handphone tersangka dalam keadaan mati.");
				else if(adTick[playerid] > 1) return ShowDescriptionText(playerid, "Anda harus menunggu untuk melacak kembali");
				else if(GetPlayerInterior(id) >= 1 || GetPlayerVirtualWorld(id) >= 1)
					SendClientMessage(playerid, COLOR_GREY, "Player ini berada pada interior alternatif atau di dalam Virtual World.");
				else if(PlayerInfo[playerid][pAdminDuty] >= 1)
					SendClientMessage(playerid, COLOR_GREY, "Anda tidak dapat melacak orang ini pada saat ini.");
				else
				{
				    new location[MAX_ZONE_NAME];
					GetPlayerPos(id, FindFloats[0], FindFloats[1], FindFloats[2]);
                    GetPlayer2DZone(id, location, MAX_ZONE_NAME);
					format(String, sizeof(String), "[SATELIT TRACKER]: ** Lokasi %s terlacak sedang berada di daerah %s **", GetPlayerNameEx(id),location);
					adTick[playerid] = 60;
					SendRadioMessage(1, DEPTRADIO, String);
					SendRadioMessage(6, DEPTRADIO, String);
	            }
	        }
			else SendClientMessage(playerid, COLOR_GREY, "Player yang di maksud tidak terhubung ke server atau tidak terdaftar.");
	    }
		return 1;
}
public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
	if(weaponid == 4 && infect[playerid] == 1)
	{
		timerr = SetTimerEx("Damagee",1000,true,"i",damagedid);
		infect[playerid] = 0;
	}
	return 1;
}

public Damagee(playerid)
{
	if(damagee[playerid] == 5)
	{
		KillTimer(timerr);
		damagee[playerid] = 0;
		removePlayerWeapon(playerid, 4);
		return 0;
	}
	new Float:hp;
	GetPlayerHealth(playerid, hp);
	SetPlayerHealth(playerid, hp-10);
	damagee[playerid]++;
	return 1;
}

public OnPlayerShootPlayer(Shooter, Target, Float:HealthLost, Float:ArmourLost)
{
	    new Float:health, Float:armour;
	    GetPlayerHealth(Target,health);
	    GetPlayerArmour(Target,armour);
	    if(ArmourLost > 0.0) AC_BS_SetPlayerArmour(Target,floatadd(armour,ArmourLost));
	    if(HealthLost > 0.0) AC_BS_SetPlayerHealth(Target,floatadd(health,HealthLost));
	    new Damageee;
	    switch(GetPlayerWeapon(Shooter))
		{
	        case 24: Damageee = 5;                     //case [weaponid]: Damage = [damage];
	        case 32,28: Damageee = 5;                  //Tec9 & Micru-Uzi
	        case 29: Damageee = 6;
	        case 0: Damageee = 2;
	        case 22: Damageee = 9;
	        case 9 : Damageee = 0;
	        case 23: Damageee = 7;
	        case 5,1,3,6,7,2: Damageee = 3;
	        case 4: Damageee = 10;
	        case 25: Damageee = 6;
	        case 27: Damageee = 10;
	        case 26: Damageee = 11;
	        case 30: Damageee = 5;
	        case 31: Damageee = 3;
	        case 34: Damageee = 90;
	        case 33: Damageee = 8;
	    }
	    armour = armour - Damageee;
	    if(armour < 0.0)
		{
		    /*if(PlayerInfo[Target][pBandage] > 0)
		    {
	        	health += armour/2;
	        	SendFormattedMessage(Target, COLOR_ARWIN, "BANDAGE: You've got Shoot and you lose %.1f health", armour/2);
			}
			else
			{
			    health += armour;//Health will decrease because armour is negative. (a + (-b) = a - b)
			}*/
			health += armour;//Health will decrease because armour is negative. (a + (-b) = a - b)
	        if(health <= 0.0)
			{
	            health = 0.0;
	        }
	        armour = 0.0;
	    }
	    AC_BS_SetPlayerHealth(Target, health);
	    PlayerInfo[Target][pHealth] = health;
	    AC_BS_SetPlayerArmour(Target, armour);
	    PlayerInfo[Target][pArmor] = armour;
	    PlayerInfo[Target][pCondition] -= 2;
	    ShowBloodScreen(Target, HealthLost);
    	return 1;
}
public OnPlayerCommandText(playerid,cmdtext[])
{
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    assert( AntiFlood_Check( playerid ) );
	if(!success) ShowDescriptionText(playerid, "~w~Perintah tidak diketahui, gunakan ~g~'/help' ~w~untuk info");
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	playerLastTyped[playerid] = 0;
	printf("[ZCMD] [%s]: %s", GetName(playerid), cmdtext);

	if(gPlayerLogged{playerid} != 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "You are not logged in.");
		return 0;
	}

	if(GetPVarInt(playerid, "LoadingObjects") == 1)
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 0;
	}

	if(PlayerInfo[playerid][pMuted] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You cannot speak, you have been silenced!");
		return 0;
	}


	if(CommandSpamUnmute[playerid] != 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 1)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You are muted from submitting commands right now.");
			return 0;
		}
	}

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
		CommandSpamTimes[playerid]++;

		if(CommandSpamTimes[playerid] == 5)
		{
			CommandSpamTimes[playerid] = 0;
			CommandSpamUnmute[playerid] = 10;
			SendClientMessageEx(playerid, COLOR_YELLOW, "You have been muted automatically for spamming. Please wait 10 seconds and try again.");
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);\
			return 0;
		}
	}


	if(strfind(cmdtext, "|", true) != -1)
	{
	    SendClientMessageEx(playerid, COLOR_RED, "You cannot use the '|' character in commands.");
		return 0;
	}

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
		if(strfind(cmdtext, ":", true) != -1)
		{

			new
				i_numcount,
				i_period,
				i_pos;

			while(cmdtext[i_pos]) {
				if('0' <= cmdtext[i_pos] <= '9') i_numcount++;
				else if(cmdtext[i_pos] == '.') i_period++;
				i_pos++;
			}
			if(i_numcount >= 8 && i_period >= 3) {
				new String[10000];
				format(String,sizeof(String),"Warning: %s may be server advertising: '%s'.", GetPlayerNameEx(playerid),cmdtext);
				SendAdminMessage(COLOR_RED, String);
				return 0;
			}
		}
	}
	return 1;
}

ProxDetector(Float: f_Radius, playerid, string[],col1,col2,col3,col4,col5) {
	if(WatchingTV[playerid] != 1) {

		new
			Float: f_playerPos[3];

		GetPlayerPos(playerid, f_playerPos[0], f_playerPos[1], f_playerPos[2]);
		foreach(Player, i) {
			if(!BigEar[i]) {
				if((InsideShamal[playerid] == GetPlayerVehicleID(i) && GetPlayerState(i) == 2) || (InsideShamal[i] == GetPlayerVehicleID(playerid) && GetPlayerState(playerid) == 2) || (InsideShamal[playerid] != INVALID_VEHICLE_ID && InsideShamal[playerid] == InsideShamal[i])) {
					SendClientMessageEx(i, col1, string);
				}
				else if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
					if(IsPlayerInRangeOfPoint(i, f_Radius / 16, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
						SendClientMessageEx(i, col1, string);
					}
					else if(IsPlayerInRangeOfPoint(i, f_Radius / 8, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
						SendClientMessageEx(i, col2, string);
					}
					else if(IsPlayerInRangeOfPoint(i, f_Radius / 4, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
						SendClientMessageEx(i, col3, string);
					}
					else if(IsPlayerInRangeOfPoint(i, f_Radius / 2, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
						SendClientMessageEx(i, col4, string);
					}
					else if(IsPlayerInRangeOfPoint(i, f_Radius, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
						SendClientMessageEx(i, col5, string);
					}
				}
			}
			else SendClientMessageEx(i, col1, string);
		}
	}
	return 1;
}
ProxDetectorS(Float:radi, playerid, targetid) {

	if(WatchingTV[playerid] != 1)
	{
	    if(Spectating[targetid] != 0 && PlayerInfo[playerid][pAdmin] < 2)
	    {
	    	return 0;
	    }

		new
			Float: fp_playerPos[3];

		GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);

		if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
		{
			return 1;
		}
	}
	return 0;
}

stock PositionToPoint(Float:radi, Float:posx, Float:posy, Float:posz, Float:pointx, Float:pointy, Float:pointz)
{
	new Float:tempposx, Float:tempposy, Float:tempposz;
	tempposx = (posx -pointx);
	tempposy = (posy -pointy);
	tempposz = (posz -pointz);
	//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

public OnPlayerText(playerid, text[])
{
	new String[256];
	if(AntiAdv(playerid, text)) return 1;
	assert( AntiFlood_Check( playerid ) );
	SetPlayerChatBubble(playerid, text, COLOR_WHITE, 10.0, 3000);
	if(gPlayerLogged{playerid} != 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "You are not logged in.");
		return 0;
	}
	//NPC Bus
    if(Playerx[playerid] != 0)
	{
	    return 0;
	}
	if(BusID[playerid] > 0)
	{
		for(new i=0; i<MAX_PLAYERS; i++)
		{
			if(Playerx[i] != 0)
			{
                if(BusID[playerid] == BusID[i])
				{
				   	GetPlayerName(playerid, String, sizeof(String));
			        if(togaccent[playerid] == 0)
			        {
					    format(String, sizeof(String), "%s says: %s", String, text);
					    SetPlayerChatBubble(playerid, String, COLOR_WHITE, 10.0, 3000);
					}
					if(togaccent[playerid] == 1)
					{
					    format(String, sizeof(String), "%s says [%s Accent]: %s", String, PlayerInfo[playerid][pAccent], text);
					    SetPlayerChatBubble(playerid, String, COLOR_WHITE, 10.0, 3000);
					}
                    if(IsPlayerInRangeOfPoint(playerid, 10/16, Playerx[i], Playery[i], Playerz[i]))
                    {
                        SendClientMessage(i, 0xE6E6E6E6, String);
                        SetPlayerChatBubble(playerid, String, COLOR_WHITE, 10.0, 3000);
                    }
                    else if(IsPlayerInRangeOfPoint(playerid, 10/8, Playerx[i], Playery[i], Playerz[i]))
			        {
                        SendClientMessage(i, 0xC8C8C8C8, String);
                        SetPlayerChatBubble(playerid, String, COLOR_WHITE, 10.0, 3000);
                    }
                    else if(IsPlayerInRangeOfPoint(playerid, 10/4, Playerx[i], Playery[i], Playerz[i]))
			        {
                        SendClientMessage(i, 0xAAAAAAAA, String);
                        SetPlayerChatBubble(playerid, String, COLOR_WHITE, 10.0, 3000);
                    }
                    else if(IsPlayerInRangeOfPoint(playerid, 10/2, Playerx[i], Playery[i], Playerz[i]))
			        {
                        SendClientMessage(i, 0x8C8C8C8C, String);
                        SetPlayerChatBubble(playerid, String, COLOR_WHITE, 10.0, 3000);
                    }
                    else if(IsPlayerInRangeOfPoint(playerid, 10, Playerx[i], Playery[i], Playerz[i]))
			        {
                        SendClientMessage(i, 0x6E6E6E6E, String);
                        SetPlayerChatBubble(playerid, String, COLOR_WHITE, 10.0, 3000);
                    }
	                return 1;
                }
		    }
        }
        GetPlayerName(playerid, String, sizeof(String));
        if(togaccent[playerid] == 0)
        {
		    format(String, sizeof(String), "%s says: %s", String, text);
		    ProxDetector(10, playerid, String, 0xE6E6E6E6, 0xC8C8C8C8, 0xAAAAAAAA, 0x8C8C8C8C, 0x6E6E6E6E);
		    SetPlayerChatBubble(playerid, text, COLOR_WHITE, 10.0, 3000);
		}
		if(togaccent[playerid] == 1)
		{
		    format(String, sizeof(String), "%s says [%s Accent]: %s", String, PlayerInfo[playerid][pAccent], text);
		    ProxDetector(10, playerid, String, 0xE6E6E6E6, 0xC8C8C8C8, 0xAAAAAAAA, 0x8C8C8C8C, 0x6E6E6E6E);
		    SetPlayerChatBubble(playerid, String, COLOR_WHITE, 10.0, 3000);
		}
	    return 0;
    }
	//mask
	if(PlayerInfo[playerid][pMaskUse] == 1)
	{
		format(String, sizeof(String), "Mask %d says: %s", PlayerInfo[playerid][pMaskID], text);
		ProxDetector(20.0, playerid, String,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		SetPlayerChatBubble(playerid, String, COLOR_WHITE, 10.0, 3000);
		return 0;
	}
	if(PlayerInfo[playerid][pAdminDuty] >= 1)
	{
		format(String, sizeof(String), "(( {FF0000}%s : {FFFFFF} %s ))", PlayerInfo[playerid][pAdminName], text);
		ProxDetector(20.0, playerid, String,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		SetPlayerChatBubble(playerid, text, COLOR_WHITE, 10.0, 3000);
		return 0;
	}
	if( IsPlayerInRangeOfPoint(playerid, 50.0, -498.3253, -1330.9117, -28.1434) )
	{
	    if(PlayerInfo[playerid][pAdminDuty] >= 1)
		{
			format(String, sizeof(String), "(( [OOC] %s : {00FFFF}%s ))", PlayerInfo[playerid][pAdminName], text);
			ProxDetector(35.0, playerid, String,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid, text, COLOR_PURPLE, 10.0, 3000);
			return 1;
		}
 		format(String, sizeof(String), "(( [OOC] %s : {00FFFF}%s ))", GetName(playerid), text);
   		ProxDetector(35.0, playerid, String, 0xE6E6E6E6, 0xC8C8C8C8, 0xAAAAAAAA, 0x8C8C8C8C, 0x6E6E6E6E);
	    SetPlayerChatBubble(playerid, text, COLOR_PURPLE, 10.0, 3000);
   		return 0;
	}

	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	playerLastTyped[playerid] = 0;
	if(TextSpamUnmute[playerid] != 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 1)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You are muted from submitting text right now.");
			return 0;
		}
	}

	if(PlayerInfo[playerid][pMuted] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You cannot speak, you have been silenced!");
		return 0;
	}

	if(PlayerInfo[playerid][pAdmin] < 1) {
		if(strfind(text, ":", true) != -1) {
			new
				i_numcount,
				i_period,
				i_pos;

			while(text[i_pos]) {
				if('0' <= text[i_pos] <= '9') i_numcount++;
				else if(text[i_pos] == '.') i_period++;
				i_pos++;
			}
			if(i_numcount >= 8 && i_period >= 3) {
				format(String,sizeof(String),"Warning: %s may be server advertising: '%s'.", GetName(playerid),text);
				SendAdminMessage(COLOR_RED, String);
				return 0;
			}
		}
	}

	if(MarriageCeremoney[playerid] > 0)
	{
		if (strcmp("yes", text, true) == 0)
		{
			if(GotProposedBy[playerid] < 999)
			{
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(String, sizeof(String), "Priest: %s do you take %s as your lovely wife? (Type 'yes' - anything else will reject the marriage).", giveplayer,sendername);
					SendClientMessageEx(GotProposedBy[playerid], COLOR_WHITE, String);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0; // Yeah... no more "YES DILDOS SEX RAPE LOL" broadcast to the whole server
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0;
				}
			}
			else if(ProposedTo[playerid] < 999)
			{
				if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(String, sizeof(String), "Priest: %s and %s i pronounce you now... Husband & Wife, you may kiss the bride.", sendername, giveplayer);
						SendClientMessageEx(playerid, COLOR_WHITE, String);
				   		format(String, sizeof(String), "Priest: %s and %s i pronounce you now... Husband & Wife, you may kiss the groom.", giveplayer, sendername);
						SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, String);
						format(String, sizeof(String), "Marriage News: We have a new lovely couple! {FFFF00}%s {FFFFFF}& {FFFF00}%s have been married.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, String);
					}
					else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 1)
					{
						format(String, sizeof(String), "Priest: %s and %s i pronounce you now... Husband & Husband, you may kiss the bride.", sendername, giveplayer);
						SendClientMessageEx(playerid, COLOR_WHITE, String);
				   		format(String, sizeof(String), "Priest: %s and %s i pronounce you now... Husband & Husband, you may kiss the groom.", giveplayer, sendername);
						SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, String);
						format(String, sizeof(String), "Marriage News: We have a new gay couple! {FFFF00}%s {FFFFFF}& {FFFF00}%s have been married.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, String);
					}
					else if(PlayerInfo[playerid][pSex] == 2 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(String, sizeof(String), "Priest: %s and %s i pronounce you now... Wife & Wife, you may kiss the Bride.", sendername, giveplayer);
						SendClientMessageEx(playerid, COLOR_WHITE, String);
				   		format(String, sizeof(String), "Priest: %s and %s i pronounce you now... Wife & Wife, you may kiss the Groom.", giveplayer, sendername);
						SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, String);
						format(String, sizeof(String), "Marriage News: We have a new lesbian couple! {FFFF00}%s {FFFFFF}& {FFFF00}%s have been married.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, String);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(PlayerInfo[ProposedTo[playerid]][pMarriedTo], MAX_PLAYER_NAME, "%s", sendername);
					format(PlayerInfo[playerid][pMarriedTo], MAX_PLAYER_NAME, "%s", giveplayer);
					GivePlayerCash(playerid, - 10000);
					PlayerInfo[playerid][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pMarried] = 1;
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					ProposedTo[playerid] = 999;
					return 0;
				}
			}
		}
		else
		{
			if(GotProposedBy[playerid] < 999)
			{
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					format(String, sizeof(String), "* You didn't want to marry %s, no 'yes' was said.", GetPlayerNameEx(GotProposedBy[playerid]));
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					format(String, sizeof(String), "* %s did't want to marry you, no 'yes' was said.",GetPlayerNameEx(playerid));
					SendClientMessageEx(GotProposedBy[playerid], COLOR_YELLOW, String);
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0;
				}
			}
			else if(ProposedTo[playerid] < 999)
			{
				if(IsPlayerConnected(ProposedTo[playerid]))
				{
					format(String, sizeof(String), "* You didn't want to marry %s, no 'yes' was said.",GetPlayerNameEx(ProposedTo[playerid]));
					SendClientMessageEx(playerid, COLOR_YELLOW, String);
					format(String, sizeof(String), "* %s did't want to marry you, no 'yes' was said.",GetPlayerNameEx(playerid));
					SendClientMessageEx(ProposedTo[playerid], COLOR_YELLOW, String);
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					ProposedTo[playerid] = 999;
					return 0;
				}
			}
		}
		return 0;
	}
	if(TalkingLive[playerid] != INVALID_PLAYER_ID)
	{
		if(PlayerInfo[playerid][pJob] == 6 || PlayerInfo[playerid][pJob2] == 6)
		{
			format(String, sizeof(String), "[LIVE] %s: %s", GetPlayerNameEx(playerid), text);
			OOCNews(COLOR_LIGHTGREEN, String);
		}
		else
		{
			format(String, sizeof(String), "[LIVE] %s: %s", GetPlayerNameEx(playerid), text);
			OOCNews(COLOR_LIGHTGREEN, String);
		}
		return 0;
	}
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
	    new location[MAX_ZONE_NAME];
	    GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
		format(String, sizeof(String), "%s says (Cellphone): %s",GetPlayerNameEx(playerid), text);
		ProxDetector(20.0, playerid, String,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		if(Mobile[playerid] == 914)
		{
			if(!text[0])
			{
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Dispatch: Sorry, I don't understand?");
				return 0;
			}
			SendFamilyMessage(4, COLOR_PINK, "Emergency Services");
            format(String, sizeof(String), "Description: %s", text);
			SendFamilyMessage(4, COLOR_PINK, String);
			format(String, sizeof(String), "Dispatch Name: [%s] Ph: [%d]", GetPlayerNameEx(playerid), PlayerInfo[playerid][pPnumber]);
			SendFamilyMessage(4, COLOR_PINK, String);

			CalledMedics[playerid] = 1;
			MedicsCallTime[playerid] = 60;
			ShowPlayerBeaconForMedics(playerid);
			Mobile[playerid] = INVALID_PLAYER_ID;
			return 0;
		}
		if(Mobile[playerid] == 888)
		{
		    SendFamilyMessage(6, COLOR_TWAQUA, "SAGS Call Center");
			format(String, sizeof(String), "Description: %s", text);
			SendFamilyMessage(6, COLOR_TWAQUA, String);
			format(String, sizeof(String), "Dispatch Name: [%s] Ph: [%d]", GetPlayerNameEx(playerid), PlayerInfo[playerid][pPnumber]);
			SendFamilyMessage(6, COLOR_TWAQUA, String);
			Mobile[playerid] = INVALID_PLAYER_ID;
			return 0;
		}
		if(Mobile[playerid] == 777)
		{
		    SendFamilyMessage(4, COLOR_PINK, "Non-Emergency Services");
			format(String, sizeof(String), "Description: %s", text);
			SendFamilyMessage(4, COLOR_PINK, String);
			format(String, sizeof(String), "Dispatch Name: [%s] Ph: [%d]", GetPlayerNameEx(playerid), PlayerInfo[playerid][pPnumber]);
			SendFamilyMessage(4, COLOR_PINK, String);
			Mobile[playerid] = INVALID_PLAYER_ID;
			return 0;
		}
		if(Mobile[playerid] == 555)
		{
		    SendFamilyMessage(1, COLOR_DBLUE, "Non-Emergency Services");
			format(String, sizeof(String), "Description: %s", text);
			SendFamilyMessage(1, COLOR_DBLUE, String);
			format(String, sizeof(String), "Dispatch Name: [%s] Ph: [%d]", GetPlayerNameEx(playerid), PlayerInfo[playerid][pPnumber]);
			SendFamilyMessage(1, COLOR_DBLUE, String);
			Mobile[playerid] = INVALID_PLAYER_ID;
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
		    SendFamilyMessage(1, COLOR_DBLUE, "Emergency Services");
			format(String, sizeof(String), "Crime Description: %s", text);
			SendFamilyMessage(1, COLOR_DBLUE, String);
			format(String, sizeof(String), "Dispatch Name: [%s] Ph: [%d]", GetPlayerNameEx(playerid), PlayerInfo[playerid][pPnumber]);
			SendFamilyMessage(1, COLOR_DBLUE, String);
			CalledCops[playerid] = 1;
			CopsCallTime[playerid] = 60;
			ShowPlayerBeaconForCops(playerid);
			Mobile[playerid] = INVALID_PLAYER_ID;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!text[0])
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand - police or paramedic?");
				return 0;
			}
			else if (strcmp("police", text, true) == 0)
			{
				SendClientMessageEx(playerid, COLOR_DBLUE, "EMERGENCY: I am patching you to San Andreas Police Department headquarters, please hold...");
				Mobile[playerid] = 913;
				SendClientMessageEx(playerid, COLOR_DBLUE, "Police HQ: Please give me a short description of the crime.");
				return 0;
			}
			else if (strcmp("paramedic", text, true) == 0)
			{
				SendClientMessageEx(playerid, COLOR_PINK, "EMERGENCY: I am patching you to San Andreas Medical Department headquarters, please hold...");
				Mobile[playerid] = 914;
				SendClientMessageEx(playerid, COLOR_PINK, "Dispatch: Please give me a short description of the incident.");
				return 0;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand - police or paramedic?");
				return 0;
			}
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(Mobile[Mobile[playerid]] == playerid)
			{
			   format(String, sizeof(String), "Celler says (Cellphone): %s", text);
			   SendClientMessageEx(Mobile[playerid], COLOR_WHITE, String);
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_YELLOW,"There's nobody there!");
		}
		return 0;
	}
 	sendername = GetPlayerNameEx(playerid);
	if( PlayerInfo[playerid][pAdminDuty] == 0)
	{
	    if(PlayerInfo[playerid][pMaskUse] == 1)
		{
			format(String, sizeof(String), "Mask %d says: %s",PlayerInfo[playerid][pMaskID], text);
			ProxDetector(20.0, playerid,String,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
		else
		{
		    if(togaccent[playerid] == 0)
		    {
				format(String, sizeof(String), "%s says: %s", sendername, text);
			}
			else if(togaccent[playerid] == 1)
			{
				format(String, sizeof(String), "%s says [%s Accent]: %s", sendername, PlayerInfo[playerid][pAccent], text);
			}
			ProxDetector(20.0, playerid,String,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
	}
	return 0;
}

public SetCamBack(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		AC_BS_SetPlayerPos(playerid, -1863.15, -21.6598, 1060.15); // Warp the player
		AC_BS_SetPlayerInterior(playerid,14);
	}
}
public FixHour(hour)
{
	//hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}
//----------------------[ Remove Bomb ]-----------------------
stock ShowEditMenu(playerid)
{
    new Stringg[512];
    format(Stringg, sizeof(Stringg), "%sBone (%s)\nPostition Toys", Stringg, HoldingBones[PlayerToyInfo[playerid][slotselection[playerid]][ptBone]]);
 	ShowPlayerDialog(playerid, EDITTOYS2, DIALOG_STYLE_LIST, "Toy Menu: Edit", Stringg, "Select", "Cancel");
}

public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ,Float:fRotX, Float:fRotY, Float:fRotZ,Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
	//GUN HOLDING
    if (EditingWeapon[playerid])
	{
		if (response)
		{
			new weaponname[18], string[80];

			GetWeaponName(EditingWeapon[playerid], weaponname, sizeof(weaponname));

			WeaponInfo[playerid][EditingWeapon[playerid]][Position][0] = fOffsetX;
			WeaponInfo[playerid][EditingWeapon[playerid]][Position][1] = fOffsetY;
			WeaponInfo[playerid][EditingWeapon[playerid]][Position][2] = fOffsetZ;
			WeaponInfo[playerid][EditingWeapon[playerid]][Position][3] = fRotX;
			WeaponInfo[playerid][EditingWeapon[playerid]][Position][4] = fRotY;
			WeaponInfo[playerid][EditingWeapon[playerid]][Position][5] = fRotZ;

			RemovePlayerAttachedObject(playerid, GetWeaponObjectSlot(EditingWeapon[playerid]));
			SetPlayerAttachedObject(playerid, GetWeaponObjectSlot(EditingWeapon[playerid]), GetWeaponModel(EditingWeapon[playerid]), WeaponInfo[playerid][EditingWeapon[playerid]][Bone], fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, 1.000000, 1.000000, 1.000000);

			format(string, sizeof(string), "You have successfully adjusted the position of your %s.", weaponname);
			SendClientMessage(playerid, -1, string);
		}
		EditingWeapon[playerid] = 0;
	}
	SetPlayerAttachedObject(playerid,index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);
    PlayerToyInfo[playerid][index][ptModelID] = modelid;
	PlayerToyInfo[playerid][index][ptBone] = boneid;
	PlayerToyInfo[playerid][index][ptPosX] = fOffsetX;
	PlayerToyInfo[playerid][index][ptPosY] = fOffsetY;
	PlayerToyInfo[playerid][index][ptPosZ] = fOffsetZ;
	PlayerToyInfo[playerid][index][ptRotX] = fRotX;
	PlayerToyInfo[playerid][index][ptRotY] = fRotY;
	PlayerToyInfo[playerid][index][ptRotZ] = fRotZ;
	PlayerToyInfo[playerid][index][ptScaX] = fScaleX;
	PlayerToyInfo[playerid][index][ptScaY] = fScaleY;
	PlayerToyInfo[playerid][index][ptScaZ] = fScaleZ;
    return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    new vehid = GetClosestCar(playerid);
	new vehmd = GetVehicleModel(vehid);
	new sendername[MAX_PLAYER_NAME];
	new String[512];
	// Crash Bug Fix
	if(!IsNull(inputtext))
	{
	    if(strfind(inputtext, "%s", true) != -1)
	    {
			format(String, sizeof(String), "{FF6347}AdmCmd: %s (ID %d) is possibly dialog-exploiting by attempting to send a null String.", GetName(playerid), playerid);
  			ABroadCast(COLOR_YELLOW, String, 1);

  			format(String, sizeof(String), "%s has attempted to insert a false String placeholder into a dialog.", GetName(playerid));
  			Log("logs/crash.log", String);
  			Kick(playerid);
	        return 1;
		}
	}
	if (dialogid == DIALOG_EDIT_BONE)
	{
		if (response)
		{
			new weaponname[18], string[68];

			GetWeaponName(EditingWeapon[playerid], weaponname, sizeof(weaponname));
			WeaponInfo[playerid][EditingWeapon[playerid]][Bone] = listitem + 1;

			format(string, sizeof(string), "You have successfully changed the bone of your %s.", weaponname);
			SendClientMessage(playerid, -1, string);
		}
		EditingWeapon[playerid] = 0;
	}
	if(dialogid == BUGGED)
	{
	    if(!response) return 1;
		if(response)
		{
		    if(listitem == 0)
		    {
				if(GetPVarInt(playerid, "IsFrozen") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Anda tidak bisa melakukannya saat terkena Tazer");
				format(String,sizeof(String), "[STUCK]%s[id:%d] Freeze bug while Spawn or Death.", GetName(playerid), playerid);
				ABroadCast(COLOR_REPORT, String, 1);
				SendClientMessage(playerid, COLOR_YELLOW, "REPORTINFO: Report anda telah dikirim ke Administrator yang online");
				return 1;
			}
			if(listitem == 1)
			{
				format(String,sizeof(String), "[STUCK]%s[id:%d] Wrong World ID (WWID) (vw: %d, int: %d, jailed: %d)",GetName(playerid), playerid, PlayerInfo[playerid][pVW], PlayerInfo[playerid][pInt], PlayerInfo[playerid][pJailed]);
                ABroadCast(COLOR_REPORT, String, 1);
                SendClientMessage(playerid, COLOR_YELLOW, "REPORTINFO: Report anda telah dikirim ke Administrator yang online");
				return 1;
			}
			if(listitem == 2)
			{
				format(String,sizeof(String), "[STUCK]%s[id:%d] Stuck at someone property or entraance (vw: %d, int: %d, jailed: %d)",GetName(playerid), playerid, PlayerInfo[playerid][pVW], PlayerInfo[playerid][pInt], PlayerInfo[playerid][pJailed]);
				ABroadCast(COLOR_REPORT, String, 1);
				SendClientMessage(playerid, COLOR_YELLOW, "REPORTINFO: Report anda telah dikirim ke Administrator yang online");
				return 1;
			}
			if(listitem == 3)
			{
				format(String,sizeof(String), "[STUCK]%s[id:%d] Spawn at Blueberry (vw: %d, int: %d, jailed: %d)",GetName(playerid), playerid, playerid, PlayerInfo[playerid][pVW], PlayerInfo[playerid][pInt], PlayerInfo[playerid][pJailed]);
				ABroadCast(COLOR_REPORT, String, 1);
				SendClientMessage(playerid, COLOR_YELLOW, "REPORTINFO: Report anda telah dikirim ke Administrator yang online");
				return 1;
			}
		}
	}
	if( dialogid == BUSINESESS+1) //Business Name
	{
	    if(response)
		{
			new id = PlayerInfo[playerid][pPBiskey];
			if(BizzInfo[id][bSegel] == 0)
			{
				format(BizzInfo[id][bMessage], 255, "%s", ColouredText(inputtext));
				format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s{FFFFFF}\nOwner: {FFFF00}%s",id, BizzInfo[id][bMessage], BizzInfo[id][bOwner]);
				UpdateDynamic3DTextLabelText(business1[id], COLOR_WHITE, String);
				format(String, sizeof(String), "BUSINESS: {FFFFFF}Business name set to %s",BizzInfo[id][bMessage]);
				SendClientMessage(playerid, COLOR_ARWIN, String);
			}
			else SendClientMessage(playerid, -1, "ERROR: Bisnis anda sedang dalam keadaan tersegel");
		}
		return 1;
	}
    if(dialogid == BUSINESESS+2)//Business Product Name Editor
	{
		if(response)
		{
			if(listitem == 0) { ShowPlayerDialog( playerid, 15814, DIALOG_STYLE_INPUT, "Product Name","Product ini dinamai apa?", "Edit", "Cancel" ); }
			if(listitem == 1) { ShowPlayerDialog( playerid, 15815, DIALOG_STYLE_INPUT, "Product Name","Product ini dinamai apa?", "Edit", "Cancel" ); }
			if(listitem == 2) { ShowPlayerDialog( playerid, 15816, DIALOG_STYLE_INPUT, "Product Name","Product ini dinamai apa?", "Edit", "Cancel" ); }
			if(listitem == 3) { ShowPlayerDialog( playerid, 15817, DIALOG_STYLE_INPUT, "Product Name","Product ini dinamai apa?", "Edit", "Cancel" ); }
			if(listitem == 4) { ShowPlayerDialog( playerid, 15818, DIALOG_STYLE_INPUT, "Product Name","Product ini dinamai apa?", "Edit", "Cancel" ); }
			if(listitem == 5) { ShowPlayerDialog( playerid, 15819, DIALOG_STYLE_INPUT, "Product Name","Product ini dinamai apa?", "Edit", "Cancel" ); }
			if(listitem == 6) { ShowPlayerDialog( playerid, 15820, DIALOG_STYLE_INPUT, "Product Name","Product ini dinamai apa?", "Edit", "Cancel" ); }
			if(listitem == 7) { ShowPlayerDialog( playerid, 15821, DIALOG_STYLE_INPUT, "Product Name","Product ini dinamai apa?", "Edit", "Cancel" ); }
			if(listitem == 8) { ShowPlayerDialog( playerid, 15822, DIALOG_STYLE_INPUT, "Product Name","Product ini dinamai apa?", "Edit", "Cancel" ); }
			if(listitem == 9) { ShowPlayerDialog( playerid, 15823, DIALOG_STYLE_INPUT, "Product Name","Product ini dinamai apa?", "Edit", "Cancel" ); }
			if(listitem == 10) { ShowPlayerDialog( playerid, 15824, DIALOG_STYLE_INPUT, "Product Name","Product ini dinamai apa?", "Edit", "Cancel" ); }
		}
		return 1;
	}
	if( dialogid == 15814) {
    if(response) { format(BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductName1], 255, "%s", inputtext); } return 1; }
	if( dialogid == 15815) {
	if(response) { format(BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductName2], 255, "%s", inputtext); } return 1; }
    if( dialogid == 15816) {
	if(response) { format(BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductName3], 255, "%s", inputtext); } return 1; }
    if( dialogid == 15817) {
	if(response) { format(BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductName4], 255, "%s", inputtext); } return 1; }
    if( dialogid == 15818) {
	if(response) { format(BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductName5], 255, "%s", inputtext); } return 1; }
    if( dialogid == 15819) {
	if(response) { format(BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductName6], 255, "%s", inputtext); } return 1; }
    if( dialogid == 15820) {
	if(response) { format(BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductName7], 255, "%s", inputtext); } return 1; }
    if( dialogid == 15821) {
	if(response) { format(BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductName8], 255, "%s", inputtext); } return 1; }
    if( dialogid == 15822) {
	if(response) { format(BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductName9], 255, "%s", inputtext); } return 1; }
	if( dialogid == 15823) {
	if(response) { format(BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductName10], 255, "%s", inputtext); } return 1; }
	if( dialogid == 15824) {
	if(response) { format(BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductName11], 255, "%s", inputtext); } return 1; }

    if(dialogid == BUSINESESS+3)//Business Product Price Editor
	{
		if(response)
		{
			if(listitem == 0) { ShowPlayerDialog( playerid, 15786, DIALOG_STYLE_INPUT, "Price Editor","Stock slot ini dihargai berapa?", "Edit", "Cancel" ); }
			if(listitem == 1) { ShowPlayerDialog( playerid, 15787, DIALOG_STYLE_INPUT, "Price Editor","Stock slot ini dihargai berapa?", "Edit", "Cancel" ); }
			if(listitem == 2) { ShowPlayerDialog( playerid, 15788, DIALOG_STYLE_INPUT, "Price Editor","Stock slot ini dihargai berapa?", "Edit", "Cancel" ); }
			if(listitem == 3) { ShowPlayerDialog( playerid, 15789, DIALOG_STYLE_INPUT, "Price Editor","Stock slot ini dihargai berapa?", "Edit", "Cancel" ); }
			if(listitem == 4) { ShowPlayerDialog( playerid, 15790, DIALOG_STYLE_INPUT, "Price Editor","Stock slot ini dihargai berapa?", "Edit", "Cancel" ); }
			if(listitem == 5) { ShowPlayerDialog( playerid, 15791, DIALOG_STYLE_INPUT, "Price Editor","Stock slot ini dihargai berapa?", "Edit", "Cancel" ); }
			if(listitem == 6) { ShowPlayerDialog( playerid, 15792, DIALOG_STYLE_INPUT, "Price Editor","Stock slot ini dihargai berapa?", "Edit", "Cancel" ); }
			if(listitem == 7) { ShowPlayerDialog( playerid, 15793, DIALOG_STYLE_INPUT, "Price Editor","Stock slot ini dihargai berapa?", "Edit", "Cancel" ); }
			if(listitem == 8) { ShowPlayerDialog( playerid, 15794, DIALOG_STYLE_INPUT, "Price Editor","Stock slot ini dihargai berapa?", "Edit", "Cancel" ); }
			if(listitem == 9) { ShowPlayerDialog( playerid, 15795, DIALOG_STYLE_INPUT, "Price Editor","Stock slot ini dihargai berapa?", "Edit", "Cancel" ); }
			if(listitem == 10) { ShowPlayerDialog( playerid, 15796, DIALOG_STYLE_INPUT, "Price Editor","Stock slot ini dihargai berapa?", "Edit", "Cancel" ); }
		}
		return 1;
	}
    if( dialogid == 15786) { if(strval(inputtext) < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Invalid amount"); return 1; }
    if(response) { BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductPrice][0] = strval(inputtext); } return 1; }
	if( dialogid == 15787) { if(strval(inputtext) < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Invalid amount"); return 1; }
	if(response) { BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductPrice][1] = strval(inputtext); } return 1; }
    if( dialogid == 15788) { if(strval(inputtext) < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Invalid amount"); return 1; }
	if(response) { BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductPrice][2] = strval(inputtext); } return 1; }
    if( dialogid == 15789) { if(strval(inputtext) < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Invalid amount"); return 1; }
	if(response) { BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductPrice][3] = strval(inputtext); } return 1; }
    if( dialogid == 15790) { if(strval(inputtext) < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Invalid amount"); return 1; }
	if(response) { BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductPrice][4] = strval(inputtext); } return 1; }
    if( dialogid == 15791) { if(strval(inputtext) < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Invalid amount"); return 1; }
	if(response) { BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductPrice][5] = strval(inputtext); } return 1; }
    if( dialogid == 15792) { if(strval(inputtext) < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Invalid amount"); return 1; }
	if(response) { BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductPrice][6] = strval(inputtext); } return 1; }
    if( dialogid == 15793) { if(strval(inputtext) < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Invalid amount"); return 1; }
	if(response) { BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductPrice][7] = strval(inputtext); } return 1; }
    if( dialogid == 15794) { if(strval(inputtext) < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Invalid amount"); return 1; }
	if(response) { BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductPrice][8] = strval(inputtext); } return 1; }
	if( dialogid == 15795) { if(strval(inputtext) < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Invalid amount"); return 1; }
	if(response) { BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductPrice][9] = strval(inputtext); } return 1; }
	if( dialogid == 15796) { if(strval(inputtext) < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Invalid amount"); return 1; }
	if(response) { BizzInfo[PlayerInfo[playerid][pPBiskey]][bProductPrice][10] = strval(inputtext); } return 1; }

	if( dialogid == BUSINESESS+4) //Business Money Store
	{
	    if(response)
		{
			new id = PlayerInfo[playerid][pInBizz];
			if(strval(inputtext) > GetPlayerCash(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki uang sebanyak itu");
			BizzInfo[id][bTill] += strval(inputtext);
			GivePlayerCash(playerid, -strval(inputtext));
			format(String, sizeof(String), "BUSINESS: {ffffff}You've stored $%s to Business Bank", FormatMoney(strval(inputtext)));
			SendClientMessage(playerid, COLOR_ARWIN, String);
		}
		return 1;
	}
	if( dialogid == BUSINESESS+5) //Business Money Get
	{
	    if(response)
		{
			new id = PlayerInfo[playerid][pInBizz];
			if(strval(inputtext) > BizzInfo[id][bTill]) return SendClientMessage(playerid, COLOR_GREY, "GAK BISA NGEBUG LAGI MAS");
			BizzInfo[id][bTill] -= strval(inputtext);
			GivePlayerCash(playerid, strval(inputtext));
			format(String, sizeof(String), "BUSINESS: {ffffff}You've withdraw $%s to Business Bank", FormatMoney(strval(inputtext)));
			SendClientMessage(playerid, COLOR_ARWIN, String);
		}
		return 1;
	}
	if(dialogid == BUSINESESS)//BUSINESS MENU
	{
	    new id = PlayerInfo[playerid][pPBiskey], price1 = BizzInfo[id][bProductPrice][0], price2 = BizzInfo[id][bProductPrice][1], price3 = BizzInfo[id][bProductPrice][2], price4 = BizzInfo[id][bProductPrice][3], price5 = BizzInfo[id][bProductPrice][4], price6 = BizzInfo[id][bProductPrice][5];
	    if(!response) return 1;
		if(response)
		{
		    if(listitem == 0)
			{
			    if(BizzInfo[id][bLocked] == 1)
			    {
			        BizzInfo[id][bLocked] = 0;
			        GameTextForPlayer(playerid, "~w~Biz telah ~g~Terbuka!", 1000, 5);
					format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s{FFFFFF}\nPemilik: {FFFF00}%s",id, BizzInfo[id][bMessage], BizzInfo[id][bOwner]);
					UpdateDynamic3DTextLabelText(business1[id], COLOR_WHITE, String);
	 			}
	  			else
	   			{
	    			BizzInfo[id][bLocked] = 1;
	     			GameTextForPlayer(playerid, "~w~Biz telah ~r~Terkunci!", 1000, 5);
					format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}%s{FFFFFF}\nPemilik: {FFFF00}%s",id, BizzInfo[id][bMessage], BizzInfo[id][bOwner]);
					UpdateDynamic3DTextLabelText(business1[id], COLOR_WHITE, String);
	  			}
	  			return 1;
			}
		    if(listitem == 1)
		    {
		        format(String, sizeof(String), "Sekedar pemberitahuan\nGunakan #FF00FF atau Hex Code lainnya untuk merubah warna\nContoh: #FF00FFWiwin Resto maka hasilnya {FF00FF}Wiwin Resto");
				ShowPlayerDialog(playerid, BUSINESESS+1, DIALOG_STYLE_INPUT, "Business Name",String,"OK","Exit");
				return 1;
			}
			if(listitem == 2)
			{
				format(String, sizeof(String), "%s - $%s\n%s - $%s\n%s - $%s\n%s - $%s\n%s - $%s\n%s - $%s", BizzInfo[id][bProductName1], FormatMoney(price1), BizzInfo[id][bProductName2], FormatMoney(price2), BizzInfo[id][bProductName3], FormatMoney(price3), BizzInfo[id][bProductName4], FormatMoney(price4), BizzInfo[id][bProductName5], FormatMoney(price5), BizzInfo[id][bProductName6], FormatMoney(price6));
				ShowPlayerDialog(playerid, BUSINESESS+2, DIALOG_STYLE_LIST, "Product Name Editor",String,"Edit","Cancel");
				return 1;
			}
			if(listitem == 3)
			{
			    format(String, sizeof(String), "%s - $%s\n%s - $%s\n%s - $%s\n%s - $%s\n%s - $%s\n%s - $%s", BizzInfo[id][bProductName1], FormatMoney(price1), BizzInfo[id][bProductName2], FormatMoney(price2), BizzInfo[id][bProductName3], FormatMoney(price3), BizzInfo[id][bProductName4], FormatMoney(price4), BizzInfo[id][bProductName5], FormatMoney(price5), BizzInfo[id][bProductName6], FormatMoney(price6));
				ShowPlayerDialog(playerid, BUSINESESS+3, DIALOG_STYLE_LIST, "Product Price Editor",String,"Edit","Cancel");
				return 1;
			}
			if(listitem == 4)
			{
				format(String, sizeof(String), "Masukan jumlah Uang yang anda ingin taruh ke Bisnis\n\nJumlah Uang di Bisnis: $%s\nJumlah Uang yang anda miliki: $%s\nJumlah product di Bisnis: %d", FormatMoney(BizzInfo[id][bTill]), FormatMoney(GetPlayerCash(playerid)), BizzInfo[id][bTill]);
				ShowPlayerDialog(playerid, BUSINESESS+4, DIALOG_STYLE_INPUT, "Business Bank",String,"OK","Exit");
				return 1;
			}
			if(listitem == 5)
			{
				format(String, sizeof(String), "Masukan jumlah Uang yang anda ingin ambil dari Bisnis\n\nJumlah Uang di Bisnis: $%s\nJumlah Uang yang anda miliki: $%s\nJumlah product di Bisnis: %d", FormatMoney(BizzInfo[id][bTill]), FormatMoney(GetPlayerCash(playerid)), BizzInfo[id][bTill]);
				ShowPlayerDialog(playerid, BUSINESESS+5, DIALOG_STYLE_INPUT, "Business Bank",String,"OK","Exit");
				return 1;
			}
		}
	}
	if( dialogid == WORKSHOP+1) //Workshop Board
	{
	    if(response)
		{
			new idx = PlayerInfo[playerid][pWSBos];
			ReplaceText(inputtext, "(e)", "\n");
			format(WsInfo[idx][wsPapanText], 10000, "%s", ColouredText(inputtext));
			if(WsInfo[idx][wsPapanMT] == 1)
			{
				DestroyDynamicObject(WsInfo[idx][wsPapan]);
				WsInfo[idx][wsPapan] = CreateDynamicObject(18244, WsInfo[idx][wsPapanX], WsInfo[idx][wsPapanY], WsInfo[idx][wsPapanZ], WsInfo[idx][wsPapanRotX], WsInfo[idx][wsPapanRotY], WsInfo[idx][wsPapanRotZ]);
				format(String, sizeof(String), "%s", ColouredText(inputtext));
				WsInfo[idx][wsPapanText] = SetDynamicObjectMaterialText(WsInfo[idx][wsPapan], 0, String, 120, "Arial", 24, 0, 0xFFFFFFFF, -16777216, 1);
			}
			SaveWS(idx);
		}
		return 1;
	}
	if( dialogid == WORKSHOP+2) //Workshop Component Store
	{
	    if(response)
		{
			new idx = PlayerInfo[playerid][pWSBos];
			if(IsPlayerInRangeOfPoint(playerid, 10.0, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ]))
			{
				if(strval(inputtext) > PlayerInfo[playerid][pComponent]) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Komponen sebanyak itu");
				WsInfo[idx][wsComponent] += strval(inputtext);
				PlayerInfo[playerid][pComponent] -= strval(inputtext);
				format(String, sizeof(String), "WORKSHOP: {ffffff}You've stored %d Component to Workshop Bank", strval(inputtext));
				SendClientMessage(playerid, COLOR_ARWIN, String);
				SaveWS(idx);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "WorkShop ini bukan milik Leader anda");
		}
		return 1;
	}
	if( dialogid == WORKSHOP+3) //Workshop Component Get
	{
	    if(response)
		{
			new idx = PlayerInfo[playerid][pWSBos];
			if(IsPlayerInRangeOfPoint(playerid, 10.0, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ]))
			{
				if(strval(inputtext) > WsInfo[idx][wsComponent]) return SendClientMessage(playerid, COLOR_GREY, "Workshop anda tidak memiliki Komponen sebanyak itu");
				WsInfo[idx][wsComponent] -= strval(inputtext);
				PlayerInfo[playerid][pComponent] += strval(inputtext);
				format(String, sizeof(String), "WORKSHOP: {ffffff}You've withdrawn %d Component from Workshop Bank", strval(inputtext));
				SendClientMessage(playerid, COLOR_ARWIN, String);
				SaveWS(idx);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "WorkShop ini bukan milik Leader anda");
		}
		return 1;
	}
	if( dialogid == WORKSHOP+4) //Workshop Money Store
	{
	    if(response)
		{
			new idx = PlayerInfo[playerid][pWSBos];
			if(IsPlayerInRangeOfPoint(playerid, 10.0, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ]))
			{
				if(strval(inputtext) > GetPlayerCash(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki uang sebanyak itu");
				WsInfo[idx][wsSafeMoney] += strval(inputtext);
				GivePlayerCash(playerid, -strval(inputtext));
				format(String, sizeof(String), "WORKSHOP: {ffffff}You've stored $%s to Workshop Bank", FormatMoney(strval(inputtext)));
				SendClientMessage(playerid, COLOR_ARWIN, String);
				SaveWS(idx);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "WorkShop ini bukan milik Leader anda");
		}
		return 1;
	}
	if( dialogid == WORKSHOP+5) //Workshop Money Get
	{
	    if(response)
		{
			new idx = PlayerInfo[playerid][pWSBos];
			if(IsPlayerInRangeOfPoint(playerid, 10.0, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ]))
			{
				if(strval(inputtext) > WsInfo[idx][wsSafeMoney]) return SendClientMessage(playerid, COLOR_GREY, "Workshop Anda tidak memiliki uang sebanyak itu");
				WsInfo[idx][wsSafeMoney] -= strval(inputtext);
				GivePlayerCash(playerid, strval(inputtext));
				format(String, sizeof(String), "WORKSHOP: {ffffff}You've withdrawn $%s from Workshop Bank", FormatMoney(strval(inputtext)));
				SendClientMessage(playerid, COLOR_ARWIN, String);
				SaveWS(idx);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "WorkShop ini bukan milik Leader anda");
		}
		return 1;
	}
	if(dialogid == WORKSHOP)//WORKSHOP MENU
	{
	    new idx = PlayerInfo[playerid][pWSBos];
	    if(!response) return 1;
		if(response)
		{
		    if(listitem == 0)
		    {
  				if(!WsInfo[idx][wsStatus])
     			{
   					WsInfo[idx][wsStatus] = 1;
        			MoveDynamicObject(WsInfo[idx][wsGate], WsInfo[idx][wsGateOX], WsInfo[idx][wsGateOY], WsInfo[idx][wsGateOZ], 5);
           			SetDynamicObjectRot(WsInfo[idx][wsGate], WsInfo[idx][wsGateORX], WsInfo[idx][wsGateORY], WsInfo[idx][wsGateORZ]);
           			MoveDynamicObject(WsInfo[idx][wsGate2], WsInfo[idx][wsGateOX2], WsInfo[idx][wsGateOY2], WsInfo[idx][wsGateOZ2], 5);
           			SetDynamicObjectRot(WsInfo[idx][wsGate2], WsInfo[idx][wsGateORX2], WsInfo[idx][wsGateORY2], WsInfo[idx][wsGateORZ2]);
        		}
		        else
		        {
   					WsInfo[idx][wsStatus] = 0;
        			MoveDynamicObject(WsInfo[idx][wsGate], WsInfo[idx][wsGateCX], WsInfo[idx][wsGateCY], WsInfo[idx][wsGateCZ], 5);
           			SetDynamicObjectRot(WsInfo[idx][wsGate], WsInfo[idx][wsGateCRX], WsInfo[idx][wsGateCRY], WsInfo[idx][wsGateCRZ]);
           			MoveDynamicObject(WsInfo[idx][wsGate2], WsInfo[idx][wsGateCX2], WsInfo[idx][wsGateCY2], WsInfo[idx][wsGateCZ2], 5);
           			SetDynamicObjectRot(WsInfo[idx][wsGate2], WsInfo[idx][wsGateCRX], WsInfo[idx][wsGateCRY2], WsInfo[idx][wsGateCRZ2]);
        		}
		        return 1;
			}
		    if(listitem == 1)
		    {
		        format(String, sizeof(String), "Sekedar pemberitahuan\nNew Line untuk Board sedang bug.\n#FF00FF atau Hex Code untuk merubah warna");
				ShowPlayerDialog(playerid, WORKSHOP+1, DIALOG_STYLE_INPUT, "Workshop Board",String,"OK","Exit");
				return 1;
			}
		    if(listitem == 2)
		    {
		        format(String, sizeof(String), "Masukan jumlah Component yang anda ingin taruh ke Workshop\n\nJumlah Component di Workshop: %d\nJumlah Component yang anda miliki: %d", WsInfo[idx][wsComponent], PlayerInfo[playerid][pComponent]);
				ShowPlayerDialog(playerid, WORKSHOP+2, DIALOG_STYLE_INPUT, "Workshop Bank",String,"OK","Exit");
				return 1;
			}
			if(listitem == 3)
			{
				format(String, sizeof(String), "Masukan jumlah Component yang anda ingin ambil dari Workshop\n\nJumlah Component di Workshop: %d\nJumlah Component yang anda miliki: %d", WsInfo[idx][wsComponent], PlayerInfo[playerid][pComponent]);
				ShowPlayerDialog(playerid, WORKSHOP+3, DIALOG_STYLE_INPUT, "Workshop Bank",String,"OK","Exit");
				return 1;
			}
			if(listitem == 4)
			{
				format(String, sizeof(String), "Masukan jumlah Uang yang anda ingin taruh ke Workshop\n\nJumlah Uang di Workshop: $%s\nJumlah Uang yang anda miliki: $%s", FormatMoney(WsInfo[idx][wsSafeMoney]), FormatMoney(GetPlayerCash(playerid)));
				ShowPlayerDialog(playerid, WORKSHOP+4, DIALOG_STYLE_INPUT, "Workshop Bank",String,"OK","Exit");
				return 1;
			}
			if(listitem == 5)
			{
				format(String, sizeof(String), "Masukan jumlah Uang yang anda ingin ambil dari Workshop\n\nJumlah Uang di Workshop: $%s\nJumlah Uang yang anda miliki: $%s", FormatMoney(WsInfo[idx][wsSafeMoney]), FormatMoney(GetPlayerCash(playerid)));
				ShowPlayerDialog(playerid, WORKSHOP+5, DIALOG_STYLE_INPUT, "Workshop Bank",String,"OK","Exit");
				return 1;
			}
		}
	}
	if(dialogid == TRAININGSKILL)
	{
	    if(!response) return 1;
		if(response)
		{
		    if(listitem == 0)
		    {
		        if(PlayerInfo[playerid][pSilincedSkill] < 10)
		        {
					if(GetPlayerCash(playerid) >= 1500*PlayerInfo[playerid][pSilincedSkill])
			        {
			            if(PlayerInfo[playerid][pMember] != 0)
			            {
				        	PlayerInfo[playerid][pTrainingTime] = 15*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill Silinced Pistol anda sudah memasuki Level %d", PlayerInfo[playerid][pSilincedSkill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -1500*PlayerInfo[playerid][pSilincedSkill]/2);
				        	Tax += 1500*PlayerInfo[playerid][pSilincedSkill]/2;
				        	PlayerInfo[playerid][pSilincedSkill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, PlayerInfo[playerid][pSilincedSkill] * 100);
			            }
			            else
			            {
				        	PlayerInfo[playerid][pTrainingTime] = 25*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill Silinced Pistol anda sudah memasuki Level %d", PlayerInfo[playerid][pSilincedSkill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -1500*PlayerInfo[playerid][pSilincedSkill]);
				        	Tax += 1500*PlayerInfo[playerid][pSilincedSkill];
				        	PlayerInfo[playerid][pSilincedSkill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, PlayerInfo[playerid][pSilincedSkill] * 100);
			        	}
			        }
			        else SendClientMessage(playerid, -1, "ERROR: Kamu tidak mempunyai uang yang cukup untuk melakukan latihan");
				}
		        else SendClientMessage(playerid, COLOR_WHITE, "SKILL: Skill anda sudah mencapai level Max");
		        return 1;
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pDesertEagleSkill] < 10)
				{
					if(GetPlayerCash(playerid) >= 5000*PlayerInfo[playerid][pDesertEagleSkill])
			        {
			            if(PlayerInfo[playerid][pMember] != 0)
			            {
				        	PlayerInfo[playerid][pTrainingTime] = 15*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill Desert Eagle Pistol anda sudah memasuki Level %d", PlayerInfo[playerid][pDesertEagleSkill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -5000*PlayerInfo[playerid][pDesertEagleSkill]/2);
				        	Tax += 5000*PlayerInfo[playerid][pDesertEagleSkill]/2;
				        	PlayerInfo[playerid][pDesertEagleSkill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][pDesertEagleSkill]* 100);
			            }
			            else
			            {
				        	PlayerInfo[playerid][pTrainingTime] = 25*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill Desert Eagle Pistol anda sudah memasuki Level %d", PlayerInfo[playerid][pDesertEagleSkill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -5000*PlayerInfo[playerid][pDesertEagleSkill]);
				        	Tax += 5000*PlayerInfo[playerid][pDesertEagleSkill];
				        	PlayerInfo[playerid][pDesertEagleSkill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][pDesertEagleSkill]* 100);
						}
			        }
			        else SendClientMessage(playerid, -1, "ERROR: Kamu tidak mempunyai uang yang cukup untuk melakukan latihan");
		        }
		        else SendClientMessage(playerid, COLOR_WHITE, "SKILL: Skill anda sudah mencapai level Max");
		        return 1;
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pShotgunSkill] < 10)
				{
					if(GetPlayerCash(playerid) >= 2500*PlayerInfo[playerid][pShotgunSkill])
					{
					    if(PlayerInfo[playerid][pMember] != 0)
			            {
			                PlayerInfo[playerid][pTrainingTime] = 15*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill Shotgun anda sudah memasuki Level %d", PlayerInfo[playerid][pShotgunSkill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -2500*PlayerInfo[playerid][pShotgunSkill]/2);
				        	Tax += 2500*PlayerInfo[playerid][pShotgunSkill]/2;
				        	PlayerInfo[playerid][pShotgunSkill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][pShotgunSkill]* 100);
			            }
			            else
			            {
	    					PlayerInfo[playerid][pTrainingTime] = 25*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill Shotgun anda sudah memasuki Level %d", PlayerInfo[playerid][pShotgunSkill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -2500*PlayerInfo[playerid][pShotgunSkill]);
				        	Tax += 2500*PlayerInfo[playerid][pShotgunSkill];
				        	PlayerInfo[playerid][pShotgunSkill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][pShotgunSkill]* 100);
			        	}
					}
           			else SendClientMessage(playerid, -1, "ERROR: Kamu tidak mempunyai uang yang cukup untuk melakukan latihan");
				}
		        else SendClientMessage(playerid, COLOR_WHITE, "SKILL: Skill anda sudah mencapai level Max");
		        return 1;
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pSpassSkill] < 10)
				{
					if(GetPlayerCash(playerid) >= 7500*PlayerInfo[playerid][pSpassSkill])
			        {
			            if(PlayerInfo[playerid][pMember] != 0)
			            {
			                PlayerInfo[playerid][pTrainingTime] = 15*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill Spas-12 anda sudah memasuki Level %d", PlayerInfo[playerid][pSpassSkill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -7500*PlayerInfo[playerid][pSpassSkill]/2);
				        	Tax += 7500*PlayerInfo[playerid][pSpassSkill]/2;
				        	PlayerInfo[playerid][pSpassSkill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][pSpassSkill]* 100);
			            }
			            else
			            {
				        	PlayerInfo[playerid][pTrainingTime] = 25*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill Spas-12 anda sudah memasuki Level %d", PlayerInfo[playerid][pSpassSkill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -7500*PlayerInfo[playerid][pSpassSkill]);
				        	Tax += 7500*PlayerInfo[playerid][pSpassSkill];
				        	PlayerInfo[playerid][pSpassSkill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][pSpassSkill]* 100);
			        	}
			        }
			        else SendClientMessage(playerid, -1, "ERROR: Kamu tidak mempunyai uang yang cukup untuk melakukan latihan");
				}
		        else SendClientMessage(playerid, COLOR_WHITE, "SKILL: Skill anda sudah mencapai level Max");
		        return 1;
			}
			if(listitem == 4)
			{
				if(PlayerInfo[playerid][pMP5Skill] < 10)
				{
					if(GetPlayerCash(playerid) >= 10000*PlayerInfo[playerid][pMP5Skill])
			        {
			            if(PlayerInfo[playerid][pMember] != 0)
			            {
			                PlayerInfo[playerid][pTrainingTime] = 15*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill MP5 anda sudah memasuki Level %d", PlayerInfo[playerid][pMP5Skill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -10000*PlayerInfo[playerid][pMP5Skill]/2);
				        	Tax += 10000*PlayerInfo[playerid][pMP5Skill]/2;
				        	PlayerInfo[playerid][pMP5Skill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][pMP5Skill]* 100);
			            }
			            else
			            {
				        	PlayerInfo[playerid][pTrainingTime] = 25*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill MP5 anda sudah memasuki Level %d", PlayerInfo[playerid][pMP5Skill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -10000*PlayerInfo[playerid][pMP5Skill]);
				        	Tax += 10000*PlayerInfo[playerid][pMP5Skill];
				        	PlayerInfo[playerid][pMP5Skill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][pMP5Skill]* 100);
			        	}
			        }
			        else SendClientMessage(playerid, -1, "ERROR: Kamu tidak mempunyai uang yang cukup untuk melakukan latihan");
				}
		        else SendClientMessage(playerid, COLOR_WHITE, "SKILL: Skill anda sudah mencapai level Max");
		        return 1;
			}
			if(listitem == 5)
			{
				if(PlayerInfo[playerid][pAK47Skill] < 10)
				{
					if(GetPlayerCash(playerid) >= 12500*PlayerInfo[playerid][pAK47Skill])
			        {
			            if(PlayerInfo[playerid][pMember] != 0)
			            {
			                PlayerInfo[playerid][pTrainingTime] = 15*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill AK47 anda sudah memasuki Level %d", PlayerInfo[playerid][pAK47Skill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -12500*PlayerInfo[playerid][pAK47Skill]/2);
				        	Tax += 12500*PlayerInfo[playerid][pAK47Skill]/2;
				        	PlayerInfo[playerid][pAK47Skill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][pAK47Skill]* 100);
			            }
			            else
			            {
				        	PlayerInfo[playerid][pTrainingTime] = 25*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill AK47 anda sudah memasuki Level %d", PlayerInfo[playerid][pAK47Skill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -12500*PlayerInfo[playerid][pAK47Skill]);
				        	Tax += 12500*PlayerInfo[playerid][pAK47Skill];
				        	PlayerInfo[playerid][pAK47Skill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][pAK47Skill]* 100);
			        	}
			        }
			        else SendClientMessage(playerid, -1, "ERROR: Kamu tidak mempunyai uang yang cukup untuk melakukan latihan");
				}
		        else SendClientMessage(playerid, COLOR_WHITE, "SKILL: Skill anda sudah mencapai level Max");
		        return 1;
			}
			if(listitem == 6)
			{
				if(PlayerInfo[playerid][pM4Skill] < 10)
				{
					if(GetPlayerCash(playerid) >= 15000*PlayerInfo[playerid][pM4Skill])
			        {
			            if(PlayerInfo[playerid][pMember] != 0)
			            {
			                PlayerInfo[playerid][pTrainingTime] = 15*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill M4 anda sudah memasuki Level %d", PlayerInfo[playerid][pM4Skill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -15000*PlayerInfo[playerid][pM4Skill]/2);
				        	Tax += 15000*PlayerInfo[playerid][pM4Skill]/2;
				        	PlayerInfo[playerid][pM4Skill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][pM4Skill]* 100);
			            }
			            else
			            {
				        	PlayerInfo[playerid][pTrainingTime] = 25*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill M4 anda sudah memasuki Level %d", PlayerInfo[playerid][pM4Skill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -15000*PlayerInfo[playerid][pM4Skill]);
				        	Tax += 15000*PlayerInfo[playerid][pM4Skill];
				        	PlayerInfo[playerid][pM4Skill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][pM4Skill]* 100);
			        	}
			        }
			        else SendClientMessage(playerid, -1, "ERROR: Kamu tidak mempunyai uang yang cukup untuk melakukan latihan");
				}
		        else SendClientMessage(playerid, COLOR_WHITE, "SKILL: Skill anda sudah mencapai level Max");
		        return 1;
			}
			if(listitem == 7)
			{
				if(PlayerInfo[playerid][pSniperSkill] < 10)
				{
					if(GetPlayerCash(playerid) >= 16500*PlayerInfo[playerid][pSniperSkill])
			        {
			            if(PlayerInfo[playerid][pMember] != 0)
			            {
			                PlayerInfo[playerid][pTrainingTime] = 15*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill Sniper Rifle anda sudah memasuki Level %d", PlayerInfo[playerid][pSniperSkill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -16500*PlayerInfo[playerid][pSniperSkill]/2);
				        	Tax += 16500*PlayerInfo[playerid][pSniperSkill]/2;
				        	PlayerInfo[playerid][pSniperSkill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, PlayerInfo[playerid][pSniperSkill]* 100);
			            }
			            else
			            {
				        	PlayerInfo[playerid][pTrainingTime] = 25*60;
				        	format(String, sizeof(String), "SKILL: Sekarang skill Sniper Rifle anda sudah memasuki Level %d", PlayerInfo[playerid][pSniperSkill]);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	format(String, sizeof(String), "SKILL: Anda harus menunggu %d Menit untuk melakukan latihan lagi", PlayerInfo[playerid][pTrainingTime]/60);
				        	SendClientMessage(playerid, COLOR_WHITE, String);
				        	GivePlayerCash(playerid, -16500*PlayerInfo[playerid][pSniperSkill]);
				        	Tax += 16500*PlayerInfo[playerid][pSniperSkill];
				        	PlayerInfo[playerid][pSniperSkill] ++;
				        	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, PlayerInfo[playerid][pSniperSkill]* 100);
			        	}
			        }
			        else SendClientMessage(playerid, -1, "ERROR: Kamu tidak mempunyai uang yang cukup untuk melakukan latihan");
				}
		        else SendClientMessage(playerid, COLOR_WHITE, "SKILL: Skill anda sudah mencapai level Max");
		        return 1;
			}
		}
	}
	if(dialogid == BUSJOB)
	{
		if(response)
		{
		    switch(listitem)
			{
			    case 0:
			    {
				 	if(PlayerInfo[playerid][pBusTime] == 0)
				 	{
				 	    if(DialogBus[0] == false) // Kalau False atau tidak dipilih
			    		{
					    	DialogBus[0] = true; // Dialog 0 telah di pilih
					    	DialogSaya[playerid][0] = true;
		                	BusSteps[playerid][0] = 2;
					     	KerjaBus[playerid] = 1;
					     	SetPlayerRaceCheckpoint(playerid, 0, 1673.5162,-1477.9034,13.4807, 1655.8779,-1580.8289,13.4839, 5.0);
					     	SendClientMessage(playerid, COLOR_ARWIN, "SIDEJOBINFO: {FFFFFF}Ikutilah checkpoint yang tersedia pada Radar");
						}
						else
						    SendClientMessage(playerid,-1,"ERROR: Route already taken by Someone");
					}
				}
				case 1:
			    {
				 	if(PlayerInfo[playerid][pBusTime] == 0)
				 	{
				 	    if(DialogBus[1] == false) // Kalau False atau tidak dipilih
			    		{
					    	DialogBus[1] = true; // Dialog 0 telah di pilih
					    	DialogSaya[playerid][1] = true;
		                	BusSteps[playerid][1] = 6;
					     	KerjaBus[playerid] = 1;
					     	SetPlayerRaceCheckpoint(playerid, 0, 1671.5015,-1477.9338,13.4804,1655.4309,-1578.8663,13.4876, 5);
					     	SendClientMessage(playerid, COLOR_ARWIN, "SIDEJOBINFO: {FFFFFF}Ikutilah checkpoint yang tersedia pada Radar");
						}
						else
						    SendClientMessage(playerid,-1,"ERROR: Route already taken by Someone");
					}
				}
				case 2:
			    {
				 	if(PlayerInfo[playerid][pBusTime] == 0)
				 	{
				 	    if(DialogBus[2] == false) // Kalau False atau tidak dipilih
			    		{
					    	/*DialogBus[2] = true; // Dialog 0 telah di pilih
					    	DialogSaya[playerid][2] = true;
		                	BusSteps[playerid][2] = 1;
					     	KerjaBus[playerid] = 1;
					     	SetPlayerRaceCheckpoint(playerid, 0, 1619.1874, -1877.3141, 13.3828, 1539.4319,-1869.4375,13.1080, 5.0);
					     	SendClientMessage(playerid, COLOR_ARWIN, "SIDEJOBINFO: {FFFFFF}Ikutilah checkpoint yang tersedia pada Radar");*/
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, COLOR_ARWIN, "SIDEJOBINFO: {FFFFFF}Rute dalam tahap pembenahan, harap menunggu sampai Rute di buka kembali");
						}
						else
						    SendClientMessage(playerid,-1,"ERROR: Route already cleaning by Someone");
					}
				}
			}
		}
		else RemovePlayerFromVehicle(playerid);
	}
	if(dialogid == SWEEPERJOB)
	{
		if(response)
		{
		    switch(listitem)
			{
			    case 0:
			    {
				 	if(PlayerInfo[playerid][pSweeperT] == 0)
				 	{
				 	    if(DialogSweeper[0] == false) // Kalau False atau tidak dipilih
			    		{
					    	DialogSweeper[0] = true; // Dialog 0 telah di pilih
					    	DialogSaya[playerid][0] = true;
		                	SweeperSteps[playerid][0] = 1;
					     	KerjaSweeper[playerid] = 1;
					     	SetPlayerRaceCheckpoint(playerid, 0, 1619.1874,-1877.3141,13.3828,1619.4293,-1881.6036,13.4845, 5);
					     	SendClientMessage(playerid, COLOR_ARWIN, "SIDEJOBINFO: {FFFFFF}Ikutilah checkpoint yang tersedia pada Radar");
						}
						else
						    SendClientMessage(playerid,-1,"ERROR: Route already cleaning by Someone");
					}
				}
				case 1:
			    {
				 	if(PlayerInfo[playerid][pSweeperT] == 0)
				 	{
				 	    if(DialogSweeper[1] == false) // Kalau False atau tidak dipilih
			    		{
					    	DialogSweeper[1] = true; // Dialog 0 telah di pilih
					    	DialogSaya[playerid][1] = true;
		                	SweeperSteps[playerid][1] = 1;
					     	KerjaSweeper[playerid] = 1;
					     	SetPlayerRaceCheckpoint(playerid, 0, 1619.1874, -1877.3141, 13.3828, 1574.9003, -1871.1334, 12.9483, 5.0);
					     	SendClientMessage(playerid, COLOR_ARWIN, "SIDEJOBINFO: {FFFFFF}Ikutilah checkpoint yang tersedia pada Radar");
						}
						else
						    SendClientMessage(playerid,-1,"ERROR: Route already cleaning by Someone");
					}
				}
				case 2:
			    {
				 	if(PlayerInfo[playerid][pSweeperT] == 0)
				 	{
				 	    if(DialogSweeper[2] == false) // Kalau False atau tidak dipilih
			    		{
					    	DialogSweeper[2] = true; // Dialog 0 telah di pilih
					    	DialogSaya[playerid][2] = true;
		                	SweeperSteps[playerid][2] = 1;
					     	KerjaSweeper[playerid] = 1;
					     	SetPlayerRaceCheckpoint(playerid, 0, 1619.1874, -1877.3141, 13.3828, 1539.4319,-1869.4375,13.1080, 5.0);
					     	SendClientMessage(playerid, COLOR_ARWIN, "SIDEJOBINFO: {FFFFFF}Ikutilah checkpoint yang tersedia pada Radar");
						}
						else
						    SendClientMessage(playerid,-1,"ERROR: Route already cleaning by Someone");
					}
				}
			}
		}
		else RemovePlayerFromVehicle(playerid);
	}
	if(dialogid == 8224)
	{
		if(response)
		{
		    new pvid;
		    if (IsNumeric(inputtext))
		    {
      			GivePlayerCash(playerid, -25000);
		    	pvid = strval(inputtext);
		    	PlayerVehicleInfo[playerid][pvid][pvInsurances] += 1;
		    	SendClientMessage(playerid, COLOR_WHITE,"INSURANCES : Asuransi kendaraan berhasil di beli");
			}
		}
		return 1;
	}

	if(dialogid == DIALOG_HELP)
	{
	    new help[1024];
	    if(!response) return -1;
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            format(String, sizeof(String), "/rules /stats /dompet /upgrade\n/changepass /killcheckpoint /resetupgrades(100k)\n");
	            strcat(help, String);
	            format(String, sizeof(String), "/newrek(Rekening Baru) /balance /deposit /transfer /withdraw /deposit");
	            strcat(help, String);
	            ShowPlayerDialog(playerid, ACCOUNT, DIALOG_STYLE_MSGBOX, "Account Help", help, "Ok", "Kembali");
			}
			if(listitem == 1)
			{
			    format(String, sizeof(String), "/w(hisper) /o(oc) /s(hout) /l(ow) /b /ad(vertise)\n/f(amily) /me /do /togooc /tognews /togfam /togwhisper /tognames");
			    ShowPlayerDialog(playerid, CHAT, DIALOG_STYLE_MSGBOX, "Chat Help", String, "Ok", "Kembali");
			}
			if(listitem == 2)
			{
			    format(String, sizeof(String), "/atm /pay /writecheck /cashchecks /charity /time /buy /id /showlicenses /mywarrants /accent /togaccent /togpm /tognewbie /togpr /togooc\n");
			    strcat(help, String);
			    format(String, sizeof(String), "/lock /skill /do /me /droplicense /calculate /refuel /car /sb /checkbelt /fish(Laut SMB) /buybait(SMB) /sellallfish(Little MExico) /togradio\n");
			    strcat(help, String);
			    format(String, sizeof(String), "/cancel /accept /eject /usepot /usecrack /service /families /joinevent /checkweed /notehelp /animhelp /tognews /togfam(ily) /togwhisper /togphone\n");
				strcat(help, String);
				format(String, sizeof(String), "/items /tikihelp /report /ad /newb /dompet /fperson /eperson /call 'eg: /call 911' /sms (/p)ickup (/h)angup /speakerphone /number /tutorial /bugged");
				strcat(help, String);
			    ShowPlayerDialog(playerid, GENERAL, DIALOG_STYLE_MSGBOX, "General Help", help, "Ok", "Kembali");
			}
			if(listitem == 3)
			{
			    format(String, sizeof(String), "/engine /lock /trackcar /vcontrol /deletecar /sellmycar /park /unmodcar\n/payticket /givekeys /carkeys /trunkput /trunktake /fill\n/editvtoys /rbody");
			    ShowPlayerDialog(playerid, VEHICLE, DIALOG_STYLE_MSGBOX, "Vehicle Help", String, "Ok", "Kembali");
			}
			if(listitem == 4)
			{
                ShowPlayerDialog(playerid, JOBHELPMENU, DIALOG_STYLE_LIST, "Which job do you need help with?","Drug Dealer\nLumberjack\nArms Dealer\nDrug Smuggling\nTrucker\nPizza Boy\nFarmer\nMechanic", "Pilih", "Engga");
			}
			if(listitem == 5)
			{
			    if(PlayerInfo[playerid][pMember] == 0)
			    {
					ShowPlayerDialog(playerid, FAILED, DIALOG_STYLE_MSGBOX, "Error", "Anda harus bergabung ke dalam Salah satu Faction terlebih dahulu.", "Ok", "");
				}
				switch(PlayerInfo[playerid][pMember])
				{
					case 1:
					{
					    format(String, sizeof(String), "(/r)adio (/d)epartments (/m)egaphone (/su)spect /sapd /mdc /detain /arrest /warrantarrest /wanted /cuff /tazer /cam\n");
					    strcat(help, String);
					    format(String, sizeof(String), "/frisk /take /ticket /gov(ernment) /invite /giverank /deployspikes /destroyspikes /spikestrip /wants /openbiz /closebiz\n");
					    strcat(help, String);
					    format(String, sizeof(String), "/deploycade /destroycade /revokedl /vcheck /vmdc /vticket /tow /untow /impound /sapddiv /destroyplant /radargun /searchcar");
					    strcat(help, String);
						ShowPlayerDialog(playerid, LSPDHELP, DIALOG_STYLE_MSGBOX, "San Andreas Police Department", help, "Ok", "Kembali");
					}
					case 4:
					{
					    format(String, sizeof(String), "(/r)adio (/d)epartments (/m)egaphone /heal /invite /giverank /lsfmd /revokeboatdl /samddiv\n");
					    strcat(help, String);
					    format(String, sizeof(String), "/getpt /movept /loadpt /deliverpt /takemedicine /givemedicine");
					    strcat(help, String);
					    ShowPlayerDialog(playerid, SAMDHELP, DIALOG_STYLE_MSGBOX, "San Andreas Medical Department", help, "Ok", "Kembali");
					}
					case 6:
					{
						format(String, sizeof(String), "(/r)adio (/d)epartments (/se)nate /settax /checktax /taxwithdraw /invite /giverank (/gov)ernment (/su)spect\n");
						strcat(help, String);
						format(String, sizeof(String), "/mdc /detain /arrest /wanted /cuff /tazer /frisk /take /ticket /invite /giverank /openbiz /closebiz\n");
						strcat(help, String);
						format(String, sizeof(String), "/spikestrip /deployspikes /destroyspikes /givevehlic /givelic");
						strcat(help, String);
						ShowPlayerDialog(playerid, GOVHELP, DIALOG_STYLE_MSGBOX, "San Andreas Goverment Service", help, "Ok", "Kembali");
					}
					case 9:
					{
					    ShowPlayerDialog(playerid, SANHELP, DIALOG_STYLE_MSGBOX, "San Andreas Network", "/live /nr [text] /broadcast /cameraangle /giverank /lockhq /liveban /newsdiv", "Ok", "Kembali");
					}
				}
			}
			if(listitem == 6)
			{
			    if(PlayerInfo[playerid][pAdmin] == 0)
			    {
					ShowPlayerDialog(playerid, FAILED2, DIALOG_STYLE_MSGBOX, "Error", "Anda harus bergabung ke dalam Salah satu Family terlebih dahulu.", "Ok", "");
				}
				else
				{
				    ShowPlayerDialog(playerid, AHELP1, DIALOG_STYLE_MSGBOX, "Admin Help", "/ah /a(dmin)", "Ok", "Kembali");
				}
			}
			if(listitem == 7)
			{
				if (PlayerInfo[playerid][pFMember] != 255)
				{
					ShowPlayerDialog(playerid, FAMHELP, DIALOG_STYLE_MSGBOX, "Family Help", "(/f)amily /safehelp /movegate /fdeposit /fwithdraw /fbalance /claim /capture /adjust\n/gpark /gvlock /gbuylock", "Ok", "Kembali");
				}
				else if(PlayerInfo[playerid][pFMember] == 255)
				{
					ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
				}
			}
			if(listitem == 8)
			{
				{
				    format(String, sizeof(String), "/customrank /ad /signcheck /vipnum /boombox\n");
				    strcat(help, String);
				    format(String, sizeof(String), "Customrank can be set\n");
				    strcat(help, String);
				    format(String, sizeof(String), "Advertisement can be used everywhere and discount 50percent\n");
				    strcat(help, String);
				    format(String, sizeof(String), "Signcheck can be used everywhere\n");
				    strcat(help, String);
				    format(String, sizeof(String), "VIPNumber can be set by yourself");
				    strcat(help, String);
				    format(String, sizeof(String), "Mapping objects for your property");
				    strcat(help, String);
				    format(String, sizeof(String), "Unlock locked vehicle slot");
				    strcat(help, String);
				    format(String, sizeof(String), "Contact:\n{FF00FF}Ari Pradana\nPhone: 08981809843\nFacebook: www.facebook.com/aempatsatu");
				    strcat(help, String);
					ShowPlayerDialog(playerid, VIPHELP, DIALOG_STYLE_MSGBOX, "Donator Help", help, "Close", "");
				}
			}
			if(listitem == 9)
			{
			    if(PlayerInfo[playerid][pPBiskey] != 0 || PlayerInfo[playerid][pPBiskey2] != 0)
			    {
			        ShowPlayerDialog(playerid, BIZHELP, DIALOG_STYLE_MSGBOX, "Biz Help", "/buyprods /setprice /lockbiz /bizwithdraw\n /bizdeposit /bizname /sellbiz /checkbiz", "Ok", "Kembali");
				}
				else
				{
					ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
				}
			}
			if(listitem == 10)
			{
			    if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID || PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID)
			    {
			        ShowPlayerDialog(playerid, HOUSEHELP, DIALOG_STYLE_MSGBOX, "House Help", "/houselock /setrentable /setrent /evict /evictall /sellmyhouse /ringbell\n/hwithdraw /hdeposit /hbalance /getgun /storegun /houseinvite\n/movegate /housegatepw /home", "Ok", "Kembali");
				}
				else
				{
					ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
				}
			}
			if(listitem == 11)
			{
				format(String, sizeof(String), "*** House Rent *** /unrent /enter /exit /hlock /home\n");
				strcat(help, String);
				format(String, sizeof(String), "*** Vehicle Rent *** /rentveh /unrentveh /renttime");
				strcat(help, String);
				ShowPlayerDialog(playerid, RENTHELP, DIALOG_STYLE_MSGBOX, "Rent Help", help, "Ok", "Kembali");
			}
		}
	}

	if(dialogid == FAILED)
	{
		if(response)
		{
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
	}

	if(dialogid == FAILED2)
	{
		if(response)
		{
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
	}

	if(dialogid == BIZHELP)
	{
	    if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == HOUSEHELP)
	{
	    if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == RENTHELP)
	{
	    if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == ACCOUNT)
	{
	    if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == CHAT)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == GENERAL)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == VEHICLE)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == LSPDHELP)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == FBIHELP)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == SFPDHELP)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == SAMDHELP)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == GOVHELP)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == SASDHELP)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == SANHELP)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == TAXIHELP)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == AHELP1)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == FAMHELP)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == VIPHELP)
	{
		if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
		if(response) return -1;
	}
	if(dialogid == EDITVTOYS)
	{
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan Edit Vehicle Object.");
			pvehEditID[playerid] = 999;
		}
	    if(response)
	    {
	        if(listitem == 0)
	        {
				return cmd_editvtoys1(playerid, "");
			}
			if(listitem == 1)
			{
			    return cmd_editvtoys2(playerid, "");
			}
			if(listitem == 2)
			{
			    return cmd_editvtoys3(playerid, "");
			}
			if(listitem == 3)
			{
			    return cmd_editvtoys4(playerid, "");
			}
			if(listitem == 4)
			{
			    return cmd_editvtoys5(playerid, "");
			}
			if(listitem == 5)
			{
			    return cmd_editvtoys6(playerid, "");
			}
			if(listitem == 6)
			{
			    return cmd_editvtoys7(playerid, "");
			}
			if(listitem == 7)
			{
			    return cmd_editvtoys8(playerid, "");
			}
		}
	}

	if(dialogid == VTOYTEXT)
	{
	    new x = pvehEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk menghapus Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
		}
		if(response)
		{
		    if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Object di Slot tersebut.");
			if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] != 18659) return SendClientMessage(playerid, COLOR_GREY, "Object tersebut bukan Vehicle Text");
			pvEditID[playerid] = listitem;
			ShowPlayerDialog(playerid, VTOYTEXT1, DIALOG_STYLE_INPUT, "Vehicle Text", "Silahkan mengganti tulisan Vehicle Text", "Pilih", "Engga");
		}
	}

	if(dialogid == VTOYTEXT1)
	{
	    new v = pvehEditID[playerid], vt = pvEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk mengganti warna Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
			pvEditID[playerid] = 999;
		}
		if(response)
		{
	        DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvToy][vt]);
			PlayerVehicleInfo[playerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[playerid][v][pvToyID][vt], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt], -1, -1, -1, 15.0, 0.0);
			AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);
		    if(vt == 0)
		    {
				format(PlayerVehicleInfo[playerid][v][pvToyText1], 128, "%s", inputtext);
				SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText1],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID1]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize1], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol1]], 0, 0);
			}
		    if(vt == 1)
		    {
				format(PlayerVehicleInfo[playerid][v][pvToyText2], 128, "%s", inputtext);
				SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText2],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID2]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize2], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol2]], 0, 0);
			}
		    if(vt == 2)
		    {
				format(PlayerVehicleInfo[playerid][v][pvToyText3], 128, "%s", inputtext);
				SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText3],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID3]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize3], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol3]], 0, 0);
			}
		    if(vt == 3)
		    {
				format(PlayerVehicleInfo[playerid][v][pvToyText4], 128, "%s", inputtext);
				SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText4],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID4]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize4], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol4]], 0, 0);
			}
		    if(vt == 4)
		    {
				format(PlayerVehicleInfo[playerid][v][pvToyText5], 128, "%s", inputtext);
				SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText5],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID5]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize5], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol5]], 0, 0);
			}
		    if(vt == 5)
		    {
				format(PlayerVehicleInfo[playerid][v][pvToyText6], 128, "%s", inputtext);
				SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText6],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID6]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize6], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol6]], 0, 0);
			}
		    if(vt == 6)
		    {
				format(PlayerVehicleInfo[playerid][v][pvToyText7], 128, "%s", inputtext);
				SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText7],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID7]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize7], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol7]], 0, 0);
			}
		    if(vt == 7)
		    {
				format(PlayerVehicleInfo[playerid][v][pvToyText8], 128, "%s", inputtext);
				SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText8],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID8]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize8], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol8]], 0, 0);
			}
		    if(vt == 8)
		    {
				format(PlayerVehicleInfo[playerid][v][pvToyText9], 128, "%s", inputtext);
				SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText9],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID9]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize9], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol9]], 0, 0);
			}
		    if(vt == 9)
		    {
				format(PlayerVehicleInfo[playerid][v][pvToyText10], 128, "%s", inputtext);
				SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText10],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID10]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize10], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol10]], 0, 0);
			}
			SendClientMessage(playerid, COLOR_WHITE, "Anda telah Edit Index Vehicle Object anda");
		}
	}

	if(dialogid == VTOYTEXTCOL)
	{
	    new x = pvehEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk menghapus Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
		}
		if(response)
		{
		    if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Object di Slot tersebut.");
			if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] != 18659) return SendClientMessage(playerid, COLOR_GREY, "Object tersebut bukan Vehicle Text");
			pvEditID[playerid] = listitem;
			ShowPlayerDialog(playerid, VTOYTEXTCOL1, DIALOG_STYLE_INPUT, "Vehicle Text", "Silahkan mengganti tulisan Vehicle Text", "Pilih", "Engga");
		}
	}

	if(dialogid == VTOYTEXTCOL1)
	{
	    new v = pvehEditID[playerid], vt = pvEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk mengganti warna Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
			pvEditID[playerid] = 999;
		}
		if(response)
		{
			if(IsNumeric(inputtext))
			{
		        DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvToy][vt]);
				PlayerVehicleInfo[playerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[playerid][v][pvToyID][vt], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt], -1, -1, -1, 15.0, 0.0);
				AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);
			    if(vt == 0)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextCol1] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText1],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID1]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize1], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol1]], 0, 0);
				}
			    if(vt == 1)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextCol2] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText2],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID2]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize2], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol2]], 0, 0);
				}
			    if(vt == 2)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextCol3] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText3],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID3]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize3], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol3]], 0, 0);
				}
			    if(vt == 3)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextCol4] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText4],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID4]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize4], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol4]], 0, 0);
				}
			    if(vt == 4)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextCol5] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText5],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID5]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize5], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol5]], 0, 0);
				}
			    if(vt == 5)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextCol6] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText6],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID6]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize6], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol6]], 0, 0);
				}
			    if(vt == 6)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextCol7] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText7],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID7]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize7], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol7]], 0, 0);
				}
			    if(vt == 7)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextCol8] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText8],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID8]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize8], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol8]], 0, 0);
				}
			    if(vt == 8)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextCol9] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText9],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID9]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize9], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol9]], 0, 0);
				}
			    if(vt == 9)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextCol10] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText10],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID10]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize10], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol10]], 0, 0);
				}
				SendClientMessage(playerid, COLOR_WHITE, "Anda telah Edit Index Vehicle Object anda");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Hanya angka yang bisa dimasukkan");
		}
	}

	if(dialogid == VTOYTEXTFONT)
	{
	    new x = pvehEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk menghapus Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
		}
		if(response)
		{
		    if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Object di Slot tersebut.");
			if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] != 18659) return SendClientMessage(playerid, COLOR_GREY, "Object tersebut bukan Vehicle Text");
			pvEditID[playerid] = listitem;
			ShowPlayerDialog(playerid, VTOYTEXTFONT1, DIALOG_STYLE_INPUT, "Vehicle Text", "Silahkan mengganti tulisan Vehicle Text", "Pilih", "Engga");
		}
	}

	if(dialogid == VTOYTEXTFONT1)
	{
	    new v = pvehEditID[playerid], vt = pvEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk mengganti warna Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
			pvEditID[playerid] = 999;
		}
		if(response)
		{
			if(IsNumeric(inputtext))
			{
		        DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvToy][vt]);
				PlayerVehicleInfo[playerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[playerid][v][pvToyID][vt], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt], -1, -1, -1, 15.0, 0.0);
				AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);
			    if(vt == 0)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextID1] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText1],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID1]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize1], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol1]], 0, 0);
				}
			    if(vt == 1)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextID2] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText2],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID2]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize2], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol2]], 0, 0);
				}
			    if(vt == 2)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextID3] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText3],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID3]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize3], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol3]], 0, 0);
				}
			    if(vt == 3)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextID4] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText4],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID4]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize4], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol4]], 0, 0);
				}
			    if(vt == 4)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextID5] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText5],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID5]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize5], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol5]], 0, 0);
				}
			    if(vt == 5)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextID6] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText6],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID6]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize6], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol6]], 0, 0);
				}
			    if(vt == 6)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextID7] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText7],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID7]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize7], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol7]], 0, 0);
				}
			    if(vt == 7)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextID8] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText8],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID8]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize8], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol8]], 0, 0);
				}
			    if(vt == 8)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextID9] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText9],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID9]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize9], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol9]], 0, 0);
				}
			    if(vt == 9)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextID10] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText10],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID10]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize10], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol10]], 0, 0);
				}
				SendClientMessage(playerid, COLOR_WHITE, "Anda telah Edit Index Vehicle Object anda");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Hanya angka yang bisa dimasukkan");
		}
	}

	if(dialogid == VTOYTEXTSIZE)
	{
	    new x = pvehEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk menghapus Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
		}
		if(response)
		{
		    if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Object di Slot tersebut.");
			if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] != 18659) return SendClientMessage(playerid, COLOR_GREY, "Object tersebut bukan Vehicle Text");
			pvEditID[playerid] = listitem;
			ShowPlayerDialog(playerid, VTOYTEXTSIZE1, DIALOG_STYLE_INPUT, "Vehicle Text", "Silahkan mengganti tulisan Vehicle Text", "Pilih", "Engga");
		}
	}

	if(dialogid == VTOYTEXTSIZE1)
	{
	    new v = pvehEditID[playerid], vt = pvEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk mengganti warna Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
			pvEditID[playerid] = 999;
		}
		if(response)
		{
			if(IsNumeric(inputtext))
			{
		        DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvToy][vt]);
				PlayerVehicleInfo[playerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[playerid][v][pvToyID][vt], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt], -1, -1, -1, 15.0, 0.0);
				AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);
			    if(vt == 0)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextSize1] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText1],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID1]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize1], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol1]], 0, 0);
				}
			    if(vt == 1)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextSize2] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText2],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID2]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize2], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol2]], 0, 0);
				}
			    if(vt == 2)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextSize3] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText3],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID3]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize3], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol3]], 0, 0);
				}
			    if(vt == 3)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextSize4] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText4],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID4]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize4], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol4]], 0, 0);
				}
			    if(vt == 4)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextSize5] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText5],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID5]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize5], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol5]], 0, 0);
				}
			    if(vt == 5)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextSize6] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText6],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID6]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize6], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol6]], 0, 0);
				}
			    if(vt == 6)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextSize7] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText7],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID7]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize7], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol7]], 0, 0);
				}
			    if(vt == 7)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextSize8] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText8],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID8]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize8], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol8]], 0, 0);
				}
			    if(vt == 8)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextSize9] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText9],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID9]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize9], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol9]], 0, 0);
				}
			    if(vt == 9)
			    {
					PlayerVehicleInfo[playerid][v][pvToyTextSize10] = strval(inputtext);
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText10],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID10]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize10], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol10]], 0, 0);
				}
				SendClientMessage(playerid, COLOR_WHITE, "Anda telah Edit Index Vehicle Object anda");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Hanya angka yang bisa dimasukkan");
		}
	}

	if(dialogid == VTOYEDIT)
	{
	    new x = pvehEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk menghapus Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
		}
		if(response)
		{
		    if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Object di Slot tersebut.");
			new Float:pX, Float:pY, Float:pZ, Float:pA;
			GetVehiclePos(PlayerVehicleInfo[playerid][x][pvId], pX,pY,pZ);
			GetVehicleZAngle(PlayerVehicleInfo[playerid][x][pvId], pA);
			DestroyDynamicObject(PlayerVehicleInfo[playerid][x][pvToy][listitem]);
			PlayerVehicleInfo[playerid][x][pvToy][listitem] = CreateDynamicObject(PlayerVehicleInfo[playerid][x][pvToyID][listitem],pX,pY,pZ,PlayerVehicleInfo[playerid][x][pvToyRotX][listitem],PlayerVehicleInfo[playerid][x][pvToyRotY][listitem],pA, -1, -1, -1, 15.0, 0.0);
			if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] == 18659)
			{
			    if(listitem == 0)
			    {
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][x][pvToy][listitem], 0, PlayerVehicleInfo[playerid][x][pvToyText1], OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][x][pvToyTextID1]][textname], PlayerVehicleInfo[playerid][x][pvToyTextSize1], 1, VehicleColors[PlayerVehicleInfo[playerid][x][pvToyTextCol1]], 0, 0);
				}
			    if(listitem == 1)
			    {
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][x][pvToy][listitem], 0, PlayerVehicleInfo[playerid][x][pvToyText2], OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][x][pvToyTextID2]][textname], PlayerVehicleInfo[playerid][x][pvToyTextSize2], 1, VehicleColors[PlayerVehicleInfo[playerid][x][pvToyTextCol2]], 0, 0);
				}
			    if(listitem == 2)
			    {
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][x][pvToy][listitem], 0, PlayerVehicleInfo[playerid][x][pvToyText3], OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][x][pvToyTextID3]][textname], PlayerVehicleInfo[playerid][x][pvToyTextSize3], 1, VehicleColors[PlayerVehicleInfo[playerid][x][pvToyTextCol3]], 0, 0);
				}
			    if(listitem == 3)
			    {
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][x][pvToy][listitem], 0, PlayerVehicleInfo[playerid][x][pvToyText4], OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][x][pvToyTextID4]][textname], PlayerVehicleInfo[playerid][x][pvToyTextSize4], 1, VehicleColors[PlayerVehicleInfo[playerid][x][pvToyTextCol4]], 0, 0);
				}
			    if(listitem == 4)
			    {
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][x][pvToy][listitem], 0, PlayerVehicleInfo[playerid][x][pvToyText5], OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][x][pvToyTextID5]][textname], PlayerVehicleInfo[playerid][x][pvToyTextSize5], 1, VehicleColors[PlayerVehicleInfo[playerid][x][pvToyTextCol5]], 0, 0);
				}
			    if(listitem == 5)
			    {
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][x][pvToy][listitem], 0, PlayerVehicleInfo[playerid][x][pvToyText6], OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][x][pvToyTextID6]][textname], PlayerVehicleInfo[playerid][x][pvToyTextSize6], 1, VehicleColors[PlayerVehicleInfo[playerid][x][pvToyTextCol6]], 0, 0);
				}
			    if(listitem == 6)
			    {
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][x][pvToy][listitem], 0, PlayerVehicleInfo[playerid][x][pvToyText7], OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][x][pvToyTextID7]][textname], PlayerVehicleInfo[playerid][x][pvToyTextSize7], 1, VehicleColors[PlayerVehicleInfo[playerid][x][pvToyTextCol7]], 0, 0);
				}
			    if(listitem == 7)
			    {
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][x][pvToy][listitem], 0, PlayerVehicleInfo[playerid][x][pvToyText8], OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][x][pvToyTextID8]][textname], PlayerVehicleInfo[playerid][x][pvToyTextSize8], 1, VehicleColors[PlayerVehicleInfo[playerid][x][pvToyTextCol8]], 0, 0);
				}
			    if(listitem == 8)
			    {
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][x][pvToy][listitem], 0, PlayerVehicleInfo[playerid][x][pvToyText9], OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][x][pvToyTextID9]][textname], PlayerVehicleInfo[playerid][x][pvToyTextSize9], 1, VehicleColors[PlayerVehicleInfo[playerid][x][pvToyTextCol9]], 0, 0);
				}
			    if(listitem == 9)
			    {
					SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][x][pvToy][listitem], 0, PlayerVehicleInfo[playerid][x][pvToyText10], OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][x][pvToyTextID10]][textname], PlayerVehicleInfo[playerid][x][pvToyTextSize10], 1, VehicleColors[PlayerVehicleInfo[playerid][x][pvToyTextCol10]], 0, 0);
				}
			}
			else
			{
				SetDynamicObjectMaterial(PlayerVehicleInfo[playerid][x][pvToy][listitem], PlayerVehicleInfo[playerid][x][pvToyIndex][listitem], ObjMats[PlayerVehicleInfo[playerid][x][pvToyTextureID][listitem]][textureid], ObjMats[PlayerVehicleInfo[playerid][x][pvToyTexture1][listitem]][texturename1], ObjMats[PlayerVehicleInfo[playerid][x][pvToyTexture2][listitem]][texturename2], VehicleColors[PlayerVehicleInfo[playerid][x][pvToyColor][listitem]]);
			}
			pvEdit[playerid] = 1;
			pvEditID[playerid] = listitem;
			pvehEditID[playerid] = x;
			GetDynamicObjectPos(PlayerVehicleInfo[playerid][x][pvToy][listitem], pvPos[playerid][0], pvPos[playerid][1], pvPos[playerid][2]);
			GetDynamicObjectRot(PlayerVehicleInfo[playerid][x][pvToy][listitem], pvRot[playerid][0], pvRot[playerid][1], pvRot[playerid][2]);
   			EditDynamicObject(playerid, PlayerVehicleInfo[playerid][x][pvToy][listitem]);
		}
	}
	if(dialogid == VTOYCOL)
	{
	    new x = pvehEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk mengganti warna Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
		}
		if(response)
		{
		    if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Object di Slot tersebut.");
			pvEditID[playerid] = listitem;
			ShowPlayerDialog(playerid, VTOYCOL3, DIALOG_STYLE_INPUT, "Vehicle Object Color", "Masukkan ID Warna (0-255)", "Pilih", "Engga");
		}
	}
	if(dialogid == VTOYCOL4)
	{
	    new x = pvehEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk mengganti warna Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
		}
		if(response)
		{
		    if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Object di Slot tersebut.");
			pvEditID[playerid] = listitem;
			ShowPlayerDialog(playerid, VTOYCOL2, DIALOG_STYLE_INPUT, "Vehicle Object Part", "Masukkan Bagian dari Object (0-15)", "Pilih", "Engga");
		}
	}
	if(dialogid == VTOYCOL2)
	{
	    new v = pvehEditID[playerid], vt = pvEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk mengganti warna Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
			pvEditID[playerid] = 999;
		}
		if(response)
		{
			if(IsNumeric(inputtext))
			{
				PlayerVehicleInfo[playerid][v][pvToyIndex][vt] = strval(inputtext);
	            DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvToy][vt]);
				PlayerVehicleInfo[playerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[playerid][v][pvToyID][vt], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt], 10);
				SetDynamicObjectMaterial(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvToyIndex][vt], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTextureID][vt]][textureid], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture1][vt]][texturename1], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture2][vt]][texturename2], VehicleColors[PlayerVehicleInfo[playerid][v][pvToyColor][vt]]);
				AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);
				SendClientMessage(playerid, COLOR_WHITE, "Anda telah Edit Index Vehicle Object anda");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Hanya angka yang bisa dimasukkan");
		}
	}
	if(dialogid == VTOYCOL3)
	{
	    new v = pvehEditID[playerid], vt = pvEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk mengganti warna Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
			pvEditID[playerid] = 999;
		}
		if(response)
		{
			if(IsNumeric(inputtext))
			{
				PlayerVehicleInfo[playerid][v][pvToyColor][vt] = strval(inputtext);
	            DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvToy][vt]);
				PlayerVehicleInfo[playerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[playerid][v][pvToyID][vt], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt], 10);
				SetDynamicObjectMaterial(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvToyIndex][vt], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTextureID][vt]][textureid], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture1][vt]][texturename1], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture2][vt]][texturename2], VehicleColors[PlayerVehicleInfo[playerid][v][pvToyColor][vt]]);
				AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);
				SendClientMessage(playerid, COLOR_WHITE, "Anda telah mengganti warna Vehicle Object anda");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Hanya angka yang bisa dimasukkan");
		}
	}
	if(dialogid == DELETEVTOYS)
	{
		new d = pvehEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda telah membatalkan untuk menghapus Object di Slot tersebut.");
			pvehEditID[playerid] = 999;
		}
		if(response)
		{
			if(PlayerVehicleInfo[playerid][d][pvToyID][listitem] == 0) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki Car Object di Slot tersebut.");
			PlayerVehicleInfo[playerid][d][pvToyID][listitem] = 0;
			PlayerVehicleInfo[playerid][d][pvToyPosX][listitem] = 0.00000;
			PlayerVehicleInfo[playerid][d][pvToyPosY][listitem] = 0.00000;
			PlayerVehicleInfo[playerid][d][pvToyPosZ][listitem] = 0.00000;
			PlayerVehicleInfo[playerid][d][pvToyRotX][listitem] = 0.00000;
			PlayerVehicleInfo[playerid][d][pvToyRotY][listitem] = 0.00000;
			PlayerVehicleInfo[playerid][d][pvToyRotZ][listitem] = 0.00000;
			PlayerVehicleInfo[playerid][d][pvToyIndex][listitem] = 1;
			PlayerVehicleInfo[playerid][d][pvToyTexture1][listitem] = 0;
			PlayerVehicleInfo[playerid][d][pvToyTexture2][listitem] = 0;
			PlayerVehicleInfo[playerid][d][pvToyTextureID][listitem] = 0;
			PlayerVehicleInfo[playerid][d][pvToyColor][listitem] = 0;
			if(listitem == 0)
			{
				format(PlayerVehicleInfo[playerid][d][pvToyText1], 128, "None");
				PlayerVehicleInfo[playerid][d][pvToyTextCol1] = 1;
				PlayerVehicleInfo[playerid][d][pvToyTextSize1] = 20;
				PlayerVehicleInfo[playerid][d][pvToyTextID1] = 0;
			}
			if(listitem == 1)
			{
				format(PlayerVehicleInfo[playerid][d][pvToyText2], 128, "None");
				PlayerVehicleInfo[playerid][d][pvToyTextCol2] = 1;
				PlayerVehicleInfo[playerid][d][pvToyTextSize2] = 20;
				PlayerVehicleInfo[playerid][d][pvToyTextID2] = 0;
			}
			if(listitem == 2)
			{
				format(PlayerVehicleInfo[playerid][d][pvToyText3], 128, "None");
				PlayerVehicleInfo[playerid][d][pvToyTextCol3] = 1;
				PlayerVehicleInfo[playerid][d][pvToyTextSize3] = 20;
				PlayerVehicleInfo[playerid][d][pvToyTextID3] = 0;
			}
			if(listitem == 3)
			{
				format(PlayerVehicleInfo[playerid][d][pvToyText4], 128, "None");
				PlayerVehicleInfo[playerid][d][pvToyTextCol4] = 1;
				PlayerVehicleInfo[playerid][d][pvToyTextSize4] = 20;
				PlayerVehicleInfo[playerid][d][pvToyTextID4] = 0;
			}
			if(listitem == 4)
			{
				format(PlayerVehicleInfo[playerid][d][pvToyText5], 128, "None");
				PlayerVehicleInfo[playerid][d][pvToyTextCol5] = 1;
				PlayerVehicleInfo[playerid][d][pvToyTextSize5] = 20;
				PlayerVehicleInfo[playerid][d][pvToyTextID5] = 0;
			}
			if(listitem == 5)
			{
				format(PlayerVehicleInfo[playerid][d][pvToyText6], 128, "None");
				PlayerVehicleInfo[playerid][d][pvToyTextCol6] = 1;
				PlayerVehicleInfo[playerid][d][pvToyTextSize6] = 20;
				PlayerVehicleInfo[playerid][d][pvToyTextID6] = 0;
			}
			if(listitem == 6)
			{
				format(PlayerVehicleInfo[playerid][d][pvToyText7], 128, "None");
				PlayerVehicleInfo[playerid][d][pvToyTextCol7] = 1;
				PlayerVehicleInfo[playerid][d][pvToyTextSize7] = 20;
				PlayerVehicleInfo[playerid][d][pvToyTextID7] = 0;
			}
			if(listitem == 7)
			{
				format(PlayerVehicleInfo[playerid][d][pvToyText8], 128, "None");
				PlayerVehicleInfo[playerid][d][pvToyTextCol8] = 1;
				PlayerVehicleInfo[playerid][d][pvToyTextSize8] = 20;
				PlayerVehicleInfo[playerid][d][pvToyTextID8] = 0;
			}
			if(listitem == 8)
			{
				format(PlayerVehicleInfo[playerid][d][pvToyText9], 128, "None");
				PlayerVehicleInfo[playerid][d][pvToyTextCol9] = 1;
				PlayerVehicleInfo[playerid][d][pvToyTextSize9] = 20;
				PlayerVehicleInfo[playerid][d][pvToyTextID9] = 0;
			}
			if(listitem == 9)
			{
				format(PlayerVehicleInfo[playerid][d][pvToyText10], 128, "None");
				PlayerVehicleInfo[playerid][d][pvToyTextCol10] = 1;
				PlayerVehicleInfo[playerid][d][pvToyTextSize10] = 20;
				PlayerVehicleInfo[playerid][d][pvToyTextID10] = 0;
			}
			DestroyDynamicObject(PlayerVehicleInfo[playerid][d][pvToy][listitem]);
			pvehEditID[playerid] = 999;
		}
	}
	if(dialogid == BUYVTOYS4)
	{
	    new Stringg[1024];
		if(response)
		{
		    for(new x = 0; x < MAX_PLAYERVEHICLES; x++)
		    {
		    	if(listitem == x)
		    	{
					if(!IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId])) return SendClientMessage(playerid, COLOR_GREY, "Anda tidak berada di kendaraan tersebut");
					for(new vt;vt<MAX_OBJECTS_PER_PLAYER;vt++)
					{
						new name[32];
						format(name, sizeof(name), "None");
						for(new id;id<sizeof(HoldingVToysAll); id++)
						{
							if(HoldingVToysAll[id][holdingmodelid] == PlayerVehicleInfo[playerid][x][pvToyID][vt])
							{
								format(name, sizeof(name), "%s", HoldingVToysAll[id][holdingmodelname]);
							}
						}
						format(Stringg, sizeof(Stringg), "%s(%d) %s ($50.00)\n", Stringg, vt, name);
					}
		    	    pvehEditID[playerid] = x;
					ShowPlayerDialog(playerid, BUYVTOYS, DIALOG_STYLE_LIST, "Pilih Car Component", Stringg, "Pilih", "Engga");
				}
			}
		}
	}

	if(dialogid == BUYVTOYS)
	{
		new x = pvehEditID[playerid];
	    if(!response)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Anda membatalkan memilih Car Object.");
	        vslotselection[playerid] = 999;
		}
		if(response)
		{
		    if(GetPlayerCash(playerid) >= 5000)
		    {
			    if(listitem >= 3 && PlayerInfo[playerid][pDonateRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Anda harus donasi Basic untuk menggunakan Slot tersebut.");
					pvehEditID[playerid] = 999;
					return 1;
				}
			    if(listitem >= 5 && PlayerInfo[playerid][pDonateRank] < 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "Anda harus donasi Silver untuk menggunakan Slot tersebut.");
					pvehEditID[playerid] = 999;
					return 1;
				}
			    if(listitem >= 7 && PlayerInfo[playerid][pDonateRank] < 3)
				{
					SendClientMessage(playerid, COLOR_GREY, "Anda harus donasi Gold untuk menggunakan Slot tersebut.");
					pvehEditID[playerid] = 999;
					return 1;
				}
			    if(listitem >= 9 && PlayerInfo[playerid][pDonateRank] < 4)
				{
					SendClientMessage(playerid, COLOR_GREY, "Anda harus donasi Platinum untuk menggunakan Slot tersebut.");
					pvehEditID[playerid] = 999;
					return 1;
				}
			    if(PlayerVehicleInfo[playerid][x][pvToyID][listitem] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Anda sudah memiliki Object di Slot tersebut.");
					pvehEditID[playerid] = 999;
					return 1;
				}
			}
			else SendClientMessage(playerid, -1, "ERROR: Anda harus memiliki $50.00 untuk membeli Component ini");
			GivePlayerCash(playerid, -5000);
			Tax += 5000;
			vslotselection[playerid] = listitem;
			ShowModelSelectionMenu(playerid, vtoylist, "Pilih Car Part");
		}
	}
    if(dialogid == 32003)
	{
		if(response == 1)
		{
		    if(isnull(inputtext))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "You did not enter anything" );
		        return 1;
		    }
		    if(strlen(inputtext))
		    {
		        SendClientMessage(playerid, COLOR_GREY, " You have changed the music your boombox is playing.");
			    foreach(Player, i)
			    {
			        if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "bboxareaid")))
			        {
			            PlayAudioStreamForPlayer(i,inputtext, GetPVarFloat(playerid, "bposX"), GetPVarFloat(playerid, "bposY"), GetPVarFloat(playerid, "bposZ"), 30.0, 1);
			        }
			    }
			    SetPVarString(playerid, "BoomboxURL", inputtext);
			}
		}
		else
		{
		    return 1;
		}
	}
	if(dialogid == RENTVEH)
	{
	    if(!response) return -1;
		if(response)
		{
			for(new idx=1; idx<MAX_RENT; idx++)
			{
				if(listitem == 0)
				{
					//new String[255];
					//for(new idx=1; idx<MAX_RENT; idx++)
					//{
						new cost1 = RentInfo[idx][rCost1], cost2 = RentInfo[idx][rCost2], cost3 = RentInfo[idx][rCost3];
						if(IsPlayerInRangeOfPoint(playerid, 10, RentInfo[idx][rPosX], RentInfo[idx][rPosY], RentInfo[idx][rPosZ]))
						{
							format(String, sizeof(String), "15 Menit	(%s)\n30 Menit	(%s)\n1 Jam		(%s)", FormatMoney(cost1), FormatMoney(cost2), FormatMoney(cost3));
							ShowPlayerDialog(playerid, RENTVEH21, DIALOG_STYLE_LIST, "Kendaraan Sewa", String, "Pilih", "Engga");
						}
					//}
				}
				if(listitem == 1)
				{
					//new String[255];
					//for(new idx=1; idx<MAX_RENT; idx++)
					//{
						new cost1 = RentInfo[idx][rCost1], cost2 = RentInfo[idx][rCost2], cost3 = RentInfo[idx][rCost3];
						if(IsPlayerInRangeOfPoint(playerid, 10, RentInfo[idx][rPosX], RentInfo[idx][rPosY], RentInfo[idx][rPosZ]))
						{
							format(String, sizeof(String), "15 Menit	(%s)\n30 Menit	(%s)\n1 Jam		(%s)", FormatMoney(cost1), FormatMoney(cost2), FormatMoney(cost3));
							ShowPlayerDialog(playerid, RENTVEH22, DIALOG_STYLE_LIST, "Kendaraan Sewa", String, "Pilih", "Engga");
						}

					//}
				}
			}
		}
	}
	if(dialogid == RENTVEH21)
	{
			new idx = pRent[playerid];
		    if(!response)
		    {
				format(String, sizeof(String), "%s\n%s", VehicleName[RentInfo[idx][rVehicle1] - 400], VehicleName[RentInfo[idx][rVehicle2] - 400]);
				ShowPlayerDialog(playerid, RENTVEH, DIALOG_STYLE_LIST, "Kendaraan Rental", String, "Pilih", "Engga");
			}
			new Float:px, Float:py, Float:pz;
			new rand = random(126), rand2 = random(126);
			if(response)
			{
			    if(listitem == 0)
			    {
			        if(GetPlayerCash(playerid) < RentInfo[idx][rCost1])
			        {
	 					SendClientMessage(playerid, COLOR_GRAD1, "Uang anda kurang!");
						new cost1 = RentInfo[idx][rCost1], cost2 = RentInfo[idx][rCost2], cost3 = RentInfo[idx][rCost3];
						format(String, sizeof(String), "15 Menit	(%s)\n30 Menit	(%s)\n1 Jam		(%s)", FormatMoney(cost1), FormatMoney(cost2), FormatMoney(cost3));
						ShowPlayerDialog(playerid, RENTVEH21, DIALOG_STYLE_LIST, "Kendaraan Sewa", String, "Pilih", "Engga");
					}
					else
					{
					    GivePlayerCash(playerid, -RentInfo[idx][rCost1]);
						PlayerRentInfo[playerid][prVehicleRent] = 1;
						PlayerRentInfo[playerid][prRentTime] = 900;
						TogglePlayerControllable(playerid, 1);
						SendClientMessage(playerid,COLOR_GREY," Anda telah menyewa kendaraan ini selama 15 menit!. Gunakan ( /renttime )");
						GetPlayerPos(playerid, px, py, pz);
						RentVeh = CreatePlayerRent(playerid, RentInfo[idx][rVehicle1], RentInfo[idx][rSpawnX], RentInfo[idx][rSpawnY], RentInfo[idx][rSpawnZ], RentInfo[idx][rAngle], rand, rand2);
						PutPlayerInVehicle(playerid, RentVeh, 0);
						pRent[playerid] = 0;
						return 1;
					}
				}
				if(listitem == 1)
				{
			        if(GetPlayerCash(playerid) < RentInfo[idx][rCost2])
			        {
	 					SendClientMessage(playerid, COLOR_GRAD1, "Uang anda kurang!");
						new cost1 = RentInfo[idx][rCost1], cost2 = RentInfo[idx][rCost2], cost3 = RentInfo[idx][rCost3];
						format(String, sizeof(String), "15 Menit	(%s)\n30 Menit	(%s)\n1 Jam		(%s)", FormatMoney(cost1), FormatMoney(cost2), FormatMoney(cost3));
						ShowPlayerDialog(playerid, RENTVEH21, DIALOG_STYLE_LIST, "Kendaraan Sewa", String, "Pilih", "Engga");
					}
					else
					{
					    GivePlayerCash(playerid, -RentInfo[idx][rCost2]);
						PlayerRentInfo[playerid][prVehicleRent] = 1;
						PlayerRentInfo[playerid][prRentTime] = 1800;
						TogglePlayerControllable(playerid, 1);
						SendClientMessage(playerid,COLOR_GREY," Anda telah menyewa kendaraan ini selama 30 menit!. Gunakan ( /renttime )");
						GetPlayerPos(playerid, px, py, pz);
						RentVeh = CreatePlayerRent(playerid, RentInfo[idx][rVehicle1], RentInfo[idx][rSpawnX], RentInfo[idx][rSpawnY], RentInfo[idx][rSpawnZ], RentInfo[idx][rAngle], rand, rand2);
						PutPlayerInVehicle(playerid, RentVeh, 0);
						pRent[playerid] = 0;
						return 1;
					}
				}
				if(listitem == 2)
				{
			        if(GetPlayerCash(playerid) < RentInfo[idx][rCost3])
			        {
	 					SendClientMessage(playerid, COLOR_GRAD1, "Uang anda kurang!");
						new cost1 = RentInfo[idx][rCost1], cost2 = RentInfo[idx][rCost2], cost3 = RentInfo[idx][rCost3];
						format(String, sizeof(String), "15 Menit	(%s)\n30 Menit	(%s)\n1 Jam		(%s)", FormatMoney(cost1), FormatMoney(cost2), FormatMoney(cost3));
						ShowPlayerDialog(playerid, RENTVEH21, DIALOG_STYLE_LIST, "Kendaraan Sewa", String, "Pilih", "Engga");
					}
					else
					{
					    GivePlayerCash(playerid, -RentInfo[idx][rCost3]);
						PlayerRentInfo[playerid][prVehicleRent] = 1;
						PlayerRentInfo[playerid][prRentTime] = 3600;
						TogglePlayerControllable(playerid, 1);
						SendClientMessage(playerid,COLOR_GREY," Anda telah menyewa kendaraan ini selama 1 jam!. Gunakan ( /renttime )");
						GetPlayerPos(playerid, px, py, pz);
						RentVeh = CreatePlayerRent(playerid, RentInfo[idx][rVehicle1], RentInfo[idx][rSpawnX], RentInfo[idx][rSpawnY], RentInfo[idx][rSpawnZ], RentInfo[idx][rAngle], rand, rand2);
						PutPlayerInVehicle(playerid, RentVeh, 0);
						pRent[playerid] = 0;
						return 1;
					}
				}
			}
	}

	if(dialogid == RENTVEH22)
	{
			new idx = pRent[playerid];
		    if(!response)
		    {
				format(String, sizeof(String), "%s\n%s", VehicleName[RentInfo[idx][rVehicle1] - 400], VehicleName[RentInfo[idx][rVehicle2] - 400]);
				ShowPlayerDialog(playerid, RENTVEH, DIALOG_STYLE_LIST, "Kendaraan Rental", String, "Pilih", "Engga");
			}
			new rand = random(126), rand2 = random(126);
			new Float:px, Float:py, Float:pz;
			if(response)
			{
			    if(listitem == 0)
			    {
			        if(GetPlayerCash(playerid) < RentInfo[idx][rCost4])
			        {
	 					SendClientMessage(playerid, COLOR_GRAD1, "Uang anda kurang!");
						new cost1 = RentInfo[idx][rCost1], cost2 = RentInfo[idx][rCost2], cost3 = RentInfo[idx][rCost3];
						format(String, sizeof(String), "15 Menit	(%s)\n30 Menit	(%s)\n1 Jam		(%s)", FormatMoney(cost1), FormatMoney(cost2), FormatMoney(cost3));
						ShowPlayerDialog(playerid, RENTVEH22, DIALOG_STYLE_LIST, "Kendaraan Sewa", String, "Pilih", "Engga");
					}
					else
					{
					    GivePlayerCash(playerid, -RentInfo[idx][rCost4]);
						PlayerRentInfo[playerid][prVehicleRent] = 1;
						PlayerRentInfo[playerid][prRentTime] = 900;
						TogglePlayerControllable(playerid, 1);
						SendClientMessage(playerid,COLOR_GREY," Anda telah menyewa kendaraan ini selama 15 menit!. Gunakan ( /renttime )");
						GetPlayerPos(playerid, px, py, pz);
						RentVeh = CreatePlayerRent(playerid, RentInfo[idx][rVehicle2], RentInfo[idx][rSpawnX], RentInfo[idx][rSpawnY], RentInfo[idx][rSpawnZ], RentInfo[idx][rAngle], rand, rand2);
						PutPlayerInVehicle(playerid, RentVeh, 0);
						pRent[playerid] = 0;
						return 1;
					}
				}
				if(listitem == 1)
				{
			        if(GetPlayerCash(playerid) < RentInfo[idx][rCost5])
			        {
	 					SendClientMessage(playerid, COLOR_GRAD1, "Uang anda kurang!");
						new cost1 = RentInfo[idx][rCost1], cost2 = RentInfo[idx][rCost2], cost3 = RentInfo[idx][rCost3];
						format(String, sizeof(String), "15 Menit	(%s)\n30 Menit	(%s)\n1 Jam		(%s)", FormatMoney(cost1), FormatMoney(cost2), FormatMoney(cost3));
						ShowPlayerDialog(playerid, RENTVEH22, DIALOG_STYLE_LIST, "Kendaraan Sewa", String, "Pilih", "Engga");
					}
					else
					{
					    GivePlayerCash(playerid, -RentInfo[idx][rCost5]);
						PlayerRentInfo[playerid][prVehicleRent] = 1;
						PlayerRentInfo[playerid][prRentTime] = 1800;
						TogglePlayerControllable(playerid, 1);
						SendClientMessage(playerid,COLOR_GREY," Anda telah menyewa kendaraan ini selama 30 menit!. Gunakan ( /renttime )");
						GetPlayerPos(playerid, px, py, pz);
						RentVeh = CreatePlayerRent(playerid, RentInfo[idx][rVehicle2], RentInfo[idx][rSpawnX], RentInfo[idx][rSpawnY], RentInfo[idx][rSpawnZ], RentInfo[idx][rAngle], rand, rand2);
						PutPlayerInVehicle(playerid, RentVeh, 0);
						pRent[playerid] = 0;
						return 1;
					}
				}
				if(listitem == 2)
				{
			        if(GetPlayerCash(playerid) < RentInfo[idx][rCost6])
			        {
	 					SendClientMessage(playerid, COLOR_GRAD1, "Uang anda kurang!");
						new cost1 = RentInfo[idx][rCost1], cost2 = RentInfo[idx][rCost2], cost3 = RentInfo[idx][rCost3];
						format(String, sizeof(String), "15 Menit	(%s)\n30 Menit	(%s)\n1 Jam		(%s)", FormatMoney(cost1), FormatMoney(cost2), FormatMoney(cost3));
						ShowPlayerDialog(playerid, RENTVEH22, DIALOG_STYLE_LIST, "Kendaraan Sewa", String, "Pilih", "Engga");
					}
					else
					{
					    GivePlayerCash(playerid, -RentInfo[idx][rCost6]);
						PlayerRentInfo[playerid][prVehicleRent] = 1;
						PlayerRentInfo[playerid][prRentTime] = 3600;
						TogglePlayerControllable(playerid, 1);
						SendClientMessage(playerid,COLOR_GREY," Anda telah menyewa kendaraan ini selama 1 jam!. Gunakan ( /renttime )");
						GetPlayerPos(playerid, px, py, pz);
						RentVeh = CreatePlayerRent(playerid, RentInfo[idx][rVehicle2], RentInfo[idx][rSpawnX], RentInfo[idx][rSpawnY], RentInfo[idx][rSpawnZ], RentInfo[idx][rAngle], rand, rand2);
						PutPlayerInVehicle(playerid, RentVeh, 0);
						pRent[playerid] = 0;
						return 1;
					}
				}
			}
	}

   	if(dialogid == 1330) // resto
	{
		if(response)
		{
            new Float:health, string[10000];
			GetPlayerHealth(playerid,health);
			new id = PlayerInfo[playerid][pInBizz];
			if(listitem == 0)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][0])
				{
				    if(BizzInfo[id][bProducts] < 3) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
				    if(PlayerInfo[playerid][pHunger] > 100) { SendClientMessageEx(playerid,COLOR_RED,"Anda sudah terlalu kenyang."); return 1; }
					BizzInfo[id][bProducts] -= 3;
   					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][0]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][0];
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Menu +12 {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][0]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					if(health > 99)
					{
					AC_BS_SetPlayerHealth(playerid, 100);
					PlayerInfo[playerid][pHealth] = 100.0;
					}
					else
					{
					AC_BS_SetPlayerHealth(playerid,health+35);
					PlayerInfo[playerid][pHealth] += 35.0;
					}
					PlayerInfo[playerid][pHunger] += 14;
				}
				else { SendClientMessageEx(playerid,COLOR_GRAD4,"Uang Kamu Kurang !."); }
			}
			else if(listitem == 1)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][1])
				{
				    if(BizzInfo[id][bProducts] < 5) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
				    if(PlayerInfo[playerid][pHunger] > 100) { SendClientMessageEx(playerid,COLOR_RED,"Darah anda sudah penuh."); return 1; }
					BizzInfo[id][bProducts] -= 5;
                    GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][1]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][1];
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Menu +48 {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][1]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					if(health > 99)
					{
					AC_BS_SetPlayerHealth(playerid, 100);
					PlayerInfo[playerid][pHealth] = 100.0;
					}
					else
					{
					AC_BS_SetPlayerHealth(playerid,health+48);
					PlayerInfo[playerid][pHealth] += 48.0;
					}
					PlayerInfo[playerid][pHunger] += 48;
				}
				else { SendClientMessageEx(playerid,COLOR_GRAD4,"Uang Kamu Kurang !."); }
			}
			else if(listitem == 2)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][2])
				{
				    if(BizzInfo[id][bProducts] < 5) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
				    if(PlayerInfo[playerid][pHunger] > 100) { SendClientMessageEx(playerid,COLOR_RED,"Darah anda sudah penuh."); return 1; }
					BizzInfo[id][bProducts] -= 6;
                    GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][2]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][2];
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Menu +60 {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][2]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					if(health > 99)
					{
					AC_BS_SetPlayerHealth(playerid, 100);
					PlayerInfo[playerid][pHealth] = 100.0;
					}
					else
					{
					AC_BS_SetPlayerHealth(playerid,health+60);
					PlayerInfo[playerid][pHealth] += 60.0;
					}
					PlayerInfo[playerid][pHunger] += 60;
				}
				else { SendClientMessageEx(playerid,COLOR_GRAD4,"Uang Kamu Kurang !."); }
			}
			else if(listitem == 3)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][3])
				{
				    if(BizzInfo[id][bProducts] < 7) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
				    if(PlayerInfo[playerid][pHunger] > 100) { SendClientMessageEx(playerid,COLOR_RED,"Darah anda sudah penuh."); return 1; }
					BizzInfo[id][bProducts] -= 7;
                    GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][3]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][3];
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Menu +84 {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][3]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					if(health > 99)
					{
					AC_BS_SetPlayerHealth(playerid, 100);
					PlayerInfo[playerid][pHealth] = 100.0;
					}
					else
					{
					AC_BS_SetPlayerHealth(playerid,health+84);
					PlayerInfo[playerid][pHealth] += 84.0;
					}
					PlayerInfo[playerid][pHunger] += 84;
				}
				else { SendClientMessageEx(playerid,COLOR_GRAD4,"Uang Kamu Kurang !."); }
			}
			else if(listitem == 4)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][4])
				{
				    if(BizzInfo[id][bProducts] < 8) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
				    if(PlayerInfo[playerid][pHunger] > 100) { SendClientMessageEx(playerid,COLOR_RED,"Darah anda sudah penuh."); return 1; }
					BizzInfo[id][bProducts] -= 8;
                    GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][4]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][4];
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Menu +100 {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][4]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					if(health > 99)
					{
					AC_BS_SetPlayerHealth(playerid, 100);
					PlayerInfo[playerid][pHealth] = 100.0;
					}
					else
					{
					AC_BS_SetPlayerHealth(playerid,health+99);
					PlayerInfo[playerid][pHealth] += 99.0;
					}
					PlayerInfo[playerid][pHunger] += 100;
				}
				else { SendClientMessageEx(playerid,COLOR_GRAD4,"Uang Kamu Kurang !."); }
			}
			else if(listitem == 5)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][5])
				{
				    if(BizzInfo[id][bProducts] < 3) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
					BizzInfo[id][bProducts] -= 3;
                    GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][5]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][5];
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Energy Drink {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][5]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
					SetPVarInt(playerid, "UsingSprunk", 1);
				}
				else { SendClientMessageEx(playerid,COLOR_GRAD4,"Uang Kamu Kurang !."); }
			}
		}
		return 1;
	}
	if(dialogid == 1331) // BAR atau CLUB
	{
		if(response)
		{
            new Float:health, string[10000];
			GetPlayerHealth(playerid,health);
			new id = PlayerInfo[playerid][pInBizz];
			if(listitem == 0)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][0])
				{
				    if(BizzInfo[id][bProducts] < 3) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
					BizzInfo[id][bProducts] -= 3;
                    GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][0]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][0];
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Beer {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][0]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
				}
				else { SendClientMessageEx(playerid,COLOR_GRAD4,"Uang Kamu Kurang !."); }
			}
			else if(listitem == 1)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][1])
				{
				    if(BizzInfo[id][bProducts] < 3) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
					BizzInfo[id][bProducts] -= 3;
                    GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][1]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][1];
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Wine {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][1]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
				}
				else { SendClientMessageEx(playerid,COLOR_GRAD4,"Uang Kamu Kurang !."); }
			}
			else if(listitem == 1)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][2])
				{
				    if(BizzInfo[id][bProducts] < 3) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
					BizzInfo[id][bProducts] -= 3;
                    GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][2]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][2];
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Energy Drink {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][2]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
					SetPVarInt(playerid, "UsingSprunk", 1);
				}
				else { SendClientMessageEx(playerid,COLOR_GRAD4,"Uang Kamu Kurang !."); }
			}
		}
		return 1;
	}
	if(dialogid == 1150)
	{
	    if(response)
	   	{
	   	    PayCheck(playerid);
		}
		return 1;
	}
	if(dialogid == 15781)
	{
		if(response)
	   	{
		    if(listitem == 0)
			{
			    if(PlayerInfo[playerid][pComponent] < 200) { SendClientMessageEx(playerid,COLOR_WHITE,"Harsu memiliki 200 Component"); }
				else {
				PlayerInfo[playerid][pComponent] -= 200;
				AddVehicleComponent(GetPlayerVehicleID(playerid), 1080); }
			}
			else if(listitem == 1)
			{
			    if(PlayerInfo[playerid][pComponent] < 200) { SendClientMessageEx(playerid,COLOR_WHITE,"Harsu memiliki 200 Component"); }
			    else {
				PlayerInfo[playerid][pComponent] -= 200;
				AddVehicleComponent(GetPlayerVehicleID(playerid), 1025); }
			}
			else if(listitem == 3)
			{
			    if(PlayerInfo[playerid][pComponent] < 200) { SendClientMessageEx(playerid,COLOR_WHITE,"Harsu memiliki 200 Component"); }
			    else {
				PlayerInfo[playerid][pComponent] -= 900;
				AddVehicleComponent(GetPlayerVehicleID(playerid), 1083); }
			}
			else if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pComponent] < 200) { SendClientMessageEx(playerid,COLOR_WHITE,"Harsu memiliki 200 Component"); }
				else {
				PlayerInfo[playerid][pComponent] -= 950;
				AddVehicleComponent(GetPlayerVehicleID(playerid), 1077); }
			}
			else if(listitem == 5)
			{
	            if(PlayerInfo[playerid][pComponent] < 200) { SendClientMessageEx(playerid,COLOR_WHITE,"Harsu memiliki 200 Component"); }
				else {
				PlayerInfo[playerid][pComponent] -= 200;
				AddVehicleComponent(GetPlayerVehicleID(playerid), 1033); }
			}
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
			return 1;
		}
		return 1;
	}
    if(dialogid == 11029) // equiqstore
	{
		if(response)
		{
		    new id = PlayerInfo[playerid][pInBizz], prod = BizzInfo[id][bProducts], string[10000];
			if(listitem == 0)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][0])
				{
				    if(prod < 4) { SendClientMessageEx(playerid,COLOR_RED,"Produk habis."); return 1; }
				    if(PlayerInfo[playerid][pPancingan] > 0) { SendClientMessageEx(playerid,COLOR_RED,"Anda masih mempunyai pancingan."); return 1; }
					BizzInfo[id][bProducts] -= 4;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][0]);
 					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][0];
				    PlayerInfo[playerid][pPancingan] = 100;
				    format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Fish Pole {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][0]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
                else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 1)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][1])
				{
				    if(prod < 4) { SendClientMessageEx(playerid,COLOR_RED,"Produk habis."); return 1; }
				    if(PlayerInfo[playerid][pScrewdriver] > 0) { SendClientMessageEx(playerid,COLOR_RED,"Anda sudah mempunyai obeng."); return 1; }
                    BizzInfo[id][bProducts] -= 4;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][1]);
 					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][1];
				    PlayerInfo[playerid][pScrewdriver] += 100;
				    format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Gun Schematic {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][1]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
                else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 2)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][2])
				{
				    if(prod < 4) { SendClientMessageEx(playerid,COLOR_RED,"Produk habis."); return 1; }
				    if(PlayerInfo[playerid][pTire] > 0) { SendClientMessageEx(playerid,COLOR_RED,"Anda sudah mempunyai kunci inggris."); return 1; }
                    BizzInfo[id][bProducts] -= 4;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][2]);
 					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][2];
				    PlayerInfo[playerid][pTire] = 100;
				    format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Wrench {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][2]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
                else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 3)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][3])
				{
				    if(prod < 5) { SendClientMessageEx(playerid,COLOR_RED,"Produk habis."); return 1; }
     				BizzInfo[id][bProducts] -= 5;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][3]);
 					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][3];
				    givePlayerValidWeapon(playerid, 2, 10);
				    format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Golf Club {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][3]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
                else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 4)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][4])
				{
				    if(prod < 5) { SendClientMessageEx(playerid,COLOR_RED,"Produk habis."); return 1; }
     				BizzInfo[id][bProducts] -= 5;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][4]);
 					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][4];
				    givePlayerValidWeapon(playerid, 5, 10);
				    format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Baseball Bat {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][4]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
                else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 5)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][5])
				{
				    if(prod < 5) { SendClientMessageEx(playerid,COLOR_RED,"Produk habis."); return 1; }
				    if(PlayerInfo[playerid][pJerigen] == 1) { SendClientMessageEx(playerid,COLOR_GOLD,"Anda memiliki item tersebut."); return 1; }
					BizzInfo[id][bProducts] -= 3;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][5]);
 					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][5];
					PlayerInfo[playerid][pJerigen] = 1;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Cellphone {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][5]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					SendClientMessageEx(playerid,COLOR_GOLD,"Untuk mengisi jerigen bensin datanglah ke POM dan gunakan cmd /filljerigen.");
					SendClientMessageEx(playerid,COLOR_GOLD,"Untuk menggunakan jerigen bensin masuklah kedalam mobil dan gunakan cmd /usejerigen.");
				}
                else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
		}
		return 1;
	}
    if(dialogid == 11019) // elektro
	{
		if(response)
		{
		    new id = PlayerInfo[playerid][pInBizz], prod = BizzInfo[id][bProducts], string[10000];
			if(listitem == 0)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][0])
				{
					if(prod < 8) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
         			BizzInfo[id][bProducts] -= 8;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][0]);
 					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][0];
					PlayerInfo[playerid][pPhone] = 1;
					if(PlayerInfo[playerid][pPnumber] == 0)
					{
						format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Cellphone {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][4]));
						SendClientMessage(playerid, COLOR_ARWIN, string);
					}
					else if(PlayerInfo[playerid][pPnumber] > 0)
					{
						SendClientMessageEx(playerid, COLOR_ARWIN, "SHOP: {ffffff}You already have a Cellphone");
					}
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 1)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][1])
				{
				    if(PlayerInfo[playerid][pRadio] == 1) { SendClientMessageEx(playerid,COLOR_RED,"Kamu telah memiliki Radio."); return 1; }
				    if(prod < 8) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
                    BizzInfo[id][bProducts] -= 8;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][1]);
 					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][1];
				   	PlayerInfo[playerid][pRadio] = 1;
					PlayerInfo[playerid][pRadioFreq] = 0;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Walkie-Talkie {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][1]));
					SendClientMessage(playerid, COLOR_ARWIN, string);

				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 2)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][2])
				{
				    if(prod < 5) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
					BizzInfo[id][bProducts] -= 5;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][2]);
 					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][2];
				   	givePlayerValidWeapon(playerid, 43, AMMO_MELEE);
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Camera {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][2]));
					SendClientMessage(playerid, COLOR_ARWIN, string);

				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 3)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][3])
				{
				    if(BizzInfo[id][bProducts] <= 0) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
					BizzInfo[id][bProducts] -= 4;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][3]);
 					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][3];
				    PlayerInfo[playerid][pPulsa2] += 10000;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}10000 Point(s) Phone Credits {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][3]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][4])
				{
				    if(BizzInfo[id][bProducts] <= 0) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
					BizzInfo[id][bProducts] -= 3;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][4]);
 					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][4];
 					PlayerInfo[playerid][pKartuPerdana] = 1;
        			new randphone = 100000 + random(999999);//minimum 1000  max 9999
					ReplacePH(PlayerInfo[playerid][pPnumber], randphone);
					PlayerInfo[playerid][pPnumber] = randphone;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}SIM Card {ffffff}for {00ff00}$%s with Number: %d", FormatMoney(BizzInfo[id][bProductPrice][4]), randphone);
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
		}
		return 1;
	}

    if(dialogid == 3497) // toko baju
	{
		if(response)
		{
		    new id = PlayerInfo[playerid][pInBizz], string[10000];

   			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][0])
				{
				    if(BizzInfo[id][bProducts] <= 3) { SendClientMessageEx(playerid,COLOR_RED,"Bisnis ini kehabisan produk."); return 1; }
				    format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Clothes {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][0]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					ShowModelSelectionMenu(playerid, skinlist, "Select Skin");
				}
				else { SendClientMessageEx(playerid,COLOR_WHITE,"Uang kamu tidak cukup untuk membeli baju."); }
			}
			if(listitem == 1)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][1])
				{
					if(BizzInfo[id][bProducts] <= 3) { SendClientMessageEx(playerid,COLOR_RED,"Produk Habis."); return 1; }
					if(PlayerInfo[playerid][pLevel] < 3) return ShowDescriptionText(playerid,"Level anda harus minimal 3.");
         			BizzInfo[id][bProducts] -= 8;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][1]);
 					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][1];
 					PlayerInfo[playerid][pMaskID] = random(9999)+1000+PlayerInfo[playerid][pMask];
					PlayerInfo[playerid][pMask] = 1;
				    format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Mask {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][1]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 2)
			{
                ShowPlayerDialog( playerid, BUYTOYS, DIALOG_STYLE_MSGBOX, "Toy Store", "Welcome to the toy store! Here you can buy accessories to attach to your player.\n\nFirst, we will choose a slot to store the toy in.\n(Note: Non-VIP can only hold 2 toys, Basic-Professional Donater can hold 3-5)","Continue", "Cancel" );
			}
		}
		return 1;
	}

	if(dialogid == STOREMENU)
	{
		if(response)
		{
		    new id = PlayerInfo[playerid][pInBizz], prod = BizzInfo[id][bProducts], string[10000];
			if(listitem == 0)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][0])
				{
				    if(prod < 3) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
        			BizzInfo[id][bProducts] -= 3;
					PlayerInfo[playerid][pDice] = 1;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Dice {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][0]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				    GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][0]);
				    BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][0];
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 1)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][1])
				{
				    if(prod < 5) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
                    BizzInfo[id][bProducts] -= 5;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][1]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][1];
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCigar] += 10;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Cigarretes {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][1]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
    		}
			if(listitem == 2)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][2])
				{
				    if(prod < 3) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
				    BizzInfo[id][bProducts] -= 3;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][2]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][2];
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
					SetPVarInt(playerid, "UsingSprunk", 1);
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Energy Drink {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][2]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
    		}
			if(listitem == 3)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][9])
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCangkul] = 35;
					BizzInfo[id][bProducts] -= 3;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Farm Hoe {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][3]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][3]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][3];
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 4)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][4])
				{
				    if(prod < 5) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
                    BizzInfo[id][bProducts] -= 5;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][4]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][4];
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pBandage] += 10;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Bandage {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][4]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
    		}
    		if(listitem == 5)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][5])
				{
				    if(prod < 5) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
                    BizzInfo[id][bProducts] -= 5;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][5]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][5];
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pPainkiller] += 10;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Painkiller {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][5]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
    		}
		}
	}
	if(dialogid == PETROLMENU)
	{
		if(response)
		{
		    new id = PlayerInfo[playerid][pInBizz], prod = BizzInfo[id][bProducts], string[10000];
			if(listitem == 0)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][0])
				{
				    if(prod < 3) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
        			BizzInfo[id][bProducts] -= 3;
					PlayerInfo[playerid][pDice] = 1;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Dice {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][0]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				    GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][0]);
				    BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][0];
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 1)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][1])
				{
				    if(prod < 5) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
                    BizzInfo[id][bProducts] -= 5;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][1]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][1];
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCigar] += 10;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Cigarretes {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][1]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
    		}
			if(listitem == 2)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][2])
				{
				    if(prod < 3) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
				    BizzInfo[id][bProducts] -= 3;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][2]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][2];
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
					SetPVarInt(playerid, "UsingSprunk", 1);
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Energy Drink {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][2]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
    		}
			if(listitem == 3)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][3])
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCangkul] = 35;
					BizzInfo[id][bProducts] -= 3;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Farm Hoe {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][3]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][3]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][3];
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 4)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][4])
				{
				    if(prod < 5) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
                    BizzInfo[id][bProducts] -= 5;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][4]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][4];
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pBandage] += 10;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Bandage {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][4]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
    		}
    		if(listitem == 5)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][5])
				{
				    if(prod < 5) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
                    BizzInfo[id][bProducts] -= 5;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][5]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][5];
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pPainkiller] += 10;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Painkiller {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][5]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
    		}
		}
	}
	if(dialogid == GYMMENU)
	{
		if(response)
		{
		    new id = PlayerInfo[playerid][pInBizz], prod = BizzInfo[id][bProducts], string[10000];
			if(listitem == 0)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][0])
				{
				    if(prod < 3) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
        			BizzInfo[id][bProducts] -= 3;
					PlayerInfo[playerid][pGYMTime] = 60*30;
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}GYM Membership {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][0]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				    GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][0]);
				    BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][0];
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
			}
			if(listitem == 1)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][1])
				{
				    if(prod < 3) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
				    BizzInfo[id][bProducts] -= 3;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][1]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][1];
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
					SetPVarInt(playerid, "UsingSprunk", 1);
					format(string, sizeof(string), "SHOP: {ffffff}You've purchased {ffff00}Energy Drink {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][1]));
					SendClientMessage(playerid, COLOR_ARWIN, string);
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
    		}
			if(listitem == 2)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][2])
				{
				    if(prod < 1) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pMineralWater] += 1;
					BizzInfo[id][bProducts] -= 1;
					SendFormattedMessage(playerid, COLOR_ARWIN, "SHOP: {ffffff}You've purchased {ffff00}Mineral Water {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][2]));
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][2]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][2];
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 3)
			{
				if (GetPlayerCash(playerid) >= BizzInfo[id][bProductPrice][3])
				{
				    if(prod < 1) { SendClientMessageEx(playerid,COLOR_RED,"Produk kosong."); return 1; }
                    BizzInfo[id][bProducts] -= 1;
					GivePlayerCash(playerid, -BizzInfo[id][bProductPrice][3]);
					BizzInfo[id][bTill] += BizzInfo[id][bProductPrice][3];
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pSnack] += 1;
					SendFormattedMessage(playerid, COLOR_ARWIN, "SHOP: {ffffff}You've purchased {ffff00}Snack {ffffff}for {00ff00}$%s", FormatMoney(BizzInfo[id][bProductPrice][3]));
				}
				else { SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!"); }
    		}
		}
	}
	if(dialogid == BAN_DIALOG)
	{
 		if(response)
   		{
			Kick(playerid);
		}
	}
	if(dialogid == 15273)
	{
 		if(response)
   		{
   		    if(GetPlayerCash(playerid) < 25000) return SendClientMessage(playerid, -1, "ERROR: You need $250.00 to buy materials packet");
   		    new rand = random(2400+100);
			PlayerInfo[playerid][pMats] += rand;
			GivePlayerCash(playerid, -25000);
		}
	}
	//HELP DONATE
if(dialogid == DTUT) // Gender
	{
	    if(response)
	    {
	        if (listitem == 0)
	        {
			   	PlayerInfo[playerid][pSex] = 1;
			   	ShowPlayerDialog(playerid, 23675, DIALOG_STYLE_MSGBOX, "Gender Confirmed", "You've been selected Male Character for your Character\n\nNext your must Input Origin for your Character\nChoose 'Continue' for next step.", "Continue", "Back");
		   	}
			if (listitem == 1)
	        {
				PlayerInfo[playerid][pSex] = 2;
			   	ShowPlayerDialog(playerid, 23675, DIALOG_STYLE_MSGBOX, "Gender Confirmed", "You've been selected Female Character for your Character\n\nNext your must Input Origin for your Character\nChoose 'Continue' for next step.", "Continue", "Back");
	        }
		}
		else ShowPlayerDialog(playerid,DTUT,DIALOG_STYLE_LIST,"Choose Gender:","Male Character\nFemale Character","Select", "");
	}
    if (dialogid == 23675)
	{
	    if (response) ShowPlayerDialog(playerid,DTUT1,DIALOG_STYLE_INPUT,"Origin Confirmed","Silahkan masukan Origin karaktermu.\n\n","Proceed","Cancel");
	    else ShowPlayerDialog(playerid,DTUT,DIALOG_STYLE_LIST,"Choose Character:","Male Character\nFemale Character","Select", "");
	}
	if(dialogid == DTUT1)
	{
		if( strlen( inputtext ) >= 1 )
  		{
	 		if(response)
	   		{
	   		            new EncryptedPassword[64];
			            format(EncryptedPassword, 64, "%s", inputtext );
		             	format(PlayerInfo[playerid][pAge], 64, "%s", EncryptedPassword );
		             	format(String, sizeof(String), "ACCOUNT: {FFFFFF}Your character origin has been set to {FFFF00}'%s'", inputtext );
		             	SendClientMessageEx(playerid, COLOR_ARWIN, String );
						SendClientMessageEx(playerid, COLOR_WHITE, "ACCOUNT: You've arrive at Unity Station with {FF0000}$25.00 {FFFFFF}in your hand and {FF0000}$50.00 {FFFFFF}on your Bank Account");
						gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
						DeletePVar(playerid, "MedicBill");
						SetPlayerColor(playerid,TEAM_HIT_COLOR);
						AC_BS_SetPlayerInterior(playerid,0);
						AC_BS_SetPlayerPos(playerid,1745.8828, -1860.8129, 13.5783);//stasiun
						PlayerInfo[playerid][pTut] = 1;
						TogglePlayerControllable(playerid, 1);
						if(PlayerInfo[playerid][pSex] == 1){ PlayerInfo[playerid][pModel] = MaleSkin[random(sizeof(MaleSkin))]; PlayerInfo[playerid][pChar] = MaleSkin[random(sizeof(MaleSkin))]; SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]); }
						else{PlayerInfo[playerid][pModel] = FemaleSkin[random(sizeof(MaleSkin))]; PlayerInfo[playerid][pModel] = FemaleSkin[random(sizeof(MaleSkin))]; SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]); }
						SetPlayerFacingAngle(playerid, 90);
						SetCameraBehindPlayer(playerid);
						AC_BS_SetPlayerVirtualWorld(playerid, 0);
			}
		}
		if(!response)
		{
  			ShowPlayerDialog(playerid,DTUT,DIALOG_STYLE_LIST,"Choose Character:","Male Character\nFemale Character","Select", "");
  		}
	}
	if(dialogid == 233)
	{
		if( strlen( inputtext ) >= 1 )
  		{
	 		if(response)
	   		{
	   		            new EncryptedPassword[64];
			            format(EncryptedPassword, 64, "%s", ColouredText(inputtext));
		             	format(PlayerInfo[playerid][pVIPName], 64, "%s", EncryptedPassword );
		             	format(String, sizeof(String), "VIP: {FFFFFF}Your customrank has been set to '%s'", inputtext );
						SendClientMessageEx(playerid, COLOR_ARWIN, String );
			}
		}
  		return 1;
 	}
	if(dialogid == 11020)
	{
 		if(response)
		{
	   	    if(listitem == 0)
			{
				format(String, sizeof(String), "Uang yang ada di bank : %s", FormatMoney(PlayerInfo[playerid][pAccount]));
				ShowPlayerDialog(playerid,15777,DIALOG_STYLE_MSGBOX ,"Bank Status",String,"Keluar","Kembali");
			}
         	if(listitem == 1)
			{
				format(String, sizeof(String), "$20\n$50\n$100\n$250\n$500\n$1,000");
                ShowPlayerDialog( playerid, 15779, DIALOG_STYLE_LIST, "WithDraw", String, "Withdraw", "Cancel" );
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pPDTime] < 1)
				{
					format(String, sizeof(String), "{FFFFFF}PayCheck : {FFFF00}$%s\n{FFFFFF}Tax : {FFFF00}-%s (%d percent)\n{FFFFFF}Interest: {FFFF00}%s", FormatMoney(PlayerInfo[playerid][pPayCheck]), FormatMoney((PlayerInfo[playerid][pPayCheck]/100)*TaxValue), TaxValue ,FormatMoney((PlayerInfo[playerid][pAccount]/100)*(1)));
				}
				ShowPlayerDialog(playerid, 1150, DIALOG_STYLE_MSGBOX, "PayCheck", String,"Get","Cancel");
			}
        }
	}
	//HOUSE INT======================//=================//
	if(dialogid == HOUSES_INT)
	{
		if(listitem == 0) // Houses
		{
			ShowPlayerDialog(playerid, HOUSES_INT+1, DIALOG_STYLE_LIST, "Safe Houses", "Safe House 1\nSafe House 2\nSafe House 3\nSafe House 4\nBack", "Select", "Cancel");
		}
  		if(listitem == 1) // Burglary House
		{
			ShowPlayerDialog(playerid, HOUSES_INT+2, DIALOG_STYLE_LIST, "Burglary Houses","Burglary House 1\nBurglary House 2\nBurglary House 3\nBurglary House 4\nBurglary House 5\nBurglary House 6\nBurglary House 7\nBurglary House 8\nBurglary House 9\nBurglary House 10\nBurglary House 11\nBurglary House 12\nBurglary House 13\nBurglary House 14\nBurglary House 15\nBurglary House 16\nBack", "Select", "Cancel");
		}
	}
 	if(dialogid == HOUSES_INT+1) // Houses
	{
		if(response)
		{
			if(listitem == 0) // Safe House 1
			{
		   		AC_BS_SetPlayerPos(playerid,2233.6919, -1112.8107, 1050.8828);
		    	AC_BS_SetPlayerInterior(playerid,5);
			}
			if(listitem == 1) // Safe House 2
			{
		   		AC_BS_SetPlayerPos(playerid,2194.7900, -1204.3500, 1049.0234);
		    	AC_BS_SetPlayerInterior(playerid,6);
			}
			if(listitem == 2) // Safe House 3
			{
		   		AC_BS_SetPlayerPos(playerid,2319.1272, -1023.9562, 1050.2109);
		    	AC_BS_SetPlayerInterior(playerid,9);
			}
			if(listitem == 3) // Safe House 4
			{
		   		AC_BS_SetPlayerPos(playerid,2262.4797,-1138.5591,1050.6328);
		    	AC_BS_SetPlayerInterior(playerid,10);
			}
			if(listitem == 4) // Back
			{
				ShowPlayerDialog(playerid, HOUSES_INT, DIALOG_STYLE_LIST, "House Interiors Categories","Safe Houses\nBurglary Houses", "Select", "Cancel");
			}
		}
		return 1;
	}
 	if(dialogid == HOUSES_INT+2)
	{
		if(response)
		{
			if(listitem == 0) // Burglary House #1
			{
		   	AC_BS_SetPlayerPos(playerid,234.6087, 1187.8195, 1080.2578);
		    AC_BS_SetPlayerInterior(playerid,3);
			}
			if(listitem == 1) // Burglary House #2
			{
		   	AC_BS_SetPlayerPos(playerid,225.5707, 1240.0643, 1082.1406);
		    AC_BS_SetPlayerInterior(playerid,2);
			}
			if(listitem == 2) // Burglary House #3
			{
		   	AC_BS_SetPlayerPos(playerid,224.288, 1289.1907, 1082.1406);
		    AC_BS_SetPlayerInterior(playerid,1);
			}
			if(listitem == 3) // Burglary House #4
			{
		   	AC_BS_SetPlayerPos(playerid,239.2819, 1114.1991, 1080.9922);
		    AC_BS_SetPlayerInterior(playerid,5);
			}
			if(listitem == 4) // Burglary House #5
			{
		   	AC_BS_SetPlayerPos(playerid,295.1391, 1473.3719, 1080.2578);
		    AC_BS_SetPlayerInterior(playerid,15);
			}
			if(listitem == 5) // Burglary House #6
			{
		   	AC_BS_SetPlayerPos(playerid,261.1165, 1287.2197, 1080.2578);
		    AC_BS_SetPlayerInterior(playerid,4);
			}
			if(listitem == 6) // Burglary House #7
			{
			AC_BS_SetPlayerPos(playerid,24.3769, 1341.1829, 1084.375);
		    AC_BS_SetPlayerInterior(playerid,10);
			}
			if(listitem == 7) // Burglary House #8
			{
		   	AC_BS_SetPlayerPos(playerid,-262.1759, 1456.6158, 1084.3672);
		    AC_BS_SetPlayerInterior(playerid,4);
			}
			if(listitem == 8) // Burglary House #9
			{
		   	AC_BS_SetPlayerPos(playerid,22.861, 1404.9165, 1084.4297);
		    AC_BS_SetPlayerInterior(playerid,5);
			}
			if(listitem == 9) // Burglary House #10
			{
		   	AC_BS_SetPlayerPos(playerid,140.3679, 1367.8837, 1083.8621);
		    AC_BS_SetPlayerInterior(playerid,5);
			}
   			if(listitem == 10) // Burglary House #11
			{
		   	AC_BS_SetPlayerPos(playerid,234.2826, 1065.229, 1084.2101);
		    AC_BS_SetPlayerInterior(playerid,6);
			}
			if(listitem == 11) // Burglary House #12
			{
		   	AC_BS_SetPlayerPos(playerid,-68.5145, 1353.8485, 1080.2109);
		    AC_BS_SetPlayerInterior(playerid,6);
			}
			if(listitem == 12) // Burglary House #13
			{
		   	AC_BS_SetPlayerPos(playerid,-285.2511, 1471.197, 1084.375);
		    AC_BS_SetPlayerInterior(playerid,15);
			}
			if(listitem == 13) // Burglary House #14
			{
		   	AC_BS_SetPlayerPos(playerid,-42.5267, 1408.23, 1084.4297);
		    AC_BS_SetPlayerInterior(playerid,8);
			}
			if(listitem == 14) // Burglary House #15
			{
		   	AC_BS_SetPlayerPos(playerid,84.9244, 1324.2983, 1083.8594);
		    AC_BS_SetPlayerInterior(playerid,9);
			}
			if(listitem == 15) // Burglary House #16
			{
		   	AC_BS_SetPlayerPos(playerid,260.7421, 1238.2261, 1084.2578);
		    AC_BS_SetPlayerInterior(playerid,9);
			}
			if(listitem == 16) // Back
			{
			ShowPlayerDialog(playerid, HOUSES_INT, DIALOG_STYLE_LIST, "House interiors categories","Safe Houses\nBurglary Houses", "Select", "Cancel");
			}
		}
		return 1;
	}
	//=======================BUSINESS INTERIOR Coded by AriWiwin14=======================//
	if(dialogid == BUSINESSES_INT)
	{
	    if(listitem == 0) // 24/7
		{
			ShowPlayerDialog(playerid, BUSINESSES_INT+1, DIALOG_STYLE_LIST, "24/7's", "24/7 Interior 1 \n24/7 Interior 2 \n24/7 Interior 3 \n24/7 Interior 4 \n24/7 Interior 5 \n24/7 Interior 6 \nBack", "Select", "Cancel");
		}
		if(listitem == 1) // Fast Foods
		{
			ShowPlayerDialog(playerid, BUSINESSES_INT+2, DIALOG_STYLE_LIST, "Fast Foods Interiors", "Burger Shot \nWell Stacked Pizza \nCluckin' Bell \nRusty Donut's\nBack", "Select", "Cancel");
		}
		if(listitem == 2) // Resturants & Clubs
		{
			ShowPlayerDialog(playerid, BUSINESSES_INT+3, DIALOG_STYLE_LIST, "Resturants & Clubs","Bar \nDinner \nWorld Of Coq \nThe Pig Pen \nClub \nJay's Diner\nFanny Batter's Whore House\nCustom Resturant [Decent]\nCustom Bar Interior\nBack", "Select", "Cancel");
		}
	 	if(listitem == 3) // Ammunations
		{
			ShowPlayerDialog(playerid, BUSINESSES_INT+4, DIALOG_STYLE_LIST, "Ammunation Interiors", "Ammunation 1 \nAmmunation 2 \nAmmunation 3 \nAmmunation 4 \nAmmunation 5 \nBack", "Select", "Cancel");
		}
  		if(listitem == 4) // Casino Interiors
		{
			ShowPlayerDialog(playerid, BUSINESSES_INT+5, DIALOG_STYLE_LIST, "Casino Interiors", "Four Dragons Casino\nBig Spread Ranch\nStrip Club\nBack", "Select", "Cancel");
		}
		if(listitem == 5) //  Electronics
		{
		ShowPlayerDialog(playerid, BUSINESSES_INT+6, DIALOG_STYLE_LIST, "Electronic Stores Interiors", "Electronic Store\nZero RC Shop\nBack", "Select", "Cancel");
		}
		if(listitem == 6) //  Clothes
		{
		ShowPlayerDialog(playerid, BUSINESSES_INT+7, DIALOG_STYLE_LIST, "Clothes Interiors", "Binco\nDidier sachs\nProlaps\nSuburban\nVictim\nZip", "Select", "Cancel");
		}
	}
 	if(dialogid == BUSINESSES_INT+1) // 24/7's
	{
		if(response)
		{
			if(listitem == 0) // 24/7 1
			{
		   		AC_BS_SetPlayerPos(playerid,-25.884499,-185.868988,1003.549988);
		    	AC_BS_SetPlayerInterior(playerid,17);
			}
			if(listitem == 1) // 24/7 2
			{
		   		AC_BS_SetPlayerPos(playerid,-6.091180,-29.271898,1003.549988);
		    	AC_BS_SetPlayerInterior(playerid,10);
			}
			if(listitem == 2) //  24/7 3
			{
		   		AC_BS_SetPlayerPos(playerid,-30.946699,-89.609596,1003.549988);
				AC_BS_SetPlayerInterior(playerid,18);
			}
			if(listitem == 3) //  24/7 4
			{
		   		AC_BS_SetPlayerPos(playerid,-25.132599,-139.066986,1003.549988);
		    	AC_BS_SetPlayerInterior(playerid,16);
			}
			if(listitem == 4) //  24/7 5
			{
		   		AC_BS_SetPlayerPos(playerid,-27.312300,-29.277599,1003.549988);
		    	AC_BS_SetPlayerInterior(playerid,4);
			}
			if(listitem == 5) // 24/7 6
			{
		   		AC_BS_SetPlayerPos(playerid,-26.691599,-55.714897,1003.549988);
		    	AC_BS_SetPlayerInterior(playerid,6);
			}
			if(listitem == 6) // Back
  			{
				ShowPlayerDialog(playerid, BUSINESSES_INT, DIALOG_STYLE_LIST, "Businesses interiors categories","24/7's\nFast Foods Interiors\nResturants & Clubs\nAmmunation Interiors\nCasino Interiors\nElectronics Store\nClothes Shops Interiors\nUsefull Random Interiors", "Select", "Cancel");
			}
		}
		return 1;
	}
 	if(dialogid == BUSINESSES_INT+2) // Fast Foods Interiors
	{
		if(response)
		{
			if(listitem == 0) // Burger Shot
			{
		   	AC_BS_SetPlayerPos(playerid,365.4099,-73.6167,1001.5078);
		    AC_BS_SetPlayerInterior(playerid,10);
			}
			if(listitem == 1) // Well Stacked
			{
		   	AC_BS_SetPlayerPos(playerid,372.3520,-131.6510,1001.4922);
		    AC_BS_SetPlayerInterior(playerid,5);
			}
			if(listitem == 2) // Cluckin Bell
			{
		   	AC_BS_SetPlayerPos(playerid,365.7158,-9.8873,1001.8516);
		    AC_BS_SetPlayerInterior(playerid,9);
			}
			if(listitem == 3) // Rusty Donut's
			{
		   	AC_BS_SetPlayerPos(playerid,378.026,-190.5155,1000.6328);
		    AC_BS_SetPlayerInterior(playerid,17);
			}
			if(listitem == 4) // Back
			{
			ShowPlayerDialog(playerid, BUSINESSES_INT, DIALOG_STYLE_LIST, "Businesses interiors categories","24/7's\nFast Foods Interiors\nResturants & Clubs\nAmmunation Interiors\nCasino Interiors\nElectronics Store\nClothes Shops Interiors\nUsefull Random Interiors", "Select", "Cancel");
			}
		}
		return 1;
	}
 	if(dialogid == BUSINESSES_INT+3) //
	{
		if(response)
		{
			if(listitem == 0) // Big Spread Ranch
			{
		   	AC_BS_SetPlayerPos(playerid,501.980987,-69.150199,998.757812);
		    AC_BS_SetPlayerInterior(playerid,11);
			}
			if(listitem == 1) // Dinner
			{
		   	AC_BS_SetPlayerPos(playerid,454.9853, -107.2548, 999.4376);
		    AC_BS_SetPlayerInterior(playerid,5);
			}
			if(listitem == 2) // World Of Coq
			{
		   	AC_BS_SetPlayerPos(playerid,445.6003, -6.9823, 1000.7344);
		    AC_BS_SetPlayerInterior(playerid,1);
			}
			if(listitem == 3) // The Pig Pen
			{
		   	AC_BS_SetPlayerPos(playerid,1204.9326,-8.1650,1000.9219);
		    AC_BS_SetPlayerInterior(playerid,2);
			}
			if(listitem == 4) // Dance Club
			{
		   	AC_BS_SetPlayerPos(playerid,490.2701,-18.4260,1000.6797);
		    AC_BS_SetPlayerInterior(playerid,17);
			}
			if(listitem == 5) // Jay's Dinner
			{
		   	AC_BS_SetPlayerPos(playerid,449.0172, -88.9894, 999.5547);
		    AC_BS_SetPlayerInterior(playerid,4);
			}
			if(listitem == 6) // Fanny Batter's Whore House
			{
		   	AC_BS_SetPlayerPos(playerid,748.4623, 1438.2378, 1102.9531);
		    AC_BS_SetPlayerInterior(playerid,6);
			}
			if(listitem == 7) // Decent Resturant interior
			{
			AC_BS_SetPlayerPos(playerid,1518.6910,-1566.9099,13.7989);
			AC_BS_SetPlayerInterior(playerid,0);
			}
			if(listitem == 8) // Custom Bar interior
			{
			AC_BS_SetPlayerPos(playerid,-159.7749,1765.2834,-99.7741);
			AC_BS_SetPlayerInterior(playerid,0);
			}
			if(listitem == 9) // Back
			{
			ShowPlayerDialog(playerid, BUSINESSES_INT, DIALOG_STYLE_LIST, "Businesses interiors categories","24/7's\nFast Foods Interiors\nResturants & Clubs\nAmmunation Interiors\nCasino Interiors\nElectronics Store\nClothes Shops Interiors\nUsefull Random Interiors", "Select", "Cancel");
			}
		}
		return 1;
	}
 	if(dialogid == BUSINESSES_INT+4) // Ammunations
	{
		if(response)
		{
			if(listitem == 0) // Ammunation 1
			{
		   	AC_BS_SetPlayerPos(playerid,286.148987,-40.644398,1001.569946);
		    AC_BS_SetPlayerInterior(playerid,1);
			}
			if(listitem == 1) // Ammunation 2
			{
		   	AC_BS_SetPlayerPos(playerid,286.800995,-82.547600,1001.539978);
		    AC_BS_SetPlayerInterior(playerid,4);
			}
			if(listitem == 2) // Ammunation 3
			{
		   	AC_BS_SetPlayerPos(playerid,296.919983,-108.071999,1001.569946);
		    AC_BS_SetPlayerInterior(playerid,6);
			}
			if(listitem == 3) // Ammunation 4
			{
		   	AC_BS_SetPlayerPos(playerid,314.820984,-141.431992,999.661987);
		    AC_BS_SetPlayerInterior(playerid,7);
			}
			if(listitem == 4) // Ammunation 5
			{
		   	AC_BS_SetPlayerPos(playerid,316.524994,-167.706985,999.661987);
		    AC_BS_SetPlayerInterior(playerid,6);
			}
			if(listitem == 5) // Back
			{
			ShowPlayerDialog(playerid, BUSINESSES_INT, DIALOG_STYLE_LIST, "Businesses interiors categories","24/7's\nFast Foods Interiors\nResturants & Clubs\nAmmunation Interiors\nCasino Interiors\nElectronics Store\nClothes Shops Interiors\nUsefull Random Interiors", "Select", "Cancel");
			}
		}
		return 1;
	}
 	if(dialogid == BUSINESSES_INT+5) // Casino Interiors
	{
		if(response)
		{
			if(listitem == 0) // 4 Dragons Casino
			{
		   	AC_BS_SetPlayerPos(playerid,2016.2699,1017.7790,996.8750);
		    AC_BS_SetPlayerInterior(playerid,10);
			}
			if(listitem == 1) // Big Spread Ranch
			{
		   	AC_BS_SetPlayerPos(playerid,1212.019897,-28.663099,1000.953125);
		    AC_BS_SetPlayerInterior(playerid,3);
			}
			if(listitem == 2) // Strip Club
			{
		   	AC_BS_SetPlayerPos(playerid,1204.809936,-11.586799,1000.921875);
		    AC_BS_SetPlayerInterior(playerid,2);
			}
			if(listitem == 3) // Pleause Domes
			{
		   	AC_BS_SetPlayerPos(playerid,-2640.762939,1406.682006,906.460937);
		    AC_BS_SetPlayerInterior(playerid,3);
			}
			if(listitem == 4) // Back
			{
			ShowPlayerDialog(playerid, BUSINESSES_INT, DIALOG_STYLE_LIST, "Businesses interiors categories","24/7's\nFast Foods Interiors\nResturants & Clubs\nAmmunation Interiors\nCasino Interiors\nElectronics Store\nClothes Shops Interiors\nUsefull Random Interiors", "Select", "Cancel");
			}
		}
		return 1;
	}
	 	if(dialogid == BUSINESSES_INT+6) // Electronic Store
	{
		if(response)
		{
			if(listitem == 0) // Electronics Store
			{
		   	AC_BS_SetPlayerPos(playerid,1003.6486,52.0992,55.3221);
		    AC_BS_SetPlayerInterior(playerid,10);
			}
			if(listitem == 1) //
			{
		   	AC_BS_SetPlayerPos(playerid,-2240.468505,137.060440,1035.414062);
		    AC_BS_SetPlayerInterior(playerid,6);
			}
			if(listitem == 2) // Back
			{
			ShowPlayerDialog(playerid, BUSINESSES_INT, DIALOG_STYLE_LIST, "Businesses interiors categories","24/7's\nFast Foods Interiors\nResturants & Clubs\nAmmunation Interiors\nCasino Interiors\nElectronics Store\nClothes Shops Interiors\nUsefull Random Interiors", "Select", "Cancel");
			}
		}
		return 1;
	}
		 	if(dialogid == BUSINESSES_INT+7) // Clothes
	{
		if(response)
		{
			if(listitem == 0) // Binco
			{
		   	AC_BS_SetPlayerPos(playerid,207.737991,-109.019996,1005.132812);
		    AC_BS_SetPlayerInterior(playerid,15);
			}
			if(listitem == 1) // Didier sachs
			{
		   	AC_BS_SetPlayerPos(playerid,204.332992,-166.694992,1000.523437);
		    AC_BS_SetPlayerInterior(playerid,14);
			}
			if(listitem == 2) // ProLaps
			{
		   	AC_BS_SetPlayerPos(playerid,207.054992,-138.804992,1003.507812);
		    AC_BS_SetPlayerInterior(playerid,3);
			}
			if(listitem == 3) // Suburban
			{
		   	AC_BS_SetPlayerPos(playerid,203.777999,-48.492397,1001.804687);
		    AC_BS_SetPlayerInterior(playerid,1);
			}
			if(listitem == 4) // Victim
			{
		   	AC_BS_SetPlayerPos(playerid,226.293991,-7.431529,1002.210937);
		    AC_BS_SetPlayerInterior(playerid,5);
			}
			if(listitem == 5) // Zip
			{
		   	AC_BS_SetPlayerPos(playerid,161.391006,-93.159156,1001.804687);
		    AC_BS_SetPlayerInterior(playerid,18);
			}
			if(listitem == 6) // Back
			{
   			ShowPlayerDialog(playerid, BUSINESSES_INT, DIALOG_STYLE_LIST, "Businesses interiors categories","24/7's\nFast Foods Interiors\nResturants & Clubs\nAmmunation Interiors\nCasino Interiors\nElectronics Store\nClothes Shops Interiors\nUsefull Random Interiors", "Select", "Cancel");
			}

		}
		return 1;
	}
	//===========================================================================
	if(dialogid == UNMODCARMENU)
	{
	    if (response)
	    {
		    new count = GetPVarInt(playerid, "modCount");
			new d;
			for(new z = 0 ; z < MAX_PLAYERVEHICLES; z++)
			{
				if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][z][pvId]))
				{
					d = z;
				    break;
				}
			}
            for (new i = 0; i < count; i++)
			{
				if(listitem == i)
				{
				    format(String, sizeof(String), "partList%i", i);
					new partID = GetPVarInt(playerid, String);
					if (partID == 999)
					{
					    for(new f = 0 ; f < MAX_MODS; f++)
						{
							RemoveVehicleComponent(PlayerVehicleInfo[playerid][d][pvId], GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
							PlayerVehicleInfo[playerid][d][pvMods][f] = 0;
						}
						SendClientMessageEx(playerid, COLOR_WHITE, "All modifications have been removed from your vehicle.");
						return 1;
					}
     				RemoveVehicleComponent(GetPlayerVehicleID(playerid), partID);
     				PlayerVehicleInfo[playerid][d][pvMods][GetVehicleComponentType(partID)] = 0;
     				SendClientMessageEx(playerid, COLOR_WHITE, "The modification you requested has been removed.");
     				return 1;
				}
        	}
		}
	}
	if((dialogid == BUYTOYSCOP) && response)
	{
	    new Stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24] = "None";

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}

			format(Stringg, sizeof(Stringg), "%s(%d) %s (Bone: %s)\n", Stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		ShowPlayerDialog(playerid, BUYTOYSCOP2, DIALOG_STYLE_LIST, "Select a Slot", Stringg, "Select", "Cancel");
	}

	if((dialogid == BUYTOYSCOP2) && response)
	{
	    if(listitem >= 3 && PlayerInfo[playerid][pDonateRank] < 1 || listitem >= 3 && PlayerInfo[playerid][pBuddyInvited] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Basic VIP + to use that slot!");
	    if(listitem >= 4 && PlayerInfo[playerid][pDonateRank] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Advanced Donater + to use that slot!");
        if(listitem >= 5 && PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Professional Donater + to use that slot!");
	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "* You already have something in that slot. Delete it with /toys");

		slotselection[playerid] = listitem;

		new Stringg[1024];
		for(new x;x<sizeof(HoldingObjectsCop);x++)
		{
		    format(Stringg, sizeof(Stringg), "%s%s (%s)\n", Stringg, HoldingObjectsCop[x][holdingmodelname], FormatMoney(HoldingObjectsCop[x][holdingprice]));
		}
		ShowPlayerDialog(playerid, BUYTOYSCOP3, DIALOG_STYLE_LIST, "Select an Item", Stringg, "Buy", "Cancel");
	}
	if((dialogid == BUYTOYSCOP3) && response)
	{
		if(GetPlayerCash(playerid) < HoldingObjectsCop[listitem][holdingprice])
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "* You can't afford that!");
		}
		else
		{
			GivePlayerCash(playerid, -HoldingObjectsCop[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjectsCop[listitem][holdingmodelid];

   			new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
		    else
		    {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}

			format(String, sizeof(String), "* You have purchased %s for %s (Slot: %d)", HoldingObjectsCop[listitem][holdingmodelname], FormatMoney(HoldingObjectsCop[listitem][holdingprice]), slotselection[playerid]);
		    SendClientMessageEx(playerid, COLOR_RED, String);
		    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");
		}
	}
	if((dialogid == BUYTOYSGOLD) && response)
	{
 		if(PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Professional Donater +");
	    new Stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24] = "None";

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}

			format(Stringg, sizeof(Stringg), "%s(%d) %s (Bone: %s)\n", Stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		ShowPlayerDialog(playerid, BUYTOYSGOLD2, DIALOG_STYLE_LIST, "Select a Slot", Stringg, "Select", "Cancel");
	}

	if((dialogid == BUYTOYSGOLD2) && response)
	{
        if(PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Professional Donater +");

	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "* You already have something in that slot. Delete it with /toys");

		slotselection[playerid] = listitem;

		new Stringg[5256];
		for(new x;x<sizeof(HoldingObjectsAll);x++)
		{
		    format(Stringg, sizeof(Stringg), "%s%s (%s)\n", Stringg, HoldingObjectsAll[x][holdingmodelname], FormatMoney(HoldingObjectsAll[x][holdingprice]));
		}
		ShowPlayerDialog(playerid, BUYTOYSGOLD3, DIALOG_STYLE_LIST, "Select an Item", Stringg, "Buy", "Cancel");
	}
	if((dialogid == BUYTOYSGOLD3) && response)
	{
	    if(PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Professional Donater +");

		if(GetPlayerCash(playerid) < HoldingObjects[listitem][holdingprice])
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "* You can't afford that!");
		}
		else
		{
			GivePlayerCash(playerid, -HoldingObjectsAll[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjectsAll[listitem][holdingmodelid];

   			new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
		    else
		    {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}

			format(String, sizeof(String), "* You have purchased %s for %s (Slot: %d)", HoldingObjectsAll[listitem][holdingmodelname], FormatMoney(HoldingObjectsAll[listitem][holdingprice]), slotselection[playerid]);
		    SendClientMessageEx(playerid, COLOR_RED, String);
		    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");
		}
	}
	if((dialogid == BUYTOYS) && response)
	{
	    new Stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24];
	    	format(name, sizeof(name), "None");

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}

			format(Stringg, sizeof(Stringg), "%s(%d) %s (Bone: %s)\n", Stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		ShowPlayerDialog(playerid, BUYTOYS2, DIALOG_STYLE_LIST, "Select a Slot", Stringg, "Select", "Cancel");
	}
	if((dialogid == BUYTOYS2) && response)
	{
	    if(listitem >= 3 && PlayerInfo[playerid][pDonateRank] < 1 || listitem >= 3 && PlayerInfo[playerid][pBuddyInvited] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Basic VIP + to use that slot!");
	    if(listitem >= 4 && PlayerInfo[playerid][pDonateRank] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Advanced Donater + to use that slot!");
        if(listitem >= 5 && PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Professional Donater + to use that slot!");

	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "* You already have something in that slot. Delete it with /toys");

		slotselection[playerid] = listitem;

		new Stringg[5000];
		for(new x;x<sizeof(HoldingObjects);x++)
		{
		    format(Stringg, sizeof(Stringg), "%s%s ($%d)\n", Stringg, HoldingObjects[x][holdingmodelname], HoldingObjects[x][holdingprice]);
		}
		ShowModelSelectionMenu(playerid, toy1000list, "Player Toys");
	}
	if((dialogid == BUYTOYS3) && response)
	{
		if(GetPlayerCash(playerid) < HoldingObjects[listitem][holdingprice])
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "* Uang anda kurang untuk membeli Toys ini!");
		}
		else
		{
			GivePlayerCash(playerid, -HoldingObjects[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjects[listitem][holdingmodelid];

		    new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
		    else
		    {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			format(String, sizeof(String), "* Anda telah membeli %s seharga %s (Slot: %d)", HoldingObjects[listitem][holdingmodelname], FormatMoney(HoldingObjects[listitem][holdingprice]), slotselection[playerid]);
		    SendClientMessageEx(playerid, COLOR_RED, String);
		    SendClientMessageEx(playerid, COLOR_WHITE, "Gunakan /toys untuk edit/memakainya");
		}
	}
	if((dialogid == TOYS) && response)
	{
		if(listitem == 0)
		{
		    new Stringg[1024];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "None");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(Stringg, sizeof(Stringg), "%s(%d) %s (Bone: %s)\n", Stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialog(playerid, WEARTOY, DIALOG_STYLE_LIST, "Select a Toy", Stringg, "Select", "Cancel");
	    }
		else if(listitem == 1)
		{
		    new Stringg[1024];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "None");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(Stringg, sizeof(Stringg), "%s(%d) %s (Bone: %s)\n", Stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialog(playerid, EDITTOYS, DIALOG_STYLE_LIST, "Select a Toy", Stringg, "Select", "Cancel");
   		}
		else if(listitem == 2)
		{
		    new Stringg[1024];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "None");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(Stringg, sizeof(Stringg), "%s(%d) %s (Bone: %s)\n", Stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialog(playerid, DELETETOY, DIALOG_STYLE_LIST, "Select a Toy", Stringg, "Delete", "Cancel");
		}
	}

	if((dialogid == EDITTOYS) && response)
	{
	    if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
	    {
	        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Toy Menu: Edit", "Woops! You don't have anything on that slot", "OK", "");
		}
		else
		{
		    slotselection[playerid] = listitem;
		    ShowEditMenu(playerid);
		}
	}
	if((dialogid == EDITTOYS2))
	{
	    if(response)
	    {
		    if(listitem == 0)
		    {
		        ShowPlayerDialog(playerid, EDITTOYSBONE, DIALOG_STYLE_LIST, "Select a Bone", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft clavicle\nRight clavicle\nNeck\nJaw", "Select", "Cancel");
		    }
		    else if(listitem == 1)
		    {
		        EditAttachedObject(playerid, slotselection[playerid]);
		        SendClientMessageEx(playerid, COLOR_WHITE, "{AA3333}HINT:{FFFF00} Untuk mendapatkan pengelihatan terbaik gunakan SPASI untuk memindah camera.");
		        SendClientMessageEx(playerid, COLOR_WHITE, "Attach dahulu toys yang akan di edit.");
			}
		}
		else
		{
		    new Stringg[1024];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "None");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(Stringg, sizeof(Stringg), "%s(%d) %s (Bone: %s)\n", Stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialog(playerid, EDITTOYS, DIALOG_STYLE_LIST, "Select a Toy", Stringg, "Select", "Cancel");
		}
	}
	if(dialogid == EDITTOYSPX)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
	        offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSPY)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
     		if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
	        offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSPZ)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
			offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRX)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRY)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRZ)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSBONE)
	{
	    if(response)
	    {
	        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = listitem+1;
		}
	 	ShowEditMenu(playerid);
	}
	if((dialogid == WEARTOY) && response)
	{
	    if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
	    {
	        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Toy Menu: Attach/Deattach", "Woops! You don't have anything to put on from that slot", "OK", "");
		}
		else
		{
		    if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
			{
			    new name[24];
			    format(name, sizeof(name), "None");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
	   			{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
			    format(String, sizeof(String), "Successfully dettached %s (Bone: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessageEx(playerid, COLOR_RED, String);
			    RemovePlayerAttachedObject(playerid, listitem);
			}
			else
			{
			    SetPlayerAttachedObject(playerid, listitem, PlayerToyInfo[playerid][listitem][ptModelID], PlayerToyInfo[playerid][listitem][ptBone], PlayerToyInfo[playerid][listitem][ptPosX], PlayerToyInfo[playerid][listitem][ptPosY], PlayerToyInfo[playerid][listitem][ptPosZ], PlayerToyInfo[playerid][listitem][ptRotX], PlayerToyInfo[playerid][listitem][ptRotY], PlayerToyInfo[playerid][listitem][ptRotZ], 1, 1, 1);
			    new name[24];
			    format(name, sizeof(name), "None");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
	   			{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(String, sizeof(String), "Successfully attached %s (Bone: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessageEx(playerid, COLOR_RED, String);
			}
		}
	}

	if((dialogid == DELETETOY) && response)
	{
		PlayerToyInfo[playerid][listitem][ptModelID] = 0;
		PlayerToyInfo[playerid][listitem][ptBone] = 0;
		PlayerToyInfo[playerid][listitem][ptPosX] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosY] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosZ] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosX] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosY] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosZ] = 0.0;
		if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
		{
		    RemovePlayerAttachedObject(playerid, listitem);
		}
		format(String, sizeof(String), "You have deleted your toy in slot %d", listitem);
	    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Toy Menu", String, "OK", "");
	}

	if((dialogid == LAELEVATORPASS) && response)
	{
	    if(strcmp(inputtext, LAElevatorFloorPass[GetPVarInt(playerid, "ElevatorFloorPick")], true) == 0)
	    {
	        listitem = GetPVarInt(playerid, "ElevatorFloorPick");
	        CloseElevatorDoors(LAElevatorFloor);
    		if(listitem == 0)
		    {
    			MoveObject(LAElevator, 1786.634887, -1303.237329, 14.614652, 3);
     			MoveButton(LAElevatorFloorPick, 1788.889282, -1302.229003, 13.918642, 3);
	     		SetButtonPos(LAElevatorFloorPick, 1788.889282, -1302.229003, 13.918642, 270);
			}
			else
			{
   				MoveObject(LAElevator, 1786.634887, -1303.237329, 23.071138 + (listitem * 5.45), 3);
     			MoveButton(LAElevatorFloorPick, 1788.889282, -1302.229003, 22.656608 + (listitem * 5.45), 3);
	     		SetButtonPos(LAElevatorFloorPick, 1788.889282, -1302.229003, 22.656608 + (listitem * 5.45), 270);
			}

			LAElevatorFloor = listitem;
  			LAElevatorMoving = 1;
			format(String, sizeof(String), "* Elevator moving to floor %d", (listitem + 1));
			ProxDetector(5.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    }
	    else
	    {
	        format(String, sizeof(String), "* Invalid Password");
			ProxDetector(5.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	if((dialogid == LAELEVATOR) && response)
	{
 		if(LAElevatorMoving == 0 && LAElevatorDoorStatus == 0)
   		{
   		    if(strlen(LAElevatorFloorPass[listitem]) > 0)
   		    {
   		        SetPVarInt(playerid, "ElevatorFloorPick", listitem);
   		        ShowPlayerDialog(playerid, LAELEVATORPASS, DIALOG_STYLE_INPUT, "Elevator", "Enter the password for this level", "Enter", "Cancel");
			}
			else
			{
	   		    CloseElevatorDoors(LAElevatorFloor);
	   		    if(listitem == 0)
	   		    {
		     		MoveObject(LAElevator, 1786.634887, -1303.237329, 14.614652, 3);
		     		MoveButton(LAElevatorFloorPick, 1788.889282, -1302.229003, 13.918642, 3);
		     		SetButtonPos(LAElevatorFloorPick, 1788.889282, -1302.229003, 13.918642, 270);
				}
				else
				{
				    MoveObject(LAElevator, 1786.634887, -1303.237329, 23.071138 + (listitem * 5.45), 3);
		     		MoveButton(LAElevatorFloorPick, 1788.889282, -1302.229003, 22.656608 + (listitem * 5.45), 3);
		     		SetButtonPos(LAElevatorFloorPick, 1788.889282, -1302.229003, 22.656608 + (listitem * 5.45), 270);
				}

	       		LAElevatorFloor = listitem;
	         	LAElevatorMoving = 1;
			}
		}
		else
		{
			format(String, sizeof(String), "* Elevator is in use, try again soon.");
			ProxDetector(5.0, playerid, String, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	if((dialogid == AUDIO_URL) && response) // /audiourl
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1)
	    {
			new seek = GetPVarInt(playerid, "aURLseek");
			new volume = GetPVarInt(playerid, "aURLvol");
			new range = GetPVarInt(playerid, "aURLrange");
			new Float:aX, Float:aY, Float:aZ;
			GetPlayerPos(playerid, aX, aY, aZ);
		 	new audioid	= SendAudioURLToRange(inputtext,volume,seek,aX,aY,aZ,range);

			if(range > 100)
			{
				format(String,sizeof(String),"{FF6347}AdmCmd: %s has placed url %s - Volume: %d - Range: %d - ID: %d.",PlayerInfo[playerid][pAdminName],inputtext,volume,range, audioid);
				ABroadCast(COLOR_YELLOW, String, 1);
				format(String, sizeof(String),"Use /audiostop %d to stop playback", audioid);
				SendClientMessage(playerid, COLOR_YELLOW, String);
			}
			else
			{
			    format(String,sizeof(String),"You have placed url %s - Volume: %d - Range: %d - ID %d.",inputtext,volume,range, audioid);
				SendClientMessage(playerid, COLOR_YELLOW, String);
				format(String, sizeof(String),"Use /audiostop %d to stop playback", audioid);
				SendClientMessage(playerid, COLOR_YELLOW, String);
			}
		}
	}

	if(dialogid == 8220)
	{
		if(response)
		{
		    new pvid;
		    if (IsNumeric(inputtext))
		    {
                GivePlayerCash(playerid, -2500);
		    	pvid = strval(inputtext)-1;
		    	new idmobil = PlayerVehicleInfo[playerid][pvid][pvId];
		    	format(PlayerVehicleInfo[playerid][pvid][pvNumberPlate], 32, "EG %d RP", IDPlate);
		    	format(String, sizeof(String), "EG %d RP", IDPlate);
		    	RegisterVehicleNumberPlate(idmobil, String);
		    	format(String, sizeof(String), "Plate mobil kamu telah diubah menjadi EG %d RP", IDPlate);
		    	SendClientMessageEx(playerid,COLOR_GREEN,String);
		    	IDPlate++;
		    	Tax += 2500;
				SaveStock();
			}
		}
		return 1;
	}
	if(dialogid == DOORLOCK)
	{
		if(response == 1)
		{
		    new i = GetPVarInt(playerid, "Door");
		    if(IsNull(inputtext))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "You did not enter anything" );
		        return 1;
		    }
		    if(strlen(inputtext) > 24)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "The password can not be greater than 24 characters.");
		        return 1;
		    }
		    if(strcmp(inputtext, DDoorsInfo[i][dPass], true) == 0)
		    {
		        if(DDoorsInfo[i][dLocked] == 0)
		        {
					DDoorsInfo[i][dLocked] = 1;
					SendClientMessageEx(playerid, COLOR_WHITE, "Password accepted, doors locked.");
		        }
		        else
		        {
		            DDoorsInfo[i][dLocked] = 0;
		            SendClientMessageEx(playerid, COLOR_WHITE, "Password accepted, doors unlocked.");
		        }
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "Password declined.");
			}
		}
		else
		{
		    return 1;
		}
	}
	if(dialogid == MAINMENU || dialogid == MAINMENU2)
	{
		if(dialogid == MAINMENU)
		{
			if( response == 0 )
			{
				SendClientMessageEx(playerid, COLOR_RED, "SERVER: You have been kicked out automatically.");
				Kick(playerid);
			}
			else
			{
				if(strlen(inputtext))
				{
					new tmppass[64];
					strmid(tmppass, inputtext, 0, strlen(inputtext), 255);
					OnPlayerLogin(playerid,tmppass);
				}
				else
				{
					new loginname[64];
					GetPlayerName(playerid,loginname,sizeof(loginname));
					ShowPlayerDialog(playerid,MAINMENU,DIALOG_STYLE_INPUT,"Login","Incorrect password. \n \nThat name is registered, you may now enter your password.","Login","Exit");
					gPlayerLogTries[playerid] += 1;
					if(gPlayerLogTries[playerid] == 2) { SendClientMessageEx(playerid, COLOR_RED, "SERVER: Wrong password, you have been kicked out automatically."); Kick(playerid); }
				}
		 	}
		}
		if(dialogid == MAINMENU2)
		{
			if(strlen(inputtext))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(doesAccountExist(sendername))
				{
					SendClientMessageEx(playerid, COLOR_YELLOW, "That username is already taken, please choose a different one.");
					return 1;
				}
				new tmppass[64];
				strmid(tmppass, inputtext, 0, strlen(inputtext), 255);
				//MySQL_Register(playerid, tmppass);
				OnPlayerRegister(playerid,tmppass);
			}
		}
	}
	if (dialogid == ELEVATOR3 && response)
    {
		if (listitem == 0)
		{
			AC_BS_SetPlayerPos(playerid, 1564.8, -1666.2, 28.3);
			AC_BS_SetPlayerInterior(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			AC_BS_SetPlayerPos(playerid, 1568.6676, -1689.9708, 6.2188);
		 	AC_BS_SetPlayerInterior(playerid, 0);
		 	PlayerInfo[playerid][pVW] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if (dialogid == ELEVATOR && response)
    {
		if (listitem == 0)
		{
			AC_BS_SetPlayerPos(playerid, 276.0980, 122.1232, 1004.6172);
			AC_BS_SetPlayerInterior(playerid, 10);
			PlayerInfo[playerid][pVW] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			AC_BS_SetPlayerPos(playerid, 1568.6676, -1689.9708, 6.2188);
			AC_BS_SetPlayerInterior(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if (dialogid == ELEVATOR2 && response)
    {
		if (listitem == 0)
		{
			AC_BS_SetPlayerPos(playerid, 1564.8, -1666.2, 28.3);
			AC_BS_SetPlayerInterior(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			AC_BS_SetPlayerPos(playerid, 276.0980, 122.1232, 1004.6172);
			AC_BS_SetPlayerInterior(playerid, 10);
			PlayerInfo[playerid][pVW] = 0;
			AC_BS_SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if(dialogid == VIPNUMMENU)
    {
		if(response)
		    {
		     	switch(listitem)
		        	{
			        case 0://-2 digit
						{
                            ShowPlayerDialog(playerid, VIPNUMMENU2, DIALOG_STYLE_INPUT, "New Phone Number","Just enter the number without a -:", "Change", "Cancel");
						}
					case 1: // -3 digit
						{
						    ShowPlayerDialog(playerid, VIPNUMMENU2, DIALOG_STYLE_INPUT, "New Phone Number","Just enter the number without a -:", "Change", "Cancel");
						}
					case 2: // -4+ digit
						{
						    ShowPlayerDialog(playerid, VIPNUMMENU2, DIALOG_STYLE_INPUT, "New Phone Number","Just enter the number without a -:", "Change", "Cancel");
						}
					}
			}
		if(!response)
		{
		    SendClientMessageEx(playerid,COLOR_GREY," You chose not to change numbers.");
		}

	}
	if(dialogid == VIPNUMMENU2)
    {
		if(response)
		    {
		        if(strval(inputtext) == 0) {ShowPlayerDialog(playerid, VIPNUMMENU3, DIALOG_STYLE_MSGBOX, "Error","You typed an invalid String. Click ok to try again.", "Ok", "Cancel"); return 0;}
				new numberstr = strval(inputtext);
				if(strlen(inputtext) == 2)
				{
					    if(!CheckVPH(numberstr))
					    {
					        ReplacePH(PlayerInfo[playerid][pPnumber],numberstr);
					        PlayerInfo[playerid][pPnumber] = numberstr;
					        format(String,sizeof(String),"You have changed numbers to: %d",PlayerInfo[playerid][pPnumber]);
					        SendClientMessageEx(playerid,COLOR_GREY,String);
					        return 1;
						}
					 	else if(PlayerInfo[playerid][pPnumber] == numberstr)
						{
						    SendClientMessageEx(playerid,COLOR_GREY," Cannot change to your existing number");
						    return 1;
						}
	  				else
	 				{
	 				    if(!CheckVPH(numberstr))
					    {
					        ReplacePH(PlayerInfo[playerid][pPnumber],numberstr);
					        PlayerInfo[playerid][pPnumber] = numberstr;
					        format(String,sizeof(String),"You have changed numbers to: %d",PlayerInfo[playerid][pPnumber]);
					        SendClientMessageEx(playerid,COLOR_GREY,String);
					        return 1;
						}
					 	else if(PlayerInfo[playerid][pPnumber] == numberstr)
						{
						    SendClientMessageEx(playerid,COLOR_GREY," Cannot change to your existing number");
						    return 1;
						}
	  				}
				}
				if(strlen(inputtext) == 3)
				{
					    if(!CheckVPH(numberstr))
					    {
					        ReplacePH(PlayerInfo[playerid][pPnumber],numberstr);
					        PlayerInfo[playerid][pPnumber] = numberstr;
					        format(String,sizeof(String),"You have changed numbers to: %d",PlayerInfo[playerid][pPnumber]);
					        SendClientMessageEx(playerid,COLOR_GREY,String);
					        return 1;
						}
	  				else
	 				{
	 				    if(!CheckVPH(numberstr))
					    {
					        ReplacePH(PlayerInfo[playerid][pPnumber],numberstr);
					        PlayerInfo[playerid][pPnumber] = numberstr;
					        format(String,sizeof(String),"You have changed numbers to: %d",PlayerInfo[playerid][pPnumber]);
					        SendClientMessageEx(playerid,COLOR_GREY,String);
					        return 1;
						}
					 	else if(PlayerInfo[playerid][pPnumber] == numberstr)
						{
						    SendClientMessageEx(playerid,COLOR_GREY," Cannot change to your existing number");
						    return 1;
						}
	  				}
				}
				if(strlen(inputtext) >= 4 && strlen(inputtext) <=7)
				{
					    if(!CheckVPH(numberstr))
					    {
					        ReplacePH(PlayerInfo[playerid][pPnumber],numberstr);
					        PlayerInfo[playerid][pPnumber] = numberstr;
					        format(String,sizeof(String),"You have changed numbers to: %d",PlayerInfo[playerid][pPnumber]);
					        SendClientMessageEx(playerid,COLOR_GREY,String);
					        return 1;
						}
					 	else if(PlayerInfo[playerid][pPnumber] == numberstr)
						{
						    SendClientMessageEx(playerid,COLOR_GREY," Cannot change to your existing number");
						    return 1;
						}
	  				else
	 				{
	 				   if(!CheckVPH(numberstr))
					    {
					        ReplacePH(PlayerInfo[playerid][pPnumber],strval(inputtext));
					        PlayerInfo[playerid][pPnumber] = strval(inputtext);
					        format(String,sizeof(String),"You have changed numbers to: %d",PlayerInfo[playerid][pPnumber]);
					        SendClientMessageEx(playerid,COLOR_GREY,String);
					        return 1;
						}
					 	else if(PlayerInfo[playerid][pPnumber] == numberstr)
						{
						    SendClientMessageEx(playerid,COLOR_GREY," Cannot change to your existing number");
						    return 1;
						}
	  				}
				}
				SendClientMessageEx(playerid,COLOR_GREY," Was unable to change your number.");
			}
		if(!response)
		{
		    SendClientMessageEx(playerid,COLOR_GREY," You chose not to change numbers.");
		}

	}
	if(dialogid == VIPNUMMENU3)
    {
		if(response)
		    {
		        ShowPlayerDialog(playerid, VIPNUMMENU2, DIALOG_STYLE_INPUT, "New Phone Number","Just enter the number without a -:", "Change", "Cancel");
			}
		if(!response)
		{
		    SendClientMessageEx(playerid,COLOR_GREY," You chose not to change numbers.");
		}

	}
	if(dialogid == DIALOG_SFPD)
	{
	    if(!response) return 1;
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerInfo[playerid][pDuty] == 1)
	            {
					//ResetPlayerWeapons(playerid);
				 	OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
	            }
	            else
	            {
	                if(PlayerInfo[playerid][pConnectTime] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
					SetPlayerColor(playerid, TEAM_SFPD);
					AC_BS_SetPlayerHealth(playerid, 100);
					PlayerInfo[playerid][pHealth] = 100.0;
					AC_BS_SetPlayerArmour(playerid, 100);
					PlayerInfo[playerid][pArmor] = 100.0;
	   				givePlayerValidWeapon(playerid, 24, AMMO_DEAGLE);
					givePlayerValidWeapon(playerid, 25, AMMO_SHOTGUN);
					givePlayerValidWeapon(playerid, 3, AMMO_MELEE);
				 	OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
	        }
	        case 1:
	        {
	            ShowPlayerDialog(playerid, DIALOG_SFPD_WEAPONS, DIALOG_STYLE_LIST, "SFPD: Equipment", "Mace\nNite Stick\nDesert Eagle\nSPAS-12\nMP5\nM4A1\nAK-47\nSmoke Grenade\nShotgun\nRifle\nSniper Rifle\nKevlar Vest\nFirst Aid Kit\nAccessories", "Proceed", "Cancel");
	        }
	        case 2:
	        {
	            ShowPlayerDialog(playerid, DIALOG_SFPD_CLOTHING, DIALOG_STYLE_LIST, "SFPD: Clothing Selection", "Duty Clothes\nOff-Duty Clothing", "Proceed", "Cancel");
	        }
	        case 3:
	        {
                ShowPlayerDialog(playerid, DUTYMENU5, DIALOG_STYLE_INPUT,"SFPD: Clear Suspect", "Who would you like to clear?","Clear", "Cancel");
	        }
	    }
	}
	if(dialogid == DIALOG_SANEWS)
	{
	    if(!response) return 1;
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerInfo[playerid][pDuty] == 1)
	            {
					//ResetPlayerWeapons(playerid);
				 	OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
	            }
	            else
	            {
					SetPlayerColor(playerid, COLOR_NEWS);
				 	OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
	        }
	        case 1:
	        {
                givePlayerValidWeapon(playerid, 43, AMMO_MELEE);
			}
			case 2: ShowModelSelectionMenu(playerid, FACTIONSKIN, "Select Skin");
		}
	}
	if(dialogid == DIALOG_SASD)
	{
	    if(!response) return 1;
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerInfo[playerid][pDuty] == 1)
	            {
					//ResetPlayerWeapons(playerid);
				 	OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
	            }
	            else
	            {
					SetPlayerColor(playerid, TEAM_SASD);
					AC_BS_SetPlayerHealth(playerid, 100);
					PlayerInfo[playerid][pHealth] = 100.0;
					AC_BS_SetPlayerArmour(playerid, 100);
					PlayerInfo[playerid][pArmor] = 100.0;
				 	OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
	        }
	        case 1:
	        {
	            ShowPlayerDialog(playerid, DIALOG_SASD_WEAPONS, DIALOG_STYLE_LIST, "SASD: Equipment", "Mace\nNite Stick\nDesert Eagle\nSPAS-12\nMP5\nM4A1\nAK-47\nSmoke Grenade\nShotgun\nRifle\nSniper Rifle\nKevlar Vest\nFirst Aid Kit\nAccessories", "Proceed", "Cancel");
	        }
	        case 2:
	        {
	            ShowPlayerDialog(playerid, DIALOG_SASD_CLOTHING, DIALOG_STYLE_LIST, "SASD: Clothing Selection", "Duty Clothes\nOff-Duty Clothing", "Proceed", "Cancel");
	        }
	        case 3:
	        {
                ShowPlayerDialog(playerid, DUTYMENU5, DIALOG_STYLE_INPUT,"SASD: Clear Suspect", "Who would you like to clear?","Clear", "Cancel");
	        }
	    }
	}
	if(dialogid == DIALOG_SASD_WEAPONS)
	{
 		if(response)
		{
			if(PlayerInfo[playerid][pConnectTime] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
			if(listitem == 0) // Mace
			{
			}
			else if(listitem == 1) // Nite Stick
			{
				givePlayerValidWeapon(playerid, 3, AMMO_MELEE);
			}
			else if(listitem == 2) //  Deagle
			{
				givePlayerValidWeapon(playerid, 24, AMMO_DEAGLE);
			}
			else if(listitem == 3) // Spas12 *
			{
				givePlayerValidWeapon(playerid, 27, AMMO_SHOTGUN);
			}
			else if(listitem == 4) //  mp5
			{
				givePlayerValidWeapon(playerid, 29, AMMO_MINIGUN);
			}
			else if(listitem == 5) //  m4 *
			{
				givePlayerValidWeapon(playerid, 31, AMMO_M4AK);
			}
			else if(listitem == 6) //  ak-47 *
			{
				givePlayerValidWeapon(playerid, 30, AMMO_M4AK);
			}
			else if(listitem == 7) //  Smoke Bomb *
			{
				givePlayerValidWeapon(playerid, 17, AMMO_GRANADE);
			}
			else if(listitem == 8) //  Shotgun
			{
				givePlayerValidWeapon(playerid, 25, AMMO_SHOTGUN);
			}
			else if(listitem == 9) // rifle
			{
				givePlayerValidWeapon(playerid, 33, AMMO_SNIPER);
			}
			else if(listitem == 10) // Sniper *
			{
				givePlayerValidWeapon(playerid, 34, AMMO_SNIPER);
			}
			else if(listitem == 11) // LSPD Kevlar
			{
				AC_BS_SetPlayerArmour(playerid, 100.0);
				PlayerInfo[playerid][pArmor] = 100.0;
			}
			else if(listitem == 12)
			{
			 	AC_BS_SetPlayerHealth(playerid, 100);
			 	PlayerInfo[playerid][pHealth] = 100.0;
		 	}
			else ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );

		}
	}
	if(dialogid == DIALOG_SASD_CLOTHING)
	{
	    switch(listitem)
	    {
	        case 0: ShowPlayerDialog(playerid, DIALOG_SASD_CLOTHING_TWO, DIALOG_STYLE_LIST, "SASD: Duty Clothing", \
			"Deputy Class A #1\n \
			Deputy Class A #2\n \
			Deputy Class B #1\n \
			Deputy Class B #2\n \
			Supervisor Class A(\n \
			Command Class A #1\n \
			Command Class A #2\n \
			TET\n \
			SORT\n \
			Undersheriff/Commander\n \
			Sheriff", \
			"Proceed", "Cancel");
	        case 1: ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
	    }
	}
	if(dialogid == DIALOG_SASD_CLOTHING_TWO)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
				PlayerInfo[playerid][pModel] = 280;
				SetPlayerSkin(playerid, 280);
	        }
	        case 1:
	        {
				PlayerInfo[playerid][pModel] = 281;
				SetPlayerSkin(playerid, 281);
	        }
	        case 2:
	        {
				PlayerInfo[playerid][pModel] = 282;
				SetPlayerSkin(playerid, 282);
	        }
	        case 3:
	        {
				PlayerInfo[playerid][pModel] = 288;
				SetPlayerSkin(playerid, 288);
	        }
	        case 4:
	        {
				PlayerInfo[playerid][pModel] = 283;
				SetPlayerSkin(playerid, 283);
	        }
	        case 5:
	        {
				PlayerInfo[playerid][pModel] = 266;
				SetPlayerSkin(playerid, 266);
	        }
	        case 6:
	        {
				PlayerInfo[playerid][pModel] = 267;
				SetPlayerSkin(playerid, 267);
	        }
	        case 7:
	        {
				PlayerInfo[playerid][pModel] = 284;
				SetPlayerSkin(playerid, 284);
	        }
	        case 8:
	        {
				PlayerInfo[playerid][pModel] = 285;
				SetPlayerSkin(playerid, 285);
	        }
	        case 9:
	        {
				PlayerInfo[playerid][pModel] = 165;
				SetPlayerSkin(playerid, 165);
	        }
	        case 10:
	        {
				PlayerInfo[playerid][pModel] = 166;
				SetPlayerSkin(playerid, 166);
	        }

	    }
	}
	if(dialogid == 1348)
	{
	    if(response)
	    {
			new
				Float: carPosF[3],
				miscid = GetPVarInt(playerid, "playeraffectedcarTP"),
				v = ListItemTrackId[playerid][listitem];
	        GetVehiclePos(PlayerVehicleInfo[miscid][v][pvId], carPosF[0], carPosF[1], carPosF[2]);
	        AC_BS_SetPlayerVirtualWorld(playerid,GetVehicleVirtualWorld(PlayerVehicleInfo[miscid][v][pvId]));
	        AC_BS_SetPlayerPos(playerid, carPosF[0], carPosF[1], carPosF[2]);
		}
	}
	if(dialogid == GOTOPLAYERCAR)
	{
	    if(response == 1)
	    {
	        for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
	        {
	            if(listitem == i)
	            {
					new Float: carPos[3], id = GetPVarInt(playerid, "playeraffectedcarTP");
					if(PlayerVehicleInfo[id][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
					{
						GetVehiclePos(PlayerVehicleInfo[id][i][pvId], carPos[0], carPos[1], carPos[2]);
						AC_BS_SetPlayerVirtualWorld(playerid,GetVehicleVirtualWorld(PlayerVehicleInfo[id][i][pvId]));
						AC_BS_SetPlayerInterior(playerid,0);
						AC_BS_SetPlayerPos(playerid, carPos[0], carPos[1], carPos[2]);
					}
     				else
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "You can not teleport to a empty/impounded slot.");
					}
				}
			}
	    }
	}
	if(dialogid == DELETECAR)
	{
	    if(response == 1)
	    {
			for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
			{
			    if(listitem == i)
			    {
			        if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
			        {
						{
						    DestroyPlayerVehicle(playerid, i);
					   	 	SendClientMessageEx(playerid, COLOR_WHITE, "Anda telah menghapus kendaraan anda!");
						}
					}
					else if(PlayerVehicleInfo[playerid][i][pvImpounded]) SendClientMessageEx(playerid, COLOR_WHITE, "You can not track an impounded vehicle. If you wish to reclaim it, do so at the LSPD.");
					else SendClientMessageEx(playerid, COLOR_WHITE, "You can not delete a non-existent vehicle.");
			    }
			}
		}
	}
	if(dialogid == PAYTICKET)
	{
	    if(response)
	    {
			for(new i; i < MAX_PLAYERVEHICLES; i++)
			{
			    if(listitem == i)
			    {
					if(PlayerVehicleInfo[playerid][i][pvTicket] <= 0) return SendClientMessageEx(playerid, COLOR_GREY, "Kendaraan ini tidak memiliki surat tilang");
					if(GetPlayerCash(playerid) < PlayerVehicleInfo[playerid][i][pvTicket]) return SendClientMessageEx(playerid, COLOR_GREY, "Uang anda masih belum cukup untuk membayar surat tilang kendaraan ini");
					GivePlayerCash(playerid, -PlayerVehicleInfo[playerid][i][pvTicket]);
					PlayerVehicleInfo[playerid][i][pvTicket] = 0;
					format(String, sizeof(String), "Anda telah membayar Surat Tilang Kendaraan: %s", VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
					SendClientMessageEx(playerid, COLOR_ORANGE, String);
				}
			}
		}
	}
 if(dialogid == TRACKCAR && response) {
		new Float: carPos[3];
		if(PlayerVehicleInfo[playerid][listitem][pvId] > INVALID_PLAYER_VEHICLE_ID)
		{
			GetVehiclePos(PlayerVehicleInfo[playerid][listitem][pvId], carPos[0], carPos[1], carPos[2]);
			if(GetPVarInt(playerid, "Packages") >= 1 || EMSAccepted[playerid] != 999 || gPlayerCheckpointStatus[playerid] != CHECKPOINT_NONE || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first with /killcheckpoint (you either have material packages, or another existing checkpoint).");
			}
  			else
			{
				SetPVarInt(playerid, "TrackCar", 1);
				SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Hint: Make your way to the checkpoint to find your vehicle!");
			}
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvImpounded]) SendClientMessageEx(playerid, COLOR_WHITE, "You can not track an impounded vehicle. If you wish to reclaim it, do so at the Impound Center in East Los Santos.");
		else if(PlayerVehicleInfo[playerid][listitem][pvDestroyed]) SendClientMessageEx(playerid, COLOR_WHITE, "You can not track a destroyed pvehicle. If you wish to reclaim it, do so at the Insurance Agency using '/claiminsurance'.");
		else if(PlayerVehicleInfo[playerid][listitem][pvStored]) SendClientMessageEx(playerid, COLOR_WHITE, "You can not track a stored vehicle. Use /takeveh to spawn it.");
		else SendClientMessageEx(playerid, COLOR_WHITE, "You can not track a non-existent vehicle.");
	}
	if(dialogid == 1347)
	{
	    if(response)
	    {
			new Float: carPosF[3];
        	new v = ListItemTrackId[playerid][listitem];
        	GetVehiclePos(PlayerVehicleInfo[playerid][v][pvId], carPosF[0], carPosF[1], carPosF[2]);
   			if(GetPVarInt(playerid, "Packages") >= 1 || EMSAccepted[playerid] != 999 || gPlayerCheckpointStatus[playerid] != CHECKPOINT_NONE || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first with /killcheckpoint (you either have material packages, or another existing checkpoint).");
			}
  			else
	 		{
	 	    	SetPVarInt(playerid,"TrackCar",1);
		    	new zone[MAX_ZONE_NAME];
			//	Get3DZone(carPosF[0], carPosF[1], carPosF[2], zone, sizeof(zone));
				format(String, sizeof(String), "Your vehicle is located in %s.", zone);
				SendClientMessageEx(playerid, COLOR_YELLOW, String);
				SetPlayerCheckpoint(playerid, carPosF[0], carPosF[1], carPosF[2], 15.0);
				SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Make your way to the checkpoint to find your car!");
			}
		}
	}
	if(dialogid == 1346)
	{
	    if(response)
	    {
			new Float: carPosF[3];
        	new v = ListItemTrackId[playerid][listitem];
        	new f = PlayerInfo[playerid][pFMember];
        	GetVehiclePos(FamilyVehicleInfo[f][v][fvId], carPosF[0], carPosF[1], carPosF[2]);
   			if(GetPVarInt(playerid, "Packages") >= 1 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first with /killcheckpoint (you either have material packages, or another existing checkpoint).");
			}
  			else
	 		{
		    	SetPVarInt(playerid,"TrackCar",1);
				new zone[MAX_ZONE_NAME];
			//	Get3DZone(carPosF[0], carPosF[1], carPosF[2], zone, sizeof(zone));
				format(String, sizeof(String), "Your vehicle is located in %s.", zone);
				SendClientMessageEx(playerid, COLOR_YELLOW, String);
				SetPlayerCheckpoint(playerid, carPosF[0], carPosF[1], carPosF[2], 15.0);
				SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Make your way to the checkpoint to find your car!");
			}
		}
	}
	if(dialogid == DIALOG_PLANTSEED)
	{
		if(response)
		{
		    if(PlayerInfo[playerid][pCangkul] >= 1)
		    {
			    for(new id=1; id <sizeof(PlantInfo); id++)
			    {
					if(listitem == 0)
					{
					    if(!PlantInfo[id][plantPos][0])
		    			{
							if(PlayerInfo[playerid][pBibitAnggur] < 1) return SendClientMessage(playerid, -1, "ERROR: Kamu tidak memiliki bibit Anggur");
						    PlantInfo[id][plantType] = 1;
							PlayerInfo[playerid][pBibitAnggur] --;
							SendClientMessageEx(playerid,COLOR_ARWIN,"PLANTINFO: {FFFFFF}Kamu telah menanam bibit Anggur.");
							GetPlayerPos(playerid, PlantInfo[id][plantPos][0], PlantInfo[id][plantPos][1], PlantInfo[id][plantPos][2]);
					  		PlantInfo[id][plantObject] = CreateDynamicObject(871, PlantInfo[id][plantPos][0], PlantInfo[id][plantPos][1], PlantInfo[id][plantPos][2]-1, 0.0, 0.0, 0.0);
					  		PlantInfo[id][plantTime] = 45*60;
					  		id = MAX_PLANT;
						}
					}
					else if(listitem == 1)
					{
					    if(!PlantInfo[id][plantPos][0])
		    			{
						    if(PlayerInfo[playerid][pBibitBlueberry] < 1) return SendClientMessage(playerid, -1, "ERROR: Kamu tidak memiliki bibit Anggur");
						    PlantInfo[id][plantType] = 2;
							PlayerInfo[playerid][pBibitBlueberry] --;
							SendClientMessageEx(playerid,COLOR_ARWIN,"PLANTINFO: {FFFFFF}Kamu telah menanam bibit Blueberry.");
							GetPlayerPos(playerid, PlantInfo[id][plantPos][0], PlantInfo[id][plantPos][1], PlantInfo[id][plantPos][2]);
					  		PlantInfo[id][plantObject] = CreateDynamicObject(871, PlantInfo[id][plantPos][0], PlantInfo[id][plantPos][1], PlantInfo[id][plantPos][2]-1, 0.0, 0.0, 0.0);
					  		PlantInfo[id][plantTime] = 45*60;
					  		id = MAX_PLANT;
				  		}
					}
					else if(listitem == 2)
					{
					    if(!PlantInfo[id][plantPos][0])
		    			{
						    if(PlayerInfo[playerid][pBibitStrawberry] < 1) return SendClientMessage(playerid, -1, "ERROR: Kamu tidak memiliki bibit Anggur");
						    PlantInfo[id][plantType] = 3;
							PlayerInfo[playerid][pBibitStrawberry] --;
							SendClientMessageEx(playerid,COLOR_ARWIN,"PLANTINFO: {FFFFFF}Kamu telah menanam bibit Strawberry.");
							GetPlayerPos(playerid, PlantInfo[id][plantPos][0], PlantInfo[id][plantPos][1], PlantInfo[id][plantPos][2]);
					  		PlantInfo[id][plantObject] = CreateDynamicObject(871, PlantInfo[id][plantPos][0], PlantInfo[id][plantPos][1], PlantInfo[id][plantPos][2]-1, 0.0, 0.0, 0.0);
					  		PlantInfo[id][plantTime] = 45*60;
					  		id = MAX_PLANT;
				  		}
					}
					else if(listitem == 3)
					{
					    if(!PlantInfo[id][plantPos][0])
		    			{
						    if(PlayerInfo[playerid][pBibitGandum] < 1) return SendClientMessage(playerid, -1, "ERROR: Kamu tidak memiliki bibit Anggur");
						    PlantInfo[id][plantType] = 4;
							PlayerInfo[playerid][pBibitGandum] --;
							SendClientMessageEx(playerid,COLOR_ARWIN,"PLANTINFO: {FFFFFF}Kamu telah menanam bibit Gandum.");
							GetPlayerPos(playerid, PlantInfo[id][plantPos][0], PlantInfo[id][plantPos][1], PlantInfo[id][plantPos][2]);
					  		PlantInfo[id][plantObject] = CreateDynamicObject(871, PlantInfo[id][plantPos][0], PlantInfo[id][plantPos][1], PlantInfo[id][plantPos][2]-1, 0.0, 0.0, 0.0);
					  		PlantInfo[id][plantTime] = 45*60;
					  		id = MAX_PLANT;
				  		}
					}
					else if(listitem == 4)
					{
					    if(!PlantInfo[id][plantPos][0])
		    			{
						    if(PlayerInfo[playerid][pBibitTomat] < 1) return SendClientMessage(playerid, -1, "ERROR: Kamu tidak memiliki bibit Tomat");
						    PlantInfo[id][plantType] = 5;
							PlayerInfo[playerid][pBibitTomat] --;
							SendClientMessageEx(playerid,COLOR_ARWIN,"PLANTINFO: {FFFFFF}Kamu telah menanam bibit Tomat.");
							GetPlayerPos(playerid, PlantInfo[id][plantPos][0], PlantInfo[id][plantPos][1], PlantInfo[id][plantPos][2]);
					  		PlantInfo[id][plantObject] = CreateDynamicObject(871, PlantInfo[id][plantPos][0], PlantInfo[id][plantPos][1], PlantInfo[id][plantPos][2]-1, 0.0, 0.0, 0.0);
					  		PlantInfo[id][plantTime] = 45*60;
					  		id = MAX_PLANT;
				  		}
					}
			  		ApplyAnimation(playerid, LIBRARY, ANIMATION, 4.1, false, false, false, false, 3000, false);
					PlayerInfo[playerid][pCangkul] -= 1;
				}
			}
		}
	}
    if(dialogid == 15599)
	{
		if(response)
		{
		    new Float: hp;
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pParacetamol] > 0)
				{
				    GetPlayerHealth(playerid, hp);
				    AC_BS_SetPlayerHealth(playerid, hp+7);
				    PlayerInfo[playerid][pHealth] += 7;
				    PlayerInfo[playerid][pCondition] += 5;
				    PlayerInfo[playerid][pParacetamol] -= 1;
				    SendClientMessage(playerid, COLOR_ARWIN, "MEDICINEINFO: {FFff00}You've use Paracetamol (Condition +5)");
				}
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pAmoxicilin] > 0)
				{
				    GetPlayerHealth(playerid, hp);
				    AC_BS_SetPlayerHealth(playerid, hp+15);
				    PlayerInfo[playerid][pHealth] += 15;
				    PlayerInfo[playerid][pCondition] += 10;
				    PlayerInfo[playerid][pAmoxicilin] -= 1;
				    SendClientMessage(playerid, COLOR_ARWIN, "MEDICINEINFO: {FFff00}You've use Amoxicilin (Condition +10)");
				}
			}
            if(listitem == 2)
			{
				if(PlayerInfo[playerid][pUltrafluenza] > 0)
				{
				    GetPlayerHealth(playerid, hp);
				    AC_BS_SetPlayerHealth(playerid, hp+30);
				    PlayerInfo[playerid][pHealth] += 30;
				    PlayerInfo[playerid][pCondition] += 17;
				    PlayerInfo[playerid][pUltrafluenza] -= 1;
				    SendClientMessage(playerid, COLOR_ARWIN, "MEDICINEINFO: {FFff00}You've use Ultrafluenza (Condition +17)");
				}
			}
		}
	}
	if(dialogid == 15598)
	{
		if(response)
		{
			if(listitem == 0)
			{
				PlayerInfo[playerid][pParacetamol] += 1;
				SendClientMessageEx(playerid,COLOR_ARWIN,"MEDICINFO: {FFFFFF}You've take Paracetamol from Equipment Medicine.");
				EquipmentStock --;
			}
			if(listitem == 1)
			{
				PlayerInfo[playerid][pAmoxicilin] += 1;
				SendClientMessageEx(playerid,COLOR_ARWIN,"MEDICINFO: {FFFFFF}You've take Amoxicilin from Equipment Medicine.");
				EquipmentStock --;
			}
			if(listitem == 2)
			{
				PlayerInfo[playerid][pUltrafluenza] += 1;
				SendClientMessageEx(playerid,COLOR_ARWIN,"MEDICINFO: {FFFFFF}You've take Ultrafluenza from Equipment Medicine.");
				EquipmentStock --;
			}
		}
	}

	if( dialogid == 15773) //bait system
	{
		new tbait = strval(inputtext);
		if(!response)
		{
			format(String, sizeof(String), "Bait Price: $0.5");
			ShowPlayerDialog( playerid, 15773, DIALOG_STYLE_INPUT, "BUY BAIT",String, "Buy", "Cancel" );
		}
		else
		{
		    if(GetPlayerCash(playerid) < tbait * 5) { SendClientMessageEx(playerid, COLOR_GRAD2, "Uang anda tidak cukup !"); return 1; }
            if(tbait > 100) { SendClientMessageEx(playerid,COLOR_WHITE,"Kamu telah memiliki banyak umpan."); return 1; }
            if(tbait < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Minimal membeli 1 Umpan."); return 1; }
            new harga = tbait * 5;
			GivePlayerCash(playerid, -harga);
			format(String, sizeof(String), "Anda telah membeli %d Bait Umpan dengan harga %s",tbait, FormatMoney(harga));
			SendClientMessageEx(playerid,COLOR_WHITE,String);
			PlayerInfo[playerid][pCacing] += tbait;
		}
  		return 1;
 	}
 	if( dialogid == 15776) //bait system
	{
		new tbait = strval(inputtext);
		if(!response)
		{
			format(String, sizeof(String), "Component Price: $0.50");
			ShowPlayerDialog( playerid, 15776, DIALOG_STYLE_INPUT, "BUY COMPONENT",String, "Buy", "Cancel" );
		}
		else
		{
		    if(GetPlayerCash(playerid) < tbait * 50) { SendClientMessageEx(playerid, COLOR_GRAD2, "Uang anda tidak cukup !"); return 1; }
            if(tbait < 1) { SendClientMessageEx(playerid,COLOR_WHITE,"ERROR: Minimal membeli 1 component."); return 1; }
            new harga = tbait * 50;
			GivePlayerCash(playerid, -harga);
			format(String, sizeof(String), "Anda telah membeli %d component dengan harga %s",tbait, FormatMoney(harga));
			SendClientMessageEx(playerid,COLOR_WHITE,String);
			PlayerInfo[playerid][pComponent] += tbait;
		}
  		return 1;
 	}
	// ATM SYSTEM
	if( dialogid == 15779) //Withdraw
	{
		if(response)
		{
	   	    if(listitem == 0)
			{
			    if(PlayerInfo[playerid][pAccount] >= 2000)
				{
					GivePlayerCash(playerid, 2000);
					PlayerInfo[playerid][pAccount] -= 2000;
					format(String, sizeof(String), "BANK: {ffffff}You've taken {ffff00}$20.00 {ffffff}from the bank. Current balance: {ffff00}$%s", FormatMoney(PlayerInfo[playerid][pAccount]));
					SendClientMessageEx(playerid, COLOR_ARWIN, String);
				}
			}
         	if(listitem == 1)
			{
			    if(PlayerInfo[playerid][pAccount] >= 5000)
				{
					GivePlayerCash(playerid, 5000);
					PlayerInfo[playerid][pAccount] -= 5000;
					format(String, sizeof(String), "BANK: {ffffff}You've taken {ffff00}$50.00 {ffffff}from the bank. Current balance: {ffff00}$%s", FormatMoney(PlayerInfo[playerid][pAccount]));
					SendClientMessageEx(playerid, COLOR_ARWIN, String);
				}
			}
			if(listitem == 2)
			{
			    if(PlayerInfo[playerid][pAccount] >= 10000)
				{
					GivePlayerCash(playerid, 10000);
					PlayerInfo[playerid][pAccount] -= 10000;
					format(String, sizeof(String), "BANK: {ffffff}You've taken {ffff00}$100.00 {ffffff}from the bank. Current balance: {ffff00}$%s", FormatMoney(PlayerInfo[playerid][pAccount]));
					SendClientMessageEx(playerid, COLOR_ARWIN, String);
				}
			}
			if(listitem == 3)
			{
			    if(PlayerInfo[playerid][pAccount] >= 25000)
				{
					GivePlayerCash(playerid, 25000);
					PlayerInfo[playerid][pAccount] -= 25000;
					format(String, sizeof(String), "BANK: {ffffff}You've taken {ffff00}$250.00 {ffffff}from the bank. Current balance: {ffff00}$%s", FormatMoney(PlayerInfo[playerid][pAccount]));
					SendClientMessageEx(playerid, COLOR_ARWIN, String);
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pAccount] >= 50000)
				{
					GivePlayerCash(playerid, 50000);
					PlayerInfo[playerid][pAccount] -= 50000;
					format(String, sizeof(String), "BANK: {ffffff}You've taken {ffff00}$500.00 {ffffff}from the bank. Current balance: {ffff00}$%s", FormatMoney(PlayerInfo[playerid][pAccount]));
					SendClientMessageEx(playerid, COLOR_ARWIN, String);
				}
			}
			if(listitem == 5)
			{
			    if(PlayerInfo[playerid][pAccount] >= 100000)
				{
					GivePlayerCash(playerid, 100000);
					PlayerInfo[playerid][pAccount] -= 100000;
					format(String, sizeof(String), "BANK: {ffffff}You've taken {ffff00}$1,000.00 {ffffff}from the bank. Current balance: {ffff00}$%s", FormatMoney(PlayerInfo[playerid][pAccount]));
					SendClientMessageEx(playerid, COLOR_ARWIN, String);
				}
			}
        }
  		return 1;
 	}
	if( dialogid == 15777) //check status
	{
		if(!response)
		{
			if(PlayerInfo[playerid][pPDTime] <= 0)
			{
				ShowPlayerDialog(playerid, 11020, DIALOG_STYLE_LIST, "ATM Menus", "Bank Status\nWithdraw\nSigncheck","Select","Exit");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, 11020, DIALOG_STYLE_LIST, "ATM Menus", "Bank Status\nWithdraw","Select","Exit");
			}
			return 1;
		}
  		return 1;
	}
	else if( dialogid == 2398 )
	{
	    if( strlen( inputtext ) >= 64 )
	    {
	        SendClientMessageEx( playerid, COLOR_WHITE, "You can't select a password that's above 64 characters." );
	    }
	    else
	    {
	        if( strlen( inputtext ) >= 1 )
	        {
	            if(!response)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "You have prevented yourself from changing your password." );
	            }
	            else
	            {
		            new EncryptedPassword[ 64 ];
		            format( EncryptedPassword, 64, "%s", inputtext );

	             	format( PlayerInfo[playerid][pKey], 64, "%s", EncryptedPassword );
		            format( String, sizeof( String ), "You have changed your password to '%s'", inputtext );

		            SendClientMessageEx( playerid, COLOR_YELLOW, String );
		            OnPlayerStatsUpdate( playerid );

					format( String, sizeof( String ), "%s (IP: %s) has changed their password.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pIP]);
					Log("logs/password.log", String);
	            }
	        }
	        else
	        {
	            SendClientMessageEx( playerid, COLOR_WHITE, "Your password must be longer than 1 character." );
	        }
	    }
	}
	else if(dialogid == HQENTRANCE)
	{
	    if(response)
	    {
	        new Float: x, Float: y, Float: z, Float: a;
	        GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, a);
	        if(GetPVarInt(playerid, "editingfamhqaction") == 5)
	        {
	            if(IsValidDynamicPickup(FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup])) DestroyDynamicPickup( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
	            DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = x;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = y;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = z;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = a;
            	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] = CreateDynamicPickup(1318, 23, x, y, z);
				format(String, sizeof(String), "%s", FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyName]);
            	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] = CreateDynamic3DTextLabel(String, COLOR_YELLOW, x, y, z+0.6, 4.0);
            	SendClientMessageEx(playerid, COLOR_GRAD2, "HQ Entrance changed!.");
            	TogglePlayerControllable(playerid, true);
            	SaveFamiliesHQ();
            	return 1;
			}
			FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = x;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = y;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = z;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = a;
         	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] = CreateDynamicPickup(1318, 23, x, y, z);
			format(String, sizeof(String), "%s", FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyName]);
   			FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] = CreateDynamic3DTextLabel(String, COLOR_YELLOW, x, y, z+0.6, 4.0);
			SendClientMessageEx(playerid, COLOR_GRAD2, "HQ Entrance saved! Please stand where you want the exit at, once ready press the fire button.");
            SetPVarInt(playerid, "editingfamhqaction", 2);
            TogglePlayerControllable(playerid, true);
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "editingfamhqaction") == 5)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "You have cancelled the exterior change of this HQ.");
	            SetPVarInt(playerid, "editingfamhqaction", 0);
	        	SetPVarInt(playerid, "editingfamhq", 255);
	        	TogglePlayerControllable(playerid, true);
	            return 1;
	        }
	        SendClientMessageEx(playerid, COLOR_GRAD2, "You have cancelled the creation of this HQ.");
	        if(IsValidDynamicPickup(FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup])) DestroyDynamicPickup( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
			if(IsValidDynamicPickup(FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup])) DestroyDynamicPickup( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
			DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
			DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitText] );
			FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 0;
	        SetPVarInt(playerid, "editingfamhqaction", 0);
	        SetPVarInt(playerid, "editingfamhq", 255);
	        TogglePlayerControllable(playerid, true);
	    }
	}
	else if(dialogid == HQEXIT)
	{
	    if(response)
	    {
	        new Float: x, Float: y, Float: z, Float: a;
	        GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, a);
	        if(GetPVarInt(playerid, "editingfamhqaction") == 6)
	        {
	            if(IsValidDynamicPickup(FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup])) DestroyDynamicPickup( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
	            FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = x;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = y;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = z;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = a;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = GetPlayerInterior(playerid);
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyVirtualWorld] = GetPVarInt(playerid, "editingfamhq")+900000;
            	SendClientMessageEx(playerid, COLOR_GRAD2, "HQ Exit changed!.");
            	TogglePlayerControllable(playerid, true);
            	SaveFamiliesHQ();
            	return 1;
	        }
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = x;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = y;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = z;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = a;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = GetPlayerInterior(playerid);
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyVirtualWorld] = GetPVarInt(playerid, "editingfamhq")+900000;
            format(String,128,"HQ Exit saved!\n\nIs this interior a custom mapped one?");
        	ShowPlayerDialog(playerid,HQCUSTOMINT,DIALOG_STYLE_MSGBOX,"Warning:",String,"Yes","No");
            SetPVarInt(playerid, "editingfamhqaction", 3);
            TogglePlayerControllable(playerid, true);
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "editingfamhqaction") == 6)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "You have cancelled the interior change of this HQ.");
	            SetPVarInt(playerid, "editingfamhqaction", 0);
	        	SetPVarInt(playerid, "editingfamhq", 255);
	        	TogglePlayerControllable(playerid, true);
	            return 1;
	        }
	        SendClientMessageEx(playerid, COLOR_GRAD2, "You have cancelled the creation of this HQ.");
	        if(IsValidDynamicPickup(FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup])) DestroyDynamicPickup( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
			if(IsValidDynamicPickup(FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup])) DestroyDynamicPickup( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
			DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
			DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitText] );
			FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 0;
	        SetPVarInt(playerid, "editingfamhqaction", 0);
	        SetPVarInt(playerid, "editingfamhq", 255);
	        TogglePlayerControllable(playerid, true);
	    }
	}
	else if(dialogid == HQCUSTOMINT)
	{
	    if(response)
	    {
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyCustomMap] = 1;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 255;
	        if(GetPVarInt(playerid, "editingfamhqaction") == 7)
	        {
	        	SendClientMessageEx(playerid, COLOR_GRAD2, "You have successfully changed the custom interior for this HQ.");
   			}
   			else
   			{
   				SendClientMessageEx(playerid, COLOR_GRAD2, "You have successfully created this HQ.");
   			}
	        SetPVarInt(playerid, "editingfamhq", 255);
	        SaveFamiliesHQ();
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "editingfamhqaction") == 7)
	        {
	        	SendClientMessageEx(playerid, COLOR_GRAD2, "You have successfully changed the custom interior for this HQ.");
   			}
   			else
   			{
   				SendClientMessageEx(playerid, COLOR_GRAD2, "You have successfully created this HQ.");
   			}
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyCustomMap] = 0;
	        SetPVarInt(playerid, "editingfamhq", 255);
	        SaveFamiliesHQ();
	    }
	}
	else if(dialogid == HQDELETE)
	{
	    if(!response)
	    {
	    }
	    else
	    {
	        format(String,128,"You have successfully deleted '%s' HQ", FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyName]);
	        SendClientMessageEx(playerid, COLOR_GRAD2, String);
	        if(IsValidDynamicPickup(FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup])) DestroyDynamicPickup( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
			if(IsValidDynamicPickup(FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup])) DestroyDynamicPickup( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
			DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
			DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitText] );
			FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 0;
	        SetPVarInt(playerid, "editingfamhqaction", 0);
	        SetPVarInt(playerid, "editingfamhq", 255);
	        TogglePlayerControllable(playerid, true);
	        SaveFamiliesHQ();
	    }
	}
    else if(dialogid == DIALOG_CDEDIT)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // New Vehicle
			{
				format(String, sizeof(String),"Please type the model ID of the new vehicle.");
		        ShowPlayerDialog(playerid,DIALOG_CDNEWVEH,DIALOG_STYLE_INPUT,"Warning:",String,"Ok","Cancel");
			}
			else if(listitem == 1) // My Vehicles
			{
				new vehicles;
                for(new i=0; i<MAX_DEALERSHIPVEHICLES; i++)
	            {
					if(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleModel][i] != 0)
					{
						vehicles++;
		                format(String, sizeof(String), "Vehicle %d| Name: %s | Price: %s.",i+1,GetVehicleName(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][i]),FormatMoney(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleCost][i]));
		                SendClientMessageEx(playerid, COLOR_WHITE, String);
					}
				}
				if(vehicles)
				{
				    ShowPlayerDialog(playerid, DIALOG_CDEDITCARS, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose a vehicle to edit:", "Edit", "Back");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " This car dealership doesn't have any cars.");
				}
			}
			else if(listitem == 2) // Upgrade
			{
				new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			    ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue.", listitems,"Select","Cancel");
			}
			else if(listitem == 3) // Till
			{
				new listitems[] = "1 Withdraw\n2 Deposit";
			    ShowPlayerDialog(playerid,DIALOG_CDTILL,DIALOG_STYLE_LIST,"Choose an item to continue.", listitems,"Select","Cancel");
			}
		}
		else
		{
			SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDTILL)
	{ // car dealership dialog
	    if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // Withdraw
			{
				format(String, sizeof(String), "{FFFFFF}You have {00FF00}$%s {FFFFFF}in your till account.\nHow much money to withdraw?", FormatMoney(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]));
				ShowPlayerDialog(playerid,DIALOG_CDWITHDRAW,DIALOG_STYLE_INPUT,"Withdraw", String,"Select","Cancel");
			}
			else if(listitem == 1) // Deposit
			{
				format(String, sizeof(String), "{FFFFFF}You have {00FF00}$%s {FFFFFF}in your till account.\nHow much money to deposit?", FormatMoney(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]));
				ShowPlayerDialog(playerid,DIALOG_CDDEPOSIT,DIALOG_STYLE_INPUT,"Deposit", String,"Select","Cancel");
			}
		}
		else
		{
            SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDWITHDRAW)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
		    if (IsNumeric(inputtext))
	        {
	             new money = strval(inputtext);
	             if(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill] < money)
	             {
                     format(String, sizeof(String), "You don't have that much in your till!\n\nYou have $%s in your till account.\n\nHow much money to withdraw?", FormatMoney(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]));
				     ShowPlayerDialog(playerid,DIALOG_CDWITHDRAW,DIALOG_STYLE_INPUT,"Withdraw", String,"Select","Cancel");
                     return 1;
	             }
	             CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill] -= money;
	             SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+money);
	             format(String, sizeof(String), "You have successfully withdrawn $%s from your till, new balance: $%s", FormatMoney(money), FormatMoney(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]));
	             SendClientMessageEx(playerid, COLOR_GRAD2, String);
	             SavecDealership(GetPVarInt(playerid, "editingcd"));
                 SetPVarInt(playerid, "editingcd", -1);
			}
        }
		else
		{
             SavecDealership(GetPVarInt(playerid, "editingcd"));
             SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDDEPOSIT)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
		    if (IsNumeric(inputtext))
	        {
	             new money = strval(inputtext);
	             if(GetPVarInt(playerid, "Cash") < money)
	             {
                     format(String, sizeof(String), "You don't have that much in your wallet!\n\nYou have $%d in your till account.\n\n\tHow much money to deposit?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				     ShowPlayerDialog(playerid,DIALOG_CDDEPOSIT,DIALOG_STYLE_INPUT,"Deposit", String,"Select","Cancel");
                     return 1;
	             }
	             CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill] += money;
	             SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-money);
	             format(String, sizeof(String), "You have successfully deposited $%d to your till, new balance: $%d", money, CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
	             SendClientMessageEx(playerid, COLOR_GRAD2, String);
	             SavecDealership(GetPVarInt(playerid, "editingcd"));
                 SetPVarInt(playerid, "editingcd", -1);
			}
		}
		else
		{
             SavecDealership(GetPVarInt(playerid, "editingcd"));
             SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDUPGRADE)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // Vehicle Spawn
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, " Please stand where you want to have your brought vehicles spawn.");
				SendClientMessageEx(playerid, COLOR_GRAD2, " Once ready press the fire button.");
				SetPVarInt(playerid, "editingcdvehpos", 2);
			}
            if(listitem == 1) // Radius
			{
				ShowPlayerDialog(playerid, DIALOG_CDRADIUS, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new radius:", "Edit", "Back");
			}
			else if(listitem == 2) // Dealership Name
			{
				ShowPlayerDialog(playerid, DIALOG_CDNAME, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new name:", "Edit", "Back");
			}
			else if(listitem == 3) // Price
			{
				ShowPlayerDialog(playerid, DIALOG_CDPRICE, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new price:", "Edit", "Back");
			}
		}
		else
		{
            SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDRADIUS)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new d;
			d = GetPVarInt(playerid, "editingcd");
			new Float:radius = floatstr(inputtext);
			new Float:radiusex = CarDealershipInfo[d][cdRadius];
			new test = floatround(radius), test1 = floatround(radiusex);
            if (CarDealershipInfo[d][cdRadius] > radius)
	        {
				 new cost = ( test - test1 ) * ( test1 * 1000 );
				 if(GetPVarInt(playerid, "Cash") < cost)
				 {
                     format(String, sizeof(String), "ERROR: You do not have enough money for this upgrade ($%d).",cost);
                     SendClientMessageEx(playerid, COLOR_GREY, String);
                     return 1;
				 }
				 format(String, sizeof(String), " Car Dealership radius upgraded from %.1f to %.1f for $%d.",radiusex, radius, cost);
                 SendClientMessageEx(playerid, COLOR_GREY, String);
	             CarDealershipInfo[d][cdRadius] = radius;
	             format(String,128,"{00FFFF}[id:%d]\n{FFFF00}%s\n{00FF00}Owner: %s",d, CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdOwner]);
	             UpdateDynamic3DTextLabelText(CarDealershipInfo[d][cdTextLabel], COLOR_GREEN, String);
	             new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			     ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
			     SavecDealership(GetPVarInt(playerid, "editingcd"));
	        }
		}
		else
		{
		    new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDNAME)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new d;
			d = GetPVarInt(playerid, "editingcd");
            if (!strlen(inputtext))
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "** You must type a name **");
    	        ShowPlayerDialog(playerid, DIALOG_CDNAME, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new name:", "Edit", "Back");
		        return 1;
			}
			new cost = strlen(inputtext) * 50;
			format(String, sizeof(String), " Car Dealership name upgraded from %s to %s for $%s.", CarDealershipInfo[d][cdMessage], inputtext, FormatMoney(cost));
            SendClientMessageEx(playerid, COLOR_GREY, String);
	        strmid(CarDealershipInfo[d][cdMessage], inputtext, 0, strlen(inputtext), 255);
	        format(String,128,"{00FFFF}[id:%d]\n{FFFF00}%s\n{00FF00}Owner: %s",d, CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdOwner]);
	        UpdateDynamic3DTextLabelText(CarDealershipInfo[d][cdTextLabel], COLOR_GREEN, String);
	        new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
			SavecDealership(GetPVarInt(playerid, "editingcd"));
		}
		else
		{
		    new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDEDITCARS)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new cdvid;
            if (IsNumeric(inputtext))
	        {
	             cdvid = strval(inputtext);
	             if(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleModel][cdvid-1])
	             {
	                 SetPVarInt(playerid, "editingcdveh", cdvid-1);
	                 new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			         ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
				 }
	        }
		}
		else
		{
		    new listitems[] = "1 New Vehicle\n2 My Vehicles\n3 Upgrade\n4 Till";
			ShowPlayerDialog(playerid,DIALOG_CDEDIT,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDEDITONE)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
            if(listitem == 0) // Edit Model
			{
	             ShowPlayerDialog(playerid, DIALOG_CDEDITMODEL, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new model id:", "Edit", "Back");
	        }
	        else if(listitem == 1) // Edit Cost
			{
	             ShowPlayerDialog(playerid, DIALOG_CDEDITCOST, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new price of the car:", "Edit", "Back");
	        }
	        else if(listitem == 2) // Edit Park
			{
				 PutPlayerInVehicle(playerid, CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][GetPVarInt(playerid, "editingcdveh")], 0);
	             SendClientMessageEx(playerid, COLOR_GRAD2, " Please stand where you want to park the vehicle.");
				 SendClientMessageEx(playerid, COLOR_GRAD2, " Once ready press the fire button.");
				 SetPVarInt(playerid, "editingcdvehpos", 1);
	        }
	        else if(listitem == 3) // Delete Vehicle
			{
	             format(String, sizeof(String), "Are you sure you want to delete this %s?\nNote: You will not get any refounds.",
				 GetVehicleName(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][GetPVarInt(playerid, "editingcdveh")]));
		         ShowPlayerDialog(playerid,DIALOG_CDDELVEH,DIALOG_STYLE_MSGBOX,"Warning:",String,"Ok","Cancel");
	        }
		}
		else
		{
            SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcdveh", -1);
		}
	}
    else if(dialogid == DIALOG_CDEDITMODEL)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			new modelid, d, v;
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
            if (IsNumeric(inputtext))
	        {
	             modelid = strval(inputtext);
	             if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611 !"); return 1; }
	             CarDealershipInfo[d][cdVehicleModel][v] = modelid;
	             DestroyDynamic3DTextLabel(CarDealershipInfo[d][cdVehicleLabel][v]);
	             DestroyVehicle(CarDealershipInfo[d][cdVehicleId][v]);
	             new carcreated;
	             carcreated = CreateVehicle(CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawnX][v], CarDealershipInfo[d][cdVehicleSpawnY][v], CarDealershipInfo[d][cdVehicleSpawnZ][v], CarDealershipInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		         format(String, sizeof(String),"{00FFFF}[id:%d]\n{00FFFF}%s\n{FFFF00}$%s\n{FFFF00}Fuel Capacity: {FFFFFF}100.0\n{FFFF00}Fuel Total: {FFFFFF}100.0",v, GetVehicleName(carcreated), FormatMoney(CarDealershipInfo[d][cdVehicleCost][v]));
                 CarDealershipInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(String,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	             CarDealershipInfo[d][cdVehicleId][v] = carcreated;
	             new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			     ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
			     SavecDealership(d);
	        }
		}
		else
		{
		    new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDEDITCOST)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			new price, d, v;
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
            if (IsNumeric(inputtext))
	        {
	             price = strval(inputtext);
	             CarDealershipInfo[d][cdVehicleCost][v] = price;
	             GivePlayerCash(playerid, -price);
				 format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FFFF}%s\n{FFFF00}$%s\n{FFFF00}Fuel Capacity: {FFFFFF}100.0\n{FFFF00}Fuel Total: {FFFFFF}100.0",v, GetVehicleName(CarDealershipInfo[d][cdVehicleId][v]), FormatMoney(CarDealershipInfo[d][cdVehicleCost][v]));
	             UpdateDynamic3DTextLabelText(CarDealershipInfo[d][cdVehicleLabel][v], COLOR_LIGHTBLUE, String);
	             new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			     ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
			     SavecDealership(d);
	        }
		}
		else
		{
		    new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDDELVEH)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			DestroyCarDealershipVehicle(GetPVarInt(playerid, "editingcd"), GetPVarInt(playerid, "editingcdveh"));
			SavecDealership(GetPVarInt(playerid, "editingcd"));
		}
		else
		{
		    new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDEDITPARK)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1 &&  GetPVarInt(playerid, "editingcdvehpos") == 1 || GetPVarInt(playerid, "editingcdvehnew"))
		{
			new Float: x, Float: y, Float: z, Float: a;
			new d, v;
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
			GetVehiclePos(CarDealershipInfo[d][cdVehicleId][v], x, y, z);
	        GetVehicleZAngle(CarDealershipInfo[d][cdVehicleId][v], a);
			if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		    {
			     CarDealershipInfo[d][cdVehicleSpawnX][v] = x;
                 CarDealershipInfo[d][cdVehicleSpawnY][v] = y;
                 CarDealershipInfo[d][cdVehicleSpawnZ][v] = z;
                 CarDealershipInfo[d][cdVehicleSpawnAngle][v] = a;
                 SetPVarInt(playerid, "editingcdvehpos", 0);
                 SetPVarInt(playerid, "editingcdvehnew", 0);
                 DestroyDynamic3DTextLabel(CarDealershipInfo[d][cdVehicleLabel][v]);
	             DestroyVehicle(CarDealershipInfo[d][cdVehicleId][v]);
	             new carcreated;
	             carcreated = CreateVehicle(CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawnX][v], CarDealershipInfo[d][cdVehicleSpawnY][v], CarDealershipInfo[d][cdVehicleSpawnZ][v], CarDealershipInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		         format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FFFF}%s\n{FFFF00}$%s\n{FFFF00}Fuel Capacity: {FFFFFF}100.0\n{FFFF00}Fuel Total: {FFFFFF}100.0",v, GetVehicleName(carcreated), FormatMoney(CarDealershipInfo[d][cdVehicleCost][v]));
                 CarDealershipInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(String,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	             CarDealershipInfo[d][cdVehicleId][v] = carcreated;
	             TogglePlayerControllable(playerid, true);
	             new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			     ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
			     SavecDealership(d);
			}
			else
			{
                 SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You are out of this Car Dealership radius, please try again.");
                 TogglePlayerControllable(playerid, true);
			}
		}
		else if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 2)
		{
			new Float: x, Float: y, Float: z, Float: a;
			new d;
			GetPlayerPos(playerid,x,y,z);
	        GetPlayerFacingAngle(playerid, a);
			d = GetPVarInt(playerid, "editingcd");
			if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		    {
			     CarDealershipInfo[d][cdVehicleSpawn][0] = x;
                 CarDealershipInfo[d][cdVehicleSpawn][1] = y;
                 CarDealershipInfo[d][cdVehicleSpawn][2] = z;
                 CarDealershipInfo[d][cdVehicleSpawn][3] = a;
                 SetPVarInt(playerid, "editingcdvehpos", 0);
	             TogglePlayerControllable(playerid, true);
	             new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			     ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
			     SavecDealership(d);
			}
			else
			{
                 SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You are out of this Car Dealership radius, please try again.");
                 TogglePlayerControllable(playerid, true);
			}
		}
		else if(!response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 1)
		{
            new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcdvehpos", 0);
		}
		else if(!response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 2)
		{
            new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
		    ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcdvehpos", 0);
		}
	}
	else if(dialogid == DIALOG_CDNEWVEH)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new modelid, d;
			new Float: x, Float: y, Float: z, Float: a;
			d = GetPVarInt(playerid, "editingcd");
			GetPlayerPos(playerid,x,y,z);
	        GetPlayerFacingAngle(playerid, a);
	        if (!IsNumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: Model ID must be numbers.");
            if (IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
	        {
	             modelid = strval(inputtext);
	             if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611 !"); return 1; }
	             new cdvehicleid = CreateCarDealershipVehicle(d, modelid, x, y, z, a, 1337);
	             if(cdvehicleid == -1)
		         {
		             SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Car couldn't be created.");
		         }
	             else
	             {
					 PutPlayerInVehicle(playerid, CarDealershipInfo[d][cdVehicleId][cdvehicleid], 0);
                     format(String, sizeof(String), " Car Dealership Vehicle created with Vehicle ID %d.", cdvehicleid-1);
		             SendClientMessageEx(playerid, COLOR_GRAD1, String);
		             SendClientMessageEx(playerid, COLOR_GRAD2, " Please stand where you want to add your new vehicle.");
				     SendClientMessageEx(playerid, COLOR_GRAD2, " Once ready press the fire button.");
				     SetPVarInt(playerid, "editingcdvehnew", 1);
		             SetPVarInt(playerid, "editingcdveh", cdvehicleid);
	             }
	        }
	        else
	        {
                 SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You are out of this Car Dealership radius, please try again.");
                 TogglePlayerControllable(playerid, true);
	        }
		}
		else
		{
            TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDBUY)
	{

	    // Account Eating Bug Fix
	    if(!IsPlayerInAnyVehicle(playerid))
		{
		    TogglePlayerControllable(playerid, 1);
			SendClientMessageEx(playerid,COLOR_GRAD2,"You need to be in the vehicle you wish to purchase.");
			return 1;
		}

		new vehicleid = GetPlayerVehicleID(playerid);
		new v = GetCarDealershipVehicleId(vehicleid);
		new d = GetCarDealershipId(vehicleid);
		if(response)
		{
            if(CarDealershipInfo[d][cdVehicleSpawn][0] == 0.0 && CarDealershipInfo[d][cdVehicleSpawn][1] == 0.0 && CarDealershipInfo[d][cdVehicleSpawn][2] == 0.0)
            {
				SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: The owner of this Car Dealership hasn't set the purchased vehicles spawn point.");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				AC_BS_SetPlayerPos(playerid, slx, sly, slz+1.2);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }
            if(IsVIPModel(vehicleid) && (PlayerInfo[playerid][pDonateRank] == 0 || PlayerInfo[playerid][pTempVIP] > 0))
            {
                SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Only VIP's can own that type of vehicles.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				AC_BS_SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            new playervehicleid = GetPlayerFreeVehicleId(playerid);
            new carsamount = GetPlayerVehicleCount(playerid);
            if(PlayerInfo[playerid][pDonateRank] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
			if(PlayerInfo[playerid][pDonateRank] == 2 && carsamount >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
			if(PlayerInfo[playerid][pDonateRank] == 3 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
			if(PlayerInfo[playerid][pDonateRank] == 4 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
            if(carsamount >= 5)
            {
                SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Slot kendaraan hanya sampai 4.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				AC_BS_SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
		    if(playervehicleid == -1)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Kamu tidak dapat memiliki kendaraan lagi.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				AC_BS_SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
		    }
		    new randcolor1 = Random(0, 126);
		    new randcolor2 = Random(0, 126);
		    AC_BS_SetPlayerPos(playerid, CarDealershipInfo[d][cdVehicleSpawn][0], CarDealershipInfo[d][cdVehicleSpawn][1], CarDealershipInfo[d][cdVehicleSpawn][2]+2);
		    TogglePlayerControllable(playerid, 1);
		    new cost;
		    cost = CarDealershipInfo[d][cdVehicleCost][v];
	        if(GetPVarInt(playerid, "Cash") < CarDealershipInfo[d][cdVehicleCost][v])
	        {
				SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have enough money to buy this.");
				RemovePlayerFromVehicle(playerid);
				return 1;
			}
            format(String, sizeof(String), " Thank you for buying at {FFFF00}%s.", CarDealershipInfo[d][cdMessage]);
		    SendClientMessageEx(playerid, COLOR_GRAD1, String);
		    SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-CarDealershipInfo[d][cdVehicleCost][v]);
		    CarDealershipInfo[d][cdTill] += CarDealershipInfo[d][cdVehicleCost][v]/3;
      		new car = CreatePlayerVehicle(playerid, playervehicleid, CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawn][0], CarDealershipInfo[d][cdVehicleSpawn][1], CarDealershipInfo[d][cdVehicleSpawn][2], CarDealershipInfo[d][cdVehicleSpawn][3], randcolor1, randcolor2, cost);
           	//Plate
			SetVehicleNumberPlate(car, "{FF0000}NO_HAVE");
			format(PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate], 32, "%s", "NO_HAVE");
			//SetVehicleToRespawn(car);
			SetTimerEx("PutPlayerInVeh", 2000, 0, "dd", playerid, car);
            SavecDealership(d);
		}
		else
		{
            RemovePlayerFromVehicle(playerid);
            TogglePlayerControllable(playerid, 1);
			return 1;
		}
	}
	else if(dialogid == DIALOG_CDSELL)
	{
		if(response)
		{
			if(GetPVarInt(playerid, "editingcd") == -1) return 1;
            SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+ (CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdPrice] / 2));
			SellCarDealership(GetPVarInt(playerid, "editingcd"));
			PlayerPlayMusic(playerid);
			format(String, sizeof(String), "Car Dealership successfully sold for %d.", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdPrice] / 2);
			SendClientMessageEx(playerid, COLOR_WHITE, String);
		}
		else
		{
            SetPVarInt(playerid, "editingcd", -1);
			return 1;
		}
	}
	if(dialogid == 15774)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(stockcomp >= 5000) { SendClientMessageEx(playerid, COLOR_WHITE,"Saat ini Gudang komponen sedang penuh, pengiriman GAGAL."); return 1; }
				SedangTrucking[playerid] = 1;
			    FishHolding[playerid] = 5;
			    SetPlayerRaceCheckpoint(playerid, 1, 797.7833, -617.4625, 16.3359,797.7833, -617.4625, 16.3359, 5);
			    SendClientMessageEx(playerid, COLOR_WHITE,"Muatan telah dinaikkan segera kirim Komponen ini ke Gudang Komponen");
			    format(String, sizeof(String), "[Component Storage]\nComponent Available : %d\nComponent Price : $0.50\n'/buycomponent' untuk membeli Komponen", stockcomp);
				UpdateDynamic3DTextLabelText(pickupComp, COLOR_YELLOW, String);
				SaveStock();
			}
		}
		return 1;
	}
	if(dialogid == 15772)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    SedangTrucking[playerid] = 1;
			    FishHolding[playerid] = 3;
			    StockIkan -= 250;
			    SetPlayerRaceCheckpoint(playerid,1,2787.0144, -2417.9524, 13.5702,2787.0144, -2417.9524, 13.5702,5);
			    SendClientMessageEx(playerid, COLOR_WHITE,"Muatan telah dinaikkan segera kirim ikan ikan ini menuju Ocean Docks untuk di Export.");
				format(String, sizeof(String), "[Fish Storage]\nFish Available : %d\n '/missions' untuk mengangkut barang", StockIkan);
				UpdateDynamic3DTextLabelText(pickupML, COLOR_WHITE, String);
				format(String, sizeof(String), "[Fish Storage]\nFish Available : %d\n '/missions' untuk mengangkut barang", StockIkan);
				UpdateDynamic3DTextLabelText(pickupML2, COLOR_WHITE, String);
				SaveStock();
			}
		}
		return 1;
	}
	if(dialogid == GIVEKEYS)
	{
	    if(response)
	    {
			if(PlayerVehicleInfo[playerid][listitem][pvId] == INVALID_PLAYER_VEHICLE_ID) {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "You can't give out keys to a non-existent or impounded vehicle.");
	            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	            return 1;
			}
	        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] != INVALID_PLAYER_ID)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "You already gave someone the keys of this car.");
	            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	            return 1;
	        }
	        if(PlayerInfo[GiveKeysTo[playerid]][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "That player already has keys from a different car.");
	            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	            return 1;
	        }
			PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] = GiveKeysTo[playerid];
			PlayerInfo[GiveKeysTo[playerid]][pVehicleKeys] = listitem;
			PlayerInfo[GiveKeysTo[playerid]][pVehicleKeysFrom] = playerid;
			format(String, sizeof(String), "%s has given you the keys for their %s.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
			SendClientMessageEx(GiveKeysTo[playerid], COLOR_GRAD2, String);
			format(String, sizeof(String), "You gave %s the keys for your %s.", GetPlayerNameEx(GiveKeysTo[playerid]), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
			SendClientMessageEx(playerid, COLOR_GRAD2, String);
			GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	    }
	}
	if(dialogid == REMOVEKEYS)
	{
	    if(response)
	    {
	        if(PlayerVehicleInfo[playerid][listitem][pvId] == INVALID_PLAYER_VEHICLE_ID) {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "You can't remove the keys of a non-existent or impounded vehicle.");
	            return 1;
			}
	        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] != PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId])
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "This player doesn't have the keys of this car.");
	            return 1;
	        }
	        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] == INVALID_PLAYER_ID)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "You haave not given anyone the keys for this car.");
	            return 1;
	        }
			PlayerInfo[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
			PlayerInfo[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
			format(String, sizeof(String), "%s has taken the keys of their %s.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
			SendClientMessageEx(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId], COLOR_GRAD2, String);
			format(String, sizeof(String), "You took the keys of your %s from %s.", GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]),GetPlayerNameEx(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]));
			SendClientMessageEx(playerid, COLOR_GRAD2, String);
			PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] = INVALID_PLAYER_ID;
	    }
	}
	if(dialogid == DUTYMENU)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					SetPlayerToTeamColor(playerid);
					SetPlayerSkin(playerid, 280);
					PlayerInfo[playerid][pModel] = 280;
	    			AC_BS_SetPlayerHealth(playerid, 100);
					PlayerInfo[playerid][pHealth] = 100.0;
					AC_BS_SetPlayerArmour(playerid, 100);
					PlayerInfo[playerid][pArmor] = 100.0;
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
     				SetPlayerColor(playerid,TEAM_BLUE_COLOR);
     				AC_BS_SetPlayerArmour(playerid, 0);
					PlayerInfo[playerid][pArmor] = 0;
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			if(listitem == 1) // LSPD Weapons
			{
				ShowPlayerDialog(playerid, DUTYMENU2, DIALOG_STYLE_LIST, "LSPD Equipment","Mace\nNite Stick\nDesert Eagle\nSPAS-12\nMP5\nM4A1\nAK-47\nSmoke Grenade\nShotgun\nRifle\nSniper Rifle\nKevlar Vest\nFirst Aid Kit\nAccessories", "Purchase", "Cancel");
			}
			if(listitem == 2) // LSPD SWAT Uniform
			{
			    if(PlayerInfo[playerid][pDivision] == 5)
			    {
					SetPlayerSkin(playerid, 285);
					PlayerInfo[playerid][pModel] = 285;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "You are not in the SWAT division.");
				}
			}
			if(listitem == 3) // LSPD Uniforms
			{
				ShowPlayerDialog(playerid, DUTYMENU3, DIALOG_STYLE_LIST, "LSPD Uniforms","Cadet\nFemale Officer\nOfficer 1\nOfficer 2\nOfficer 3\nBlack Officer\nLatino Officer\nMotorcycle Officer\nSWAT Officer\nSergeant\nCaptain\nChief", "Put On", "Cancel");
			}
			if(listitem == 4) // LSPD Undercover Uniform
			{
				ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
			}
			if(listitem == 5) // LSPD Clear.
			{
				ShowPlayerDialog(playerid, DUTYMENU5,DIALOG_STYLE_INPUT,"SAPD"," Who would you like to clear?","Clear","Nevermind");
    		}
		}
	}
	if(dialogid == DUTYMENU2)
	{
 		if(response)
		{
		    switch(listitem)
			{
				case 0: // LSPD Mace
				{
				}
				case 1: // LSPD Nite Stick
				{
				    if(PlayerInfo[playerid][pConnectTime] >= 2)
					{
						givePlayerValidWeapon(playerid, 3, AMMO_MELEE);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "YOU MUST PLAYING 2HOURS");
					}
				}
				case 2: // LSPD Deagle
				{
				    if(PlayerInfo[playerid][pConnectTime] >= 2)
					{
						givePlayerValidWeapon(playerid, 24, AMMO_DEAGLE);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "YOU MUST PLAYING 2HOURS");
					}
				}
				case 3: // LSPD Spas12 *
				{
					if(PlayerInfo[playerid][pDivision] == 5)
					{
						givePlayerValidWeapon(playerid, 27, AMMO_SHOTGUN);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SWAT division.");
					}
				}
				case 4: // LSPD mp5
				{
				    if(PlayerInfo[playerid][pDivision] == 5)
				    {
					givePlayerValidWeapon(playerid, 29, 650);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SWAT division.");
					}
				}
				case 5: // LSPD m4 *
				{
				    if(PlayerInfo[playerid][pConnectTime] >= 2)
				    if(PlayerInfo[playerid][pDivision] == 5)
					if(PlayerInfo[playerid][pRank] >= 2)
				    {
					givePlayerValidWeapon(playerid, 31, AMMO_M4AK);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You are not +R2 SWAT division.");
					}
				}
				case 6: // LSPD ak-47 *
				{
					if(PlayerInfo[playerid][pConnectTime] >= 2)
					if(PlayerInfo[playerid][pDivision] == 5)
					if(PlayerInfo[playerid][pRank] >= 2)
					{
						givePlayerValidWeapon(playerid, 30, AMMO_M4AK);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You are not +R2 SWAT division.");
					}
				}
				case 7: // LSPD Smoke Bomb *
				{
				    if(PlayerInfo[playerid][pConnectTime] >= 2)
					{
						givePlayerValidWeapon(playerid, 17, AMMO_GRANADE);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "YOU MUST PLAYING 2HOURS");
					}
				}
				case 8: // LSPD Shotgun
				{
					if(PlayerInfo[playerid][pConnectTime] >= 2)
					{
						givePlayerValidWeapon(playerid, 25, AMMO_SHOTGUN);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "YOU MUST PLAYING 2HOURS");
					}
				}
				case 9: // LSPD rifle
				{
				    if(PlayerInfo[playerid][pDivision] == 5)
					{
						givePlayerValidWeapon(playerid, 33, AMMO_SNIPER);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in The SWAT division.");
					}
				}
				case 10: // LSPD Sniper *
				{
					if(PlayerInfo[playerid][pDivision] == 5)
					if(PlayerInfo[playerid][pRank] >= 3)
					{
						givePlayerValidWeapon(playerid, 34, AMMO_SNIPER);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You are not +R3 SWAT division.");
					}
				}
				case 11: // LSPD Kevlar
				{
					AC_BS_SetPlayerArmour(playerid, 100.0);
					PlayerInfo[playerid][pArmor] = 100.0;
				}
				case 12:
				{
					AC_BS_SetPlayerHealth(playerid, 100);
					PlayerInfo[playerid][pHealth] = 100.0;
				}
				case 13: ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
			}
		}
		EquipmentStock --;
	}
	if(dialogid == DUTYMENU3)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 71);
				PlayerInfo[playerid][pModel] = 71;
			}
			if(listitem == 1) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 141);
				PlayerInfo[playerid][pModel] = 141;
			}
			if(listitem == 2) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 280);
				PlayerInfo[playerid][pModel] = 280;
			}
			if(listitem == 3) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 266);
				PlayerInfo[playerid][pModel] = 266;
			}
			if(listitem == 4) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 281);
				PlayerInfo[playerid][pModel] = 281;
			}
			if(listitem == 5) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 265);
				PlayerInfo[playerid][pModel] = 265;
			}

			if(listitem == 6) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 267);
				PlayerInfo[playerid][pModel] = 267;
			}
			if(listitem == 7) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 284);
				PlayerInfo[playerid][pModel] = 284;
			}
			if(listitem == 8) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 285);
				PlayerInfo[playerid][pModel] = 285;
			}
			if(listitem == 9) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 282);
				PlayerInfo[playerid][pModel] = 282;
			}
			if(listitem == 10) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 283);
				PlayerInfo[playerid][pModel] = 283;
			}
			if(listitem == 11) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 288);
				PlayerInfo[playerid][pModel] = 288;
			}
		}
		EquipmentStock --;
	}
	if(dialogid == DUTYMENU4)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 223);
				PlayerInfo[playerid][pModel] = 223;
			}
			if(listitem == 1) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 120);
				PlayerInfo[playerid][pModel] = 120;
			}
			if(listitem == 2) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 240);
				PlayerInfo[playerid][pModel] = 240;
			}
			if(listitem == 3) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 296);
				PlayerInfo[playerid][pModel] = 296;
			}
			if(listitem == 4) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 137);
				PlayerInfo[playerid][pModel] = 137;
			}
			if(listitem == 5) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 214);
				PlayerInfo[playerid][pModel] = 214;
			}
			if(listitem == 6) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 147);
				PlayerInfo[playerid][pModel] = 147;
			}
			if(listitem == 7) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 150);
				PlayerInfo[playerid][pModel] = 150;
			}
			if(listitem == 8) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 201);
				PlayerInfo[playerid][pModel] = 201;
			}
			if(listitem == 9) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 162);
				PlayerInfo[playerid][pModel] = 162;
			}
			if(listitem == 10) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 29);
				PlayerInfo[playerid][pModel] = 29;
			}
			if(listitem == 11) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 270);
				PlayerInfo[playerid][pModel] = 270;
			}
			if(listitem == 12) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 59);
				PlayerInfo[playerid][pModel] = 59;
			}
		}
		EquipmentStock --;
	}
	if(dialogid == FDUTYMENU4)
	{
 		if(response)
		{
			ShowModelSelectionMenu(playerid, FACTIONSKIN, "Select Skin");
		}
		EquipmentStock --;
	}
    if(dialogid == DUTYMENU5)
	{
	    if(response)
    	{
            new giveplayerid = ReturnUser(inputtext);
			//giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					format(String, sizeof(String), "* You cleared the records and wanted points of %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* Officer %s has cleared your records and wanted points.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, String);
					format(String, sizeof(String), "* Officer %s has cleared %s's records and wanted points.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendRadioMessage(1, RADIO, String);
					SendRadioMessage(2, RADIO, String);
					SendRadioMessage(5, RADIO, String);
					SendRadioMessage(7, RADIO, String);
					SendRadioMessage(11, RADIO, String);
					SendRadioMessage(13, RADIO, String);
					WantedPoints[giveplayerid] = 0;
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					SetPlayerToTeamColor(giveplayerid);
    				ClearCrime(giveplayerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				}
			}
		}
	}
	if(dialogid == SAGSMENU)
	{
		if(response)
		{
			if(listitem == 0) // SENATE Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					SetPlayerSkin(playerid, 71);
					PlayerInfo[playerid][pModel] = 71;
	    			AC_BS_SetPlayerHealth(playerid, 100);
					PlayerInfo[playerid][pHealth] = 100.0;
					AC_BS_SetPlayerArmour(playerid, 100);
					PlayerInfo[playerid][pArmor] = 100.0;
	    			SetPlayerColor(playerid, COLOR_TWAQUA);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else
				{
					SetPlayerSkin(playerid, 46);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					AC_BS_SetPlayerArmour(playerid, 0);
					PlayerInfo[playerid][pArmor] = 0;
					PlayerInfo[playerid][pModel] = 46;
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			else if(listitem == 1) // SE Uniforms
			{
				ShowPlayerDialog(playerid, SESKINS, DIALOG_STYLE_LIST, "San Andreas Government Uniforms","Intern\nStaff Member\nSenior Staff\nSecretary\nLieutenant Governor\nGovernor", "Put On", "Cancel");
			}
		}
	}
	if(dialogid == SESKINS) // SE Uniforms
	{
 		if(response)
		{
			if(listitem == 0) // SE Uniforms
			{
				SetPlayerSkin(playerid, 71);
				PlayerInfo[playerid][pModel] = 71;
			}
			if(listitem == 1) //SE Uniforms
			{
				if(PlayerInfo[playerid][pRank] >= 2)
				{
					SetPlayerSkin(playerid, 17);
					PlayerInfo[playerid][pModel] =17;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " You are not the required rank!");
					return 1;
				}
			}
			if(listitem == 2) //SE Uniforms
			{
				if(PlayerInfo[playerid][pRank] >= 3)
				{
					SetPlayerSkin(playerid, 163);
					PlayerInfo[playerid][pModel] = 163;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " You are not the required rank!");
					return 1;
				}
			}
			if(listitem == 3) //SE Uniforms
			{
				if(PlayerInfo[playerid][pRank] >= 4)
				{
					SetPlayerSkin(playerid, 227);
					PlayerInfo[playerid][pModel] = 227;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " You are not the required rank!");
					return 1;
				}
			}
			if(listitem == 4) //SE Uniforms
			{
				if(PlayerInfo[playerid][pRank] >= 5)
				{
					SetPlayerSkin(playerid, 295);
					PlayerInfo[playerid][pModel] = 295;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " You are not the required rank!");
					return 1;
				}
			}
			if(listitem == 5) //SE Uniforms
			{
				if(PlayerInfo[playerid][pLeader] == 6)
				{
					SetPlayerSkin(playerid, 147);
					PlayerInfo[playerid][pModel] = 147;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " You are not the required rank!");
					return 1;
				}
			}
		}
		EquipmentStock --;
	}
 	if(dialogid == FAQMENU)
  	{
   		if(response)
     	{
      		if(listitem == 0) //Colored Dots
        	{
         		ShowPlayerDialog(playerid, COLOREDDOTSFAQ, DIALOG_STYLE_MSGBOX, "Colored Dots on the Mini Map", "Information:\n\nIf you see one of the following dots, here are what they mean:\nRed Dot - Most wanted suspects (6 stars).\nOrange Dot - Wanted suspects (4 stars).", "Thanks", "Cancel");
           	}
           	if(listitem == 1) // Vehicle Locks
            {
            	ShowPlayerDialog(playerid, LOCKSFAQ, DIALOG_STYLE_MSGBOX, "Vehicle Locks", "Information:\n\nLocks can be bought at a 24/7 for $5000 using /buy.\nYou can type /lock to lock your vehicle, and /lock once more to unlock it.\nYou will lose your lock when you log out.", "Thanks", "Cancel");
            }
            if(listitem == 2) //Skins
            {
           		ShowPlayerDialog(playerid, SKINSFAQ, DIALOG_STYLE_MSGBOX, "Skins", "Information:\n\nSkins can be bought at a clothes store, such as Binco, by typing /buyacc.\nIf you are in a family or faction, you can type /fclothes to change your skin for free.\nTo change your skin, you must know the SkinID. If you don't know it, then just search for it on Google.", "Thanks", "Cancel");
            }
            if(listitem == 3) //ATMs
			{
   				ShowPlayerDialog(playerid, ATMFAQ, DIALOG_STYLE_MSGBOX, "ATMs", "Information:\n\nATMs are little machines located around Los Santos, that allows you to deposit, or withdraw money into your bank account.\nInstead of running to the bank, you can simply access your bank account through one of these.\nIf you need help with the ATM commands, just type /help.", "Thanks", "Cancel");
       		}
         	if(listitem == 4) //Factions
          	{
           		ShowPlayerDialog(playerid, FACTIONSFAQ, DIALOG_STYLE_MSGBOX, "Factions", "Information:\n\nFactions such as the LSPD, FBI, LSMD, etc. are legal organizations.\nYou can apply to join for these factions .", "Thanks", "Cancel");
           	}
           	if(listitem == 5) //Gangs
            {
            	ShowPlayerDialog(playerid, GANGSFAQ, DIALOG_STYLE_MSGBOX, "Gangs", "Information:\n\nGangs are obviously illegal organizations. To view the list of families, simply type /families.\nDo not use /families to metagame someone's name. You must ICly find them and roleplay with them, in order for you to join.\nMost families also do points, which you can earn money from.", "Thanks", "Cancel");
            }
            if(listitem == 8) //Further Help
           	{
           		ShowPlayerDialog(playerid, FURTHERHELPFAQ, DIALOG_STYLE_MSGBOX, "Further Help", "Information:\n\nIf you think you still need further help, then please use /newb to ask a question\nIf you need EVEN MORE help, then please use /requesthelp, and a community advisor will be with you shortly.\nAlso, please note that /newb is for script-related questions only.", "Thanks", "Cancel");
			}
		}
 	}
	if(dialogid == LSMDMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pDuty] == 0)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					SetPlayerColor(playerid,TEAM_MED_COLOR);
					AC_BS_SetPlayerHealth(playerid, 100);
					PlayerInfo[playerid][pHealth] = 100.0;
					AC_BS_SetPlayerArmour(playerid, 100);
					PlayerInfo[playerid][pArmor] = 100.0;
					Medics += 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else
				{
					Medics -= 1;
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid,TEAM_HIT_COLOR);
					AC_BS_SetPlayerArmour(playerid, 0);
					PlayerInfo[playerid][pArmor] = 0;
				}
			}
			if(listitem == 1)
			{
    			ShowPlayerDialog(playerid, LSMDSKINS, DIALOG_STYLE_LIST, "What uniform do you want?","Firesuit 1\nFiresuit 2\nFiresuit 3\nMedic 1\nMedic 2\nMedic 3\nFemale\nHigh Rank", "Select", "Cancel");
			}
			if(listitem == 2)
			{
				ShowModelSelectionMenu(playerid, FACTIONSKIN, "Select Skin");
			}
		}
 	}
    if(dialogid == LSMDSKINS)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SetPlayerSkin(playerid, 277);
			}
			if(listitem == 1)
			{
    			SetPlayerSkin(playerid, 278);
			}
			if(listitem == 2)
			{
                SetPlayerSkin(playerid, 279);
			}
			if(listitem == 3)
			{
				SetPlayerSkin(playerid, 274);
			}
			if(listitem == 4)
			{
				SetPlayerSkin(playerid, 275);
			}
			if(listitem == 5)
			{
				SetPlayerSkin(playerid, 276);
			}
			if(listitem == 6)
			{
				SetPlayerSkin(playerid, 211);
			}
			if(listitem == 7)
			{
			    if(PlayerInfo[playerid][pRank] >= 5)
			    {
					SetPlayerSkin(playerid, 295);
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "Only ranks 5 and 6 can wear this uniform.");
				}
			}
		}
		EquipmentStock --;
 	}
 	if(dialogid == FIGHTMENU)
	{
		if(response)
		{
			if(GetPlayerCash(playerid) >= 5000)
			{
				if(listitem == 0)
				{
			    	PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
					SendClientMessageEx(playerid, COLOR_WHITE, " You are now using the boxing fighting style!");

    				if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				    	GivePlayerCash(playerid, -4000);
        				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50000, you paid $40000.");
					}
					else
					{
						GivePlayerCash(playerid, -5000);
					}
				}
				if(listitem == 1)
				{
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
					SendClientMessageEx(playerid, COLOR_WHITE, " You are now using the elbow fighting style!");

 					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				    	GivePlayerCash(playerid, -4000);
        				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50000, you paid $40000.");
					}
					else
					{
						GivePlayerCash(playerid, -5000);
					}
				}
				if(listitem == 2)
				{
			    	PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
				    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
				    SendClientMessageEx(playerid, COLOR_WHITE, " You are now using the kneehead fighting style!");

    				if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				    	GivePlayerCash(playerid, -4000);
        				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50000, you paid $40000.");
					}
					else
					{
						GivePlayerCash(playerid, -5000);
					}
				}
				if(listitem == 3)
				{
   					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
					SendClientMessageEx(playerid, COLOR_WHITE, " You are now using the kungfu fighting style!");

 					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				    	GivePlayerCash(playerid, -4000);
        				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50000, you paid $40000.");
					}
					else
					{
						GivePlayerCash(playerid, -5000);
					}
				}
				if(listitem == 4)
				{
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
	    			SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
			  	  	SendClientMessageEx(playerid, COLOR_WHITE, " You are now using the grabkick fighting style!");

    				if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				    	GivePlayerCash(playerid, -4000);
        				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50000, you paid $40000.");
					}
					else
					{
						GivePlayerCash(playerid, -5000);
					}
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, " You do not have the cash for that!");
				return 1;
			}

			if(listitem == 5)
			{
				PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
	  			SendClientMessageEx(playerid, COLOR_WHITE, " You are now using the normal fighting style!");
				return 1;
			}
		}
	}
	if(dialogid == JOBHELPMENU)
	{
	    if(!response)
	    {
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help Menu", "Account\nChat\nGeneral\nVehicle\nJob\nFaction\nAdmin\nFamily\nVIP\nBiz\nHouse\nRent", "Pilih", "Engga");
		}
 		if(response)
		{
			if(listitem == 0) //Drug Dealer
            {
				ShowPlayerDialog(playerid, DRUGDEALERJOB, DIALOG_STYLE_MSGBOX, "Drug Dealer", "Information:\n\nThis job can be used to sell pot and crack to any customers you might find.\nIt often comes in handy, when you're a higher level at it.\nThe higher the level, the more drugs you can hold.\nThis is an illegal job and you can get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 1) //Lumberjack
			{
				ShowPlayerDialog(playerid, BODYGUARDJOB, DIALOG_STYLE_MSGBOX, "Lumberjack", "Information:\n\nThis job can be used to give people half armor.\nThis job is very profitable and the common spot for purchasing off bodyguards is the gym.\nThis is a legal job and you cannot get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 2) //Arms Dealer
			{
				ShowPlayerDialog(playerid, ARMSDEALERJOB, DIALOG_STYLE_MSGBOX, "Arms Dealer", "Information:\n\nThis job can be used to sell people weapons.\nThis job is very profitable and can earn you big cash at later levels.\nThis is an illegal job and you can get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 3) //Drug Smuggling
            {
				ShowPlayerDialog(playerid, SMUGGLEJOB, DIALOG_STYLE_MSGBOX, "Drug Smuggling", "Information:\n\nThis job can be used to keep Crack and Pot filled in the Crack Lab.\nThis job is very profitable as people usually buy crack and pot, and sometimes they try to steal your pot and crack.\nThis is an ilegal job and you can get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 4) //Trucker
            {
				ShowPlayerDialog(playerid, TRUCKERJOB, DIALOG_STYLE_MSGBOX, "Trucker","Information:\nThis job can be used to earn money by making truck deliveries\nThis is a legal job, however you can get busted if you transport illegal goods or hijack trucks.\n\nCommands:\n/takeload /putload /storeload\nLocation of job: This job can be obtained at the Flint County, at the job icon(yellow I).", "Done", "Cancel");
			}
			if(listitem == 6) //Farmer
            {
				ShowPlayerDialog(playerid, FARMERJOB, DIALOG_STYLE_MSGBOX, "Farmer","Information:\nThis job can be used to earn money by plant or harvesting seed\n\nCommands:\n/plantitems /buyseeds /plantseed /harvestplant and /sellallplant Location: This job can be obtained at the Flint Country,.", "Done", "Cancel");
			}
			if(listitem == 7) //Mechanic
            {
				ShowPlayerDialog(playerid, MECHANICJOB3, DIALOG_STYLE_MSGBOX, "Mechanic", "Commands:\n\n/fix, /install, /tune, /sellborypart, /refill, /tow, /nos\n\nLocation of job: This job can be obtained at Ocean Dock, at the Mechanic Garage.", "Done", "Cancel");
			}
		}
	}
	if(dialogid == SMUGGLEJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, SMUGGLEJOB3, DIALOG_STYLE_MSGBOX, "Drug Smuggling", "Commands:\n\n/getcrate [name(Pot/Crack)]\n\nLocation of job: This job can be obtained inside the Crack Lab, at the job icon(yellow circle).", "Done", "Cancel");
		}
	}
	if(dialogid == SMUGGLEJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, SMUGGLEJOB2, DIALOG_STYLE_MSGBOX, "Drug Smuggling", "Note: There is no reload time for drug smuggling and you do need to level it up to obtain more money. There are 5 levels for this job.", "Next", "Cancel");
		}
	}
	if(dialogid == TAXIJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, TAXIJOB2, DIALOG_STYLE_MSGBOX, "Taxi Driver", "Note: There is no reload time for taxi fares and there are no levels for this job. In other words, you do not need to level it up to earn the max money you can.", "Next", "Cancel");
		}
	}
	if(dialogid == TAXIJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, TAXIJOB3, DIALOG_STYLE_MSGBOX, "Taxi Driver", "Commands:\n\n/fare [$1 - $500]\n\nLocation of job: This job can be obtained in front of Unity Station at the job icon(yellow circle).", "Done", "Cancel");
		}
	}
	if(dialogid == ARMSDEALERJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, ARMSDEALERJOB2, DIALOG_STYLE_MSGBOX, "Arms Dealer", "Note: The reload time for selling guns is always 10 seconds, no matter what level.\n\nSkills:\n\nLevel 1 Weapons: Flowers, Knuckles, SDPistol, and Shotgun.\nLevel 2 Weapons: Baseball Bat, Cane, MP5, and Rifle.\nLevel 3 Weapons: Shovel and Deagle.\nLevel 4 Weapons: Poolcue, Golf Club, AK47, and M4.\nLevel 5 Weapons: Katana, Dildo, Sniper, and SPAS12.", "Next", "Cancel");
		}
	}
	if(dialogid == ARMSDEALERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, ARMSDEALERJOB3, DIALOG_STYLE_MSGBOX, "Arms Dealer", "Commands:\n\n/buymats, /sellgun\n\nLocation of job: This job can be obtained outside the large Ammunation, at the 'gun' icon.", "Done", "Cancel");
		}
	}
	if(dialogid == BODYGUARDJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, BODYGUARDJOB3, DIALOG_STYLE_MSGBOX, "Lumberjack", "Commands:\n\n/cutwood and /buychainshaw\n\nLocation of job: This job can be obtained on the Timber Factory, at the job icon(yellow circle).", "Done", "Cancel");
		}
	}
	if(dialogid == BODYGUARDJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, BODYGUARDJOB2, DIALOG_STYLE_MSGBOX, "Lumberjack", "Note: The reload time is always 1 minute. There are no job levels for this job. In other words, you do not need to level it up to earn the max money you can.", "Next", "Cancel");
		}
	}
	if(dialogid == MECHANICJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, MECHANICJOB2, DIALOG_STYLE_MSGBOX, "Mechanic", "Note: The reload time is always 1 minute, no matter what level.", "Next", "Cancel");
		}
	}
	if(dialogid == MECHANICJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, MECHANICJOB3, DIALOG_STYLE_MSGBOX, "Mechanic", "Commands:\n\n/fix, /install, /tune, /sellborypart, /refill, /tow, /nos\n\nLocation of job: This job can be obtained at Ocean Dock, at the Mechanic Garage.", "Done", "Cancel");
		}
	}
	if(dialogid == DRUGDEALERJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, DRUGDEALERJOB2, DIALOG_STYLE_MSGBOX, "Drug Dealer", "Note: The reload time is always 1 minute, no matter what level.\n\nSkills:\n\nLevel 1: You can hold 10 pot and 5 crack.\nLevel 2: You can hold 20 pot and 15 crack.\nLevel 3: You can hold 30 pot and 15 crack.\nLevel 4: You can hold 40 pot and 20 crack.\nLevel 5: You can hold 50 pot and 25 crack.", "Next", "Cancel");
		}
	}
	if(dialogid == DRUGDEALERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, DRUGDEALERJOB3, DIALOG_STYLE_MSGBOX, "Drug Dealer", "Commands:\n\n/sellpot, /getpot, /sellcrack, /getcrack\n\nLocation of job: This job can be located outside the Drug Den, opposite the Ganton Gym, at the 'D' icon.", "Done", "Cancel");
		}
	}
	if(dialogid == DIALOG_LICENSE_BUY && response) // LICENSE BUY DIALOG ~Brian
	{
		switch (listitem)
		{
			case 0:
			{
			    if(PlayerInfo[playerid][pCarLic] == 0)
			    {
			        if(GetPlayerCash(playerid) < 5000)
			        {
			            SendClientMessageEx(playerid, COLOR_GREY, "You can not afford to buy a driver's license.");
			            return 1;
			        }
					GivePlayerCash(playerid,-5000);
					PlayerInfo[playerid][pCarLic] = 1;
					SendClientMessageEx(playerid, COLOR_GREY, "You have successfully acquired a driver's license.");
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "You already have a driver's license.");
			}
			case 1:
			{
			    if(PlayerInfo[playerid][pBoatLic] == 0)
			    {
			        if(GetPlayerCash(playerid) < 5000)
			        {
			            SendClientMessageEx(playerid, COLOR_GREY, "You can not afford to buy a boating license.");
			            return 1;
			        }
					GivePlayerCash(playerid,-5000);
					PlayerInfo[playerid][pBoatLic] = 1;
					SendClientMessageEx(playerid, COLOR_GREY, "You have successfully acquired a boating license.");
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "You already have a boating license.");
			}
			case 2:
			{
			    if(PlayerInfo[playerid][pFlyLic] == 0)
			    {
			    	if(PlayerInfo[playerid][pLevel] >=2)
			    	{
			    	    if(GetPlayerCash(playerid) < 25000)
			        	{
			            	SendClientMessageEx(playerid, COLOR_GREY, "You can not afford to buy a pilot's license.");
			            	return 1;
			        	}
						GivePlayerCash(playerid,-25000);
						PlayerInfo[playerid][pFlyLic] = 1;
      					SendClientMessageEx(playerid, COLOR_GREY, "You have successfully acquired a pilot license; you will now be able to pilot aircraft.");
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "You must be level 2 or above to acquire a pilot license.");
				}
                else SendClientMessageEx(playerid, COLOR_GREY, "You already have a pilot license.");
			}
		}
	}
	if(dialogid == FMDC)
	{
	    return 1;
	}
	// MDC System
	if(dialogid == MDC_MAIN && response)
	{//*Find LEO\n*Civilian Information\n*Law Enforcement Agencies\n*Options
 		if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
	   	switch( listitem )
	    {
	        case 0:
	        {
	            ShowPlayerDialog(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | LEO GPS Location", "Enter the Law Enforcment Official's Name or ID No.", "Enter", "Cancel");
	        }
	        case 1:
	        {
	            ShowPlayerDialog(playerid, MDC_CIVILIANS, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Civilian Options", "*Check Record\n*Licenses\n*Warrants\n*Issue Warrant\n*BOLO\n*Create BOLO\n*Delete", "OK", "Cancel");
	        }
	        case 2:
	        {
	            ShowPlayerDialog(playerid, MDC_MEMBERS, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Agency List", "San Andreas Police Department\nSan Andreas Medical Department\nSan Andreas Goverment Service\nSan Andreas Network", "OK", "Cancel");
	        }
	        case 3: ShowPlayerDialog(playerid, MDC_MESSAGE, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | MDC Message", "Enter recipient's Name or ID No.", "OK", "Cancel");
		    case 4: ShowPlayerDialog(playerid, MDC_SMS, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | SMS", "Enter recipient's phone number.", "OK", "Cancel");
		}
	}
	if(dialogid == MDC_FIND && response)
	{
	    new giveplayerid;
		if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		if(sscanf(inputtext, "u", giveplayerid))
		{
			ShowPlayerDialog(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | LEO GPS Location", "Enter the Law Enforcment Official's Name or ID No.", "Enter", "Cancel");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(giveplayerid == playerid)
				{
				    ShowPlayerDialog(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: You cannot find yourself.\nEnter the Law Enforcment Official's Name or ID No.", "Enter", "Cancel");

					return 1;
				}
				if(PlayerInfo[giveplayerid][pMember] == 3|| PlayerInfo[giveplayerid][pLeader] == 1 || PlayerInfo[giveplayerid][pMember] == 1 ||
				PlayerInfo[giveplayerid][pLeader] == 1|| PlayerInfo[giveplayerid][pMember] == 2 || PlayerInfo[giveplayerid][pLeader] == 2 ||
				PlayerInfo[giveplayerid][pLeader] == 5 || PlayerInfo[giveplayerid][pLeader] == 6 || PlayerInfo[giveplayerid][pMember] == 6 ||
				PlayerInfo[giveplayerid][pMember] == 7 || PlayerInfo[giveplayerid][pLeader] == 7 || PlayerInfo[giveplayerid][pMember] == 11 ||
				PlayerInfo[giveplayerid][pLeader] == 11)
				{
	    			SetPlayerMarkerForPlayer(playerid,giveplayerid,FIND_COLOR);
                    FindingPlayer[playerid] = giveplayerid;
		    		FindTime[playerid] = 1;
		    		FindTimePoints[playerid] = 30;
		    	}
		    	else
		    	{
			    	SendClientMessageEx(playerid, COLOR_GRAD2, " You can only find other cops!");
		    	}
			}
		}
	}
	if(dialogid == MDC_CIVILIANS && response)
	{ //*Check Record\n*Licenses\nWarrants\n*Issue Warrant
		new WarrantString[512];
	 	if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		if(News[hTaken6] == 1)
		{
			format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd6], News[hContact6]);
			strcat(WarrantString, String, sizeof(WarrantString));
		}
		if(News[hTaken7] == 1)
		{
			format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd7], News[hContact7]);
			strcat(WarrantString, String, sizeof(WarrantString));
		}
		if(News[hTaken8] == 1)
		{
			format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd8], News[hContact8]);
		    strcat(WarrantString, String, sizeof(WarrantString));
		}
		if(News[hTaken9] == 1)
		{
			format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd9], News[hContact9]);
			strcat(WarrantString, String, sizeof(WarrantString));
		}
		if(News[hTaken10] == 1)
		{
			format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd10], News[hContact10]);
			strcat(WarrantString, String, sizeof(WarrantString));
		}
		if(News[hTaken11] == 1)
		{
			format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd11], News[hContact11]);
			strcat(WarrantString, String, sizeof(WarrantString));
		}
		if(News[hTaken12] == 1)
		{
			format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd12], News[hContact12]);
			strcat(WarrantString, String, sizeof(WarrantString));
		}
		if(News[hTaken13] == 1)
		{
			format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd13], News[hContact13]);
			strcat(WarrantString, String, sizeof(WarrantString));
		}
		if(strlen(WarrantString) == 0)
		{
		    strcat(WarrantString, "No Warrants at this time.", sizeof(WarrantString));
		}
		switch(listitem)
		{
		    case 0: ShowPlayerDialog(playerid, MDC_CHECK, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Records Check", "Enter the Person's Name or ID No.", "Enter", "Cancel");
		    case 1: ShowPlayerDialog(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | License Check", "Enter the Person's Name or ID No.", "Enter", "Cancel");
			case 2: ShowPlayerDialog(playerid, MDC_WARRANTS, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Warrant List", WarrantString, "Enter", "Cancel");
			case 3: ShowPlayerDialog(playerid, MDC_ISSUE_SLOT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Slot would you like to use?", "1\n2\n3\n4\n5\n6\n7\n8", "Enter", "Cancel");
		    case 4:
		    {
				new BOLOString[512];
				if(News[hTaken14] == 1)
				{
					format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd14], News[hContact14]);
					strcat(BOLOString, String, sizeof(BOLOString));
				}
				if(News[hTaken15] == 1)
				{
					format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd15], News[hContact15]);
					strcat(BOLOString, String, sizeof(BOLOString));
				}
				if(News[hTaken16] == 1)
				{
					format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd16], News[hContact16]);
				    strcat(BOLOString, String, sizeof(BOLOString));
				}
				if(News[hTaken17] == 1)
				{
					format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd17], News[hContact17]);
					strcat(BOLOString, String, sizeof(BOLOString));
				}
				if(News[hTaken18] == 1)
				{
					format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd18], News[hContact18]);
					strcat(BOLOString, String, sizeof(BOLOString));
				}
				if(News[hTaken19] == 1)
				{
					format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd19], News[hContact19]);
					strcat(BOLOString, String, sizeof(BOLOString));
				}
				if(News[hTaken20] == 1)
				{
					format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd20], News[hContact20]);
					strcat(BOLOString, String, sizeof(BOLOString));
				}
				if(News[hTaken21] == 1)
				{
					format(String, sizeof(String), "%s :: Officer: %s\n", News[hAdd21], News[hContact21]);
					strcat(BOLOString, String, sizeof(BOLOString));
				}
				if(strlen(BOLOString) == 0)
				{
				    strcat(BOLOString, "No BOLOs at this time.", sizeof(BOLOString));
				}
				ShowPlayerDialog(playerid, MDC_BOLOLIST, DIALOG_STYLE_LIST, "SA-MDC - Logged In | BOLO List", BOLOString, "OK", "Cancel");
		    }
		    case 5:
		    {
		    	ShowPlayerDialog(playerid, MDC_BOLO_SLOT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Slot would you like to use?", "1\n2\n3\n4\n5\n6\n7\n8", "Enter", "Cancel");
		    }
		    case 6:
	        {
	        	ShowPlayerDialog(playerid, MDC_DELETE, DIALOG_STYLE_LIST, "SA-MDC - Logged In | Delete", "*BOLO\n*Warrant", "OK", "Cancel");
	        }
		}

	}
	if(dialogid == MDC_MEMBERS && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		new giveplayer[MAX_PLAYER_NAME];
		new rank[64], division[64], employer[64];
		if (listitem == 0)
		{ //SAPD,SAMD,SAGS,SANEWS
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
				if(PlayerInfo[i][pMember] == 1)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					format(String, sizeof(String), "Name\tRank\tPhone Number\tDuty\n");
					format(String, sizeof(String), "%s%s\t%s\t%d\t%d", String, giveplayer, rank, PlayerInfo[i][pPnumber], PlayerInfo[i][pDutyTimeTotal]/60);
					format(String, sizeof(String), "%s\n", String);
				}
			}
			format(String, sizeof(String), "%s\n", String);
			ShowPlayerDialog(playerid, MDC_LSPD, DIALOG_STYLE_TABLIST_HEADERS, "SA-MDC - Logged in | San Andreas Police Department Members", String, "Select", "Cancel");
		}
		else if (listitem == 1)
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
			    if(PlayerInfo[i][pMember] == 4)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					format(String, sizeof(String), "Name\tRank\tPhone Number\tDuty\n");
					format(String, sizeof(String), "%s%s\t%s\t%d\t%d", String, giveplayer, rank, PlayerInfo[i][pPnumber], PlayerInfo[i][pDutyTimeTotal]/60);
					format(String, sizeof(String), "%s\n", String);
				}
			}
			format(String, sizeof(String), "%s\n", String);
			ShowPlayerDialog(playerid, MDC_LSMD, DIALOG_STYLE_TABLIST_HEADERS, "SA-MDC - Logged in | San Andreas Medical Department Members", String, "Select", "Cancel");
		}
		else if (listitem == 2)
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
      	 		if(PlayerInfo[i][pMember] == 6)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					format(String, sizeof(String), "Name\tRank\tPhone Number\tDuty\n");
					format(String, sizeof(String), "%s%s\t%s\t%d\t%d", String, giveplayer, rank, PlayerInfo[i][pPnumber], PlayerInfo[i][pDutyTimeTotal]/60);
					format(String, sizeof(String), "%s\n", String);
				}
			}
			format(String, sizeof(String), "%s\n", String);
			ShowPlayerDialog(playerid, DIALOG_INVENTORY, DIALOG_STYLE_TABLIST_HEADERS, "SA-MDC - Logged in | San Andreas Goverment Service Members", String, "Select", "Cancel");
		}
		else if (listitem == 3)
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
				if(PlayerInfo[i][pMember] == 9)
				{
        			GetPlayerFactionInfo(i, rank, division, employer);
					format(String, sizeof(String), "Name\tRank\tPhone Number\tDuty\n");
					format(String, sizeof(String), "%s%s\t%s\t%d\t%d", String, giveplayer, rank, PlayerInfo[i][pPnumber], PlayerInfo[i][pDutyTimeTotal]/60);
					format(String, sizeof(String), "%s\n", String);
				}
			}
			format(String, sizeof(String), "%s\n", String);
			ShowPlayerDialog(playerid, MDC_LSMD, DIALOG_STYLE_TABLIST_HEADERS, "SA-MDC - Logged in | San Andreas Network Members", String, "Select", "Cancel");
		}
	}
	if(dialogid == MDC_WARRANTS && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
	    ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Warrants", inputtext, "OK", "Back");
	}
	if(dialogid == MDC_BOLOLIST && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
	    ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | BOLO Hot Sheet", inputtext, "OK", "Back");
	}
	if(dialogid == MDC_CHECK && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		new giveplayerid = ReturnUser(inputtext);
		new Historystring[10000], S3MP4K[10000];
		new giveplayer[MAX_PLAYER_NAME];
		giveplayer = GetPlayerNameEx(giveplayerid);
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			format(Historystring, sizeof(Historystring), "Name : %s\n", GetPlayerNameEx(giveplayerid));
			strcat(S3MP4K, Historystring);
			format(Historystring, sizeof(Historystring), "Crime : %s\n", PlayerCrime[giveplayerid][pAccusedof]);
			strcat(S3MP4K, Historystring);
			format(Historystring, sizeof(Historystring), "Claimant : %s\n", PlayerCrime[giveplayerid][pVictim]);
			strcat(S3MP4K, Historystring);
			format(Historystring, sizeof(Historystring), "Reported : %s\n", PlayerCrime[giveplayerid][pAccusing]);
			strcat(S3MP4K, Historystring);
			format(Historystring, sizeof(Historystring), "Accused : %s\n", PlayerCrime[giveplayerid][pBplayer]);
			strcat(S3MP4K, Historystring);
			if(PlayerInfo[giveplayerid][pProbationTime] != 0)
			{
			    format(Historystring, sizeof(Historystring), "Probation : %d minutes left\n", PlayerInfo[giveplayerid][pProbationTime]);
				strcat(S3MP4K, Historystring);
			}
			for(new i=0; i<MAX_PLAYERVEHICLES; i++)
        	{
		    	if(PlayerVehicleInfo[giveplayerid][i][pvTicket] != 0)
				{
            	    format(Historystring, sizeof(Historystring), "Vehicle registration: %d | Vehicle Name: %s | Ticket: %s.\n",PlayerVehicleInfo[giveplayerid][i][pvId],GetVehicleName(PlayerVehicleInfo[giveplayerid][i][pvId]),FormatMoney(PlayerVehicleInfo[giveplayerid][i][pvTicket]));
					strcat(S3MP4K, Historystring);
		    	}
	    	}
	    	ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Criminal History", S3MP4K, "OK", "Cancel");
			format(Historystring, sizeof(Historystring), "** DISPATCH: %s has run a check for warrants on %s **", GetPlayerNameEx(playerid), giveplayer);
			SendRadioMessage(1, COLOR_DBLUE, Historystring);
			SendRadioMessage(2, COLOR_DBLUE, Historystring);
			return 1;
		}
		else
		{
			ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | ERROR ", "There is no record of that person.", "OK", "Cancel");
			return 1;
		}
	}
	if(dialogid == MDC_LICENSES && response)
	{
		if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		new giveplayerid, string[10000];
		if(sscanf(inputtext, "u", giveplayerid))
		{
			ShowPlayerDialog(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | License Check", "Enter the Person's Name or ID No.", "Enter", "Cancel");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    new LicenseString[256], giveplayer[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				new text1[20];
				new text2[20];
				new text3[20];
				new text4[20];
				if(PlayerInfo[giveplayerid][pCarLic] == 0) { text1 = "Not Passed"; }
				if(PlayerInfo[giveplayerid][pCarLic] == 1) { text1 = "Passed"; }
				if(PlayerInfo[giveplayerid][pCarLic] == 2) { text1 = "Suspended"; }
				if(PlayerInfo[giveplayerid][pCarLic] == 3) { text1 = "Cancelled"; }
				if(PlayerInfo[giveplayerid][pFlyLic]) { text4 = "Passed"; } else { text4 = "Not Passed"; }
				if(PlayerInfo[giveplayerid][pBoatLic]) { text2 = "Passed"; } else { text2 = "Not Passed"; }
	   			if(PlayerInfo[giveplayerid][pGunLic]) { text3 = "Passed"; } else { text3 = "Not Passed"; }
				format(String, sizeof(String), "Name: %s\n", giveplayer);
				strcat(LicenseString, String, sizeof(LicenseString));
				format(String, sizeof(String), "-Drivers License: %s.\n", text1);
				strcat(LicenseString, String, sizeof(LicenseString));
				format(String, sizeof(String), "-Flying License: %s.\n", text4);
				strcat(LicenseString, String, sizeof(LicenseString));
				format(String, sizeof(String), "-Sailing License: %s.\n", text2);
				strcat(LicenseString, String, sizeof(LicenseString));
				format(String, sizeof(String), "-Weapon License: %s.\n", text3);
				strcat(LicenseString, String, sizeof(LicenseString));
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Criminal History", LicenseString, "OK", "Cancel");
				format(String, sizeof(String), "** DISPATCH: %s has ran a license check on %s **", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				SendRadioMessage(1, COLOR_DBLUE, string);
				return 1;
			}
			else return ShowPlayerDialog(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Error!", "ERROR: Invalid Name or ID No.\nEnter the Person's Name or ID No.", "Enter", "Cancel");
		}
		else return ShowPlayerDialog(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Error!", "ERROR: Invalid Name or ID No.\nEnter the Person's Name or ID No.", "Enter", "Cancel");
	}
	if(dialogid == MDC_LSPD && response)
	{
	}
	if(dialogid == MDC_SFPD && response)
	{
	}
	if(dialogid == MDC_FBI && response)
	{
	}
	if(dialogid == MDC_LSMD && response)
	{
	}
	if(dialogid == MDC_MESSAGE && response)
	{
		if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		new giveplayerid;
		if(sscanf(inputtext, "u", giveplayerid))
		{
			return ShowPlayerDialog(playerid, MDC_MESSAGE, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: Invalid Recipient\nEnter recipient's Name or ID No.", "OK", "Cancel");
		}
		if (IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    format(String, sizeof(String), " Enter your message to %s ", GetPlayerNameEx(giveplayerid));
            	ShowPlayerDialog(playerid, MDC_MESSAGE_2, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | MDC Message", String, "OK", "Cancel");
            	SetPVarInt(playerid, "MDCMessageRecipient", giveplayerid);
			}
			else  return ShowPlayerDialog(playerid, MDC_MESSAGE, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: Invalid Recipient\nEnter recipient's Name or ID No.", "OK", "Cancel");
		}
		else return ShowPlayerDialog(playerid, MDC_MESSAGE, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: Invalid Recipient\nEnter recipient's Name or ID No.", "OK", "Cancel");
	}
	if(dialogid == MDC_SMS && response)
	{
		if(isnull(inputtext) || strval(inputtext) != 0)
		{
			return ShowPlayerDialog(playerid, MDC_SMS, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: Invalid Phone Number\nEnter Recipient's Phone Number", "OK", "Cancel");
		}
		new phonenumb = strval(inputtext);
		format(String, sizeof(String), " Enter your message to %d ", phonenumb);
        ShowPlayerDialog(playerid, MDC_SMS_2, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | SMS Message", String, "OK", "Cancel");
        SetPVarInt(playerid, "SMSMessageRecipient", phonenumb);
	}
	if(dialogid == MDC_MESSAGE_2 && response)
	{
		new giveplayerid = GetPVarInt(playerid, "MDCMessageRecipient");
	    if(giveplayerid == INVALID_PLAYER_ID) return ShowPlayerDialog(playerid, MDC_MESSAGE, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: Invalid Recipient\nEnter recipient's Name or ID No.", "OK", "Cancel");
		if(giveplayerid == playerid)
		{
			ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | ERROR ", "You cannot send messages to yourself!", "OK", "Cancel");
			return 1;
		}
		if(ConnectedToPC[giveplayerid] == 1337 || IsPlayerInAnyVehicle(giveplayerid))
		{
	 		if(!IsMDCPermitted(giveplayerid))
			{
				return ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | ERROR ", "That person is not logged into the MDC.", "OK", "Cancel");
			}
			if(!strlen(inputtext))
			{
				return ShowPlayerDialog(playerid, MDC_MESSAGE_2, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: You must type a message!\nEnter Recipient's Name or ID No.", "OK", "Cancel");
			}
			format(String, sizeof(String), "MDC Message sent to %s:\n%s", GetPlayerNameEx(giveplayerid), inputtext);
			ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Message Sent! ", String, "OK", "Cancel");
			if(ConnectedToPC[giveplayerid] == 1337)
			{
				format(String, sizeof(String), "MDC Message from %s:\n%s", GetPlayerNameEx(playerid), inputtext);
				ShowPlayerDialog(giveplayerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | New Message!", String, "OK", "Cancel");
				format(String, sizeof(String), "MDC Message from %s: %s", GetPlayerNameEx(playerid), inputtext);
				SendClientMessageEx(giveplayerid, COLOR_YELLOW, String);
			}
			else
			{
				format(String, sizeof(String), "MDC Message from %s:\n%s", GetPlayerNameEx(playerid), inputtext);
				ShowPlayerDialog(giveplayerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | New Message! ", String, "OK", "Cancel");
			}
		}
		else
		{
			ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | ERROR ", "That officer is not logged into the MDC.", "OK", "Cancel");
			return 1;
		}
		return 1;
	}
	if(dialogid == MDC_SMS_2 && response)
	{
		new phonenumb = GetPVarInt(playerid, "SMSMessageRecipient");
		if(!strlen(inputtext))
		{
			return ShowPlayerDialog(playerid, MDC_SMS_2, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: You must type a message!\nEnter Recipient's Phone Number", "OK", "Cancel");
		}
		if(phonenumb == 555)
		{
			if(strcmp("yes", inputtext, true) == 0) {
				SendClientMessageEx(playerid, COLOR_WHITE, "Text Message Delivered.");
				if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
				{
					SendClientMessageEx(playerid, COLOR_YELLOW, "SMS: I have no idea what you're talking about, Sender: MOLE (555)");
					RingTone[playerid] = 20;
					return 0;
				}
				return 0;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "SMS: A simple 'yes' will do, Sender: MOLE (555)");
				RingTone[playerid] = 20;
				//ChatLog(String);
				return 0;
			}
		}
		foreach(Player, i)
		{
			if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
			{
				Mobile[playerid] = i; //caller connecting
				if(PhoneOnline[i] > 0)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player's phone is switched off.");
					return 1;
				}
				format(String, sizeof(String), "SMS: %s, Sender: %s (Ph:%d)", inputtext,GetPlayerNameEx(playerid),PlayerInfo[playerid][pPnumber]);
				GetPlayerName(i, sendername, sizeof(sendername));
				RingTone[i] =20;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Message Sent! ", String, "OK", "Cancel");
				SendClientMessageEx(i, COLOR_YELLOW, String);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				Mobile[playerid] = 255;
				return 1;
			}
		}
		ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Message Delivery Failed! ", "Message Delivery Failed. Try Again", "OK", "Cancel");
	}
	if(dialogid == MDC_BOLO && response)
	{
		new x_nr = GetPVarInt(playerid, "BOLOISSUESLOT");
		if(x_nr == 1)
		{
			if(News[hTaken14] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd14], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact14], String, 0, strlen(String), 255);
				News[hTaken14] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 1 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 2)
		{
			if(News[hTaken15] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd15], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact15], String, 0, strlen(String), 255);
				News[hTaken15] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 2 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 3)
		{
			if(News[hTaken16] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd16], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact16], String, 0, strlen(String), 255);
				News[hTaken16] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 3 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 4)
		{
			if(News[hTaken17] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd17], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact17], String, 0, strlen(String), 255);
				News[hTaken17] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 4 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 5)
		{
			if(News[hTaken18] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd18], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact18], String, 0, strlen(String), 255);
				News[hTaken18] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 5 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 6)
		{
			if(News[hTaken19] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd19], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact19], String, 0, strlen(String), 255);
				News[hTaken19] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 6 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 7)
		{
			if(News[hTaken20] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd20], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact20], String, 0, strlen(String), 255);
				News[hTaken20] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 7 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 8)
		{
			if(News[hTaken21] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd21], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact21], String, 0, strlen(String), 255);
				News[hTaken21] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 8 is already Taken!", "OK", "Back");
				return 1;
			}
		}
	}
	if(dialogid == MDC_BOLO_SLOT && response)
	{
	    SetPVarInt(playerid, "BOLOISSUESLOT", listitem + 1);
	    ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Issue Warrant", "Enter BOLO Details", "Enter", "Cancel");
	}
	if(dialogid == MDC_ISSUE_SLOT && response)
	{
	    SetPVarInt(playerid, "ISSUESLOT", listitem + 1);
	    ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Issue Warrant", "Enter Arrest Warrant Details", "Enter", "Cancel");
	}
	if(dialogid == MDC_END_ID && response)
	{
		ShowPlayerDialog(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MDC - Logged in", "*Find LEO\n*Civilian Information\n*Law Enforcement Agencies\n*MDC Message\n*SMS", "OK", "Cancel");
	}
	if(dialogid == MDC_ISSUE && response)
	{
		new x_nr = GetPVarInt(playerid, "ISSUESLOT");
		if(x_nr == 1)
		{
			if(News[hTaken6] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd6], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact6], String, 0, strlen(String), 255);
				News[hTaken6] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 1 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 2)
		{
			if(News[hTaken7] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd7], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact7], String, 0, strlen(String), 255);
				News[hTaken7] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 2 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 3)
		{
			if(News[hTaken8] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd8], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact8], String, 0, strlen(String), 255);
				News[hTaken8] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 3 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 4)
		{
			if(News[hTaken9] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd9], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact9], String, 0, strlen(String), 255);
				News[hTaken9] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 4 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 5)
		{
			if(News[hTaken10] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd10], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact10], String, 0, strlen(String), 255);
				News[hTaken10] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 5 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 6)
		{
			if(News[hTaken11] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd11], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact11], String, 0, strlen(String), 255);
				News[hTaken11] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 6 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 7)
		{
			if(News[hTaken12] == 0)
   			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd12], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact12], String, 0, strlen(String), 255);
				News[hTaken12] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 7 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 8)
		{
			if(News[hTaken13] == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(String, sizeof(String), "%s",inputtext); strmid(News[hAdd13], String, 0, strlen(String), 255);
				format(String, sizeof(String), "%s",sendername); strmid(News[hContact13], String, 0, strlen(String), 255);
				News[hTaken13] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 8 is already Taken!", "OK", "Back");
				return 1;
			}
		}
	}
	if(dialogid == MDC_DELETE && response)
	{
	    if(listitem == 0)
	    {
	    	ShowPlayerDialog(playerid, MDC_DEL_BOLO, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which BOLO Slot would you like to delete?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Enter", "Cancel");
	    }
		if(listitem == 1)
		{
			ShowPlayerDialog(playerid, MDC_DEL_WARRANT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Warrant Slot would you like to delete?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Enter", "Cancel");
		}
	}
 	if(dialogid == MDC_DEL_BOLO && response)
	{
		new string1[MAX_PLAYER_NAME];
		if(isnull(inputtext))
		{
			ShowPlayerDialog(playerid, MDC_DEL_WARRANT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Warrant Slot would you like to delete?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Enter", "Cancel");
			return 1;
		}
		if(strcmp(inputtext, "1") == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd14], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact14], string1, 0, strlen(string1), 255);
			News[hTaken14] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (1) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "2") == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd15], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact15], string1, 0, strlen(string1), 255);
			News[hTaken15] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (2) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "3") == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd16], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact16], string1, 0, strlen(string1), 255);
			News[hTaken16] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (3) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "4") == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd17], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact17], string1, 0, strlen(string1), 255);
			News[hTaken17] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (4) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "5") == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd18], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact18], string1, 0, strlen(string1), 255);
			News[hTaken18] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (5) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "6") == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd19], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact19], string1, 0, strlen(string1), 255);
			News[hTaken19] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (6) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "7") == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd20], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact20], string1, 0, strlen(string1), 255);
			News[hTaken20] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (7) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "8") == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd21], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact21], string1, 0, strlen(string1), 255);
			News[hTaken21] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (8) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext,"all",true) == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd14], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact14], string1, 0, strlen(string1), 255);
			News[hTaken14] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd15], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact15], string1, 0, strlen(string1), 255);
			News[hTaken15] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd16], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact16], string1, 0, strlen(string1), 255);
			News[hTaken16] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd17], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact17], string1, 0, strlen(string1), 255);
			News[hTaken17] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd18], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact18], string1, 0, strlen(string1), 255);
			News[hTaken18] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd19], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact19], string1, 0, strlen(string1), 255);
			News[hTaken19] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd20], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact20], string1, 0, strlen(string1), 255);
			News[hTaken20] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd21], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact21], string1, 0, strlen(string1), 255);
			News[hTaken21] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted all the details for Be on the Lookout from the MDC -BOLO.");
			return 1;
		}
	}
	if(dialogid == MDC_DEL_WARRANT && response)
	{
	    new string1[MAX_PLAYER_NAME];
		if(isnull(inputtext))
		{
			ShowPlayerDialog(playerid, MDC_DEL_WARRANT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Warrant Slot would you like to delete?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Enter", "Cancel");
			return 1;
		}
		if(strcmp(inputtext,"1",true) == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd6], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact6], string1, 0, strlen(string1), 255);
			News[hTaken6] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (1) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"2",true) == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd7], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact7], string1, 0, strlen(string1), 255);
			News[hTaken7] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (2) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"3",true) == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd8], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact8], string1, 0, strlen(string1), 255);
			News[hTaken8] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (3) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"4",true) == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd9], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact9], string1, 0, strlen(string1), 255);
			News[hTaken9] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (4) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"5",true) == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd10], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact10], string1, 0, strlen(string1), 255);
			News[hTaken10] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (5) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"6",true) == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd11], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact11], string1, 0, strlen(string1), 255);
			News[hTaken11] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (6) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"7",true) == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd12], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact12], string1, 0, strlen(string1), 255);
			News[hTaken12] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (7) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"8",true) == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd13], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact13], string1, 0, strlen(string1), 255);
			News[hTaken13] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (8) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"all",true) == 0)
		{
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd6], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact6], string1, 0, strlen(string1), 255);
			News[hTaken6] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd7], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact7], string1, 0, strlen(string1), 255);
			News[hTaken7] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd8], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact8], string1, 0, strlen(string1), 255);
			News[hTaken8] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd9], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact9], string1, 0, strlen(string1), 255);
			News[hTaken9] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd10], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact10], string1, 0, strlen(string1), 255);
			News[hTaken10] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd11], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact11], string1, 0, strlen(string1), 255);
			News[hTaken11] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd12], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact12], string1, 0, strlen(string1), 255);
			News[hTaken12] = 0;
			format(String, sizeof(String), "Nothing"); strmid(News[hAdd13], String, 0, strlen(String), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact13], string1, 0, strlen(string1), 255);
			News[hTaken13] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted all the details for Arrest Warrants from the MDC -Warrants.");
			return 1;
		}
	}
	if(dialogid == MDC_LOGOUT && response)
	{
	}
	if(dialogid == MDC_CREATE && response)
	{
	}
	if( (dialogid >= MDC_START_ID && dialogid <= MDC_END_ID) && !response)
	{
	    if(dialogid == MDC_MAIN)
	    {
	        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now logged off the MDC.");
			ConnectedToPC[playerid] = 0;
	    }
	    else
		{
			ShowPlayerDialog(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MDC - Logged in", "*Find LEO\n*Civilian Information\n*Law Enforcement Agencies\n*MDC Message\n*SMS", "OK", "Cancel");
		}
	}
	if ( dialogid == VEH_MENU ) //vcontrol
	{
		if(response)
		{
			if(listitem == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)//Car Engine
			{
				new engine,lights,alarm,doors,bonnet,boot,objective,vehicleid;
				vehicleid = GetPlayerVehicleID(playerid);
				if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
				GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
				if(engine == VEHICLE_PARAMS_ON)
				{
					SetVehicleEngine(vehicleid, playerid);
				}
				else if((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "[ENGINE] Sedang menyalakan mesin");
					SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
				}
			}
			if(listitem == 1 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)//Car Hood
			{
				if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || IsAPlane(vehicleid) || IsABike(vehicleid))
					{
						return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
					}
					SetVehicleHood(vehicleid, playerid);
				}
				else if(!IsPlayerInAnyVehicle(playerid))
				{
					new closestcar = GetClosestCar(playerid);
					if(IsPlayerInRangeOfVehicle(playerid, 5.0))
					{
						if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510 || IsAPlane(closestcar) || IsABike(closestcar))
						{
							return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used on this vehicle.");
						}
						SetVehicleHood(closestcar, playerid);
					}
				}
			}
			if(listitem == 2)//Car Trunk
			{
				if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
					{
						return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
					}
					SetVehicleTrunk(vehicleid, playerid);
				}
				else if(!IsPlayerInAnyVehicle(playerid))
				{
					new closestcar = GetClosestCar(playerid);
					if(IsPlayerInRangeOfVehicle(playerid, 5.0))
					{
						if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510)
						{
							return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used on this vehicle.");
						}
						SetVehicleTrunk(closestcar, playerid);
					}
				}
			}
			if(listitem == 3 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)//Car Lights
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
				SetVehicleLights(vehicleid, playerid);
			}
			if(listitem == 4 && IsPlayerInAnyVehicle(playerid)) //Car Fuel
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 509 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 510) return SendClientMessageEx(playerid,COLOR_RED,"This vehicle doesn't need fuel.");
				if(GetPVarInt(playerid, "fuelonoff") == 0)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You have turned on the fuel indicator (red).");
					SetPVarInt(playerid, "fuelonoff", 1);
					FuelBar[playerid] = CreateProgressBar(548.00, 26.00, 57.50, 3.20, 866792447, 100.0);
					SetProgressBarColor(FuelBar[playerid], 0xFF0000C8);
					textdrawscount++;
					SetProgressBarValue(FuelBar[playerid], VehicleFuel[GetPlayerVehicleID(playerid)]);
					ShowProgressBarForPlayer(playerid, FuelBar[playerid]);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You have turned off the fuel indicator (red).");
					SetPVarInt(playerid, "fuelonoff", 0);
					DestroyProgressBar(FuelBar[playerid]);
					textdrawscount--;
					FuelBar[playerid] = INVALID_BAR_ID;
				}
			}
		}
	}
	if(dialogid == DIALOG_VEHMENU)
	{
		if(response)
  		{
    		if (listitem == 0)
			{
   				ShowPlayerDialog(playerid,DIALOG_FIXCAR,DIALOG_STYLE_LIST,"Fix Menu","Engine (50-100 Component)\nBody (50-100 Component)\nTires (50 Component)","Fix","Cancel");
			}
			else if (listitem == 1)
			{
   				ShowPlayerDialog(playerid,DIALOG_INSTALLNEON,DIALOG_STYLE_LIST,"Install Neon","Blue (50 Component)\nRed (50 Component)\nGreen (50 Component)\nWhite (50 Component)\nYellow (50 Component)\nPink (50 Component)\nUninstall Neon","Install","Cancel");
			}
   			else if (listitem == 2)
			{
   				CarmodDialog(playerid);
			}
			else if (listitem == 3)
			{
   				ShowPlayerDialog(playerid, DIALOG_MODIF, DIALOG_STYLE_LIST, "Install Menu", "Install Nos (50 Component)\nInstall Gold Rims (50 Component)\nInstall Shadow Rims (50 Component)\nInstall Hydraulic (50 Component)\nInstall Trance Rims (50 Component)\nInstall Cutter Rims (50 Component)\nInstall Offroad Rims (50 Component)\nInstall Reinforced Engine (250 Component)\nInstall Reinforced Body (250 Component)", "Pilih", "Batal");
			}
		}
	}
    if( dialogid == DIALOG_FIXCAR){
	        if (response){
				new closestcar = GetClosestCar(playerid);
				if (listitem == 0)
				{
					if(PlayerInfo[playerid][pComponent] < 100) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
                    foreach(Player, v)
                    {
	    				for( new i; i < MAX_PLAYERVEHICLES; ++i)
						{
							if(PlayerVehicleInfo[v][i][pvId] == closestcar)
						    {
								if(PlayerVehicleInfo[v][i][pvMesinUpgrade] == 1)
								{
								    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
									SetVehicleHealth(closestcar, 2000.0);
                                    PlayerInfo[v][pComponent] -= 100;
                                    PlayerInfo[v][pTire]--;
                                    PlayerInfo[v][pMechSkill] ++;
								}
								else
								{
								    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
								    SetVehicleHealth(closestcar, 1000.0);
								    PlayerInfo[v][pComponent] -= 50;
								    PlayerInfo[v][pTire]--;
								    PlayerInfo[v][pMechSkill] ++;
								}
							}
						}
					}
				}
				else if (listitem == 1)
				{
					if(PlayerInfo[playerid][pComponent] < 100) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
                    foreach(Player, v)
                    {
	    				for( new i; i < MAX_PLAYERVEHICLES; ++i)
						{
							if(PlayerVehicleInfo[v][i][pvId] == closestcar)
						    {
								if(PlayerVehicleInfo[v][i][pvBodyUpgrade] == 1)
								{
								    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			    					new panels, doors, lights, tires;
									GetVehicleDamageStatus(closestcar, panels, doors, lights, tires);
									UpdateVehicleDamageStatus(closestcar, 0, 0, 0, tires);
                                    PlayerInfo[v][pComponent] -= 100;
                                    PlayerInfo[v][pTire]--;
                                    PlayerInfo[v][pMechSkill] ++;
								}
								else
								{
								    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			    					new panels, doors, lights, tires;
								    GetVehicleDamageStatus(closestcar, panels, doors, lights, tires);
									UpdateVehicleDamageStatus(closestcar, 0, 0, 0, tires);
								    PlayerInfo[v][pComponent] -= 50;
								    PlayerInfo[v][pTire]--;
								    PlayerInfo[v][pMechSkill] ++;
								}
							}
						}
					}
				}
				else if (listitem == 2)
				{
				    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
				    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
					new panels, doors, lights, tires;
					GetVehicleDamageStatus(closestcar, panels, doors, lights, tires);
					UpdateVehicleDamageStatus(closestcar, panels, doors, lights, 0);
					PlayerInfo[playerid][pComponent] -= 50;
					PlayerInfo[playerid][pTire]--;
					PlayerInfo[playerid][pMechSkill] ++;
				}
				PlayerInfo[playerid][pMechTime] = 60;
			}
		}
    if(dialogid == DIALOG_MODIF)
	{
		 	if(response)
   		    {
        		new closestcar = GetClosestCar(playerid);
        		foreach(Player, v)
    			{
				    for(new i=0; i<MAX_PLAYERVEHICLES; i++)
					{
						if(PlayerVehicleInfo[v][i][pvId] == closestcar)
		    			{
						    if(listitem==0)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
				                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				                AddVehicleComponent(closestcar,1010);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
								SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Nos");
						    }
							else if(listitem==1)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
							    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
							    AddVehicleComponent(closestcar,1080);
								SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Gold Rims");
							}
							else if(listitem==2)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
							    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
						  		AddVehicleComponent(closestcar,1073);
								SendClientMessage(playerid, COLOR_WHITE, "Kamu telah memasang {FF8080}Shadow Rims");
							}
							else if(listitem==3)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
				                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
				                AddVehicleComponent(closestcar,1087);
								SendClientMessage(playerid, COLOR_WHITE, "Kamu telah memasang {FF8080}Hydrolic");
							}
							else if(listitem==4)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
							    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
								AddVehicleComponent(closestcar,1084);
								SendClientMessage(playerid, COLOR_WHITE, "Kamu telah memasang {FF8080}Trance Rims");
							}
							else if(listitem==5)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
							    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
								AddVehicleComponent(closestcar,1079);
								SendClientMessage(playerid, COLOR_WHITE, "Kamu telah memasang {FF8080}Cutter Rims");
							}
							else if(listitem==6)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
							    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
								AddVehicleComponent(closestcar,1025);
								SendClientMessage(playerid, COLOR_WHITE, "Kamu telah memasang {FF8080}Offroad Rims");
							}
							else if(listitem==7)
							{
							    if(PlayerInfo[playerid][pComponent] < 250) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
							    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 250;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
							    SetVehicleHealth(closestcar, 2000.0);
								PlayerVehicleInfo[v][i][pvMesinUpgrade] = 1;
								SendClientMessage(playerid, COLOR_WHITE, "Kamu telah mengupgrade {FF8080}Engine mobil ini");
							}
							else if(listitem==8)
							{
							    if(PlayerInfo[playerid][pComponent] < 250) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
							    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 250;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
								PlayerVehicleInfo[v][i][pvBodyUpgrade] = 1;
								SendClientMessage(playerid, COLOR_WHITE, "Kamu telah mengupgrade {FF8080}Body mobil ini");
							}
							PlayerInfo[playerid][pMechTime] = 30;
						}
					}
				}
			}
		}
	if(dialogid == DIALOG_INSTALLNEON)
	{
		 	if(response)
   		    {
        		new closestcar = GetClosestCar(playerid);
        		foreach(Player, v)
    			{
				    for(new i=0; i<MAX_PLAYERVEHICLES; i++)
					{
						if(PlayerVehicleInfo[v][i][pvId] == closestcar)
		    			{
						    if(listitem==0)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
				                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				                PlayerVehicleInfo[v][i][pvNeon] = 1;
     							SetPVarInt(playerid, "togneon", 0);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
								SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Blue Neon");
						    }
							else if(listitem==1)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
							    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
							    PlayerVehicleInfo[v][i][pvNeon] = 2;
     							SetPVarInt(playerid, "togneon", 0);
								SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Red Neon");
							}
							else if(listitem==2)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
							    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
						  		PlayerVehicleInfo[v][i][pvNeon] = 3;
     							SetPVarInt(playerid, "togneon", 0);
								SendClientMessage(playerid, COLOR_WHITE, "Kamu telah memasang {FF8080}Green Neon");
							}
							else if(listitem==3)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
				                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
				                PlayerVehicleInfo[v][i][pvNeon] = 4;
     							SetPVarInt(playerid, "togneon", 0);
								SendClientMessage(playerid, COLOR_WHITE, "Kamu telah memasang {FF8080}White Neon");
							}
							else if(listitem==4)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
							    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
								PlayerVehicleInfo[v][i][pvNeon] = 5;
     							SetPVarInt(playerid, "togneon", 0);
								SendClientMessage(playerid, COLOR_WHITE, "Kamu telah memasang {FF8080}Yellow Neon");
							}
							else if(listitem==5)
							{
							    if(PlayerInfo[playerid][pComponent] < 50) return SendClientMessage(playerid,COLOR_WHITE,"Kamu tidak mempunyai cukup komponent");
							    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
							    PlayerInfo[playerid][pComponent] -= 50;
							    PlayerInfo[playerid][pTire]--;
							    PlayerInfo[playerid][pMechSkill] ++;
								PlayerVehicleInfo[v][i][pvNeon] = 6;
     							SetPVarInt(playerid, "togneon", 0);
								SendClientMessage(playerid, COLOR_WHITE, "Kamu telah memasang {FF8080}Pink Neon");
							}
							else if(listitem==6)
							{
							    PlayerVehicleInfo[v][i][pvNeon] = 0;
							    DestroyDynamicObject(PlayerVehicleInfo[v][i][pvNeonObj]);
								DestroyDynamicObject(PlayerVehicleInfo[v][i][pvNeonObj2]);
								DestroyDynamicObject(PlayerVehicleInfo[v][i][pvNeonObj3]);
								DestroyDynamicObject(PlayerVehicleInfo[v][i][pvNeonObj4]);
								SendClientMessageEx(playerid, COLOR_GOLD, "Neon di kendaraan sudah terlepas.");
								SetPVarInt(playerid, "togneon", 0);
							}
							PlayerInfo[playerid][pMechTime] = 30;
						}
					}
				}
			}
		}
    	if(dialogid == 1111)
		{
			if(!response) return 1;
			switch(listitem)
			{ //
				case 0:
				{
					if(vehmd == 562 || vehmd == 565 || vehmd == 559 || vehmd == 561 || vehmd == 560 || vehmd == 558)
					{
						ShowPlayerDialog(playerid,1114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
					}
					else if(vehmd == 576 || vehmd == 575 || vehmd == 535)
					{
						Lowrider(playerid);
	    			}
					else if(vehmd == 567 || vehmd == 536)
					{
	                    ShowPlayerDialog(playerid,1002,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nHardtop Roof\nSofttop Roof\n{FF0000}Back","Select","Cancel");
					}
					else if(vehmd == 534)
					{
	                    ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
					}
					else if(vehmd == 496 || vehmd == 505 || vehmd == 516 || vehmd == 517 || vehmd == 518 || vehmd == 527 || vehmd == 529 || vehmd == 540 || vehmd == 546 || vehmd == 547 || vehmd == 549 || vehmd == 550 || vehmd == 551 || vehmd == 580 || vehmd == 585 || vehmd == 587 || vehmd == 589 || vehmd == 600 || vehmd == 603 || vehmd == 401 || vehmd == 410 || vehmd == 415 || vehmd == 418 || vehmd == 420 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 489 || vehmd == 491 || vehmd == 492)
					{
						RegularCarDialog(playerid);
					}
					else
					{
						SendClientMessage(playerid,RED,"Your car cannot be tuned!");
					}
				}
			}
		}
		if(dialogid == 1114)
		{
		    switch(listitem)
		    {
				case 0: ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
				case 1: Mod0(playerid);
				case 2: Mod1(playerid);
				case 3: CarmodDialog(playerid);
			}
		}
		if(dialogid == 1001)
		{
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
				case 1: Mod2(playerid);
				case 2: Mod3(playerid);
				case 3: CarmodDialog(playerid);
			}
		}
		if(dialogid == 1002)
		{
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
				case 1: Mod2(playerid);
				case 2: Mod3(playerid);
				case 3:
				{
					if(vehmd == 567)//Savanna
					{
						AddVehicleComponent(vehid, 1130);
					}
					if(vehmd == 536)//Blade
	                {
	                    AddVehicleComponent(vehid, 1128);
					}
					PlayerInfo[playerid][pComponent] -= 50;
	                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
	                PlayerInfo[playerid][pTire]--;
					SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
				}
				case 4:
				{
					if(vehmd == 567)//Savanna
					{
	    				 AddVehicleComponent(vehid, 1131);
					}
					if(vehmd == 536)//Blade
	                {
	                    AddVehicleComponent(vehid, 1103);
					}
					PlayerInfo[playerid][pComponent] -= 50;
					PlayerInfo[playerid][pTire]--;
	                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
					SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
				}
				case 5: CarmodDialog(playerid);
			}
		}
		if(dialogid == 1003)//Remington
		{
			switch(listitem)
			{
			    case 0:ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			    case 1: Mod2(playerid);
				case 2: Mod3(playerid);
				case 3: AddVehicleComponent(vehid, 1122),AddVehicleComponent(vehid, 1101),PlayerInfo[playerid][pComponent] -= 1000,PlayerPlaySound(playerid,1133,0.0,0.0,0.0),SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini"),ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
				case 4: AddVehicleComponent(vehid, 1106),AddVehicleComponent(vehid, 1124),PlayerInfo[playerid][pComponent] -= 1000,PlayerPlaySound(playerid,1133,0.0,0.0,0.0),SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini"),ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
				case 5: CarmodDialog(playerid);
			}
		}
		if(dialogid == 1004)//regular cars
		{
		    switch(listitem)
		    {
				case 0:
				{
					ShowPlayerDialog(playerid,1010,DIALOG_STYLE_LIST,"Spoiler","Pro\nWin\nDrag\nAlpha\nChamp\nRace\nWorx\nFury\n{FF0000}Back","Select","Cancel");
				}
				case 1:
				{
				    if(vehmd == 585 || vehmd == 603 || vehmd == 439 || vehmd == 458 || vehmd == 418 || vehmd == 527 || vehmd == 580)
				    {
						AddVehicleComponent(vehid, 1006);
						PlayerInfo[playerid][pComponent] -= 50;
						PlayerInfo[playerid][pTire]--;
		                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
						SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
						return RegularCarDialog(playerid);
					}
					else if(vehmd == 439 || vehmd == 458 || vehmd == 491 || vehmd == 517 ||vehmd == 547)
				    {ShowPlayerDialog(playerid,1040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
	                else if(vehmd == 415)
	                {
						AddVehicleComponent(vehid, 1007);
						AddVehicleComponent(vehid, 1071);
						PlayerInfo[playerid][pComponent] -= 50;
						PlayerInfo[playerid][pTire]--;
		                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
						SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
						return RegularCarDialog(playerid);
					}
	                else ShowPlayerDialog(playerid,1020,DIALOG_STYLE_LIST,"Hood","Champ\nFury\nRace\nWorx\n{FF0000}Back","Select","Cancel");
				}
				case 2:
				{
				    if(vehmd == 549 || vehmd == 585 || vehmd == 603)
					{ShowPlayerDialog(playerid,1040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
					else if(vehmd == 410 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 516 || vehmd == 491 || vehmd == 517 || vehmd == 418 || vehmd == 527 || vehmd == 580)
					{
	                    AddVehicleComponent(vehid, 1007);
						AddVehicleComponent(vehid, 1071);
						PlayerInfo[playerid][pTire]--;
						PlayerInfo[playerid][pComponent] -= 50;
		                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
						SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
						return RegularCarDialog(playerid);
					}
					else if(vehmd == 415 || vehmd == 547 || vehmd == 420 || vehmd == 587)
					{CarmodDialog(playerid);}
					else
					{
						AddVehicleComponent(vehid, 1006);
						PlayerInfo[playerid][pComponent] -= 50;
						PlayerInfo[playerid][pTire]--;
		                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
						SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
						return RegularCarDialog(playerid);
					}

				}
				case 3:
				{
				    if(vehmd == 549 || vehmd == 585 || vehmd == 603 || vehmd == 551 || vehmd == 492 || vehmd == 529)
				    {
						AddVehicleComponent(vehid, 1007);
						AddVehicleComponent(vehid, 1071);
						PlayerInfo[playerid][pComponent] -= 50;
						PlayerInfo[playerid][pTire]--;
		                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
						SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
						return RegularCarDialog(playerid);
					}
					else if(vehmd == 410 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 489 || vehmd == 505)
					{ShowPlayerDialog(playerid,1060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
					else if(vehmd == 418 || vehmd == 527 || vehmd == 580 || vehmd == 491 || vehmd == 517 || vehmd == 516)
					{CarmodDialog(playerid);}
					else{ShowPlayerDialog(playerid,1040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
				}
				case 4:
				{
				    if(vehmd == 549 || vehmd == 550 || vehmd == 585 || vehmd == 603)
				    {ShowPlayerDialog(playerid,1060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
				    else if(vehmd == 489 || vehmd == 505 || vehmd == 551 || vehmd == 492 || vehmd == 529 || vehmd == 439 || vehmd == 458 || vehmd == 410 || vehmd == 436)
				    {CarmodDialog(playerid);}
				    else
				    {
						AddVehicleComponent(vehid, 1007);
						AddVehicleComponent(vehid, 1071);
						PlayerInfo[playerid][pComponent] -= 50;
						PlayerInfo[playerid][pTire]--;
		                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
						SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
						return RegularCarDialog(playerid);
					}
				}
				case 5:
				{
					if(vehmd == 585 || vehmd == 603 || vehmd == 550 || vehmd == 549)
					{CarmodDialog(playerid);}
					else{ShowPlayerDialog(playerid,1060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
				}
				case 6: CarmodDialog(playerid);
			}
		}
		if(dialogid == 1020)
		{
			if(listitem == 4) return RegularCarDialog(playerid);
			new Xarray[] = {1004,1005,1011,1012};
			AddVehicleComponent(vehid, Xarray[listitem]);
			PlayerInfo[playerid][pComponent] -= 50;
			PlayerInfo[playerid][pTire]--;
            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
			return RegularCarDialog(playerid);
		}
		if(dialogid == 1040)
		{
		    switch(listitem)
		    {
				case 0:
				{
					AddVehicleComponent(vehid, 1142);
					AddVehicleComponent(vehid, 1143);
					PlayerInfo[playerid][pTire]--;
					PlayerInfo[playerid][pComponent] -= 50;
			        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
					SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
					return RegularCarDialog(playerid);
				}
				case 1:
				{
					AddVehicleComponent(vehid, 1144);
					AddVehicleComponent(vehid, 1145);
					PlayerInfo[playerid][pTire]--;
					PlayerInfo[playerid][pComponent] -= 50;
			        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
					SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
					return RegularCarDialog(playerid);
				}
				case 2: RegularCarDialog(playerid);
			}
		}
		if(dialogid == 1060)
		{
			if(listitem == 2) return RegularCarDialog(playerid);
			new Xarray[] = {1013,1024};
			AddVehicleComponent(vehid, Xarray[listitem]);
			PlayerInfo[playerid][pComponent] -= 50;
	        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
	        PlayerInfo[playerid][pTire]--;
			SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
			return RegularCarDialog(playerid);
		}
		if(dialogid == 1115)
		{
		    if(listitem == 3) return CarmodDialog(playerid);
			new Parray[] = {0,1,2};
			foreach(Player, v)
   			{
		    	for(new i=0; i<MAX_PLAYERVEHICLES; i++)
				{
					if(PlayerVehicleInfo[v][i][pvId] == GetPlayerVehicleID(playerid))
					{
						PlayerVehicleInfo[v][i][pvPaintJob] = Parray[listitem];
					}
				}
			}
			ChangeVehiclePaintjob(vehid, Parray[listitem]);
			PlayerInfo[playerid][pComponent] -= 50;
	        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
	        PlayerInfo[playerid][pTire]--;
			SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
			return CarmodDialog(playerid);
		}
		if(dialogid == 1511)
		{
		    if(listitem == 7) return ShowPlayerDialog(playerid,1114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
			if(vehmd == 558)//Uranus
			{
				new Varray[] = {1090,1094,1092,1088,1164,1166,1168};
		 		AddVehicleComponent(vehid,Varray[listitem]);
		 		PlayerInfo[playerid][pComponent] -= 50;
		 		PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod0(playerid);
			}
			if(vehmd == 559)//Jester
			{
	            new Varray[] = {1069,1071,1065,1067,1162,1160,1159};
		 		AddVehicleComponent(vehid,Varray[listitem]);
		 		PlayerInfo[playerid][pComponent] -= 50;
		 		PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod0(playerid);
			}
			if(vehmd == 560)//Sultan
			{
	            new Varray[] = {1026,1027,1028,1032,1138,1169,1141};
		 		AddVehicleComponent(vehid,Varray[listitem]);
		 		PlayerInfo[playerid][pComponent] -= 50;
		 		PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod0(playerid);
			}
			if(vehmd == 561)//Stratum
			{
	            new Varray[] = {1056,1062,1064,1055,1058,1155,1154};
		 		AddVehicleComponent(vehid,Varray[listitem]);
		 		PlayerInfo[playerid][pComponent] -= 50;
		 		PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod0(playerid);
			}
			if(vehmd == 562)//Elegy
			{
	            new Varray[] = {1036,1040,1034,1038,1147,1171,1149};
		 		AddVehicleComponent(vehid,Varray[listitem]);
		 		PlayerInfo[playerid][pComponent] -= 50;
		 		PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod0(playerid);
			}
			if(vehmd == 565)//Flash
			{
	            new Varray[] = {1047,1051,1046,1054,1049,1153,1150};
		 		AddVehicleComponent(vehid,Varray[listitem]);
		 		PlayerInfo[playerid][pComponent] -= 50;
		 		PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod0(playerid);
			}
		}
		if(dialogid == 1512)
		{
		    if(listitem == 7) return ShowPlayerDialog(playerid,1114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
		    if(vehmd == 558)//Uranus
		    {
	            new Varray[] = {1093,1095,1089,1091,1163,1165,1167};
		 		AddVehicleComponent(vehid,Varray[listitem]);
		 		PlayerInfo[playerid][pComponent] -= 50;
		 		PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod1(playerid);
			}
		    if(vehmd == 559)//Jester
		    {
	            new Varray[] = {1070,1072,1066,1068,1158,1173,1161};
		 		AddVehicleComponent(vehid,Varray[listitem]);
		 		PlayerInfo[playerid][pComponent] -= 50;
		 		PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod1(playerid);
			}
		    if(vehmd == 560)//Sultan
		    {
	            new Varray[] = {1031,1030,1029,1033,1139,1170,1140};
		 		AddVehicleComponent(vehid,Varray[listitem]);
		 		PlayerInfo[playerid][pComponent] -= 50;
		 		PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod1(playerid);
			}
		    if(vehmd == 561)//Stratum
		    {
	            new Varray[] = {1057,1063,1059,1061,1060,1157,1156};
		 		AddVehicleComponent(vehid,Varray[listitem]);
		 		PlayerInfo[playerid][pComponent] -= 50;
		 		PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod1(playerid);
			}
		    if(vehmd == 562)//Elegy
		    {
	            new Varray[] = {1039,1041,1037,1035,1146,1172,1148};
		 		AddVehicleComponent(vehid,Varray[listitem]);
		 		PlayerInfo[playerid][pComponent] -= 50;
		 		PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod1(playerid);
			}
		    if(vehmd == 565)//Flash
		    {
	            new Varray[] = {1048,1052,1045,1053,1050,1152,1151};
		 		AddVehicleComponent(vehid,Varray[listitem]);
		 		PlayerInfo[playerid][pComponent] -= 50;
		 		PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod1(playerid);
			}
		}
		if(dialogid == 1513)
		{
			if(vehmd == 576)
	        {
				if(listitem == 5) return Lowrider(playerid);
	      		new Varray[] = {1134,1137,1136,1191,1192};
				AddVehicleComponent(vehid,Varray[listitem]);
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
		        PlayerInfo[playerid][pTire]--;
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
				return Mod2(playerid);
			}
			if(vehmd == 575)
			{
				if(listitem == 5) return Lowrider(playerid);
	  			new Varray[] = {1042,1099,1044,1174,1176};
				AddVehicleComponent(vehid,Varray[listitem]);
				PlayerInfo[playerid][pTire]--;
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
		 		return Mod2(playerid);
			}
			if(vehmd == 535)
			{
	  			if(listitem == 6) return Lowrider(playerid);
	  			new Varray[] = {1115,1109,1113,1117,1118,1120};
				AddVehicleComponent(vehid,Varray[listitem]);
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
		        PlayerInfo[playerid][pTire]--;
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
				return Mod2(playerid);
			}
			if(vehmd == 567)
			{
			    if(listitem == 5) return Lowrider(playerid);
				new Varray[] = {1129,1133,1102,1187,1189};
				AddVehicleComponent(vehid,Varray[listitem]);
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
		        PlayerInfo[playerid][pTire]--;
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
				return Mod2(playerid);
			}
			if(vehmd == 536)
			{
			    if(listitem == 5) return Lowrider(playerid);
				new Varray[] = {1104,1108,1107,1184,1182};
				AddVehicleComponent(vehid,Varray[listitem]);
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
		        PlayerInfo[playerid][pTire]--;
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
				return Mod2(playerid);
			}
			if(vehmd == 534)
			{
			    if(listitem == 6) return Lowrider(playerid);
				new Varray[] = {1100,1123,1125,1126,1179,1180};
				AddVehicleComponent(vehid,Varray[listitem]);
		        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
		        PlayerInfo[playerid][pTire]--;
				SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
				return Mod2(playerid);
			}
			PlayerInfo[playerid][pComponent] -= 50;
		}
		if(dialogid == 1514)
		{
			if(vehmd == 576)
			{
			    if(listitem == 3) return Lowrider(playerid);
	  			new Varray[] = {1135,1190,1193};
				AddVehicleComponent(vehid,Varray[listitem]);
				return Mod3(playerid);
			}
			if(vehmd == 575)
			{
			    if(listitem == 3) return Lowrider(playerid);
	  			new Varray[] = {1177,1175,1043};
				AddVehicleComponent(vehid,Varray[listitem]);
				return Mod3(playerid);
			}
			if(vehmd == 535)
			{
			    if(listitem == 5) return Lowrider(playerid);
	  			new Varray[] = {1110,1116,1114,1119,1121};
				AddVehicleComponent(vehid,Varray[listitem]);
				return Mod3(playerid);
			}
	  		if(vehmd == 567)
			{
			    if(listitem == 3) return Lowrider(playerid);
				new Varray[] = {1188,1186,1132};
				AddVehicleComponent(vehid,Varray[listitem]);
				return Mod3(playerid);
			}
			if(vehmd == 536)
			{
			    if(listitem == 3) return Lowrider(playerid);
				new Varray[] = {1181,1183,1105};
				AddVehicleComponent(vehid,Varray[listitem]);
				return Mod3(playerid);
			}
			if(vehmd == 534)
			{
			    if(listitem == 3) return Lowrider(playerid);
				new Varray[] = {1185,1178,1127};
				AddVehicleComponent(vehid,Varray[listitem]);
				return Mod3(playerid);
			}
			PlayerInfo[playerid][pComponent] -= 50;
			PlayerInfo[playerid][pTire]--;
			PlayerInfo[playerid][pMechTime] = 30;
	        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			SendClientMessage(playerid, COLOR_WHITE, "Kamu Telah Memasang {FF8080}Component Pada Mobil Ini");
			UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
		}
	if( dialogid == DIALOG_REFUEL)
	{
		if (response)
		{
		    new idiot = strval(inputtext);
			for(new idx = 0; idx < MAX_BUSINESSES; idx++)
			{
   				if(GetPlayerCash(playerid) < HargaBensin*idiot) return SendClientMessage(playerid, -1, "ERROR: Uang anda tidak cukup untuk membeli bensin sebanyak itu");
				RefuelingVehicle[playerid] = 1;
				LimitFuel[playerid] = strval(inputtext);
				GivePlayerCash(playerid, -HargaBensin*idiot);
				BizzInfo[idx][bTill] += (HargaBensin*idiot);
				BizzInfo[idx][bFuelStock] -= idiot;
				RefuelingVehicleTimer[playerid] = SetTimerEx("ReFill", 1000, true, "i", playerid);
				format(String, sizeof(String), "BIZFUEL: Anda telah membeli %d unit bensin dengan harga $%s", strval(inputtext), FormatMoney(strval(inputtext)*HargaBensin));
				SendClientMessage(playerid, COLOR_WHITE, String);
				return 1;
			}
		}
	}
    if(dialogid == MPSPAYTICKETS)
	{
	    if(response)
	    {
	        new id = GetPVarInt(playerid, "playeraffectedImpound");
			if(PlayerVehicleInfo[id][listitem][pvImpounded])
			{
			    new Float:x,Float:y,Float:z;
			    GetPlayerPos(id,x,y,z);
			    new Float:Angle;
			    GetPlayerFacingAngle(id,Angle);
				PlayerVehicleInfo[id][listitem][pvImpounded] = 0;
				PlayerVehicleInfo[id][listitem][pvPosX] = x;
				PlayerVehicleInfo[id][listitem][pvPosY] = y;
				PlayerVehicleInfo[id][listitem][pvPosZ] = z;
				PlayerVehicleInfo[id][listitem][pvPosAngle] = Angle;
				++PlayerCars;
				PlayerVehicleInfo[id][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[id][listitem][pvModelId], PlayerVehicleInfo[id][listitem][pvPosX], PlayerVehicleInfo[id][listitem][pvPosY], PlayerVehicleInfo[id][listitem][pvPosZ], PlayerVehicleInfo[id][listitem][pvPosAngle],PlayerVehicleInfo[id][listitem][pvColor1], PlayerVehicleInfo[id][listitem][pvColor2], -1);
				VehicleFuel[PlayerVehicleInfo[id][listitem][pvId]] = 100.0;
				if(PlayerVehicleInfo[id][listitem][pvLocked] == 1) LockPlayerVehicle(id, PlayerVehicleInfo[id][listitem][pvId], PlayerVehicleInfo[id][listitem][pvLock]);
				LoadPlayerVehicleMods(id, listitem);
				SetVehicleNumberPlate(PlayerVehicleInfo[id][listitem][pvId], PlayerVehicleInfo[id][listitem][pvNumberPlate]);
			}
	    }
		return 1;
	}
	if(dialogid == TAKEVEH)
	{
	    if(response)
	    {
			if(PlayerVehicleInfo[playerid][listitem][pvStored])
			{
			    new Float:x,Float:y,Float:z;
			    GetPlayerPos(playerid,x,y,z);
			    new Float:Angle;
			    GetPlayerFacingAngle(playerid,Angle);
				PlayerVehicleInfo[playerid][listitem][pvStored] = 0;
				PlayerVehicleInfo[playerid][listitem][pvPosX] = x;
				PlayerVehicleInfo[playerid][listitem][pvPosY] = y;
				PlayerVehicleInfo[playerid][listitem][pvPosZ] = z;
				PlayerVehicleInfo[playerid][listitem][pvPosAngle] = Angle;
				++PlayerCars;
				PlayerVehicleInfo[playerid][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosX], PlayerVehicleInfo[playerid][listitem][pvPosY], PlayerVehicleInfo[playerid][listitem][pvPosZ], PlayerVehicleInfo[playerid][listitem][pvPosAngle],PlayerVehicleInfo[playerid][listitem][pvColor1], PlayerVehicleInfo[playerid][listitem][pvColor2], -1);
				VehicleFuel[PlayerVehicleInfo[playerid][listitem][pvId]] = 100.0;
				if(PlayerVehicleInfo[playerid][listitem][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvLock]);
				LoadPlayerVehicleMods(playerid, listitem);
				SetVehicleNumberPlate(PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvNumberPlate]);
			}
	    }
		return 1;
	}
	if(dialogid == CLAIMINSURANCE)
	{
	    if(response)
	    {
			if(PlayerVehicleInfo[playerid][listitem][pvDestroyed])
			{
			    PlayerVehicleInfo[playerid][listitem][pvDestroyed] = 0;
				PlayerVehicleInfo[playerid][listitem][pvPosX] = 1659.1730;
				PlayerVehicleInfo[playerid][listitem][pvPosY] = -1427.2448;
				PlayerVehicleInfo[playerid][listitem][pvPosZ] = 13.3456;
				PlayerVehicleInfo[playerid][listitem][pvPosAngle] = 89.5269;
				PlayerVehicleInfo[playerid][listitem][pvInsurances] --;
				++PlayerCars;
				PlayerVehicleInfo[playerid][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosX], PlayerVehicleInfo[playerid][listitem][pvPosY], PlayerVehicleInfo[playerid][listitem][pvPosZ], PlayerVehicleInfo[playerid][listitem][pvPosAngle],PlayerVehicleInfo[playerid][listitem][pvColor1], PlayerVehicleInfo[playerid][listitem][pvColor2], -1);
				VehicleFuel[PlayerVehicleInfo[playerid][listitem][pvId]] = 100.0;
				if(PlayerVehicleInfo[playerid][listitem][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvLock]);
				LoadPlayerVehicleMods(playerid, listitem);
				SetVehicleNumberPlate(PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvNumberPlate]);
				PutPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId], 1);
			}
	    }
		return 1;
	}
    if( dialogid == DIALOG_MAKEAMMO)
	{
			if(response)
			{
                if(PlayerInfo[playerid][pMats] < strval(inputtext) ) return ShowDescriptionText(playerid,"You don't have enough materials");
                if(GetPlayerWeapon(playerid) == 0 || isMelee(GetPlayerWeapon(playerid))) return ShowDescriptionText(playerid, "You must holding fire arms");
			    new senjata,peluru;
				PlayerInfo[playerid][pMats] -= strval(inputtext);
				GetPlayerWeaponData(playerid, GetWeaponSlot(GetPlayerWeapon(playerid)), senjata, peluru);
				removePlayerWeapon(playerid, GetPlayerWeapon(playerid));
				givePlayerValidWeapon(playerid, GetPlayerWeapon(playerid), (peluru+strval(inputtext)));
				PlayerInfo[playerid][pGunsAmmo][GetWeaponSlot(GetPlayerWeapon(playerid))] += peluru+strval(inputtext);
			}
		}
  		if( dialogid == DIALOG_CREATEGUN)
  		{
			if(!response)
			return 1;
			if(PlayerInfo[playerid][pScrewdriver] > 0)
			{
			    switch(listitem)
				{
					case 0:
					{
						if(PlayerInfo[playerid][pMats] >= 750)
						{
							givePlayerValidWeapon(playerid, 23, 10);
							PlayerInfo[playerid][pMats] -= 750;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki materials yang cukup untuk membuat senjata ini.");
						}
					}
					case 1:
					{
						if(PlayerInfo[playerid][pMats] >= 1500)
						{
							givePlayerValidWeapon(playerid, 33, 10);
							PlayerInfo[playerid][pMats] -= 1500;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki materials yang cukup untuk membuat senjata ini.");
						}
					}
					case 2:
					{
						if(PlayerInfo[playerid][pMats] >= 2500)
						{
							givePlayerValidWeapon(playerid, 25, 10);
							PlayerInfo[playerid][pMats] -= 2500;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki materials yang cukup untuk membuat senjata ini.");
						}
					}
					case 3:
					{
					    if(PlayerInfo[playerid][pFMember] == 255) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
						if(PlayerInfo[playerid][pMats] >= 4500)
						{
							givePlayerValidWeapon(playerid, 24, 10);
							PlayerInfo[playerid][pMats] -= 4500;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki materials yang cukup untuk membuat senjata ini.");
						}
					}
					case 4:
					{
					    if(PlayerInfo[playerid][pFMember] == 255) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
						if(PlayerInfo[playerid][pMats] >= 6000)
						{
							givePlayerValidWeapon(playerid, 29, 10);
							PlayerInfo[playerid][pMats] -= 6000;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki materials yang cukup untuk membuat senjata ini.");
						}
					}
					case 5:
					{
					    if(PlayerInfo[playerid][pFMember] == 255) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
						if(PlayerInfo[playerid][pMats] >= 10)
						{
							givePlayerValidWeapon(playerid, 30, 150);
							PlayerInfo[playerid][pMats] -= 10000;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Anda tidak memiliki materials yang cukup untuk membuat senjata ini.");
						}
					}
				}
			}
		}
    if(dialogid == 9000)
	{
		new playervehicleid = GetPlayerFreeVehicleId(playerid), carsamount = GetPlayerVehicleCount(playerid), rand = random(126), rand2 = random(126);
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) < 25000) return SendClientMessageEx(playerid,COLOR_WHITE,"Uang kamu tidak cukup untuk membeli Yankee.");
				if(PlayerInfo[playerid][pDonateRank] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 2 && carsamount >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 3 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 4 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Kamu tidak dapat memiliki kendaraan lagi.");
	        	new car = CreatePlayerVehicle(playerid, playervehicleid, 456, -75.2106,-1108.1771,1.0781, 0.000, rand, rand2, 0);
	        	GivePlayerCash(playerid, -25000)	;
       			SetVehicleNumberPlate(car, "{FF0000}NO_HAVE");
				format(PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate], 32, "%s", "NO_HAVE");
			}
			if(listitem == 1)
			{
  				if(GetPlayerCash(playerid) < 25000) return SendClientMessageEx(playerid,COLOR_WHITE,"Uang kamu tidak cukup untuk membeli Benson.");
				if(PlayerInfo[playerid][pDonateRank] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 2 && carsamount >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 3 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 4 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Kamu tidak dapat memiliki kendaraan lagi.");
	        	new car = CreatePlayerVehicle(playerid, playervehicleid, 499, -75.2106,-1108.1771,1.0781, 0.000, rand, rand2, 0);
	        	GivePlayerCash(playerid, -25000);
       			SetVehicleNumberPlate(car, "{FF0000}NO_HAVE");
				format(PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate], 32, "%s", "NO_HAVE");
			}
			if(listitem == 2)
			{
  				if(GetPlayerCash(playerid) < 50000) return SendClientMessageEx(playerid,COLOR_WHITE,"Uang kamu tidak cukup untuk membeli Flatbed.");
				if(PlayerInfo[playerid][pDonateRank] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 2 && carsamount >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 3 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 4 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Kamu tidak dapat memiliki kendaraan lagi.");
	        	new car = CreatePlayerVehicle(playerid, playervehicleid, 455, -75.2106,-1108.1771,1.0781, 0.000, rand, rand2, 0);
	        	GivePlayerCash(playerid, -50000);
       			SetVehicleNumberPlate(car, "{FF0000}NO_HAVE");
				format(PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate], 32, "%s", "NO_HAVE");
			}
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) < 200000) return SendClientMessageEx(playerid,COLOR_WHITE,"Uang kamu tidak cukup untuk membeli Linerunner.");
				if(PlayerInfo[playerid][pDonateRank] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 2 && carsamount >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 3 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 4 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Kamu tidak dapat memiliki kendaraan lagi.");
	        	new car = CreatePlayerVehicle(playerid, playervehicleid, 403, -75.2106,-1108.1771,1.0781, 0.000, rand, rand2, 0);
	        	GivePlayerCash(playerid, -200000)	;
       			SetVehicleNumberPlate(car, "{FF0000}NO_HAVE");
				format(PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate], 32, "%s", "NO_HAVE");
			}
			if(listitem == 4)
			{
  				if(GetPlayerCash(playerid) < 200000) return SendClientMessageEx(playerid,COLOR_WHITE,"Uang kamu tidak cukup untuk membeli Petrol Tanker.");
				if(PlayerInfo[playerid][pDonateRank] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 2 && carsamount >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 3 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 4 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Kamu tidak dapat memiliki kendaraan lagi.");
	        	new car = CreatePlayerVehicle(playerid, playervehicleid, 514, -75.2106,-1108.1771,1.0781, 0.000, rand, rand2, 0);
	        	GivePlayerCash(playerid, -200000);
       			SetVehicleNumberPlate(car, "{FF0000}NO_HAVE");
				format(PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate], 32, "%s", "NO_HAVE");
			}
			if(listitem == 5)
			{
  				if(GetPlayerCash(playerid) < 200000) return SendClientMessageEx(playerid,COLOR_WHITE,"Uang kamu tidak cukup untuk membeli Road Train.");
				if(PlayerInfo[playerid][pDonateRank] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 2 && carsamount >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 3 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 4 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Kamu tidak dapat memiliki kendaraan lagi.");
	        	new car = CreatePlayerVehicle(playerid, playervehicleid, 515, -75.2106,-1108.1771,1.0781, 0.000, rand, rand2, 0);
	        	GivePlayerCash(playerid, -200000);
       			SetVehicleNumberPlate(car, "{FF0000}NO_HAVE");
				format(PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate], 32, "%s", "NO_HAVE");
			}
		}
		return 1;
	}
    if(dialogid == 9002)
	{
		new playervehicleid = GetPlayerFreeVehicleId(playerid), carsamount = GetPlayerVehicleCount(playerid), rand = random(126), rand2 = random(126);
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) < 15000) return SendClientMessageEx(playerid,COLOR_WHITE,"Uang kamu tidak cukup untuk membeli Bike.");
				if(PlayerInfo[playerid][pDonateRank] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 2 && carsamount >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 3 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 4 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
		    	if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Kamu tidak dapat memiliki kendaraan lagi.");
	        	new car = CreatePlayerVehicle(playerid, playervehicleid, 509, 710.2375, -524.1984, 16.3359, 0.000, rand, rand2, 0);
	        	GivePlayerCash(playerid, -15000)	;
       			SetVehicleNumberPlate(car, "{FF0000}NO_HAVE");
				format(PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate], 32, "%s", "NO_HAVE");
			}
			if(listitem == 1)
			{
  				if(GetPlayerCash(playerid) < 25000) return SendClientMessageEx(playerid,COLOR_WHITE,"Uang kamu tidak cukup untuk membeli BMX.");
				if(PlayerInfo[playerid][pDonateRank] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 2 && carsamount >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 3 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 4 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Kamu tidak dapat memiliki kendaraan lagi.");
	        	new car = CreatePlayerVehicle(playerid, playervehicleid, 481, 710.2375, -524.1984, 16.3359, 0.000, rand, rand2, 0);
	        	GivePlayerCash(playerid, -25000);
       			SetVehicleNumberPlate(car, "{FF0000}NO_HAVE");
				format(PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate], 32, "%s", "NO_HAVE");
			}
			if(listitem == 2)
			{
  				if(GetPlayerCash(playerid) < 50000) return SendClientMessageEx(playerid,COLOR_WHITE,"Uang kamu tidak cukup untuk membeli Mountain Bike.");
				if(PlayerInfo[playerid][pDonateRank] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 2 && carsamount >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 3 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
				if(PlayerInfo[playerid][pDonateRank] == 4 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
		    	if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Kamu tidak dapat memiliki kendaraan lagi.");
	        	new car = CreatePlayerVehicle(playerid, playervehicleid, 510, 710.2375, -524.1984, 16.3359, 0.000, rand, rand2, 0);
	        	GivePlayerCash(playerid, -50000);
       			SetVehicleNumberPlate(car, "{FF0000}NO_HAVE");
				format(PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate], 32, "%s", "NO_HAVE");
			}
		}
		return 1;
	}
	if(dialogid == HAULING)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0://Ocean Dock 1
				{
				    if(DialogHauling[0] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[0] = true; // Dialog 0 telah di pilih
					    DialogSaya[playerid][0] = true;
						SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Go to marked checkpoint on your map");
						SetPlayerRaceCheckpoint(playerid, 1, 2791.4016, -2494.5452, 14.2522, 2791.4016, -2494.5452, 14.2522, 10.0);
						TrailerHauling[playerid] = CreateVehicle(435, 2791.4016, -2494.5452, 14.2522, 89.5366, 1, 1, -1);
						SedangHauling[playerid] = 1;
					}
					else
					    SendClientMessage(playerid,-1,"ERROR: Trucking Missions already taken by Someone");
				}
				case 1://Ocean Dock 2
				{
				    if(DialogHauling[1] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[1] = true; // Dialog 1 telah di pilih
					    DialogSaya[playerid][1] = true;
						SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Go to marked checkpoint on your map");
						SetPlayerRaceCheckpoint(playerid, 1, 2784.3132, -2456.6299, 14.2415, 2784.3132, -2456.6299, 14.2415, 10.0);
						TrailerHauling[playerid] = CreateVehicle(591, 2784.3132, -2456.6299, 14.2415, 89.4938, 1, 1, -1);
						SedangHauling[playerid] = 3;
					}
					else
					    SendClientMessage(playerid,-1,"ERROR: Trucking Missions already taken by Someone");
				}
				case 2://Angel Pine 1
				{
				    if(DialogHauling[2] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[2] = true; // Dialog 2 telah di pilih
					    DialogSaya[playerid][3] = true;
						SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Go to marked checkpoint on your map");
						SetPlayerRaceCheckpoint(playerid, 1,-1963.0142, -2436.3079, 31.2311, -1963.0142, -2436.3079, 31.2311, 10.0);
						TrailerHauling[playerid] = CreateVehicle(450, -1963.0142, -2436.3079, 31.2311, 226.1548, 1, 1, -1);
						SedangHauling[playerid] = 5;
					}
					else
					    SendClientMessage(playerid,-1,"ERROR: Trucking Missions already taken by Someone");
				}
				case 3://Angel Pine 2
				{
				    if(DialogHauling[3] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[3] = true; // Dialog 0 telah di pilih
					    DialogSaya[playerid][3] = true;
						SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Go to marked checkpoint on your map");
						SetPlayerRaceCheckpoint(playerid, 1, -1966.5603, -2439.9380, 31.2306, -1966.5603, -2439.9380, 31.2306, 10.0);
						TrailerHauling[playerid] = CreateVehicle(450, -1966.5603, -2439.9380, 31.2306, 225.5799, 1, 1, -1);
						SedangHauling[playerid] = 7;
					}
					else
					    SendClientMessage(playerid,-1,"ERROR: Trucking Missions already taken by Someone");
				}
				case 4://Dekat Jembatan Montgomery 1
				{
				    if(DialogHauling[4] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[4] = true; // Dialog 1 telah di pilih
					    DialogSaya[playerid][4] = true;
						SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Go to marked checkpoint on your map");
						SetPlayerRaceCheckpoint(playerid, 1, -1863.1541, -1720.5603, 22.3558, -1863.1541, -1720.5603, 22.3558, 10.0);
						TrailerHauling[playerid] = CreateVehicle(450, -1863.1541, -1720.5603, 22.3558, 122.1463, 1, 1, -1);
						SedangHauling[playerid] = 9;
					}
					else
					    SendClientMessage(playerid,-1,"ERROR: Trucking Missions already taken by Someone");
				}
				case 5://Dekat Jembatan Montgomery 2
				{
				    if(DialogHauling[5] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[5] = true; // Dialog 2 telah di pilih
					    DialogSaya[playerid][5] = true;
						SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Go to marked checkpoint on your map");
						SetPlayerRaceCheckpoint(playerid, 1, -1855.7255, -1726.0389, 22.3566, -1855.7255, -1726.0389, 22.3566, 10.0);
						TrailerHauling[playerid] = CreateVehicle(450, -1855.7255, -1726.0389, 22.3566, 124.4187, 1, 1, -1);
						SedangHauling[playerid] = 11;
					}
					else
					    SendClientMessage(playerid,-1,"ERROR: Trucking Missions already taken by Someone");
				}
				case 6://Pabrik Easter Egg
				{
				    if(DialogHauling[6] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[6] = true; // Dialog 0 telah di pilih
					    DialogSaya[playerid][6] = true;
						SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Go to marked checkpoint on your map");
						SetPlayerRaceCheckpoint(playerid, 1, -1053.6145, -658.6473, 32.6319, -1053.6145, -658.6473, 32.6319, 10.0);
						TrailerHauling[playerid] = CreateVehicle(584, -1053.6145, -658.6473, 32.6319, 260.6392, 1, 1, -1);
						SedangHauling[playerid] = 13;
					}
					else
					    SendClientMessage(playerid,-1,"ERROR: Trucking Missions already taken by Someone");
				}
				case 7://Blueberry Atas
				{
				    if(DialogHauling[7] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[7] = true; // Dialog 1 telah di pilih
					    DialogSaya[playerid][7] = true;
						SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Go to marked checkpoint on your map");
						SetPlayerRaceCheckpoint(playerid, 1, -459.3511, -48.3457, 60.5507, -459.3511, -48.3457, 60.5507, 10.0);
						TrailerHauling[playerid] = CreateVehicle(450, -459.3511, -48.3457, 60.5507, 182.7280, 1, 1, -1);
						SedangHauling[playerid] = 15;
					}
					else
					    SendClientMessage(playerid,-1,"ERROR: Trucking Missions already taken by Someone");
				}
				case 8://LV Tanah
				{
				    if(DialogHauling[8] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[8] = true; // Dialog 2 telah di pilih
					    DialogSaya[playerid][8] = true;
						SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Go to marked checkpoint on your map");
						SetPlayerRaceCheckpoint(playerid, 1, 847.0450, 921.0422, 13.9579, 847.0450, 921.0422, 13.9579, 10.0);
						TrailerHauling[playerid] = CreateVehicle(450, 847.0450, 921.0422, 13.9579, 201.2555, 1, 1, -1);
						SedangHauling[playerid] = 17;
					}
					else
					    SendClientMessage(playerid,-1,"ERROR: Trucking Missions already taken by Someone");
				}
				case 9://LV Pabrik
				{
				    if(DialogHauling[9] == false) // Kalau False atau tidak dipilih
				    {
					    DialogHauling[9] = true; // Dialog 2 telah di pilih
					    DialogSaya[playerid][9] = true;
						SendClientMessage(playerid, COLOR_ARWIN,"TRUCKING: {FFFFFF}Go to marked checkpoint on your map");
						SetPlayerRaceCheckpoint(playerid, 1, 249.6713, 1395.7150, 11.1923, 249.6713, 1395.7150, 11.1923, 10.0);
						TrailerHauling[playerid] = CreateVehicle(584, 249.6713, 1395.7150, 11.1923, 269.0699, 1, 1, -1);
						SedangHauling[playerid] = 19;
					}
					else
					    SendClientMessage(playerid,-1,"ERROR: Trucking Missions already taken by Someone");
				}
			}
		}
	}
	if( dialogid == 15917)
	{
		if(response)
		{
		    StockIkan += PlayerInfo[playerid][pBeratIkan] / 25;
			GivePlayerCash(playerid, PlayerInfo[playerid][pBeratIkan] * FishPrice / 2);
	      	format(String, sizeof(String), "{FF0000}[Information] : {FFFF00}Kamu mendapat uang sebesar {FF0000}$%s {FFFF00}dari menjual ikan", FormatMoney(PlayerInfo[playerid][pBeratIkan] * FishPrice / 2));
			SendClientMessageEx(playerid, COLOR_WHITE, String);
			format(String, sizeof(String), "[Fish Storage]\nFish Available: %d\n'/missions' untuk mengangkut barang", StockIkan);
			UpdateDynamic3DTextLabelText(pickupML, COLOR_WHITE, String);
			UpdateDynamic3DTextLabelText(pickupML2, COLOR_WHITE, String);
			PlayerInfo[playerid][pFTime] = 1800;
			PlayerInfo[playerid][pFMax] = 0;
			PlayerInfo[playerid][pBeratIkan] = 0;
			SaveStock();
		}
	}
		return 1;
}// End OnDialogResponse
stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}
encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
{
    return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);
}
forward RemoveVehSS(VID);
public RemoveVehSS(VID)
{
    DestroyObject(SirenObject[VID]);
	DestroyObject(StrobeObject[VID]);
	Siren[VID] = 0;
	Strobe[VID] = 0;
	return 1;
}
stock GetDotXY(Float:StartPosX, Float:StartPosY, &Float:NewX, &Float:NewY, Float:alpha, Float:dist)
{
	NewX = StartPosX + (dist * floatsin(alpha, degrees));
	NewY = StartPosY + (dist * floatcos(alpha, degrees));
}
stock GetPlayerSpeed(playerid, get3d)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else
	    GetPlayerVelocity(playerid, x, y, z);

	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock DamageVehColor(Float: h) {
	new str[5];
	if (h <= 30)
		format(str, sizeof(str), "r");
	else if (h < 60)
	    format(str, sizeof(str), "y");
	else
	    format(str, sizeof(str), "g");
	return str;
}

stock FuelColor(vid) {
	new str[5];
	if (VehicleFuel[vid] <= 20)
	    format(str, sizeof(str), "r");
	else if (VehicleFuel[vid] < 40)
	    format(str, sizeof(str), "y");
	else
	    format(str, sizeof(str), "g");
	return str;
}

stock XXGetDistance( Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2 )
{
    return floatround( floatsqroot( ( ( x1 - x2 ) * ( x1 - x2 ) ) + ( ( y1 - y2 ) * ( y1 - y2 ) ) + ( ( z1 - z2 ) * ( z1 - z2 ) ) ) ) ;
}


public OnPlayerUpdate(playerid)
{
	if(GetPlayerAnimationIndex(playerid))
    {
        new animlib[32];
        new animname[32];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
        if(strcmp(animlib, "SWIM", true) == 0 && !swimming[playerid])
        {
            swimming[playerid] = true;
            OnPlayerStartSwimming(playerid);
        }
        else if(strcmp(animlib, "SWIM", true) != 0)
        {
            swimming[playerid] = false;
            OnPlayerStopSwimming(playerid);
        }
    }
    else if(swimming[playerid])
    {
        swimming[playerid] = false;
        OnPlayerStopSwimming(playerid);
    }
    if(PlayerInfo[playerid][pMaskUse] == 0)
    {
    	for(new i = 0; i < MAX_PLAYERS; i++)
     	{
      		ShowPlayerNameTagForPlayer(i, playerid, true);
      	}
 	}
  	if(PlayerInfo[playerid][pMaskUse] == 1)
   	{
    	for(new i = 0; i < MAX_PLAYERS; i++)
   		{
     		ShowPlayerNameTagForPlayer(i, playerid, false);
     	}
    }
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, PlayerInfo[playerid][pSilincedSkill] * 100);
  	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][pDesertEagleSkill]* 100);
  	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][pShotgunSkill]* 100);
  	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][pSpassSkill]* 100);
   	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][pMP5Skill]* 100);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][pAK47Skill]* 100);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][pM4Skill]* 100);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, PlayerInfo[playerid][pSniperSkill]* 100);
    new Float: Health, Float: Armour;
    GetPlayerHealth(playerid, Health);
    GetPlayerArmour(playerid, Armour);
    PlayerInfo[playerid][pHealth] = Health;
    PlayerInfo[playerid][pArmor] = Armour;
    if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pAdminDuty] < 1)
    {
    	new String[1000];
     	if(Health < PlayerInfo[playerid][pHealth] || Armour < PlayerInfo[playerid][pArmor])
      	{
       		format(String, sizeof(String), "BotCmd: %s has been kicked by Bot", GetName(playerid));
         	SendClientMessageToAll(COLOR_LIGHTRED, String);
          	format(String, sizeof(String), "Reason: Health Hacking.");
           	SendClientMessageToAll(COLOR_LIGHTRED, String);
			FixedKick(playerid);
		}
	}
    new weapons[13][2];
	for(new s = 0; s < 12; s++)
	{
		GetPlayerWeaponData(playerid, s, weapons[s][0], weapons[s][1]);
		PlayerInfo[playerid][pGuns][s] = weapons[s][0];
  		PlayerInfo[playerid][pGunsAmmo][s] = weapons[s][1];
	}
	//HUNGER FIX
		if(GetProgressBarValue(hungry[playerid])!=PlayerInfo[playerid][pHunger])
			{
			    SetProgressBarValue(hungry[playerid], PlayerInfo[playerid][pHunger]);
		    	UpdateProgressBar(hungry[playerid], playerid);
			}
			if(PlayerInfo[playerid][pHunger] >100)
			{
			    PlayerInfo[playerid][pHunger]=100;
			    SetProgressBarValue(hungry[playerid], 100);
			}
			if(GetProgressBarValue(hungry[playerid]) >= 70)
			{
			    SetProgressBarColor(hungry[playerid], 0x00FF0033);
			}
			if(GetProgressBarValue(hungry[playerid]) < 70)
			{
			    SetProgressBarColor(hungry[playerid], 0xFFFF0033);
			}
			if(GetProgressBarValue(hungry[playerid]) < 25)
			{
			    SetProgressBarColor(hungry[playerid], 0xFF000033);
			}
			if(GetProgressBarValue(hungry[playerid]) < 0)
			{
			    SetProgressBarValue(hungry[playerid], 0);
			}
			if(GetProgressBarValue(tired[playerid])!=PlayerInfo[playerid][pEnergi])
			{
			    SetProgressBarValue(tired[playerid], PlayerInfo[playerid][pEnergi]);
		    	UpdateProgressBar(tired[playerid], playerid);
			}
			if(PlayerInfo[playerid][pEnergi] >100)
			{
			    PlayerInfo[playerid][pEnergi]=100;
			    SetProgressBarValue(tired[playerid], 100);
			}
			if(GetProgressBarValue(tired[playerid]) >= 70)
			{
			    SetProgressBarColor(tired[playerid], 0x00FF0033);
			}
			if(GetProgressBarValue(tired[playerid]) < 70)
			{
			    SetProgressBarColor(tired[playerid], 0xFFFF0033);
			}
			if(GetProgressBarValue(tired[playerid]) < 25)
			{
			    SetProgressBarColor(tired[playerid], 0xFF000033);
			}
			if(GetProgressBarValue(tired[playerid]) < 0)
			{
			    SetProgressBarValue(tired[playerid], 0);
			}
			if(GetProgressBarValue(clean[playerid])!=PlayerInfo[playerid][pBladder])
			{
			    SetProgressBarValue(clean[playerid], PlayerInfo[playerid][pBladder]);
		    	UpdateProgressBar(clean[playerid], playerid);
			}
			if(PlayerInfo[playerid][pBladder] >100)
			{
			    PlayerInfo[playerid][pBladder]=100;
			    SetProgressBarValue(clean[playerid], 100);
			}
			if(GetProgressBarValue(clean[playerid]) >= 70)
			{
			    SetProgressBarColor(clean[playerid], 0x00FF0033);
			}
			if(GetProgressBarValue(clean[playerid]) < 70)
			{
			    SetProgressBarColor(clean[playerid], 0xFFFF0033);
			}
			if(GetProgressBarValue(clean[playerid]) < 25)
			{
			    SetProgressBarColor(clean[playerid], 0xFF000033);
			}
			if(GetProgressBarValue(clean[playerid]) < 0)
			{
			    SetProgressBarValue(clean[playerid], 0);
			}
	//END OF HUNGER FIX
	// Do not put heavy cpu checks in here. Use the 1 second timer.
	if(playerTabbed[playerid] == 1)
	{
		playerTabbed[playerid] = 0;
		playerTabbedTime[playerid] = 0;
	}
	playerSeconds[playerid] = gettime();
	if(GetPVarInt(playerid, "IsFrozen") == 1) TogglePlayerControllable(playerid, 1);
	Streamer_Update(playerid);
	return 1;
}

forward TazerTimer(playerid);
public TazerTimer(playerid)
{
	if (TazerTimeout[playerid] > 0)
   	{
		new string[10000];
   		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Tazer reloading... ~w~%d", TazerTimeout[playerid]);
		GameTextForPlayer(playerid, string,1500, 3);
		TazerTimeout[playerid] -= 1;
		SetTimerEx("TazerTimer",1000,false,"d",playerid);
   	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(gPlayerLogged{playerid} && gPlayerSpawned[playerid] && GetPVarInt(playerid, "EventToken") == 0)
	{
		PlayerInfo[playerid][pInt] = newinteriorid;
	}
	Streamer_Update(playerid);
	return 1;
}

public firstaid5(playerid)
{
	if(GetPVarInt(playerid, "usingfirstaid") == 1)
 	{
		new Float:health;
		GetPlayerHealth(playerid, health);
		if(health < 100.0)
		{
		    if((health+5.0) <= 100.0)
		    {
 				AC_BS_SetPlayerHealth(playerid, health+5.0);
 				PlayerInfo[playerid][pHealth] += 5.0;
			}
		}
	}
}

public firstaidexpire(playerid)
{
	SendClientMessageEx(playerid, COLOR_GRAD1, "Your first aid kit no longer takes effect.");
 	KillTimer(GetPVarInt(playerid, "firstaid5"));
  	SetPVarInt(playerid, "usingfirstaid", 0);
}

public rccam(playerid)
{
	DestroyVehicle(GetPVarInt(playerid, "rcveh"));
 	AC_BS_SetPlayerPos(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
  	SendClientMessageEx(playerid, COLOR_GRAD1, "Your RC Cam has ran out of batteries!");
   	SetPVarInt(playerid, "rccam", 0);
}

public cameraexpire(playerid)
{
	SetPVarInt(playerid, "cameraactive", 0);
 	SetCameraBehindPlayer(playerid);
 	if(GetPVarInt(playerid, "camerasc") == 1)
 	{
	 	AC_BS_SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
	  	AC_BS_SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
	  	AC_BS_SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
	}
 	TogglePlayerControllable(playerid,1);
  	DestroyDynamic3DTextLabel(Camera3D[playerid]);
   	SendClientMessageEx(playerid, COLOR_GRAD1, "Your camera ran out of batteries!");
}

stock GivePlayerCash(playerid, money)
{
	SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+money);
	GivePlayerMoney(playerid, money);
	return 1;
}

stock ResetPlayerCash(playerid)
{
	SetPVarInt(playerid, "Cash", 0);
	ResetPlayerMoney(playerid);
	return 1;
}

public CloseElevatorDoors(floor)
{
	if(floor == 0)
	{
		MoveDynamicObject(LAElevatorDoorLeft[floor], 1786.661254, -1299.346162, 14.595184, 1);
		MoveDynamicObject(LAElevatorDoorRight[floor], 1786.661254, -1299.346162, 14.595184, 1);
	}
	else
	{
	    MoveDynamicObject(LAElevatorDoorLeft[floor], 1786.661254, -1299.346162, 23.117773 + (floor * 5.45), 1);
		MoveDynamicObject(LAElevatorDoorRight[floor], 1786.661254, -1299.346162, 23.117773 + (floor * 5.45), 1);
	}
 	LAElevatorDoorStatus = 0;
}

public OnObjectMoved(objectid)
{
	if(objectid == LAElevator)
	{
	    if(LAElevatorFloor == 0)
	    {
		    MoveDynamicObject(LAElevatorDoorLeft[LAElevatorFloor], 1788.461254, -1299.346162, 14.595184, 1);
		    MoveDynamicObject(LAElevatorDoorRight[LAElevatorFloor], 1784.861254, -1299.346162, 14.595184, 1);
		}
		else
		{
		    MoveDynamicObject(LAElevatorDoorLeft[LAElevatorFloor], 1788.461254, -1299.346162, 23.117773 + (LAElevatorFloor * 5.45), 1);
		    MoveDynamicObject(LAElevatorDoorRight[LAElevatorFloor], 1784.861254, -1299.346162, 23.117773 + (LAElevatorFloor * 5.45), 1);
		}
	    SetTimerEx("CloseElevatorDoors", 6000, 0, "i", LAElevatorFloor);
	    LAElevatorDoorStatus = 1;
	    LAElevatorMoving = 0;
	}
}
public OnPlayerPressButton(playerid, buttonid)
{
	for(new x;x<sizeof(LAElevatorButton);x++)
	{
	    if(buttonid == LAElevatorButton[x])
	    {
	        if(LAElevatorMoving == 0 && LAElevatorDoorStatus == 0)
	        {
	            if(x == 0)
	    		{
		            MoveObject(LAElevator, 1786.634887, -1303.237329, 14.614652, 3);
		            MoveButton(LAElevatorFloorPick, 1788.889282, -1302.229003,  13.918642, 3);
		            SetButtonPos(LAElevatorFloorPick, 1788.889282, -1302.229003,  13.918642, 270);
				}
				else
				{
				    MoveObject(LAElevator, 1786.634887, -1303.237329, 23.071138 + (x * 5.45), 3);
		            MoveButton(LAElevatorFloorPick, 1788.889282, -1302.229003, 22.656608 + (x * 5.45), 3);
		            SetButtonPos(LAElevatorFloorPick, 1788.889282, -1302.229003, 22.656608 + (x * 5.45), 270);
				}
	            LAElevatorFloor = x;
	            LAElevatorMoving = 1;
	            new string[10000];
   				format(string, sizeof(string), "* Elevator has been called, please wait.");
      			ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
			    new string[10000];
   				format(string, sizeof(string), "* Elevator is in use, try again soon.");
      			ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
	    }
	}
 	if(buttonid == LAElevatorFloorPick)
  	{
   		if(LAElevatorMoving == 0)
     	{
     	    new string[512];
     	    for(new x;x<20;x++)
			{
			    format(string, sizeof(string), "%s%d - %s\n", string, (x+1), LAElevatorFloorName[x]);
			}
      		ShowPlayerDialog(playerid,LAELEVATOR,DIALOG_STYLE_LIST,"Select A Floor", string, "Select", "Cancel");
		}
		else
		{
  			new string[10000];
			format(string, sizeof(string), "* Elevator is already moving");
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
  	}
	if(buttonid == SANewsStudio)
	{
	    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 || IsACop(playerid))
	    {
	        MoveDynamicObject(SANewsStudioA,625.60937500,-9.80000019,1106.96081543,4);
	 		MoveDynamicObject(SANewsStudioB,625.64941406,-14.77000046,1106.96081543,4);
			SetTimer("CloseSANewsStudio", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == SANewsPrivate)
	{
	    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 || IsACop(playerid))
	    {
	        MoveDynamicObject(SANewsPrivateA,625.60937500,0.55000001,1106.96081543,4);
	 		MoveDynamicObject(SANewsPrivateB,625.65002441,-4.54999995,1106.96081543,4);
			SetTimer("CloseSANewsPrivate", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == SANewsPrivateOPP)
	{
	    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 || IsACop(playerid))
	    {
	        MoveDynamicObject(SANewsPrivateA,625.60937500,0.55000001,1106.96081543,4);
	 		MoveDynamicObject(SANewsPrivateB,625.65002441,-4.54999995,1106.96081543,4);
			SetTimer("CloseSANewsPrivate", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == SANewsOffice)
	{
	    if(((PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9) && PlayerInfo[playerid][pRank] >=5) || IsACop(playerid))
	    {
	        MoveDynamicObject(SANewsOfficeA,613.66998291,17.82812500,1106.98425293,4);
	 		MoveDynamicObject(SANewsOfficeB,618.69000244,17.86899948,1106.98425293,4);
			SetTimer("CloseSANewsOffice", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == westout)
	{
		if(PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(westlobby1,239.71582031,115.09179688,1002.21502686,4);
		MoveDynamicObject(westlobby2,239.67968750,120.09960938,1002.21502686,4);
		SetTimer("CloseWestLobby", 2500, 0);
	}
	if(buttonid == eastout)
	{
		if(PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
 		MoveDynamicObject(eastlobby1,253.14941406,111.59960938,1002.21502686,4);
 		MoveDynamicObject(eastlobby2,253.18457031,106.59960938,1002.21502686,4);
		SetTimer("CloseEastLobby", 2500, 0);
	}
	if(buttonid == lockerin || buttonid == lockerout)
	{
		if(PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(locker1,268.29980469,112.56640625,1003.61718750,4);
		MoveDynamicObject(locker2,263.29980469,112.52929688,1003.61718750,4);
		SetTimer("CloseLocker", 2500, 0);
	}
	if(buttonid == cctvin || buttonid == cctvout)
	{
		if(PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(cctv1,263.44921875,115.79980469,1003.61718750,4);
		MoveDynamicObject(cctv2,268.46875000,115.83691406,1003.61718750,4);
		SetTimer("CloseCCTV", 2500, 0);
	}
	if(buttonid == chiefin || buttonid == chiefout)
	{
		if((PlayerInfo[playerid][pRank] < 10 && PlayerInfo[playerid][pMember] == 1) || PlayerInfo[playerid][pMember] != 1)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(chief1,228.0,119.50000000,1009.21875000,4);
		MoveDynamicObject(chief2,230.0,119.53515625,1009.21875000,4);
	    SetTimer("CloseChief", 2500, 0);
	}
	if(buttonid == fbichiefin || buttonid == fbichiefout)
	{
		if((PlayerInfo[playerid][pRank] < 10 && PlayerInfo[playerid][pMember] == 2) || PlayerInfo[playerid][pMember] != 2)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(fbichief1,232.9210, 106.5805, 1009.2137,4);
		MoveDynamicObject(fbichief2,232.8891, 111.5816, 1009.2137,4);
	    SetTimer("CloseChiefFbi", 2500, 0);
	}
	if(buttonid == elevator)
	{
		if(PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		else ShowPlayerDialog( playerid, ELEVATOR3, DIALOG_STYLE_LIST, "Elevator", "Rooftop\nGarage", "Select", "Cancel");
	}
	if(buttonid == garagekey)
	{
		if(PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		else ShowPlayerDialog( playerid, ELEVATOR2, DIALOG_STYLE_LIST, "Elevator", "Rooftop\nInterior", "Select", "Cancel");
	}
	if(buttonid == roofkey)
	{
		if(PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		else ShowPlayerDialog( playerid, ELEVATOR, DIALOG_STYLE_LIST, "Elevator", "Interior\nGarage", "Select", "Cancel");
	}
	if(buttonid == westin)
	{
		MoveDynamicObject(westlobby1,239.71582031,115.09179688,1002.21502686,4);
		MoveDynamicObject(westlobby2,239.67968750,120.09960938,1002.21502686,4);
		SetTimer("CloseWestLobby", 2500, 0);
	}
	if(buttonid == eastin)
	{
 		MoveDynamicObject(eastlobby1,253.14941406,111.59960938,1002.21502686,4);
 		MoveDynamicObject(eastlobby2,253.18457031,106.59960938,1002.21502686,4);
		SetTimer("CloseEastLobby", 2500, 0);
	}
	return false;
}

public DoorOpen(playerid)
{
	  MoveDynamicObject(lspddoor1, 247.2763671875,72.536186218262,1002.640625, 3.5000);
	  MoveDynamicObject(lspddoor2, 244.0330657959,72.580932617188,1002.640625, 3.5000);
	  return 1;
}

public DoorClose(playerid)
{
	  MoveDynamicObject(lspddoor1, 246.35150146484,72.547714233398,1002.640625, 3.5000);
	  MoveDynamicObject(lspddoor2, 245.03300476074,72.568511962891,1002.640625, 3.5000);
	  return 1;
}

public OnEnterExitModShop( playerid, enterexit, interiorid )
{
	if( enterexit == 0 )
	{
		// Saving cars.
		if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
		{
			UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
		}
		AC_BS_SetPlayerInterior( playerid, 0 );
	}

	return 1;
}

stock SendLocalMessage(playerid, msg[], Float:MessageRange, Range1color, Range2color)
{
    new Float: PlayerX, Float: PlayerY, Float: PlayerZ;
    GetPlayerPos(playerid, PlayerX, PlayerY, PlayerZ);
    foreach (Player, i)
    {
        if(IsPlayerInRangeOfPoint(i, MessageRange, PlayerX, PlayerY,PlayerZ))
        {
            SendClientMessage(i, Range1color, msg);
        }
        else if(IsPlayerInRangeOfPoint(i, MessageRange/2.0, PlayerX, PlayerY,PlayerZ))
        {
            SendClientMessage(i, Range2color, msg);
        }
    }
}
stock GetGun(wid)
{
	switch(wid)
	{
	    case 1: return 331;
		case 2..8: return wid+331;
        case 9: return 341;
		case 10..15: return wid+311;
		case 16..18: return wid+326;
		case 22..29: return wid+324;
		case 30,31: return wid+325;
		case 32: return 372;
		case 33..45: return wid+324;
		case 46: return 371;
	}
	return 0;
}
stock GetGunObjectID(WeaponID)
{
    if (WeaponID < 0 || WeaponID > 64)
    {
        return 1575;
    }
    return GunObjectIDs[WeaponID];
}

stock DropGun(playerid, GunID, GunAmmo, Float:X, Float:Y, Float:Z, world, interior)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    if(GunID != 0 && GunAmmo != 0)
    {
        for(new i = 0; i < sizeof(DropInfo); i++)
        {
            if(DropInfo[i][DropGunPosX] == 0.0 && DropInfo[i][DropGunPosY] == 0.0 && DropInfo[i][DropGunPosZ] == 0.0)
            {
                DropInfo[i][DropGunAmmount][0] = GunID;
                DropInfo[i][DropGunAmmount][1] = GunAmmo;
                DropInfo[i][DropGunPosX] = X;
                DropInfo[i][DropGunPosY] = Y;
                DropInfo[i][DropGunPosZ] = Z;
                DropInfo[i][DropGunVWorld] = world;
                DropInfo[i][DropGunInterior] = interior;
                DropObject[i] = CreateDynamicObject(GetGunObjectID(GunID), X, Y, Z-1, 80.0, 0.0, 0.0, world);
                return 1;
            }
        }
        return 1;
    }
    return 1;
}
stock removePlayerWeapon(playerid, weapon) {
	switch(weapon) {
		case 0, 1: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][0] = 0;
			PlayerInfo[playerid][pGunsAmmo][0] = 0; //Ammo
			givePlayerWeapons(playerid);
	    }
	    case 2, 3, 4, 5, 6, 7, 8, 9: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][1] = 0;
			PlayerInfo[playerid][pGunsAmmo][1] = 0;
			givePlayerWeapons(playerid);
	    }
	    case 22, 23, 24: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][2] = 0;
			PlayerInfo[playerid][pGunsAmmo][2] = 0;
			givePlayerWeapons(playerid);
	    }
	    case 25, 26, 27: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][3] = 0;
			PlayerInfo[playerid][pGunsAmmo][3] = 0;
			givePlayerWeapons(playerid);
	    }
	    case 28, 29, 32: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][4] = 0;
			PlayerInfo[playerid][pGunsAmmo][4] = 0;
			givePlayerWeapons(playerid);
	    }
	    case 30, 31: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][5] = 0;
			PlayerInfo[playerid][pGunsAmmo][5] = 0;
			givePlayerWeapons(playerid);
	    }
	    case 33, 34: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][6] = 0;
			PlayerInfo[playerid][pGunsAmmo][6] = 0;
			givePlayerWeapons(playerid);
	    }
	    case 35, 36, 37, 38: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][7] = 0;
			PlayerInfo[playerid][pGunsAmmo][7] = 0;
			givePlayerWeapons(playerid);
	    }
	    case 16, 17, 18, 39: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][8] = 0;
			PlayerInfo[playerid][pGunsAmmo][8] = 0;
			givePlayerWeapons(playerid);
	    }
	    case 41, 42, 43: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][9] = 0;
			PlayerInfo[playerid][pGunsAmmo][9] = 0;
			givePlayerWeapons(playerid);
	    }
	    case 10, 11, 12, 13, 14, 15: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][10] = 0;
			PlayerInfo[playerid][pGunsAmmo][10] = 0;
			givePlayerWeapons(playerid);
	    }
	    case 44, 45, 46: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][11] = 0;
			PlayerInfo[playerid][pGunsAmmo][11] = 0;
			givePlayerWeapons(playerid);
	    }
	    case 40: {
		    //ResetPlayerWeapons(playerid);
	        PlayerInfo[playerid][pGuns][12] = 0;
			PlayerInfo[playerid][pGunsAmmo][12] = 0;
			givePlayerWeapons(playerid);
	    }
	}
	return 1;
}

forward OnLightFlash(vehicleid);
public OnLightFlash(vehicleid)
{
    new panels, doors, lights, tires;
        GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

        switch(Flash[vehicleid])
        {
        case 0: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);

            case 1: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);

            case 2: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);

            case 3: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);

            case 4: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);

            case 5: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
        }
        if(Flash[vehicleid] >=5) Flash[vehicleid] = 0;
        else Flash[vehicleid] ++;
        return 1;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
        if(newstate)
        {
            FlashTime[vehicleid] = SetTimerEx("OnLightFlash", flashtime, true, "d", vehicleid);
        }

        if(!newstate)
        {
                new panels, doors, lights, tires;

                KillTimer(FlashTime[vehicleid]);

                GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
            UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, tires);
        }
        return 1;
}


public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    if(GetPlayerVehicle(playerid, vehicleid) > -1)
	{
		PlayerVehicleInfo[playerid][GetPlayerVehicle(playerid, vehicleid)][pvPaintJob] = paintjobid;
	}
    return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    if(GetPlayerVehicle(playerid, vehicleid) > -1)
	{
		PlayerVehicleInfo[playerid][GetPlayerVehicle(playerid, vehicleid)][pvColor1] = color1;
		PlayerVehicleInfo[playerid][GetPlayerVehicle(playerid, vehicleid)][pvColor2] = color2;
	}
    return 1;
}

public OnVehicleSpawn(vehicleid)
{
	//new v, S3MP4K[10000];
 	stationidv[vehicleid] = 0;
 	LuX_ReadPosition(vehicleid);
 	/*foreach(Player, i)
  	{
  		v = GetPlayerVehicle(i, vehicleid);
    	if (v != -1)
    	{
 			if(PlayerVehicleInfo[i][v][pvInsurances] > 0)
  			{
				PlayerVehicleInfo[i][v][pvDestroyed] = 1;
				PlayerVehicleInfo[i][v][pvId] = INVALID_PLAYER_VEHICLE_ID;
				SetVehiclePos(vehicleid, 0, 0, 0); // Attempted desync fix
				DestroyVehicle(vehicleid);
				--PlayerCars;
				format(S3MP4K, sizeof(S3MP4K), "VEHICLEINFO: Your %s has been destroyed and will be respawned at Insurance Agency with '/claiminsurance'", GetVehicleName(vehicleid));
				SendClientMessageEx(i, COLOR_WHITE, S3MP4K);
 			}
 			else
			{
 				SendClientMessageEx(i, COLOR_WHITE,"VEHICLEINFO: Your vehicle has been destroyed and not available to respawn on Insurance Agency");
		 		DestroyPlayerVehicle(i, v);
		  	}
		}
	}*/
	if(LockStatus[vehicleid])
	{
		foreach(Player, i)
		{
			if(PlayerInfo[i][pLockCar] == vehicleid)
			{
				PlayerInfo[i][pLockCar] = INVALID_VEHICLE_ID;
			}
		}
	}
	return 1;
}

LockPlayerRent(ownerid, carid, type)
{
	if(PlayerRentInfo[ownerid][prId] == carid && type == 3)
	{
	    LockStatus[carid] = 1;
	    vehicle_lock_doors(carid);
	}
}

UnLockPlayerRent(ownerid, carid, type)
{
	if(PlayerRentInfo[ownerid][prId] == carid && type == 3)
	{
	    LockStatus[carid] = 0;
		vehicle_unlock_doors(carid);
	}
}

LockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[ownerid][v][pvId] == carid && type == 3)
	{
	    LockStatus[carid] = 1;
	    vehicle_lock_doors(carid);
	}
}

UnLockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[ownerid][v][pvId] == carid && type == 3)
	{
	    LockStatus[carid] = 0;
		vehicle_unlock_doors(carid);
	}
}

LockGangVehicle(family, carid, type)
{
	new v = GetGangVehicle(family, carid);
	if(FamilyVehicleInfo[family][v][fvId] == carid && type == 3)
	{
	    LockStatus[carid] = 1;
		vehicle_lock_doors(carid);
	}
}

UnLockGangVehicle(family, carid, type)
{
	new v = GetGangVehicle(family, carid);
	if(FamilyVehicleInfo[family][v][fvId] == carid && type == 3)
	{
	    LockStatus[carid] = 0;
		vehicle_unlock_doors(carid);
	}
}

forward DisableVehicleAlarm(vehicleid);
public DisableVehicleAlarm(vehicleid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
 	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(vehicleid,engine,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
	return 1;
}

forward ReleasePlayer(playerid);
public ReleasePlayer(playerid)
{
	SetPVarInt(playerid, "IsFrozen", 0);
	TogglePlayerControllable(playerid,1);
}
//------------------------------------------------------------------------------
//CAR DEALERSHIP SYSTEM BY ALEX DONUTS
//------------------------------------------------------------------------------
stock CreateCarDealership(Float: enx, Float: eny, Float: enz, Float: radius, price, message[])
{
	new dealershipid = GetFreeCarDealership();
	if(dealershipid == -1) return -1;
	new String[10000];
	CarDealershipInfo[dealershipid][cdEntranceX] = enx;
	CarDealershipInfo[dealershipid][cdEntranceY] = eny;
	CarDealershipInfo[dealershipid][cdEntranceZ] = enz;
	CarDealershipInfo[dealershipid][cdRadius] = radius;
	CarDealershipInfo[dealershipid][cdPrice] = price;
	strmid(CarDealershipInfo[dealershipid][cdMessage], message, 0, strlen(message), 255);
	CarDealershipInfo[dealershipid][cdPickupID] = CreateDynamicPickup(1239, 1, CarDealershipInfo[dealershipid][cdEntranceX], CarDealershipInfo[dealershipid][cdEntranceY], CarDealershipInfo[dealershipid][cdEntranceZ]);
	format(String, sizeof(String), "{00FFFF}[id:%d]\n{00FF00}this dealership for sale\n{FFFFFF}Price: {00FF00}$%s\nuse '/buydealership' for purchase this dealership",dealershipid, FormatMoney(CarDealershipInfo[dealershipid][cdPrice]));
    CarDealershipInfo[dealershipid][cdTextLabel] = CreateDynamic3DTextLabel(String,COLOR_RED,CarDealershipInfo[dealershipid][cdEntranceX], CarDealershipInfo[dealershipid][cdEntranceY], CarDealershipInfo[dealershipid][cdEntranceZ]+0.75,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
    SavecDealership(dealershipid);
    return dealershipid;
}
stock DestroyCarDealership(dealershipid)
{
	new string[30];
	CarDealershipInfo[dealershipid][cdEntranceX] = 0.0;
	CarDealershipInfo[dealershipid][cdEntranceY] = 0.0;
	CarDealershipInfo[dealershipid][cdEntranceZ] = 0.0;
	CarDealershipInfo[dealershipid][cdRadius] = 0.0;
	CarDealershipInfo[dealershipid][cdTill] = 0;
	CarDealershipInfo[dealershipid][cdOwned] = 0;
	CarDealershipInfo[dealershipid][cdPrice] = 0;
	format(string, sizeof(string), "None");
	strmid(CarDealershipInfo[dealershipid][cdOwner], string, 0, strlen(string), 255);
	format(string, sizeof(string), "None");
	strmid(CarDealershipInfo[dealershipid][cdMessage], string, 0, strlen(string), 255);
	DestroyDynamic3DTextLabel(CarDealershipInfo[dealershipid][cdTextLabel]);
	DestroyDynamicPickup(CarDealershipInfo[dealershipid][cdPickupID]);
	CarDealershipInfo[dealershipid][cdPickupID] = 0;
	CarDealershipInfo[dealershipid][cdTextLabel] = Text3D:INVALID_3DTEXT_ID;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][0] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawn][1] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawn][2] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawn][3] = 0.0;
	for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
	{
		if (CarDealershipInfo[dealershipid][cdVehicleModel][v] != 0)
		{
	        DestroyCarDealershipVehicle(dealershipid, v);
		}
	}
	SavecDealership(dealershipid);
}
stock GetFreeCarDealership()
{
    new
		i = 0;
	while (i < MAX_CARDEALERSHIPS && CarDealershipInfo[i][cdEntranceX] != 0.0 && CarDealershipInfo[i][cdEntranceY] != 0.0)
	{
		i++;
	}
	if (i == MAX_CARDEALERSHIPS) return -1;
	return i;

}
stock SetPlayerOwnerOfCD(playerid, dealershipid)
{
	new owner[MAX_PLAYER_NAME];
	CarDealershipInfo[dealershipid][cdOwned] = 1;
	GetPlayerName(playerid, owner, sizeof(owner));
	strmid(CarDealershipInfo[dealershipid][cdOwner], owner, 0, strlen(owner), 255);
	new String[10000];
	format(String, sizeof(String), "[id:%d]\n{FFFF00}%s\n{FFFFFF}Owner: {00FF00}%s",dealershipid, CarDealershipInfo[dealershipid][cdMessage], CarDealershipInfo[dealershipid][cdOwner]);
	UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipid][cdTextLabel], COLOR_TWAQUA, String);
	SavecDealership(dealershipid);
}
stock SellCarDealership(dealershipid)
{
	CarDealershipInfo[dealershipid][cdOwned] = 0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][0] = 0.0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][1] = 0.0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][2] = 0.0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][3] = 0.0;
	strmid(CarDealershipInfo[dealershipid][cdOwner], "No-one", 0, MAX_PLAYER_NAME, 255);
	new String[1024];
	format(String, sizeof(String), "[id:%d]\n{00ff00}this dealership for sale\n{FFFFFF}Price: {00FF00}%s\nuse '/buydealership' for purchase this dealer", dealershipid, FormatMoney(CarDealershipInfo[dealershipid][cdPrice]));
	UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipid][cdTextLabel], COLOR_TWAQUA, String);
	SavecDealership(dealershipid);
}
stock IsPlayerOwnerOfCD(playerid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
	    if(strcmp(CarDealershipInfo[d][cdOwner],owner, true ) == 0)
	    {
			return d;
		}
	}
	return -1;
}
stock IsPlayerOwnerOfCDEx(playerid, dealershipid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	if(strcmp(CarDealershipInfo[dealershipid][cdOwner],owner, true ) == 0)
	{
	    return 1;
	}
	return 0;
}
stock CreateCarDealershipVehicle(dealershipid, modelid, Float: x, Float: y, Float: z, Float: a, price)
{
    new cdvehicleid = GetFreeCarDealershipVehicleId(dealershipid);
    if(cdvehicleid == -1) return -1;
    new String[1024];
    CarDealershipInfo[dealershipid][cdVehicleModel][cdvehicleid] = modelid;
    CarDealershipInfo[dealershipid][cdVehicleCost][cdvehicleid] = price;
    CarDealershipInfo[dealershipid][cdVehicleSpawnX][cdvehicleid] = x;
    CarDealershipInfo[dealershipid][cdVehicleSpawnY][cdvehicleid] = y;
    CarDealershipInfo[dealershipid][cdVehicleSpawnZ][cdvehicleid] = z;
    CarDealershipInfo[dealershipid][cdVehicleSpawnAngle][cdvehicleid] = a;
    new carcreated = CreateVehicle(modelid, x, y, z, a, -1, -1, 6);
    format(String, sizeof(String), "[id:%d]\n{00FFFF}%s\n{FFFF00}$%s\n{FFFF00}Fuel Capacity: {FFFFFF}100.0\n{FFFF00}Fuel Total: {FFFFFF}100.0",cdvehicleid, GetVehicleName(carcreated), FormatMoney(CarDealershipInfo[dealershipid][cdVehicleCost][cdvehicleid]));
    CarDealershipInfo[dealershipid][cdVehicleLabel][cdvehicleid] = CreateDynamic3DTextLabel(String,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,5.0,INVALID_PLAYER_ID,carcreated,1);
	CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid] = carcreated;
	SavecDealership(cdvehicleid);
    return cdvehicleid;
}
stock DestroyCarDealershipVehicle(dealershipid, cdvehicleid)
{
    CarDealershipInfo[dealershipid][cdVehicleModel][cdvehicleid] = 0;
    CarDealershipInfo[dealershipid][cdVehicleCost][cdvehicleid] = 0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnX][cdvehicleid] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnY][cdvehicleid] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnZ][cdvehicleid] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnAngle][cdvehicleid] = 0.0;
    DestroyDynamic3DTextLabel(CarDealershipInfo[dealershipid][cdVehicleLabel][cdvehicleid]);
    DestroyVehicle(CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid]);
    CarDealershipInfo[dealershipid][cdVehicleLabel][cdvehicleid] = Text3D:INVALID_3DTEXT_ID;
    CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid] = 0;
}
stock GetFreeCarDealershipVehicleId(dealershipid)
{
    new
		i = 0;
	while (i < MAX_DEALERSHIPVEHICLES && CarDealershipInfo[dealershipid][cdVehicleModel][i] != 0)
	{
		i++;
	}
	if (i == MAX_DEALERSHIPVEHICLES) return -1;
	return i;

}
stock GetCarDealershipVehicleId(vehicleid)
{
    for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
        for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
        {
            if(CarDealershipInfo[d][cdVehicleId][v] == vehicleid)
            {
                return v;
            }
		}
    }
    return -1;
}
stock GetCarDealershipId(vehicleid)
{
    for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
        for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
        {
            if(CarDealershipInfo[d][cdVehicleId][v] == vehicleid)
            {
                return d;
            }
		}
    }
    return -1;
}
//------------------------------------------------------------------------------
//PLAYER VEHICLE SYSTEM BY ALEX DONUTS
//------------------------------------------------------------------------------
stock CreatePlayerRent(playerid, modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2)
{
	if(PlayerRentInfo[playerid][prId] == 0)
	{
	    PlayerRentInfo[playerid][prModelId] = modelid;
	    PlayerRentInfo[playerid][prPosX] = x;
	    PlayerRentInfo[playerid][prPosY] = y;
	    PlayerRentInfo[playerid][prPosZ] = z;
	    PlayerRentInfo[playerid][prPosAngle] = angle;
	    PlayerRentInfo[playerid][prColor1] = color1;
	    PlayerRentInfo[playerid][prColor2] = color2;
	    PlayerRentInfo[playerid][prPark] = 1;
	    PlayerRentInfo[playerid][prFuel] = 100;
	    PlayerRentInfo[playerid][prLock] = 3;
		new carcreated = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
		PlayerRentInfo[playerid][prId] = carcreated;
		return carcreated;
	}
	return INVALID_PLAYER_VEHICLE_ID;
}

stock CreatePlayerVehicle(playerid, playervehicleid, modelid, Float: x, Float: y, Float: z, Float: angle, color, color2, price)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvId] == INVALID_PLAYER_VEHICLE_ID)
	{
	    PlayerCars++;
		PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = modelid;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = x;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = y;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = z;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = angle;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = color;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = color2;
		PlayerVehicleInfo[playerid][playervehicleid][pvPark] = 1;
		PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = price;
		PlayerVehicleInfo[playerid][playervehicleid][pvFuel] = 100.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvStored] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvDestroyed] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvInsurances] = 3;
		PlayerVehicleInfo[playerid][playervehicleid][pvMesinUpgrade] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvBodyUpgrade] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvLock] = 3;
		PlayerVehicleInfo[playerid][playervehicleid][pvLicense] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvLicenseTime] = 0;
		format(PlayerVehicleInfo[playerid][playervehicleid][pvLicenseExpired], 128, "None");
		format(PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate], 32, "NO_HAVE");
		for(new m = 0; m < MAX_MODS; m++)
	    {
	    	PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = 0;
		}
		for(new vt; vt < MAX_OBJECTS_PER_PLAYER; vt++)
		{
			PlayerVehicleInfo[playerid][playervehicleid][pvToyID][vt] = 0;
			PlayerVehicleInfo[playerid][playervehicleid][pvToyPosX][vt] = 0.00000;
			PlayerVehicleInfo[playerid][playervehicleid][pvToyPosY][vt] = 0.00000;
			PlayerVehicleInfo[playerid][playervehicleid][pvToyPosZ][vt] = 0.00000;
			PlayerVehicleInfo[playerid][playervehicleid][pvToyRotX][vt] = 0.00000;
			PlayerVehicleInfo[playerid][playervehicleid][pvToyRotY][vt] = 0.00000;
			PlayerVehicleInfo[playerid][playervehicleid][pvToyRotZ][vt] = 0.00000;
		}
		new carcreated = CreateVehicle(modelid,x,y,z,angle,color,color2,-1);
		PlayerVehicleInfo[playerid][playervehicleid][pvId] = carcreated;
		SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate]);
		return carcreated;
	}
	return INVALID_PLAYER_VEHICLE_ID;
}

stock DestroyPlayerRent(playerid)
{
	if(PlayerRentInfo[playerid][prModelId])
	{
	    DestroyVehicle(PlayerRentInfo[playerid][prId]);
	    PlayerRentInfo[playerid][prModelId] = 0;
	    PlayerRentInfo[playerid][prColor1] = 126;
	    PlayerRentInfo[playerid][prColor2] = 126;
	    PlayerRentInfo[playerid][prFuel] = 100;
		VehicleFuel[PlayerRentInfo[playerid][prId]] = 100;
	    PlayerRentInfo[playerid][prId] = 0;
		PlayerRentInfo[playerid][prHealth] = 1000.0;
		PlayerRentInfo[playerid][prStatus][0] = 0;
		PlayerRentInfo[playerid][prStatus][1] = 0;
		PlayerRentInfo[playerid][prStatus][2] = 0;
		PlayerRentInfo[playerid][prStatus][3] = 0;
	}
}

stock DestroyPlayerVehicle(playerid, playervehicleid)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvModelId])
	{
	    PlayerCars--;
		DestroyVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = -1;
		PlayerVehicleInfo[playerid][playervehicleid][pvNeon] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = 126;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = 126;
		PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvFuel] = 100.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] = 0;
//		DeleteNeon(playerid);
//		PlayerVehicleInfo[playerid][playervehicleid][pvNeon] = -1;
		VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 100.0;
		strcpy(PlayerVehicleInfo[playerid][playervehicleid][pvAllowPlayer], "No-ne", MAX_PLAYER_NAME);
	    PlayerVehicleInfo[playerid][playervehicleid][pvId] = INVALID_PLAYER_VEHICLE_ID;
	    if(PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] != INVALID_PLAYER_ID)
	    {
	        PlayerInfo[PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	        PlayerInfo[PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	    	PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] = INVALID_PLAYER_ID;
		}
		PlayerVehicleInfo[playerid][playervehicleid][pvStatus][0] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvStatus][1] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvStatus][2] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvStatus][3] = 0;
		DestroyDynamicObject(PlayerVehicleInfo[playerid][playervehicleid][pvNeonObj]);
		DestroyDynamicObject(PlayerVehicleInfo[playerid][playervehicleid][pvNeonObj2]);
		DestroyDynamicObject(PlayerVehicleInfo[playerid][playervehicleid][pvNeonObj3]);
		DestroyDynamicObject(PlayerVehicleInfo[playerid][playervehicleid][pvNeonObj4]);
		for(new vt=0;vt<MAX_OBJECTS_PER_PLAYER;vt++)
		{
		    if(PlayerVehicleInfo[playerid][playervehicleid][pvToyID][vt] != 0)
		    {
		        DestroyDynamicObject(PlayerVehicleInfo[playerid][playervehicleid][pvToy][vt]);
			}
		}
	}
}

stock LoadPlayerRent(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	printf(" Loading %s's Rent Vehicle.", playername);
	if(PlayerRentInfo[playerid][prModelId] != 0)
	{
	    new carcreated = CreateVehicle(PlayerRentInfo[playerid][prModelId], PlayerRentInfo[playerid][prPosX], PlayerRentInfo[playerid][prPosY], PlayerRentInfo[playerid][prPosZ], PlayerRentInfo[playerid][prPosAngle], PlayerRentInfo[playerid][prColor1], PlayerRentInfo[playerid][prColor2], -1);
	    PlayerRentInfo[playerid][prId] = carcreated;
		VehicleFuel[carcreated] = PlayerRentInfo[playerid][prFuel];
		SetVehicleHealth(carcreated, PlayerRentInfo[playerid][prHealth]);
		UpdateVehicleDamageStatus(carcreated, PlayerRentInfo[playerid][prStatus][0], PlayerRentInfo[playerid][prStatus][1], PlayerRentInfo[playerid][prStatus][2], PlayerRentInfo[playerid][prStatus][3]);
		if(PlayerRentInfo[playerid][prLocked] == 1) LockPlayerVehicle(playerid, PlayerRentInfo[playerid][prId], PlayerRentInfo[playerid][prLock]);
	}
}

stock LoadPlayerVehicles(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	printf(" Loading %s's vehicles.", playername);
	for(new v; v < MAX_PLAYERVEHICLES; v++)
    {
        //for(new vt; vt < MAX_OBJECTS_PER_PLAYER; vt++)
    	//{
	        if(PlayerVehicleInfo[playerid][v][pvModelId] >= 400)
	        {
	            if(!PlayerVehicleInfo[playerid][v][pvImpounded] && !PlayerVehicleInfo[playerid][v][pvStored] && !PlayerVehicleInfo[playerid][v][pvDestroyed])
	            {
		            PlayerCars++;
					new carcreated = CreateVehicle(PlayerVehicleInfo[playerid][v][pvModelId], PlayerVehicleInfo[playerid][v][pvPosX], PlayerVehicleInfo[playerid][v][pvPosY], PlayerVehicleInfo[playerid][v][pvPosZ], PlayerVehicleInfo[playerid][v][pvPosAngle],PlayerVehicleInfo[playerid][v][pvColor1], PlayerVehicleInfo[playerid][v][pvColor2], -1);
					PlayerVehicleInfo[playerid][v][pvId] = carcreated;
					VehicleFuel[carcreated] = PlayerVehicleInfo[playerid][v][pvFuel];
					if ( strcmp(PlayerVehicleInfo[playerid][v][pvNumberPlate],"0",true) == 0)
					{
						SetVehicleNumberPlate(carcreated, "NO_HAVE");
					}
					else
					SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][v][pvNumberPlate]);
		            new paintjob = PlayerVehicleInfo[playerid][v][pvPaintJob];
		        	new color1 = PlayerVehicleInfo[playerid][v][pvColor1];
			        new color2 = PlayerVehicleInfo[playerid][v][pvColor2];
		            if(PlayerVehicleInfo[playerid][v][pvPaintJob] != -1)
			        {
		                ChangeVehiclePaintjob(PlayerVehicleInfo[playerid][v][pvId], paintjob);
			        }
			        ChangeVehicleColor(PlayerVehicleInfo[playerid][v][pvId], color1, color2);
			        for(new m = 0; m < MAX_MODS; m++)
			        {
			            if (PlayerVehicleInfo[playerid][v][pvMods][m] >= 1000 && PlayerVehicleInfo[playerid][v][pvMods][m] <= 1193)
			            {
					        if (InvalidModCheck(GetVehicleModel(PlayerVehicleInfo[playerid][v][pvId]),PlayerVehicleInfo[playerid][v][pvMods][m]))
				            {
				    	        AddVehicleComponent(PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvMods][m]);
					        }
					        else
					        {
					            printf("Removing invalid mod %d from model %d of %s", PlayerVehicleInfo[playerid][v][pvMods][m], GetVehicleModel(PlayerVehicleInfo[playerid][v][pvId]), PlayerInfo[playerid][pNormalName]);
					            PlayerVehicleInfo[playerid][v][pvMods][m] = 0;
					        }
						}
			        }
			        for(new vt; vt < MAX_OBJECTS_PER_PLAYER; vt++)
			        {
			            if(PlayerVehicleInfo[playerid][v][pvStored] == 1 || PlayerVehicleInfo[playerid][v][pvDestroyed] == 1 || PlayerVehicleInfo[playerid][v][pvImpounded] == 1)
			   			{
			         		DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvToy][vt]);
			           		DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvNeonObj]);
							DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvNeonObj2]);
							DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvNeonObj3]);
							DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvNeonObj4]);
							//SetVehiclePos(PlayerVehicleInfo[playerid][v][pvId], 0, 0, 0); // Attempted desync fix
							//LinkVehicleToInterior(PlayerVehicleInfo[playerid][v][pvId], 99);
							//SetVehicleVirtualWorld(PlayerVehicleInfo[playerid][v][pvId], 99);
							//DestroyVehicle(PlayerVehicleInfo[playerid][v][pvId]);
							//PlayerVehicleInfo[playerid][v][pvId] = INVALID_PLAYER_VEHICLE_ID;
							//PlayerCars--;
						}
						if(PlayerVehicleInfo[playerid][v][pvToyID][vt] != 0)
		    			{
					            PlayerVehicleInfo[playerid][v][pvToy][vt] = CreateDynamicObject(PlayerVehicleInfo[playerid][v][pvToyID][vt], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt],  -1, -1, -1, 15.0, 0.0);
					 			AttachDynamicObjectToVehicle(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvToyPosX][vt], PlayerVehicleInfo[playerid][v][pvToyPosY][vt], PlayerVehicleInfo[playerid][v][pvToyPosZ][vt], PlayerVehicleInfo[playerid][v][pvToyRotX][vt], PlayerVehicleInfo[playerid][v][pvToyRotY][vt], PlayerVehicleInfo[playerid][v][pvToyRotZ][vt]);
								if(PlayerVehicleInfo[playerid][v][pvToyID][vt] == 18659)
								{
									if(vt == 0)
									{
										SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText1],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID1]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize1], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol1]], 0, 0);
									}
							  		if(vt == 1)
							  		{
										SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText2],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID2]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize2], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol2]], 0, 0);
									}
									if(vt == 2)
							  		{
										SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText3],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID3]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize3], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol3]], 0, 0);
									}
									if(vt == 3)
									{
										SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText4],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID4]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize4], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol4]], 0, 0);
									}
									if(vt == 4)
									{
										SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText5],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID5]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize5], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol5]], 0, 0);
									}
									if(vt == 5)
									{
										SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText6],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID6]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize6], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol6]], 0, 0);
									}
									if(vt == 6)
									{
										SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText7],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID7]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize7], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol7]], 0, 0);
									}
									if(vt == 7)
									{
										SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText8],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID8]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize8], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol8]], 0, 0);
									}
									if(vt == 8)
									{
										SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText9],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID9]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize9], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol9]], 0, 0);
									}
									if(vt == 9)
									{
										SetDynamicObjectMaterialText(PlayerVehicleInfo[playerid][v][pvToy][vt], 0, PlayerVehicleInfo[playerid][v][pvToyText10],OBJECT_MATERIAL_SIZE_256x128, VehicleText[PlayerVehicleInfo[playerid][v][pvToyTextID10]][textname], PlayerVehicleInfo[playerid][v][pvToyTextSize10], 1, VehicleColors[PlayerVehicleInfo[playerid][v][pvToyTextCol10]], 0, 0);
									}
								}
								else
								{
									SetDynamicObjectMaterial(PlayerVehicleInfo[playerid][v][pvToy][vt], PlayerVehicleInfo[playerid][v][pvToyIndex][vt], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTextureID][vt]][textureid], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture1][vt]][texturename1], ObjMats[PlayerVehicleInfo[playerid][v][pvToyTexture2][vt]][texturename2], VehicleColors[PlayerVehicleInfo[playerid][v][pvToyColor][vt]]);
								}
							}
					}
					SetVehicleHealth(PlayerVehicleInfo[playerid][v][pvId],PlayerVehicleInfo[playerid][v][pvHealth]);
					UpdateVehicleDamageStatus(carcreated, PlayerVehicleInfo[playerid][v][pvStatus][0], PlayerVehicleInfo[playerid][v][pvStatus][1], PlayerVehicleInfo[playerid][v][pvStatus][2], PlayerVehicleInfo[playerid][v][pvStatus][3]);
					if(PlayerVehicleInfo[playerid][v][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvLock]);
		        }
			}
   		//}
 	}
 	return 1;
}

stock UnloadPlayerRent(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	printf(" Unloading %s's Rent Vehicle.", playername);
	if(PlayerRentInfo[playerid][prId] != 0)
	{
		new Float:rx, Float:ry, Float:rz, Float:rangle, Float:rhealth;
		GetVehicleHealth(PlayerRentInfo[playerid][prId], rhealth);
		if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
		GetVehiclePos(PlayerRentInfo[playerid][prId], rx, ry, rz);
		GetVehicleZAngle(PlayerRentInfo[playerid][prId], rangle);
		PlayerRentInfo[playerid][prPosX] = rx;
		PlayerRentInfo[playerid][prPosY] = ry;
		PlayerRentInfo[playerid][prPosZ] = rz;
		PlayerRentInfo[playerid][prPosAngle] = rangle;
		PlayerRentInfo[playerid][prHealth] = rhealth;
	    DestroyVehicle(PlayerRentInfo[playerid][prId]);
	    VehicleFuel[PlayerRentInfo[playerid][prId]] = 100;
	    PlayerRentInfo[playerid][prId] = 0;
	    PlayerRentInfo[playerid][prHealth] = 1000.0;
	    PlayerRentInfo[playerid][prStatus][0] = 0;
	    PlayerRentInfo[playerid][prStatus][1] = 0;
	    PlayerRentInfo[playerid][prStatus][2] = 0;
	    PlayerRentInfo[playerid][prStatus][3] = 0;
	}
}

stock UnloadPlayerVehicles(playerid)
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	printf(" Unloading %s's vehicles.", playername);
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        for(new vt = 0; vt < MAX_OBJECTS_PER_PLAYER; vt++)
        {
	        if(PlayerVehicleInfo[playerid][v][pvId] != INVALID_PLAYER_VEHICLE_ID)
	        {
	            PlayerCars--;
	            DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvToy][vt]);
	            DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvNeonObj]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvNeonObj2]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvNeonObj3]);
				DestroyDynamicObject(PlayerVehicleInfo[playerid][v][pvNeonObj4]);
			 	GetVehicleDamageStatus(PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvStatus][0], PlayerVehicleInfo[playerid][v][pvStatus][1], PlayerVehicleInfo[playerid][v][pvStatus][2], PlayerVehicleInfo[playerid][v][pvStatus][3]);
	            if(LockStatus[PlayerVehicleInfo[playerid][v][pvId]] != 0) LockStatus[PlayerVehicleInfo[playerid][v][pvId]] = 0;
	            UpdatePlayerVehicleMods(playerid, v);
				DestroyVehicle(PlayerVehicleInfo[playerid][v][pvId]);
				PlayerVehicleInfo[playerid][v][pvId] = INVALID_PLAYER_VEHICLE_ID;
	   			if(PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] != INVALID_PLAYER_ID)
		    	{
		    	    PlayerInfo[PlayerVehicleInfo[playerid][v][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
		    	    PlayerInfo[PlayerVehicleInfo[playerid][v][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
		    		PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
				}
	        }
		}
    }
}

stock UpdatePlayerRentParkPosition(playerid, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health)
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(PlayerRentInfo[playerid][prId] != 0)
	{
		new Float:oldx, Float:oldy, Float:oldz;
		oldx = PlayerRentInfo[playerid][prPosX];
		oldy = PlayerRentInfo[playerid][prPosY];
		oldz = PlayerRentInfo[playerid][prPosZ];
 		if(oldx == newx && oldy == newy && oldz == newz) return 0;
		PlayerRentInfo[playerid][prPosX] = newx;
		PlayerRentInfo[playerid][prPosY] = newy;
		PlayerRentInfo[playerid][prPosZ] = newz;
		PlayerRentInfo[playerid][prPosAngle] = newangle;
	 	GetVehicleDamageStatus(PlayerRentInfo[playerid][prId], PlayerRentInfo[playerid][prStatus][0], PlayerRentInfo[playerid][prStatus][1], PlayerRentInfo[playerid][prStatus][2], PlayerRentInfo[playerid][prStatus][3]);
		DestroyVehicle(PlayerRentInfo[playerid][prId]);
	 	new carcreated = CreateVehicle(PlayerRentInfo[playerid][prModelId], PlayerRentInfo[playerid][prPosX], PlayerRentInfo[playerid][prPosY], PlayerRentInfo[playerid][prPosZ],
		PlayerRentInfo[playerid][prPosAngle],PlayerRentInfo[playerid][prColor1], PlayerRentInfo[playerid][prColor2], -1);
        PlayerRentInfo[playerid][prId] = carcreated;
        SetVehicleHealth(carcreated, health);
        PlayerRentInfo[playerid][prHealth]=health;
		PlayerRentInfo[playerid][prVehicleRent] = 1;
	 	UpdateVehicleDamageStatus(carcreated, PlayerRentInfo[playerid][prStatus][0], PlayerRentInfo[playerid][prStatus][1], PlayerRentInfo[playerid][prStatus][2], PlayerRentInfo[playerid][prStatus][3]);
	 	if(PlayerRentInfo[playerid][prLocked] == 1) LockPlayerRent(playerid, PlayerRentInfo[playerid][prId], PlayerRentInfo[playerid][prLock]);
         return 1;
	}
	return 0;
}

stock UpdatePlayerVehicleParkPosition(playerid, playervehicleid, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health)
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(PlayerVehicleInfo[playerid][playervehicleid][pvId] != INVALID_PLAYER_VEHICLE_ID)
	{
		 new Float:oldx, Float:oldy, Float:oldz, Float:oldfuel;
		 oldx = PlayerVehicleInfo[playerid][playervehicleid][pvPosX];
		 oldy = PlayerVehicleInfo[playerid][playervehicleid][pvPosY];
		 oldz = PlayerVehicleInfo[playerid][playervehicleid][pvPosZ];
		 if(oldx == newx && oldy == newy && oldz == newz) return 0;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = newx;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = newy;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = newz;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = newangle;
		 GetVehicleDamageStatus(PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvStatus][0], PlayerVehicleInfo[playerid][playervehicleid][pvStatus][1], PlayerVehicleInfo[playerid][playervehicleid][pvStatus][2], PlayerVehicleInfo[playerid][playervehicleid][pvStatus][3]);
		 oldfuel = VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]];
		 UpdatePlayerVehicleMods(playerid, playervehicleid);
		 DestroyVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		 new carcreated = CreateVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvModelId], PlayerVehicleInfo[playerid][playervehicleid][pvPosX], PlayerVehicleInfo[playerid][playervehicleid][pvPosY], PlayerVehicleInfo[playerid][playervehicleid][pvPosZ],
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle],PlayerVehicleInfo[playerid][playervehicleid][pvColor1], PlayerVehicleInfo[playerid][playervehicleid][pvColor2], -1);
         PlayerVehicleInfo[playerid][playervehicleid][pvId] = carcreated;
         VehicleFuel[carcreated] = oldfuel;
         if ( strcmp(PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate],"0",true) == 0 )
		 {
		 	SetVehicleNumberPlate(carcreated, "NO_HAVE");
	     }
		 else
		 SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate]);
         SetVehicleHealth(carcreated, health);
         PlayerVehicleInfo[playerid][playervehicleid][pvHealth]=health;
		 UpdateVehicleDamageStatus(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvStatus][0], PlayerVehicleInfo[playerid][playervehicleid][pvStatus][1], PlayerVehicleInfo[playerid][playervehicleid][pvStatus][2], PlayerVehicleInfo[playerid][playervehicleid][pvStatus][3]);
		 if(PlayerVehicleInfo[playerid][playervehicleid][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvLock]);
         LoadPlayerVehicleMods(playerid, playervehicleid);
         return 1;
	}
	return 0;
}

stock UpdatePlayerVehicleMods(playerid, playervehicleid)
{
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		new carid = PlayerVehicleInfo[playerid][playervehicleid][pvId];
		new exhaust, frontbumper, rearbumper, roof, spoilers, sideskirt1,
			sideskirt2, wheels, hydraulics, nitro, hood, lamps, stereo, ventright, ventleft;
		exhaust = GetVehicleComponentInSlot(carid, CARMODTYPE_EXHAUST);
		frontbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_FRONT_BUMPER);
		rearbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_REAR_BUMPER);
		roof = GetVehicleComponentInSlot(carid, CARMODTYPE_ROOF);
		spoilers = GetVehicleComponentInSlot(carid, CARMODTYPE_SPOILER);
		sideskirt1 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		sideskirt2 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		wheels = GetVehicleComponentInSlot(carid, CARMODTYPE_WHEELS);
		hydraulics = GetVehicleComponentInSlot(carid, CARMODTYPE_HYDRAULICS);
		nitro = GetVehicleComponentInSlot(carid, CARMODTYPE_NITRO);
		hood = GetVehicleComponentInSlot(carid, CARMODTYPE_HOOD);
		lamps = GetVehicleComponentInSlot(carid, CARMODTYPE_LAMPS);
		stereo = GetVehicleComponentInSlot(carid, CARMODTYPE_STEREO);
		ventright = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_RIGHT);
		ventleft = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_LEFT);
		if(spoilers >= 1000)    PlayerVehicleInfo[playerid][playervehicleid][pvMods][0] = spoilers;
		if(hood >= 1000)        PlayerVehicleInfo[playerid][playervehicleid][pvMods][1] = hood;
		if(roof >= 1000)        PlayerVehicleInfo[playerid][playervehicleid][pvMods][2] = roof;
		if(sideskirt1 >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][3] = sideskirt1;
		if(lamps >= 1000)       PlayerVehicleInfo[playerid][playervehicleid][pvMods][4] = lamps;
		if(nitro >= 1000)       PlayerVehicleInfo[playerid][playervehicleid][pvMods][5] = nitro;
		if(exhaust >= 1000)     PlayerVehicleInfo[playerid][playervehicleid][pvMods][6] = exhaust;
		if(wheels >= 1000)      PlayerVehicleInfo[playerid][playervehicleid][pvMods][7] = wheels;
		if(stereo >= 1000)      PlayerVehicleInfo[playerid][playervehicleid][pvMods][8] = stereo;
		if(hydraulics >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][9] = hydraulics;
		if(frontbumper >= 1000) PlayerVehicleInfo[playerid][playervehicleid][pvMods][10] = frontbumper;
		if(rearbumper >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][11] = rearbumper;
		if(ventright >= 1000)   PlayerVehicleInfo[playerid][playervehicleid][pvMods][12] = ventright;
		if(ventleft >= 1000)    PlayerVehicleInfo[playerid][playervehicleid][pvMods][13] = ventleft;
		if(sideskirt2 >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][14] = sideskirt2;
}

stock LoadPlayerVehicleMods(playerid, playervehicleid)
{
		new paintjob = PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob];
		new color1 = PlayerVehicleInfo[playerid][playervehicleid][pvColor1];
		new color2 = PlayerVehicleInfo[playerid][playervehicleid][pvColor2];
		if(PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] != -1)
		{
			 ChangeVehiclePaintjob(PlayerVehicleInfo[playerid][playervehicleid][pvId], paintjob);
			 ChangeVehicleColor(PlayerVehicleInfo[playerid][playervehicleid][pvId], color1, color2);
		}
		for(new m = 0; m < MAX_MODS; m++)
		{
		    if (PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] >= 1000  && PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] <= 1193)
		    {
				if (InvalidModCheck(GetVehicleModel(PlayerVehicleInfo[playerid][playervehicleid][pvId]),PlayerVehicleInfo[playerid][playervehicleid][pvMods][m]))
				{
					AddVehicleComponent(PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvMods][m]);
				}
				else
				{
				    printf("Removing invalid mod %d from %d of %s", PlayerVehicleInfo[playerid][playervehicleid][pvMods][m], GetVehicleModel(PlayerVehicleInfo[playerid][playervehicleid][pvId]), PlayerInfo[playerid][pNormalName]);
				    PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = 0;
				}
			}
		}
}

stock GetPlayerFreeVehicleId(playerid) {
	for(new i; i < MAX_PLAYERVEHICLES; ++i) {
		if(PlayerVehicleInfo[playerid][i][pvModelId] == 0) return i;
	}
	return -1;
}

GetPlayerVehicleCount(playerid)
{
	new cars = 0;
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
	{
	    if(PlayerVehicleInfo[playerid][i][pvModelId])
	    {
	        if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID) {
				if(CheckPlayerVehicleForDesync(playerid, PlayerVehicleInfo[playerid][i][pvId])) return 0;
				cars++;
			}
	    }
	}
	return cars;
}

CheckPlayerVehicleForDesync(playerid, vehicleid)
{
	if(GetVehicleModel(vehicleid) < 400 || GetVehicleModel(vehicleid) > 611)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "Error: Vehicle Desync Detected, Resyncing your vehicles...");
	    UnloadPlayerVehicles(playerid);
	    LoadPlayerVehicles(playerid);
	    SendClientMessageEx(playerid, COLOR_WHITE, "Your Vehicles have been Resynced with the server.");

	    return 1;
	}
	return 0;
}

stock GetPlayerVehicle(playerid, vehicleid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	if(!GetVehicleModel(vehicleid)) return -1;
    for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}


//------------------------------------------------------------------------------
//----------------------DYNAMIC GANG VEHICLE SYSTEM-----------------------------

stock CreateGangVehicle(f, fv, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, price)
{
	if(FamilyVehicleInfo[f][fv][fvId] == INVALID_VEHICLE_ID)
	{
		FamilyVehicleInfo[f][fv][fvModelId] = modelid;
		FamilyVehicleInfo[f][fv][fvSpawnx] = x;
		FamilyVehicleInfo[f][fv][fvSpawny] = y;
		FamilyVehicleInfo[f][fv][fvSpawnz] = z;
		FamilyVehicleInfo[f][fv][fvSpawna] = angle;
		FamilyVehicleInfo[f][fv][fvColor1] = color1;
		FamilyVehicleInfo[f][fv][fvColor2] = color2;
		FamilyVehicleInfo[f][fv][fvPrice] = price;
		FamilyVehicleInfo[f][fv][fvFuel] = 100.0;
		new carcreated = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
		FamilyVehicleInfo[f][fv][fvId] = carcreated;
		FamilyVehicleInfo[f][fv][fvLock] = 3;
		printf("Created the gang vehicle for family %d | vehicleid #%d | familyvehicleslot #%d.", f, FamilyVehicleInfo[f][fv][fvId], fv);
		return carcreated;
	}
	return INVALID_VEHICLE_ID;
}

stock DestroyGangVehicle(f, fv)
{
	if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
		FamilyVehicleInfo[f][fv][fvModelId] = 0;
		FamilyVehicleInfo[f][fv][fvSpawnx] = 0.0;
		FamilyVehicleInfo[f][fv][fvSpawny] = 0.0;
		FamilyVehicleInfo[f][fv][fvSpawnz] = 0.0;
		FamilyVehicleInfo[f][fv][fvSpawna] = 0.0;
		FamilyVehicleInfo[f][fv][fvPaintJob] = -1;
		FamilyVehicleInfo[f][fv][fvColor1] = 126;
		FamilyVehicleInfo[f][fv][fvColor2] = 126;
		FamilyVehicleInfo[f][fv][fvPrice] = 0;
		FamilyVehicleInfo[f][fv][fvImpounded] = 0;
		FamilyVehicleInfo[f][fv][fvFuel] = 100.0;
		VehicleFuel[FamilyVehicleInfo[f][fv][fvId]] = 100;
	    printf("Family %d vehicle %d(vehicleid %d) has been destroyed.", f,fv,FamilyVehicleInfo[f][fv][fvId]);
	    FamilyVehicleInfo[f][fv][fvId] = INVALID_VEHICLE_ID;
	}
}

stock LoadGangVehicles(f)
{
	for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
    {
        if(FamilyVehicleInfo[f][fv][fvModelId] != 0)
        {
			new carcreated = CreateVehicle(FamilyVehicleInfo[f][fv][fvModelId], FamilyVehicleInfo[f][fv][fvSpawnx], FamilyVehicleInfo[f][fv][fvSpawny], FamilyVehicleInfo[f][fv][fvSpawnz], FamilyVehicleInfo[f][fv][fvSpawna],FamilyVehicleInfo[f][fv][fvColor1], FamilyVehicleInfo[f][fv][fvColor2], -1);
			FamilyVehicleInfo[f][fv][fvId] = carcreated;
			VehicleFuel[carcreated] = FamilyVehicleInfo[f][fv][fvFuel];
			if(VehicleFuel[carcreated] == 0) VehicleFuel[carcreated] = 100;
			if(FamilyVehicleInfo[f][fv][fvLocked] == 1) LockGangVehicle(f, FamilyVehicleInfo[f][fv][fvId], FamilyVehicleInfo[f][fv][fvLock]);
        }
    }
}

stock UnloadGangVehicles(f)
{
	printf(" Unloading %s's vehicles.", FamilyInfo[f][FamilyName]);
	for(new fv = 0; fv < MAX_PLAYERVEHICLES; fv++)
    {
        if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID)
        {
            if(LockStatus[FamilyVehicleInfo[f][fv][fvId]] != 0) LockStatus[FamilyVehicleInfo[f][fv][fvId]] = 0;
			DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
			VehicleFuel[FamilyVehicleInfo[f][fv][fvId]] = 100.0;
			FamilyVehicleInfo[f][fv][fvId] = INVALID_VEHICLE_ID;
        }
    }
}

stock UpdateGangVehicleParkPosition(f, fv, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health, temp = 1)
{
	if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID)
	{
	    if(temp == 0)
		{
	 		new Float:oldx, Float:oldy, Float:oldz;
			oldx = FamilyVehicleInfo[f][fv][fvSpawnx];
			oldy = FamilyVehicleInfo[f][fv][fvSpawny];
			oldz = FamilyVehicleInfo[f][fv][fvSpawnz];
			if(oldx == newx && oldy == newy && oldz == newz) return 0;
			FamilyVehicleInfo[f][fv][fvSpawnx] = newx;
			FamilyVehicleInfo[f][fv][fvSpawny] = newy;
			FamilyVehicleInfo[f][fv][fvSpawnz] = newz;
			FamilyVehicleInfo[f][fv][fvSpawna] = newangle;
			DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
			new carcreated = CreateVehicle(FamilyVehicleInfo[f][fv][fvModelId], FamilyVehicleInfo[f][fv][fvSpawnx], FamilyVehicleInfo[f][fv][fvSpawny], FamilyVehicleInfo[f][fv][fvSpawnz],
			FamilyVehicleInfo[f][fv][fvSpawna],FamilyVehicleInfo[f][fv][fvColor1], FamilyVehicleInfo[f][fv][fvColor2], -1);
	        FamilyVehicleInfo[f][fv][fvId] = carcreated;
	        SetVehicleHealth(carcreated, health);
	        SaveFamiliesHQ();
        	return 1;
		}
		else
		{
		    new Float:oldx, Float:oldy, Float:oldz;
			oldx = FamilyVehicleInfo[f][fv][fvSpawnxtmp];
			oldy = FamilyVehicleInfo[f][fv][fvSpawnytmp];
			oldz = FamilyVehicleInfo[f][fv][fvSpawnztmp];
			if(oldx == newx && oldy == newy && oldz == newz) return 0;
			FamilyVehicleInfo[f][fv][fvSpawnxtmp] = newx;
			FamilyVehicleInfo[f][fv][fvSpawnytmp] = newy;
			FamilyVehicleInfo[f][fv][fvSpawnztmp] = newz;
			FamilyVehicleInfo[f][fv][fvSpawnatmp] = newangle;
			DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
			new carcreated = CreateVehicle(FamilyVehicleInfo[f][fv][fvModelId], FamilyVehicleInfo[f][fv][fvSpawnxtmp], FamilyVehicleInfo[f][fv][fvSpawnytmp], FamilyVehicleInfo[f][fv][fvSpawnztmp],
			FamilyVehicleInfo[f][fv][fvSpawnatmp],FamilyVehicleInfo[f][fv][fvColor1], FamilyVehicleInfo[f][fv][fvColor2], -1);
	        FamilyVehicleInfo[f][fv][fvId] = carcreated;
	        SetVehicleHealth(carcreated, health);
	        SaveFamiliesHQ();
        	return 1;
		}
	}
	return 0;
}

stock GetGangFreeVehicleId(f)
{
    new
		i = 0;
	while (i < MAX_GANG_VEHICLES && FamilyVehicleInfo[f][i][fvId] != INVALID_VEHICLE_ID)
	{
		i++;
	}
	if (i == MAX_GANG_VEHICLES) return -1;
	return i;

}

stock GetGangVehicleCount(f)
{
    new
		i = 0,
		cars = 0;
	while (i < MAX_GANG_VEHICLES && FamilyVehicleInfo[f][i][fvId] != INVALID_VEHICLE_ID)
	{
	    cars++;
		i++;
	}
	return cars;

}

stock SaveRent()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_RENT)
	{
		format(string, 256, "%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%f|%f|%f|%f\r\n",
		RentInfo[idx][rPosX],
		RentInfo[idx][rPosY],
		RentInfo[idx][rPosZ],
		RentInfo[idx][rVehicle1],
		RentInfo[idx][rVehicle2],
		RentInfo[idx][rCost1],
		RentInfo[idx][rCost2],
		RentInfo[idx][rCost3],
		RentInfo[idx][rCost4],
		RentInfo[idx][rCost5],
		RentInfo[idx][rCost6],
		RentInfo[idx][rSpawnX],
		RentInfo[idx][rSpawnY],
		RentInfo[idx][rSpawnZ],
		RentInfo[idx][rAngle]);
		if(idx == 1)
		{
		    file = fopen("rent.cfg", io_write);
		}
		else
		{
		    file = fopen("rent.cfg", io_append);
		}
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Rental Berhasil Disimpan");
	return 1;
}

stock LoadRent()
{
	new rinfo[15][128];
	new string[10000];
	new File:file = fopen("rent.cfg", io_read);
	if(file)
	{
	    new idx = 1;
	    while(idx < MAX_RENT)
	    {
	        fread(file, string);
	        split(string, rinfo, '|');
	        RentInfo[idx][rPosX] = floatstr(rinfo[0]);
	        RentInfo[idx][rPosY] = floatstr(rinfo[1]);
	        RentInfo[idx][rPosZ] = floatstr(rinfo[2]);
	        RentInfo[idx][rVehicle1] = strval(rinfo[3]);
	        RentInfo[idx][rVehicle2] = strval(rinfo[4]);
	        RentInfo[idx][rCost1] = strval(rinfo[5]);
	        RentInfo[idx][rCost2] = strval(rinfo[6]);
	        RentInfo[idx][rCost3] = strval(rinfo[7]);
	        RentInfo[idx][rCost4] = strval(rinfo[8]);
	        RentInfo[idx][rCost5] = strval(rinfo[9]);
	        RentInfo[idx][rCost6] = strval(rinfo[10]);
	        RentInfo[idx][rSpawnX] = floatstr(rinfo[11]);
	        RentInfo[idx][rSpawnY] = floatstr(rinfo[12]);
	        RentInfo[idx][rSpawnZ] = floatstr(rinfo[13]);
	        RentInfo[idx][rAngle] = floatstr(rinfo[14]);
	        if(RentInfo[idx][rPosX])
	        {
		        RentInfo[idx][rPickupID] = CreateDynamicPickup(1239, 23, RentInfo[idx][rPosX], RentInfo[idx][rPosY], RentInfo[idx][rPosZ], 0, 0, -1);
				format(string, 128, "rental id: [%d]\n'/rentveh' untuk menyewa kendaraan\n'/unrentveh' untuk mengembalikan kendaraan", idx);
				rent[idx] = CreateDynamic3DTextLabel(string, COLOR_WHITE, RentInfo[idx][rPosX], RentInfo[idx][rPosY], RentInfo[idx][rPosZ], 10);
			}
			idx++;
		}
	}
	print("Rent Berhasil Dimuat");
	return 1;
}
stock SaveATMs()
{
    for(new i = 0; i < MAX_ATM; i++)
    {
		SaveATM(i);
    }
	return 1;
}

stock SaveATM(i)
{
    new FileName[128];
    format(FileName, sizeof(FileName), "ARWIN14ATM/ATM_%d.ini", i);
    if(dini_Exists(FileName))
    {
        dini_IntSet(FileName, "Fee", ATMInfo[i][ATMFee]);
        dini_IntSet(FileName, "ObjectID", ATMInfo[i][ATMObjectID]);
        dini_FloatSet(FileName, "X", ATMInfo[i][ATMX]);
        dini_FloatSet(FileName, "Y", ATMInfo[i][ATMY]);
        dini_FloatSet(FileName, "Z", ATMInfo[i][ATMZ]);
        dini_FloatSet(FileName, "Angle", ATMInfo[i][ATMAngle]);
  		printf( "[system] ATM %d saved.", i);
    }
	return 1;
}

stock LoadATM()
{
	new FileName[128], string[256];
    for(new i = 0; i < MAX_ATM; i++)
    {
        format(FileName, sizeof(FileName), "ARWIN14ATM/ATM_%d.ini", i);
        if(dini_Exists(FileName))
        {
            ATMInfo[i][ATMFee] = dini_Int(FileName, "Fee" );
            ATMInfo[i][ATMObjectID] = dini_Int(FileName, "ObjectID" );
            ATMInfo[i][ATMAngle] = dini_Float(FileName, "Angle" );
            ATMInfo[i][ATMX] = dini_Float(FileName, "X" );
            ATMInfo[i][ATMY] = dini_Float(FileName, "Y" );
            ATMInfo[i][ATMZ] = dini_Float(FileName, "Z" );
            ATMInfo[i][ATMObjectID] = CreateDynamicObject(19324, ATMInfo[i][ATMX], ATMInfo[i][ATMY], ATMInfo[i][ATMZ]-0.5, 0, 0, ATMInfo[i][ATMAngle],-1,-1,-1,250);
			printf( "[system] ATM %d spawned.", i);
            SpawnedATM++;
            format(string, sizeof(string), "[id:%d]\n{FFFFFF}use command '{FF0000}/atm{FFFFFF}' to acces ATM",i);
			atm[i] = CreateStreamed3DTextLabel(string, COLOR_WHITE, ATMInfo[i][ATMX], ATMInfo[i][ATMY], ATMInfo[i][ATMZ], 10.0, 0);
			CreateDynamicCP(ATMInfo[i][ATMX], ATMInfo[i][ATMY], ATMInfo[i][ATMZ], 2,  0, -1, -1, 5.0);
	    }
    }
	return 1;
}

stock SaveBusinesses()
{
    for(new i = 0; i < MAX_BUSINESSES; i++)
    {
		SaveBusiness(i);
    }
	return 1;
}

stock SaveBusiness(i)
{
    new FileName[ 128 ];
    format( FileName, sizeof( FileName ), "Businesses/Business_%d.ini", i );
    if(dini_Exists(FileName))
    {
   	    dini_IntSet(FileName, "Owned", BizzInfo[i][bOwned] );
  		dini_Set(FileName, "Owner", BizzInfo[i][bOwner] );
    	dini_Set(FileName, "Name", BizzInfo[i][bMessage] );
     	dini_IntSet(FileName, "PickupID", BizzInfo[i][bPickupID] );
     	dini_IntSet(FileName, "VirtualWorld", BizzInfo[i][bVirWorld] );
		dini_IntSet(FileName, "Level", BizzInfo[i][bLevelNeeded] );
  		dini_IntSet(FileName, "Price", BizzInfo[i][bBuyPrice] );
     	dini_IntSet(FileName, "BusinessBank", BizzInfo[i][bTill] );
      	dini_IntSet(FileName, "Locked", BizzInfo[i][bLocked] );
       	dini_IntSet(FileName, "Products", BizzInfo[i][bProducts] );
        dini_IntSet(FileName, "BusinessType", BizzInfo[i][bType] );
		dini_IntSet(FileName, "InteriorID", BizzInfo[i][bInteriorID] );
  		dini_IntSet(FileName, "ExteriorID", BizzInfo[i][bExteriorID] );
		dini_FloatSet(FileName, "InteriorX", BizzInfo[i][bExitX] );
  		dini_FloatSet(FileName, "InteriorY", BizzInfo[i][bExitY] );
    	dini_FloatSet(FileName, "InteriorZ", BizzInfo[i][bExitZ] );
		dini_FloatSet(FileName, "EntranceX", BizzInfo[i][bEntranceX] );
  		dini_FloatSet(FileName, "EntranceY", BizzInfo[i][bEntranceY] );
    	dini_FloatSet(FileName, "EntranceZ", BizzInfo[i][bEntranceZ] );
        dini_IntSet(FileName, "ProductPrice1", BizzInfo[i][bProductPrice][0] );
        dini_IntSet(FileName, "ProductPrice2", BizzInfo[i][bProductPrice][1] );
        dini_IntSet(FileName, "ProductPrice3", BizzInfo[i][bProductPrice][2] );
        dini_IntSet(FileName, "ProductPrice4", BizzInfo[i][bProductPrice][3] );
        dini_IntSet(FileName, "ProductPrice5", BizzInfo[i][bProductPrice][4] );
        dini_IntSet(FileName, "ProductPrice6", BizzInfo[i][bProductPrice][5] );
        dini_IntSet(FileName, "ProductPrice7", BizzInfo[i][bProductPrice][6] );
        dini_IntSet(FileName, "ProductPrice8", BizzInfo[i][bProductPrice][7] );
        dini_IntSet(FileName, "ProductPrice9", BizzInfo[i][bProductPrice][8] );
        dini_IntSet(FileName, "ProductPrice10", BizzInfo[i][bProductPrice][9] );
        dini_IntSet(FileName, "ProductPrice11", BizzInfo[i][bProductPrice][10] );
        dini_Set(FileName, "ProductName1", BizzInfo[i][bProductName1] );
        dini_Set(FileName, "ProductName2", BizzInfo[i][bProductName2] );
        dini_Set(FileName, "ProductName3", BizzInfo[i][bProductName3] );
        dini_Set(FileName, "ProductName4", BizzInfo[i][bProductName4] );
        dini_Set(FileName, "ProductName5", BizzInfo[i][bProductName5] );
        dini_Set(FileName, "ProductName6", BizzInfo[i][bProductName6] );
        dini_Set(FileName, "ProductName7", BizzInfo[i][bProductName7] );
        dini_Set(FileName, "ProductName8", BizzInfo[i][bProductName8] );
        dini_Set(FileName, "ProductName9", BizzInfo[i][bProductName9] );
        dini_Set(FileName, "ProductName10", BizzInfo[i][bProductName10] );
        dini_Set(FileName, "ProductName11", BizzInfo[i][bProductName11] );
        dini_IntSet(FileName, "Segel", BizzInfo[i][bSegel]);
        dini_Set(FileName, "SegelReason", BizzInfo[i][bSegelReason]);
        dini_Set(FileName, "Alamat", BizzInfo[i][bAlamat]);
        dini_FloatSet(FileName, "PetrolX", BizzInfo[i][bPetrolX] );
  		dini_FloatSet(FileName, "PetrolY", BizzInfo[i][bPetrolY] );
    	dini_FloatSet(FileName, "PetrolZ", BizzInfo[i][bPetrolZ] );
    	dini_IntSet(FileName, "FuelStock", BizzInfo[i][bFuelStock] );
    	printf("[System] Business %d Saved !", i);
    }
	return 1;
}

stock LoadBizz()
{
	new FileName[128], string[1000];
    for(new i = 1; i < MAX_BUSINESSES; i++)
    {
        format(FileName, sizeof(FileName), "Businesses/Business_%d.ini", i);
        if(dini_Exists(FileName))
        {
            BizzInfo[i][bOwned] = dini_Int(FileName, "Owned" );
            BizzInfo[i][bOwner] = dini_Get( FileName, "Owner" );
            BizzInfo[i][bMessage] = dini_Get( FileName, "Name" );
            BizzInfo[i][bPickupID] = dini_Int(FileName, "PickupID" );
            BizzInfo[i][bVirWorld] = dini_Int(FileName, "VirtualWorld" );
            BizzInfo[i][bLevelNeeded] = dini_Int(FileName, "Level" );
            BizzInfo[i][bBuyPrice] = dini_Int(FileName, "Price" );
            BizzInfo[i][bTill] = dini_Int(FileName, "BusinessBank" );
            BizzInfo[i][bLocked] = dini_Int(FileName, "Locked" );
            BizzInfo[i][bProducts] = dini_Int(FileName, "Products" );
            BizzInfo[i][bType] = dini_Int(FileName, "BusinessType" );
            BizzInfo[i][bInteriorID] = dini_Int(FileName, "InteriorID" );
            BizzInfo[i][bExteriorID] = dini_Int(FileName, "ExteriorID" );
            BizzInfo[i][bExitX] = dini_Float(FileName, "InteriorX" );
            BizzInfo[i][bExitY] = dini_Float(FileName, "InteriorY" );
            BizzInfo[i][bExitZ] = dini_Float(FileName, "InteriorZ" );
            BizzInfo[i][bEntranceX] = dini_Float(FileName, "EntranceX" );
            BizzInfo[i][bEntranceY] = dini_Float(FileName, "EntranceY" );
            BizzInfo[i][bEntranceZ] = dini_Float(FileName, "EntranceZ" );
            BizzInfo[i][bProductPrice][0] = dini_Int(FileName, "ProductPrice1" );
            BizzInfo[i][bProductPrice][1] = dini_Int(FileName, "ProductPrice2" );
            BizzInfo[i][bProductPrice][2] = dini_Int(FileName, "ProductPrice3" );
            BizzInfo[i][bProductPrice][3] = dini_Int(FileName, "ProductPrice4" );
            BizzInfo[i][bProductPrice][4] = dini_Int(FileName, "ProductPrice5" );
            BizzInfo[i][bProductPrice][5] = dini_Int(FileName, "ProductPrice6" );
            BizzInfo[i][bProductPrice][6] = dini_Int(FileName, "ProductPrice7" );
            BizzInfo[i][bProductPrice][7] = dini_Int(FileName, "ProductPrice8" );
            BizzInfo[i][bProductPrice][8] = dini_Int(FileName, "ProductPrice9" );
            BizzInfo[i][bProductPrice][9] = dini_Int(FileName, "ProductPrice10" );
            BizzInfo[i][bProductPrice][10] = dini_Int(FileName, "ProductPrice11" );
            BizzInfo[i][bProductName1] = dini_Get(FileName, "ProductName1" );
            BizzInfo[i][bProductName2] = dini_Get(FileName, "ProductName2" );
            BizzInfo[i][bProductName3] = dini_Get(FileName, "ProductName3" );
            BizzInfo[i][bProductName4] = dini_Get(FileName, "ProductName4" );
            BizzInfo[i][bProductName5] = dini_Get(FileName, "ProductName5" );
            BizzInfo[i][bProductName6] = dini_Get(FileName, "ProductName6" );
            BizzInfo[i][bProductName7] = dini_Get(FileName, "ProductName7" );
            BizzInfo[i][bProductName8] = dini_Get(FileName, "ProductName8" );
            BizzInfo[i][bProductName9] = dini_Get(FileName, "ProductName9" );
            BizzInfo[i][bProductName10] = dini_Get(FileName, "ProductName10" );
            BizzInfo[i][bProductName11] = dini_Get(FileName, "ProductName11" );
            BizzInfo[i][bSegel] = dini_Int(FileName, "Segel");
            BizzInfo[i][bSegelReason] = dini_Get(FileName, "SegelReason");
            BizzInfo[i][bAlamat] = dini_Get(FileName, "Alamat");
            BizzInfo[i][bPetrolX] = dini_Float(FileName, "PetrolX" );
            BizzInfo[i][bPetrolY] = dini_Float(FileName, "PetrolY" );
            BizzInfo[i][bPetrolZ] = dini_Float(FileName, "PetrolZ" );
            BizzInfo[i][bFuelStock] = dini_Int(FileName, "FuelStock" );
            printf( "[system] Business %d spawned.", i);
            SpawnedBusinesses++;
            if(BizzInfo[i][bEntranceX])
            {
	           	BizzInfo[i][bPickupID] = CreateDynamicPickup(19133, 23, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 0, -1, -1, 150.0 );
	           	CreateDynamicCP(BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 2,  0, -1, -1, 5.0);
	           	CreateDynamicCP(BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ], 2,  0, -1, -1, 5.0);
				if(BizzInfo[i][bOwned] == 1)
				{
					if(BizzInfo[i][bSegel] == 1)
					{
						format(string, sizeof(string), "{00FFFF}[id:%d]\n{00FF00}%s\n{FF0000}This businesses sealed by authority\n{FFFFFF}Owner: {FFFF00}%s",i,BizzInfo[i][bMessage], BizzInfo[i][bOwner]);
						business1[i] = CreateStreamed3DTextLabel(string, COLOR_WHITE, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]+0.75,2.0, 0, 0);
					}
					else if(BizzInfo[i][bSegel] == 0)
					{
						format(string, sizeof(string), "{00FFFF}[id:%d]\n{00FF00}%s{FFFFFF}\nPemilik: {FFFF00}%s",i, BizzInfo[i][bMessage], BizzInfo[i][bOwner]);
						business1[i] = CreateStreamed3DTextLabel(string, COLOR_WHITE, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]+0.75,2.0, 0, 0);
					}
				}
				else
				{
					format(string, sizeof(string), "{00FFFF}[id:%d]\n{00FF00}this businesses for sale!\n{FFFFFF}Type: {00FFFF}%s\n{FFFFFF}Price: {00FFFF}%s\n{00FFFF}use '/buybiz' for buy this businesess",i, RBT(i),FormatMoney(BizzInfo[i][bBuyPrice]));
					business2[i] = CreateStreamed3DTextLabel(string, COLOR_WHITE, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]+0.75,2.0, 0, 0);
				}
			}
	    }
    }
	return 1;
}
stock SaveWorkshop()
{
    for(new i = 0; i < MAX_WORKSHOP; i++)
    {
		SaveWS(i);
    }
	return 1;
}
stock SaveWS(i)
{
    new FileName[128];
    format( FileName, sizeof( FileName ), "Businesses/Workshop_%d.ini", i );
    if(dini_Exists(FileName))
    {
        dini_IntSet(FileName, "Owned", WsInfo[i][wsOwned]);
     	dini_Set(FileName, "Owner", WsInfo[i][wsOwner]);
		dini_Set(FileName, "Name", WsInfo[i][wsName]);
		dini_FloatSet(FileName, "PosX", WsInfo[i][wsPosX]);
		dini_FloatSet(FileName, "PosY", WsInfo[i][wsPosY]);
		dini_FloatSet(FileName, "PosZ", WsInfo[i][wsPosZ]);
		dini_IntSet(FileName, "Status", WsInfo[i][wsStatus]);
		dini_IntSet(FileName, "Price", WsInfo[i][wsPrice]);
		dini_IntSet(FileName, "SafeMoney", WsInfo[i][wsSafeMoney]);
		dini_IntSet(FileName, "Component", WsInfo[i][wsComponent]);
		dini_FloatSet(FileName, "PapanX",WsInfo[i][wsPapanX]);
		dini_FloatSet(FileName, "PapanY",WsInfo[i][wsPapanY]);
		dini_FloatSet(FileName, "PapanZ",WsInfo[i][wsPapanZ]);
		dini_FloatSet(FileName, "PapanRotX",WsInfo[i][wsPapanRotX]);
		dini_FloatSet(FileName, "PapanRotY",WsInfo[i][wsPapanRotY]);
		dini_FloatSet(FileName, "PapanRotZ",WsInfo[i][wsPapanRotZ]);
		dini_IntSet(FileName, "PapanMT",WsInfo[i][wsPapanMT]);
		dini_IntSet(FileName, "GateID",WsInfo[i][wsGateID]);
		dini_FloatSet(FileName, "GateOX", WsInfo[i][wsGateOX]);
		dini_FloatSet(FileName, "GateOY", WsInfo[i][wsGateOY]);
		dini_FloatSet(FileName, "GateOZ", WsInfo[i][wsGateOZ]);
		dini_FloatSet(FileName, "GateCX", WsInfo[i][wsGateCX]);
		dini_FloatSet(FileName, "GateCY", WsInfo[i][wsGateCY]);
		dini_FloatSet(FileName, "GateCZ", WsInfo[i][wsGateCZ]);
		dini_FloatSet(FileName, "GateORX", WsInfo[i][wsGateORX]);
		dini_FloatSet(FileName, "GateORY", WsInfo[i][wsGateORY]);
		dini_FloatSet(FileName, "GateORZ", WsInfo[i][wsGateORZ]);
		dini_FloatSet(FileName, "GateCRX", WsInfo[i][wsGateCRX]);
		dini_FloatSet(FileName, "GateCRY", WsInfo[i][wsGateCRY]);
		dini_FloatSet(FileName, "GateCRZ", WsInfo[i][wsGateCRZ]);
		dini_IntSet(FileName, "GateID2",WsInfo[i][wsGateID2]);
		dini_FloatSet(FileName, "GateOX2", WsInfo[i][wsGateOX2]);
		dini_FloatSet(FileName, "GateOY2", WsInfo[i][wsGateOY2]);
		dini_FloatSet(FileName, "GateOZ2", WsInfo[i][wsGateOZ2]);
		dini_FloatSet(FileName, "GateCX2", WsInfo[i][wsGateCX2]);
		dini_FloatSet(FileName, "GateCY2", WsInfo[i][wsGateCY2]);
		dini_FloatSet(FileName, "GateCZ2", WsInfo[i][wsGateCZ2]);
		dini_FloatSet(FileName, "GateORX2", WsInfo[i][wsGateORX2]);
		dini_FloatSet(FileName, "GateORY2", WsInfo[i][wsGateORY2]);
		dini_FloatSet(FileName, "GateORZ2", WsInfo[i][wsGateORZ2]);
		dini_FloatSet(FileName, "GateCRX2", WsInfo[i][wsGateCRX2]);
		dini_FloatSet(FileName, "GateCRY2", WsInfo[i][wsGateCRY2]);
		dini_FloatSet(FileName, "GateCRZ2", WsInfo[i][wsGateCRZ2]);
		dini_Set(FileName, "PapanText", WsInfo[i][wsPapanText]);
		ReplaceText(WsInfo[i][wsPapanText], "(e)", "\n");
    	printf("[System] Workshop %d Saved !", i);
    }
	return 1;
}

stock LoadWorkshop()
{
	new FileName[128], string[255];
    for(new i = 1; i < MAX_WORKSHOP; i++)
    {
        format(FileName, sizeof(FileName), "Businesses/Workshop_%d.ini", i);
        if(dini_Exists(FileName))
        {
            WsInfo[i][wsOwned] = dini_Int(FileName, "Owned" );
            WsInfo[i][wsOwner] = dini_Get( FileName, "Owner" );
			WsInfo[i][wsName] = dini_Get( FileName, "Name" );
			WsInfo[i][wsPosX] = dini_Float(FileName, "PosX" );
			WsInfo[i][wsPosY] = dini_Float(FileName, "PosY" );
			WsInfo[i][wsPosZ] = dini_Float(FileName, "PosZ" );
			WsInfo[i][wsStatus] = dini_Int(FileName, "Status" );
			WsInfo[i][wsPrice] = dini_Int(FileName, "Price" );
			WsInfo[i][wsSafeMoney] = dini_Int(FileName, "SafeMoney" );
			WsInfo[i][wsComponent] = dini_Int(FileName, "Component" );
			WsInfo[i][wsPapanX] = dini_Float(FileName, "PapanX" );
			WsInfo[i][wsPapanY] = dini_Float(FileName, "PapanY" );
			WsInfo[i][wsPapanZ] = dini_Float(FileName, "PapanZ" );
			WsInfo[i][wsPapanRotX] = dini_Float(FileName, "PapanRotX" );
			WsInfo[i][wsPapanRotY] = dini_Float(FileName, "PapanRotY" );
			WsInfo[i][wsPapanRotZ] = dini_Float(FileName, "PapanRotZ" );
			WsInfo[i][wsPapanMT] = dini_Int(FileName, "PapanMT" );
			WsInfo[i][wsGateID] = dini_Int(FileName, "GateID");
			WsInfo[i][wsGateOX] = dini_Float(FileName, "GateOX" );
			WsInfo[i][wsGateOY] = dini_Float(FileName, "GateOY" );
			WsInfo[i][wsGateOZ] = dini_Float(FileName, "GateOZ" );
			WsInfo[i][wsGateCX] = dini_Float(FileName, "GateCX" );
			WsInfo[i][wsGateCY] = dini_Float(FileName, "GateCY" );
			WsInfo[i][wsGateCZ] = dini_Float(FileName, "GateCZ" );
			WsInfo[i][wsGateORX] = dini_Float(FileName, "GateORX" );
			WsInfo[i][wsGateORY] = dini_Float(FileName, "GateORY" );
			WsInfo[i][wsGateORZ] = dini_Float(FileName, "GateORZ" );
			WsInfo[i][wsGateCRX] = dini_Float(FileName, "GateCRX" );
			WsInfo[i][wsGateCRY] = dini_Float(FileName, "GateCRY" );
			WsInfo[i][wsGateCRZ] = dini_Float(FileName, "GateCRZ" );
			WsInfo[i][wsGateID2] = dini_Int(FileName, "GateID2");
			WsInfo[i][wsGateOX2] = dini_Float(FileName, "GateOX2" );
			WsInfo[i][wsGateOY2] = dini_Float(FileName, "GateOY2" );
			WsInfo[i][wsGateOZ2] = dini_Float(FileName, "GateOZ2" );
			WsInfo[i][wsGateCX2] = dini_Float(FileName, "GateCX2" );
			WsInfo[i][wsGateCY2] = dini_Float(FileName, "GateCY2" );
			WsInfo[i][wsGateCZ2] = dini_Float(FileName, "GateCZ2" );
			WsInfo[i][wsGateORX2] = dini_Float(FileName, "GateORX2" );
			WsInfo[i][wsGateORY2] = dini_Float(FileName, "GateORY2" );
			WsInfo[i][wsGateORZ2] = dini_Float(FileName, "GateORZ2" );
			WsInfo[i][wsGateCRX2] = dini_Float(FileName, "GateCRX2" );
			WsInfo[i][wsGateCRY2] = dini_Float(FileName, "GateCRY2" );
			WsInfo[i][wsGateCRZ2] = dini_Float(FileName, "GateCRZ2" );
			WsInfo[i][wsPapanText] = dini_Get( FileName, "PapanText" );
			ReplaceText(WsInfo[i][wsPapanText], "(e)", "\n");
			printf( "[system] Workshop %d spawned.", i);
   			SpawnedWS++;
            if(WsInfo[i][wsPosX])
			{
				if(WsInfo[i][wsOwned] == 1)
				{
					WsInfo[i][wsGate] = CreateDynamicObject(10149, WsInfo[i][wsGateCX], WsInfo[i][wsGateCY], WsInfo[i][wsGateCZ], WsInfo[i][wsGateCRX], WsInfo[i][wsGateCRY], WsInfo[i][wsGateCRZ]);
					WsInfo[i][wsGate2] = CreateDynamicObject(10149, WsInfo[i][wsGateCX2], WsInfo[i][wsGateCY2], WsInfo[i][wsGateCZ2], WsInfo[i][wsGateCRX2], WsInfo[i][wsGateCRY2], WsInfo[i][wsGateCRZ2]);
					WsInfo[i][wsPapan] = CreateDynamicObject(18244, WsInfo[i][wsPapanX], WsInfo[i][wsPapanY], WsInfo[i][wsPapanZ], WsInfo[i][wsPapanRotX], WsInfo[i][wsPapanRotY], WsInfo[i][wsPapanRotZ]);
     				format(string, sizeof(string), "%s", ColouredText(WsInfo[i][wsPapanText]));
     				WsInfo[i][wsPapanText] = SetDynamicObjectMaterialText(WsInfo[i][wsPapan], 0, string, 120, "Arial", 24, 0, 0xFFFFFFFF, -16777216, 1);
				}
				else
				{
				    WsInfo[i][wsPickup] = CreateDynamicPickup(1239, 1, WsInfo[i][wsPosX], WsInfo[i][wsPosY], WsInfo[i][wsPosZ], 0);
					format(string, sizeof(string), "[id:%d]\nthis workshop is for sale\nPrice : $%s\nuse '/buyworkshop' for purchase this workshop", WsInfo[i][wsOwner], FormatMoney(WsInfo[i][wsPrice]), i);
					WsInfo[i][wsText] = CreateStreamed3DTextLabel(string, COLOR_WHITE, WsInfo[i][wsPosX], WsInfo[i][wsPosY], WsInfo[i][wsPosZ], 5, 0, 0);
				}
			}
	    }
    }
	return 1;
}

stock GetGangVehicle(f, vehicleid)
{
	if(f == 255) return -1;
	if(vehicleid == -1) return -1;
    for(new v = 0; v < MAX_GANG_VEHICLES; v++)
    {
        if(FamilyVehicleInfo[f][v][fvId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}
//Lumberjack Job
public TimeDrov(playerid)
{
	if(PlayerInfo[playerid][pJob] == 8 || PlayerInfo[playerid][pJob2] == 8)
	{
		SetPlayerAttachedObject(playerid, 1, 1463, 1,0.20,0.36,0.0,0.0,90.0, 0.0, 0.4, 0.3, 0.6);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
		ClearAnimations(playerid);
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    GameTextForPlayer(playerid, "~w~Tekan ~g~Y~w~ untuk memasukan kayu ke pickup kamu.", 3000, 3);
		SetPVarInt(playerid, "HoldingWood", 1);
	}
	return 1;
}
//Lumberjack Job
forward LoadLumber(playerid);
public LoadLumber(playerid)
{
	new string[1024];
	if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);//
	if(IsPlayerAttachedObjectSlotUsed(playerid,3)) RemovePlayerAttachedObject(playerid,3);//
	RemovePlayerAttachedObject(playerid, 1);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	DeletePVar(playerid, "HoldingWood");
	GameTextForPlayer(playerid, "~w~Wood ~g~Loaded!", 3000, 3);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pLumber] ++;
    format(string, sizeof(string), "Lumber Loaded %d/5.", PlayerInfo[playerid][pLumber]);
    SendClientMessage(playerid, COLOR_WHITE, string);
    DeletePVar(playerid, "LoadingWood");
	if(PlayerInfo[playerid][pLumber] == 5)
	{
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid,-1446.9056,-1544.0217,101.7685,5.0);
		SendClientMessage(playerid,COLOR_GREEN,"Pickup telah terisi penuh, segerahlah antar Kayu ke Checkpoint");
	}
	return 1;
}
forward UnloadLumber(playerid);
public UnloadLumber(playerid)
{
	new price = 5000;
	new string[1024];
	cuttrands = random(sizeof(randomcutt));
	kgcutt[playerid] += randomcutt[cuttrands][0];
	TogglePlayerControllable(playerid,1);
	if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
	if(IsPlayerAttachedObjectSlotUsed(playerid,2)) RemovePlayerAttachedObject(playerid,2);
	if(IsPlayerAttachedObjectSlotUsed(playerid,3)) RemovePlayerAttachedObject(playerid,3);
	GameTextForPlayer(playerid, "~w~Lumber unloaded!", 3000, 3);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	format(string, sizeof(string), "You earned $%s for cutting %d hardwood",FormatMoney(price),kgcutt[playerid]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	PlayerInfo[playerid][pPayCheck] += price;
	kgcutt[playerid] = 0;
	PlayerInfo[playerid][pLumber] = 0;
    PlayerInfo[playerid][pLumberTime] = 600;
	cutt += kgcutt[playerid];
	cutt ++;
	format(string, sizeof(string), "[Wood Storage]\nWood Available: %d\n'/missions' untuk mengangkut barang", cutt);
	UpdateDynamic3DTextLabelText(Wood3DText, COLOR_WHITE, string);
	SaveStock();
	return 1;
}
public antiCheat() {
	foreach(Player, i){
  		if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && JetPack[i] == 0 && PlayerInfo[i][pAdmin] < 1){
		        scriptBan(i, "Hacking (Jetpack)");
		    }
		    if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerSpeed(i, 0) >= 220 && PlayerInfo[i][pAdmin] < 1)
            {
                if(! IsAHelicopter(GetPlayerVehicleID(i)))
                {
                    if(PlayerInfo[i][pHackWarnings] == 0)
                    {
                        if(GetVehicleModel(GetPlayerVehicleID(i)) != 522 && GetVehicleModel(GetPlayerVehicleID(i)) != 521 && GetVehicleModel(GetPlayerVehicleID(i)) != 411)
                        {
                            if(GetPlayerPing(i) < 200)
                            {
			                    new string[1024];
			                    format(string, sizeof(string), "WARNING: %s may possibly be speed-hacking: they have a %d ping and are driving at %d mph.", PlayerInfo[i][pNormalName], GetPlayerPing(i), GetPlayerSpeed(i, 0));
			                    ABroadCast(0xFFFFFFAA, string, 1);

								PlayerInfo[i][pHackWarnTime] = 1;
			                    PlayerInfo[i][pHackWarnings]++;

								if(PlayerInfo[i][pHackWarnings] >= MAX_WEAPON_HACK_WARNINGS)
								{
							        format(string, sizeof(string), "Speed Hacking.");
							        scriptBan(i, string);
							    }
							}
	                    }
                    }
                }
            }
            /*if(PlayerInfo[i][pAdmin] < 1 && PlayerInfo[i][pAdminDuty] < 1)
            {
                new Float: Health, Float:Armor, String[1000];
                GetPlayerHealth(i, Health);
                GetPlayerArmour(i, Armor);
                if(Health < PlayerInfo[i][pHealth] || Armor < PlayerInfo[i][pArmor])
                {
                    format(String, sizeof(String), "BotCmd: %s has been kicked by Bot", GetName(i));
                    SendClientMessageToAll(COLOR_LIGHTRED, String);
                    format(String, sizeof(String), "Reason: Health Hacking.");
                    SendClientMessageToAll(COLOR_LIGHTRED, String);
       				FixedKick(i);
				}
			}*/
			if(PlayerInfo[i][pConnectTime] < 2 || PlayerInfo[i][pWRestricted] > 0) {
				if(GetPlayerWeapon(i) >= 1 && GetPlayerState(i) == 1) {
					if(PlayerInfo[i][pGuns][0] != 1 && GetPlayerWeapon(i) == 1) ExecuterHackerAction(i);

					if(PlayerInfo[i][pGuns][1] != 2 && GetPlayerWeapon(i) == 2) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][1] != 3 && GetPlayerWeapon(i) == 3) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][1] != 4 && GetPlayerWeapon(i) == 4) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][1] != 5 && GetPlayerWeapon(i) == 5) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][1] != 6 && GetPlayerWeapon(i) == 6) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][1] != 7 && GetPlayerWeapon(i) == 7) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][1] != 8 && GetPlayerWeapon(i) == 8) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][1] != 9 && GetPlayerWeapon(i) == 9) ExecuterHackerAction(i);

					if(PlayerInfo[i][pGuns][2] != 22 && GetPlayerWeapon(i) == 22) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][2] != 23 && GetPlayerWeapon(i) == 23) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][2] != 24 && GetPlayerWeapon(i) == 24) ExecuterHackerAction(i);

					if(PlayerInfo[i][pGuns][3] != 25 && GetPlayerWeapon(i) == 25) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][3] != 26 && GetPlayerWeapon(i) == 26) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][3] != 27 && GetPlayerWeapon(i) == 27) ExecuterHackerAction(i);

					if(PlayerInfo[i][pGuns][4] != 28 && GetPlayerWeapon(i) == 28) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][4] != 29 && GetPlayerWeapon(i) == 29) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][4] != 32 && GetPlayerWeapon(i) == 32) ExecuterHackerAction(i);

					if(PlayerInfo[i][pGuns][5] != 30 && GetPlayerWeapon(i) == 30) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][5] != 31 && GetPlayerWeapon(i) == 31) ExecuterHackerAction(i);

					if(PlayerInfo[i][pGuns][6] != 33 && GetPlayerWeapon(i) == 33) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][6] != 34 && GetPlayerWeapon(i) == 34) ExecuterHackerAction(i);

					if(PlayerInfo[i][pGuns][7] != 35 && GetPlayerWeapon(i) == 35) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][7] != 36 && GetPlayerWeapon(i) == 36) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][7] != 37 && GetPlayerWeapon(i) == 37) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][7] != 38 && GetPlayerWeapon(i) == 38) ExecuterHackerAction(i);

					if(PlayerInfo[i][pGuns][8] != 16 && GetPlayerWeapon(i) == 16) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][8] != 17 && GetPlayerWeapon(i) == 17) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][8] != 18 && GetPlayerWeapon(i) == 18) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][8] != 39 && GetPlayerWeapon(i) == 39) ExecuterHackerAction(i);

					if(PlayerInfo[i][pGuns][9] != 41 && GetPlayerWeapon(i) == 41) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][9] != 42 && GetPlayerWeapon(i) == 42) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][9] != 43 && GetPlayerWeapon(i) == 43) ExecuterHackerAction(i);

					if(PlayerInfo[i][pGuns][10] != 10 && GetPlayerWeapon(i) == 10) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][10] != 11 && GetPlayerWeapon(i) == 11) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][10] != 12 && GetPlayerWeapon(i) == 12) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][10] != 13 && GetPlayerWeapon(i) == 13) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][10] != 14 && GetPlayerWeapon(i) == 14) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][10] != 15 && GetPlayerWeapon(i) == 15) ExecuterHackerAction(i);

					if(PlayerInfo[i][pGuns][11] != 44 && GetPlayerWeapon(i) == 44) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][11] != 45 && GetPlayerWeapon(i) == 45) ExecuterHackerAction(i);
					if(PlayerInfo[i][pGuns][11] != 46 && GetPlayerWeapon(i) == 46) ExecuterHackerAction(i);
				}

					new
						wep = GetPlayerWeapon(i); // so we don't call getplayerweapon a million times!1

					if(PlayerInfo[i][pGuns][GetWeaponSlot(wep)] != wep) ExecuterHackerAction(i);
					}
				}
	return 1;
}

IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

ReturnUser(text[]) {

	new
		strPos,
		returnID = 0,
		bool: isnum = true;

	while(text[strPos]) {
		if(isnum) {
			if ('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
			else isnum = false;
		}
		strPos++;
	}
	if (isnum) {
		if(IsPlayerConnected(returnID)) return returnID;
	}
	else {

		new
			sz_playerName[MAX_PLAYER_NAME];

		foreach(Player, i) {
			GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
			if(!strcmp(sz_playerName, text, true, strPos)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}

/* Delay Timers */

// Timer Name: SkinDelay(playerid)
Delay:SkinDelay[1000, i](playerid)
{
	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	return 1;
}

// Timer Name: NOPCheck(playerid)
Delay:NOPCheck[5000, i](playerid)
{
	if(GetPlayerState(playerid) != 2) NOPTrigger[playerid] = 0;
	new newcar = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pAdmin] > 1 || GetPlayerState(playerid) != 2) return 1;
    else if(IsACopCar(newcar) && PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pLeader] != 1) ExecuteNOPAction(playerid);
    else if(IsAPlane(newcar) && (PlayerInfo[playerid][pFlyLic] != 1)) ExecuteNOPAction(playerid);
    return 1;
}

// Timer Name: SyncUp()
// TickRate: 1 Minute.
Timer:SyncUp[60000]()
{
	SyncTime();
	SyncMinTime();
	DollahScoreUpdate();
	new hour,minuite,second;
	gettime(hour,minuite,second);
	FixHour(hour);
	hour = shifthour;

	foreach(Player, i)
	{
	    SendBlankAudioTick(i);
	}
}

// Timer Name: playerTabbedLoop()
// TickRate: 1 secs.
Timer:playerTabbedLoop[1000]()
{
	foreach(Player, x)
	{
	    playerConnectedS[x]++;
	    playerTabbedTime[x]++;
	    if(playerSeconds[x] < gettime()-1 && playerTabbed[x] != 1 && playerConnectedS[x] >= 5 && 1 <= GetPlayerState(x) <= 3)
	    {
	        playerTabbed[x] = 1;
	    }
	}
}

// Timer Name: MoneyUpdate()
// TickRate: 1 secs.
Timer:MoneyUpdate[1000]()
{
	new hour,minuite,second;
	gettime(hour,minuite,second);
	FixHour(hour);
	hour = shifthour;
	foreach(Player, i)
	{
		SyncPlayerTime(i);
		if(gPlayerLogged{i})
		{
		    if(GetPlayerPing(i) > MAX_PING)
		    {
		        if(playerTabbed[i] != 1)
		        {
					new
						string[89 + MAX_PLAYER_NAME];

		            format(string, sizeof(string), "BotCmd: %s telah dikick, alasan: Ping melebihi batas (%d).", PlayerInfo[i][pNormalName], GetPlayerPing(i));
					SendClientMessageToAll(COLOR_LIGHTRED, string);
		        	FixedKick(i);
				}
		    }

      		if(PlayerInfo[i][pTempVIP] >= 1)
			{
				PlayerInfo[i][pTempVIP]--;
    		}

      		if(PlayerInfo[i][pTempVIP] <= 0 && PlayerInfo[i][pBuddyInvited] == 1)
   			{
				PlayerInfo[i][pTempVIP] = 0;
				PlayerInfo[i][pBuddyInvited] = 0;
    			PlayerInfo[i][pDonateRank] = 0;
				SendClientMessageEx(i, COLOR_LIGHTBLUE, "Your temporary VIP subscription has expired.");
				SetPlayerToTeamColor(i);
     		}
     		if (PlayerInfo[i][pDonateRank] > 0 && PlayerInfo[i][pVIPLeft] < 1)
			{
				PlayerInfo[i][pDonateRank] = 0;
				PlayerInfo[i][pVIPJoinDate] = 0;
				PlayerInfo[i][pVIPLeft] = 0;
				format(PlayerInfo[i][pVIPExpDate],32,"null");
				SendClientMessageEx(i, COLOR_VIP, "VIP anda telah habis hari ini, untuk menjadi VIP lagi, silahkan berdonasi :)");
			}
			if(PlayerInfo[i][pTriageTime] != 0)
	  		{
				PlayerInfo[i][pTriageTime]--;
    		}
			if(PlayerInfo[i][pTicketTime] != 0)
			{
				PlayerInfo[i][pTicketTime]--;
			}
			if(PlayerInfo[i][pServiceTime] != 0)
			{
			    PlayerInfo[i][pServiceTime]--;
			}
			if(GetPlayerCash(i) != GetPlayerMoney(i))
			{
				ResetMoneyBar(i);
				UpdateMoneyBar(i,GetPVarInt(i, "Cash"));
			}
			if(GetPVarInt(i, "gpsonoff") == 1)
   			{
    			new zone[28];
				GetPlayer2DZone(i, zone, MAX_ZONE_NAME);
				TextDrawSetString(GPS[i], zone);
			}
		}
	}
}

// Timer Name: SpecUpdate()
// TickRate: 3 secs.
Timer:SpecUpdate[3000]()
{
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pAdmin] >= 1)
	    {
		    if(Spectating[i] >= 1)
		    {
				if(Spectate[i] < 553)
				{
					new targetid = Spectate[ i ];
					if( !IsPlayerConnected( targetid ) )
					{
    					SendClientMessageEx( i, COLOR_WHITE, "The player you were spectating has left the server." );
			    		GettingSpectated[Spectate[i]] = 999;
			    		Spectating[i] = 0;
						Spectate[i] = 999;
						SetPVarInt(i, "SpecState", -1);
						SetPVarInt(i, "SpecOff", 1 );
						TogglePlayerSpectating( i, false );
						SetCameraBehindPlayer(i);
					}
				}
				if(Spectate[i] == 554)
				{
					TogglePlayerControllable(i, 1);
					AC_BS_SetPlayerInterior(i,Unspec[i][sPint]);
					PlayerInfo[i][pInt] = Unspec[i][sPint];
					PlayerInfo[i][pLocal] = Unspec[i][sLocal];
					AC_BS_SetPlayerPos(i, Unspec[i][Coords][0], Unspec[i][Coords][1], Unspec[i][Coords][2]);
					Spectate[i] = 999;
				}
				if(Spectate[i] == 555)
				{
					Spectate[i] = 554;
				}
			}
		}
	}
}

// Timer Name: CarCheck()
// TickRate: 30 secs.
Timer:CarCheck[30000]()
{
	foreach(Player, j)
	{
		new Float:health;
		if(STDPlayer[j]==1)
		{
			GetPlayerHealth(j, health);
			AC_BS_SetPlayerHealth(j, health - 5.0);
			PlayerInfo[j][pHealth] -= 5.0;
			SendClientMessageEx(j, COLOR_LIGHTBLUE, "* Lost 4 health due to STD.");
		}
		else if(STDPlayer[j]==2)
		{
			GetPlayerHealth(j, health);
			AC_BS_SetPlayerHealth(j, health - 12.0);
			PlayerInfo[j][pHealth] -= 12.0;
			SendClientMessageEx(j, COLOR_LIGHTBLUE, "* Lost 8 health due to STD.");
		}
		else if(STDPlayer[j]==3)
		{
			GetPlayerHealth(j, health);
			AC_BS_SetPlayerHealth(j, health - 20.0);
			PlayerInfo[j][pHealth] -= 20.0;
			SendClientMessageEx(j, COLOR_LIGHTBLUE, "* Lost 12 health due to STD.");
		}
		if(GetPlayerCash(j) < 0)
		{
			if(MoneyMessage[j]==0)
			{
				new string[10000];
				format(string, sizeof(string), "Anda mempunyai hutang, anda harus membayar utang %s. Jika tidak, Anda akan ditangkap...", FormatMoney(GetPlayerCash(j)));
				SendClientMessageEx(j, COLOR_LIGHTRED, string);
				MoneyMessage[j] = 1;
			}
		}
		else
		{
			MoneyMessage[j] = 0;
		}
	}
}
// Timer Name: EMSUpdate()
// TickRate: 5 secs.
Timer:EMSUpdate[5000]()
{
	foreach(Player, i)
	{
	    if(GetPVarType(i, "Injured"))
	    {
	        if(GetPVarInt(i, "EMSAttempt") != 0)
			{

				new Float:health;
 				GetPlayerHealth(i,health);
				SetPlayerHealth(i, health-1);
				PlayerInfo[i][pHealth] -= 1;
				if(GetPVarInt(i, "EMSAttempt") == -1)
				{
        			/*if(!IsPlayerInRangeOfPoint(i, 10.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
	        			SendClientMessageEx(i, COLOR_WHITE, "Anda telah dikirim ke rumah sakit.");
	        			KillEMSQueue(i);
	    			}*/
	    			for(new j=0; j<11; j++) GetPlayerWeaponData(i, j, PlayerInfo[i][pGuns][j], PlayerInfo[i][pGunsAmmo][j]);
					GameTextForPlayer(i, "~r~Injured~n~~w~please wait before~n~~r~'/accept death'", 5000, 3);
					TogglePlayerControllable(i, 0);
					ApplyAnimation(i,"PED","KO_skid_front",4.1,0,1,1,1,0);
					ShowBloodScreen(i, 50);
  					SetPlayerDrunkLevel(i, 50000);
				}
				if(GetPVarInt(i, "EMSAttempt") == 1)
				{
	    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
	        			SendClientMessageEx(i, COLOR_WHITE, "Pingsan, Anda jatuh pingsan, Anda segera dikirim ke rumah sakit.");
	        			KillEMSQueue(i);
	    			}
					GameTextForPlayer(i, "~r~Injured~n~~w~Menunggu EMS Tiba...", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 2)
				{
	    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
	        			SendClientMessageEx(i, COLOR_WHITE, "Anda jatuh pingsan, Anda segera dikirim ke rumah sakit.");
	        			KillEMSQueue(i);
	    			}
	    			GameTextForPlayer(i, "~g~Rescued~n~~w~Menunggu Pengobatan...", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 3)
				{
	    			if(IsPlayerInAnyVehicle(i))
	    			{
	        			new ambmodel = GetPlayerVehicleID(i);
	        			if(IsAnAmbulance(ambmodel))
	        			{
	    					GameTextForPlayer(i, "~g~Rescued~n~~w~Menunggu EMS untuk dibawa ke Rumah Sakit...", 5000, 3);
						}
						else
						{
		    				SendClientMessageEx(i, COLOR_WHITE, "Anda jatuh pingsan karena tidak ada dukungan hidup, Anda segera dikirim ke rumah sakit.");
	        				KillEMSQueue(i);
						}
					}
					else
					{
		    			SendClientMessageEx(i, COLOR_WHITE, "Anda jatuh dari kendaraan, Anda segera dikirim ke rumah sakit.");
	        			KillEMSQueue(i);
					}
				}
	        }
	    }
	}
}

// Timer Name: ServerHeartbeat()
// TickRate: 1 secs.
Timer:ServerHeartbeat[1000]()
{
    new string[10000];
    for(new x = 1; x < MAX_PLANT; x++)
	{
	    if(PlantInfo[x][plantTime] > 0)
	    {
	        PlantInfo[x][plantTime] --;
		}
	}
	foreach(Player, i)
	{
			if(PlayerInfo[i][pJudgeJailType] != 0 && PlayerInfo[i][pJudgeJailTime] > 0 && !PlayerInfo[i][pBeingSentenced]) PlayerInfo[i][pJudgeJailTime]--;
			if(PlayerInfo[i][pJudgeJailTime] <= 0 && PlayerInfo[i][pJudgeJailType] != 0) PlayerInfo[i][pJudgeJailType] = 0;
			if(PlayerInfo[i][pJailed] > 0)
			{
				if(PlayerInfo[i][pJailTime] > 0)
				{
				    if(playerTabbed[i] != 1)
				    {
						PlayerInfo[i][pJailTime]--;
					}
						if(PlayerInfo[i][pJailTime]-60 < 1 ){
							format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~ ~r~Jailed!~n~~w~%d seconds left", PlayerInfo[i][pJailTime]);
						}
						else{
		                    format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~ ~r~Jailed!~n~~w~%d minutes %d seconds left", PlayerInfo[i][pJailTime]/60, PlayerInfo[i][pJailTime]-(60*(PlayerInfo[i][pJailTime]/60)));
						}
				}
				GameTextForPlayer(i, string, 2000, 3); // Always specify the game text time longer than the intended time; it always fades out before it should, causing an annoying flash.
				if(PlayerInfo[i][pJailTime] <= 0)
				{
					PlayerInfo[i][pJailTime] = 0;
					if(PlayerInfo[i][pJailed] == 1 || PlayerInfo[i][pJailed] == 1000)
					{
						AC_BS_SetPlayerInterior(i, 10);
						PlayerInfo[i][pInt] = 10;
						AC_BS_SetPlayerPos(i,241.42, 117.40, 1003.22);
						AC_BS_SetPlayerVirtualWorld(i, 0);
						PlayerInfo[i][pVW] = 0;
						SetPlayerFacingAngle(i,270);
					}
			 		else if(PlayerInfo[i][pJailed] == 4)
					{
				 		AC_BS_SetPlayerInterior(i, 10);
						PlayerInfo[i][pInt] = 10;
						AC_BS_SetPlayerVirtualWorld(i, 133337);
						PlayerInfo[i][pVW] = 133337;
						SetPlayerFacingAngle(i,176.45);
						AC_BS_SetPlayerPos(i, 1860.1261,-1705.4139,5202.5859);
					}
					PlayerInfo[i][pJailed] = 0;
					PhoneOnline[i] = 0;
					GameTextForPlayer(i, "~g~Freedom~n~~w~Jadilah warga yang baik", 1000, 1);
					if(gTeam[i] == 4) { gTeam[i] = 3; }
					ClearCrime(i);
					SetPlayerToTeamColor(i);
				}
			}
			if(CommandSpamTimes[i] != 0)
			{
				CommandSpamTimes[i]--;
			}
			if(TextSpamTimes[i] != 0)
			{
				TextSpamTimes[i]--;
			}
			if(UsedFind[i] >= 1)
			{
				UsedFind[i] += 1;
				if(UsedFind[i] >= 120)
				{
					UsedFind[i] = 0;
				}
			}
			if (PlayerInfo[i][pMechTime] > 0)
			{
				if (PlayerInfo[i][pMechTime] <= 180)
				{
					PlayerInfo[i][pMechTime]--;
				}
			}
			if (PlayerInfo[i][pDrugsTime] > 0)
			{
				if (PlayerInfo[i][pDrugsTime] <= 60)
				{
					PlayerInfo[i][pDrugsTime]--;
				}
			}
			if(PlayerInfo[i][pRMuted] > 1)
			{
			    if(PlayerInfo[i][pRMutedTime] > 0)
			    {
			        PlayerInfo[i][pRMutedTime]--;
			    }
			    else
			    {
			        PlayerInfo[i][pRMuted] = 0;
			    }
			}
			if(MedicTime[i] > 0)
			{
				if(MedicTime[i] == 3)
				{
					AC_BS_SetPlayerInterior(i, 5);
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(i, X,Y,Z);
					SetPlayerCameraPos(i, X + 3, Y, Z);
					SetPlayerCameraLookAt(i,X,Y,Z);
				}
				MedicTime[i] ++;
				if(MedicTime[i] >= NeedMedicTime[i])
				{
					new cut = deathcost; //PlayerInfo[playerid][pLevel]*deathcost;
					GivePlayerCash(i, -cut);
					format(string, sizeof(string), "DOC: Anda Terselamatkan %s, semoga hari anda menyenangkan.", FormatMoney(cut));
					SendClientMessageEx(i, TEAM_CYAN_COLOR, string);
					TogglePlayerControllable(i, 1);
					SetPVarInt(i, "MedicBill", 0);
					MedicTime[i] = 0;
					NeedMedicTime[i] = 0;
					SpawnPlayer(i);
				}
			}
			if(PlayerTazeTime[i] >= 1)
			{
				PlayerTazeTime[i] += 1;
				if(PlayerTazeTime[i] == 15) { PlayerTazeTime[i] = 0; }
			}
			if(PlayerDrunk[i] >= 5)
			{
				PlayerDrunkTime[i] += 1;
				if(PlayerDrunkTime[i] == 8)
				{
					PlayerDrunkTime[i] = 0;
					new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
						if(GetPlayerState(i) == 2)
						{
							SetVehicleZAngle(GetPlayerVehicleID(i), angle + 25);
						}
					}
					else
					{
						ApplyAnimation(i,"PED", "WALK_DRUNK",4.0,0,1,0,0,0);
					}
				}
			}
			if(PlayerStoned[i] >= 3)
			{
				PlayerStoned[i] += 1;
				SetPlayerHigh(i, 1);
				if(PlayerStoned[i] == 50)
				{
					PlayerStoned[i] = 0;
					SetPlayerHigh(i, 0);
					SendClientMessageEx(i, COLOR_GRAD1, " You are no longer stoned!");
				}
			}
			if(FindTime[i] >= 1)
			{
                if(FindTime[i] == FindTimePoints[i]) { FindTime[i] = 0; FindTimePoints[i] = 0; SetPlayerMarkerForPlayer(i, FindingPlayer[i], 0xFFFFFF00); FindingPlayer[i] = -1; PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
				else
				{
				    format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					FindTime[i] += 1;
				}
			}
			if(CalledCops[i] >= 1)
			{
                if(CopsCallTime[i] < 1) { CopsCallTime[i] = 0; HidePlayerBeaconForCops(i); CalledCops[i] = 0; }
				else
				{
					CopsCallTime[i]--;
				}
			}
			if(CalledMedics[i] >= 1)
			{
                if(MedicsCallTime[i] < 1) { MedicsCallTime[i] = 0; HidePlayerBeaconForMedics(i); CalledMedics[i] = 0; }
				else
				{
					MedicsCallTime[i]--;
				}
			}
			if(NewbieTimer[i] > 0)
			{
				NewbieTimer[i]--;
			}
			if(VIPTimer[i] > 0)
			{
				VIPTimer[i]--;
			}
			if(PlayerInfo[i][pPDTime] > 0)
			{
			    if(playerTabbed[i] != 1)
	   			{
					PlayerInfo[i][pPDTime]--;
				}
			    if(PlayerInfo[i][pPDTime] == 1)
			    {
			        PlayerInfo[i][pPayCheck] += PlayerInfo[i][pRank]*PlayerInfo[i][pDutyTime]/60;
			        SendClientMessageEx(i,COLOR_YELLOW,"PAYCHECK : Pergilah ke bank lalu /signcheck untuk mendapat kan paycheck anda.");
			        PlayerInfo[i][pPDTime] = 0;
				}
			}
			if(PlayerInfo[i][pLumberTime] > 0)
			{
			    if(playerTabbed[i] != 1)
	   			{
					PlayerInfo[i][pLumberTime]--;
				}
			    if(PlayerInfo[i][pLumberTime] == 1)
			    {
			        SendClientMessageEx(i,COLOR_ARWIN,"JOBINFO:{FFFFFF}Sekarang anda bisa menebang pohon kembali.");
			        PlayerInfo[i][pLumberTime] = 0;
				}
			}
			if(PlayerInfo[i][pMissionsTime] > 0)
			{
			    if(playerTabbed[i] != 1)
	   			{
					PlayerInfo[i][pMissionsTime]--;
				}
			    if(PlayerInfo[i][pMissionsTime] == 1)
			    {
			        SendClientMessageEx(i,COLOR_ARWIN,"JOBINFO: {FFFFFF}Sekarang anda bisa melakukan Trucking Mission kembali.");
			        PlayerInfo[i][pMissionsTime] --;
				}
			}
			if(PlayerInfo[i][pHaulingTime] > 0)
			{
			    if(playerTabbed[i] != 1)
	   			{
					PlayerInfo[i][pHaulingTime]--;
				}
			    if(PlayerInfo[i][pHaulingTime] == 1)
			    {
			        SendClientMessageEx(i,COLOR_ARWIN,"JOBINFO: {FFFFFF}Sekarang anda bisa melakukan Trucking Mission kembali.");
			        PlayerInfo[i][pHaulingTime] --;
				}
			}
			if(PlayerInfo[i][pGYMTime] > 0)
			{
				PlayerInfo[i][pGYMTime]--;
			}
			if(PlayerInfo[i][pDuty] > 0)
			{
			    if(playerTabbed[i] != 1)
	   			{
					PlayerInfo[i][pDutyTime]++;
					PlayerInfo[i][pDutyTimeTotal]++;
				}
			}
			if(PlayerInfo[i][pAdminDuty] > 0)
			{
			    if(playerTabbed[i] != 1)
	   			{
					PlayerInfo[i][pAdminOnDutyTime]++;
				}
			}
			if(JustReported[i] > 0)
			{
				JustReported[i]--;
			}
			if(adTick[i] > 0)
			{
				adTick[i]--;
			}
	        if(askTick[i] > 0)
			{
				askTick[i]--;
			}
			if(EMSCallTime[i] > 0)
			{
			    if(EMSAccepted[i] < 999)
			    {
			        if(IsPlayerConnected(EMSAccepted[i]))
			        {
			            new Float:X,Float:Y,Float:Z;
			            GetPlayerPos(EMSAccepted[i], X, Y, Z);
			            new zone[MAX_ZONE_NAME];
				//		Get3DZone(X, Y, Z, zone, sizeof(zone));
						format(string, sizeof(string), "Your patient is located in %s.", zone);
			            SetPlayerCheckpoint(i, X, Y, Z, 5);
					}
				}
			}
			if(MedicCallTime[i] > 0)
			{
				if(MedicCallTime[i] == 45) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
				else
				{
					format(string, sizeof(string), "%d", 45 - MedicCallTime[i]);
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(MedicAccepted[i], X, Y, Z);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
					GameTextForPlayer(i, string, 1500, 6);
					MedicCallTime[i] += 1;
				}
			}
			if(MechanicCallTime[i] > 0)
			{
				if(MechanicCallTime[i] == 30) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
				else
				{
					format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MechanicCallTime[i] += 1;
				}
			}
			if(PlayerCuffed[i] == 1)
			{
				if(PlayerCuffedTime[i] <= 0)
				{
				    //Frozen[i] = 0;
				    SetPVarInt(i, "IsFrozen", 0);
					TogglePlayerControllable(i, 1);
					PlayerCuffed[i] = 0;
					SetPVarInt(i, "PlayerCuffed", 0);
					PlayerCuffedTime[i] = 0;
					PlayerTazeTime[i] = 1;
					ClearAnimations(i);
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(i, X, Y, Z);
					AC_BS_SetPlayerPos(i, X, Y, Z);
				}
				else
				{
					PlayerCuffedTime[i] -= 1;
				}
			}
			if(PlayerCuffed[i] == 2)
			{
				if(PlayerCuffedTime[i] <= 0)
				{
				    new Float:X, Float:Y, Float:Z;
				    GetPlayerPos(i, X, Y, Z);
				    new copinrange;
					foreach(Player, j)
				    {
				    	if(IsPlayerInRangeOfPoint(j, 30, X, Y, Z) && IsACop(j))
				    	{
				    	    copinrange = 1;
						}
					}

				    if(copinrange == 0)
					{
						//Frozen[i] = 0;
						SetPVarInt(i, "IsFrozen", 0);
						GameTextForPlayer(i, "~r~You broke the Cuffs, you are free!", 2500, 3);
						TogglePlayerControllable(i, 1);
						PlayerCuffed[i] = 0;
						DeletePVar(i, "PlayerCuffed");
						PlayerCuffedTime[i] = 0;
					}
					else
					{
					    PlayerCuffedTime[i] = 60;
					}
				}
				else
				{
					PlayerCuffedTime[i] -= 1;
				}
			}
				if(PlayerInfo[i][pFitnessTimer] > 0)
				{
					PlayerInfo[i][pFitnessTimer]--;
					PlayerInfo[i][pEnergi] --;
					if(PlayerInfo[i][pFitnessTimer] == 1)
					{
					    	if(PlayerInfo[i][pFitnessType] == 1)
					    	{
					    	    SendFormattedMessage(i, -1, "{FF0000}Fitness Status\n");
					    	    PlayerInfo[i][pBodyCondition][0] += frandom(1.0);
								SendFormattedMessage(i, -1, "{00ff00}Groin: {ffff00}%.1f > %.1f\n", PlayerInfo[i][pBodyCondition][0]-=frandom(1.0), PlayerInfo[i][pBodyCondition][0]+=frandom(1.0));
								PlayerInfo[i][pBodyCondition][2] += frandom(1.5);
								SendFormattedMessage(i, -1, "{00ff00}RArm: {ffff00}%.1f > %.1f\n", PlayerInfo[i][pBodyCondition][2]-=frandom(1.5), PlayerInfo[i][pBodyCondition][2]+=frandom(1.5));
								PlayerInfo[i][pBodyCondition][3] += frandom(1.5);
								SendFormattedMessage(i, -1, "{00ff00}LArm: {ffff00}%.1f > %.1f", PlayerInfo[i][pBodyCondition][3]-=frandom(1.5), PlayerInfo[i][pBodyCondition][3]+=frandom(1.5));
								PlayerInfo[i][pBodyCondition][1] += frandom(1.0);
								SendFormattedMessage(i, -1, "{00ff00}Torso: {ffff00}%.1f > %.1f\n", PlayerInfo[i][pBodyCondition][1]-=frandom(1.0), PlayerInfo[i][pBodyCondition][1]+=frandom(1.0));
								PlayerInfo[i][pBodyCondition][4] += frandom(1.5);
								SendFormattedMessage(i, -1, "{00ff00}RLeg: {ffff00}%.1f > %.1f\n", PlayerInfo[i][pBodyCondition][4]-=frandom(1.5), PlayerInfo[i][pBodyCondition][4]+=frandom(1.5));
								PlayerInfo[i][pBodyCondition][5] += frandom(1.5);
								SendFormattedMessage(i, -1, "{00ff00}LLeg: {ffff00}%.1f > %.1f", PlayerInfo[i][pBodyCondition][5]-=frandom(1.5), PlayerInfo[i][pBodyCondition][5]+=frandom(1.5));
								PlayerInfo[i][pFitnessType] = 0;
								PlayerInfo[i][pEnergi] = 25;
								Streamer_Update(i);
					    	}
					    	if(PlayerInfo[i][pFitnessType] == 2)
					    	{
					    	    SendFormattedMessage(i, -1, "{FF0000}Fitness Status\n");
					    	    PlayerInfo[i][pBodyCondition][1] += frandom(1.0);
								SendFormattedMessage(i, -1, "{00ff00}Torso: {ffff00}%.1f > %.1f\n", PlayerInfo[i][pBodyCondition][1]-=frandom(1.0), PlayerInfo[i][pBodyCondition][0]+=frandom(1.0));
								PlayerInfo[i][pBodyCondition][4] += frandom(2.5);
								SendFormattedMessage(i, -1, "{00ff00}RLeg: {ffff00}%.1f > %.1f\n", PlayerInfo[i][pBodyCondition][4]-=frandom(2.5), PlayerInfo[i][pBodyCondition][2]+=frandom(2.5));
								PlayerInfo[i][pBodyCondition][5] += frandom(2.5);
								SendFormattedMessage(i, -1, "{00ff00}LLeg: {ffff00}%.1f > %.1f", PlayerInfo[i][pBodyCondition][5]-=frandom(2.5), PlayerInfo[i][pBodyCondition][3]+=frandom(2.5));
								PlayerInfo[i][pFitnessType] = 0;
								PlayerInfo[i][pEnergi] = 25;
								Streamer_Update(i);
					    	}
					    	if(PlayerInfo[i][pFitnessType] == 3)
					    	{
					    	    SendFormattedMessage(i, -1, "{FF0000}Fitness Status\n");
					    	    PlayerInfo[i][pBodyCondition][0] += frandom(1.5);
								SendFormattedMessage(i, -1, "{00ff00}Groin: {ffff00}%.1f > %.1f\n", PlayerInfo[i][pBodyCondition][0]-=frandom(1.0), PlayerInfo[i][pBodyCondition][0]+=frandom(1.5));
								PlayerInfo[i][pBodyCondition][2] += frandom(2.5);
								SendFormattedMessage(i, -1, "{00ff00}RArm: {ffff00}%.1f > %.1f\n", PlayerInfo[i][pBodyCondition][2]-=frandom(2.5), PlayerInfo[i][pBodyCondition][2]+=frandom(2.5));
								PlayerInfo[i][pBodyCondition][3] += frandom(2.5);
								SendFormattedMessage(i, -1, "{00ff00}LArm: {ffff00}%.1f > %.1f", PlayerInfo[i][pBodyCondition][3]-=frandom(2.5), PlayerInfo[i][pBodyCondition][3]+=frandom(2.5));
								PlayerInfo[i][pFitnessType] = 0;
	       						PlayerInfo[i][pEnergi] = 25;
								Streamer_Update(i);
							}
						    ClearAnimations(i);
						    PlayerInfo[i][pFitnessTimer] --;
						}
				}
	}
}

// Timer Name: ServerHeartbeatTwo()
// TickRate: 1 secs.
Timer:ServerHeartbeatTwo[1000]()
{
	foreach(Player, i)
	{
  		if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && JetPack[i] == 0 && PlayerInfo[i][pAdmin] < 1)
		{
			new string[74 + MAX_PLAYER_NAME];
		    format( string, sizeof( string ), "{FF6347}AdmCmd: %s (ID %d) may possibly be jetpack hacking.", GetPlayerNameEx(i), i);
			ABroadCast( COLOR_YELLOW, string, 1 );
			format(string, sizeof(string), "%s (ID %d) may possibly be jetpack hacking.", GetPlayerNameEx(i), i);
			Log("logs/hack.log", string);
		}
		if( IsPlayerInRangeOfPoint( i, 2, 1544.2, -1353.4, 329.4 ) )
		{
		    givePlayerValidWeapon( i, 46, AMMO_MELEE );
		}
		if(GetPlayerState(i) == PLAYER_STATE_ONFOOT) for(new h = 0; h < sizeof(FamilyInfo); h++)
		{
			if(IsPlayerInRangeOfPoint(i, 2.0, FamilyInfo[h][FamilySafe][0], FamilyInfo[h][FamilySafe][1], FamilyInfo[h][FamilySafe][2]))
			{
				if(FamilyInfo[h][FamilyUSafe] == 1)
				{
					GameTextForPlayer(i, "~y~gang safe~w~~n~Type ~r~/safehelp~w~ for more information", 5000, 3);
				}
			}
		}
		if(SafeTime[i] > 0) {
			if(--SafeTime[i] == 1 && gPlayerAccount[i] == 1 && gPlayerLogged{i} == 0) {
				SendClientMessageEx(i, COLOR_WHITE, "HINT: Anda bisa Login dengan memasukkan Password anda.");
			}
		}
		if(CellTime[i] > 0)
		{
			if (CellTime[i] == cchargetime)
			{
				CellTime[i] = 1;
				if(Mobile[Mobile[i]] == i)
				{
					CallCost[i] += callcost[i];
				}
			}
			CellTime[i]++;
			if (Mobile[Mobile[i]] == INVALID_PLAYER_ID && CellTime[i] == 5)
			{
				if(IsPlayerConnected(Mobile[i]))
				{
				    new Float:rX, Float:rY, Float:rZ;
				    GetPlayerPos(i, rX, rY, rZ);
					new string[18 + MAX_PLAYER_NAME];
					format(string, sizeof(string), "* %s's phone rings.", GetPlayerNameEx(Mobile[i]));
					RingTone[Mobile[i]] = 10;
					ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
		}
		if(CellTime[i] == 0 && CallCost[i] > 0)
		{
			new string[28];
			format(string, sizeof(string), "~w~The call cost~n~~r~%s",FormatMoney(CallCost[i]));
			PlayerInfo[i][pPulsa2] -= CallCost[i];
			GameTextForPlayer(i, string, 5000, 1);
			format(string, sizeof(string), "PHONE : Sisa Pulsa mu sebanyak %d",PlayerInfo[i][pPulsa2]);
			SendClientMessageEx(i, COLOR_GRAD2, string);
			CallCost[i] = 0;
		}
		if(GetPVarInt(i, "rccam") == 0)
 		{
			if(GetVehicleModel(GetPlayerVehicleID(i)) != 594)
			{
	 			DestroyVehicle(GetPVarInt(i, "rcveh"));
	     		KillTimer(GetPVarInt(i, "rccamtimer"));
			}
		}
	}
}

// Timer Name: ServerMicrobeat()
// TickRate: 250 Milliseconds
Timer:ServerMicrobeat[250]()
{
    new
		Float: fExpHealth,
		iVehicle,
		arrDamage[4];

	foreach(Player, i)
	{
	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			if(arr_Towing[i] != INVALID_VEHICLE_ID) {
				if(GetVehicleModel(arr_Towing[i]) && IsVehicleStreamedIn(arr_Towing[i], i)) AttachTrailerToVehicle(arr_Towing[i], GetPlayerVehicleID(i));
				else arr_Towing[i] = INVALID_VEHICLE_ID;
			}
		    iVehicle = GetPlayerVehicleID(i);
			GetVehicleHealth(iVehicle,fExpHealth);
  			for(new s=0;s<10;s++)
  			{
				if(SpikeStrips[s][sX] != 0) // Reduced from three vars to one
				{
					if(VehicleToPoint( 3.0, iVehicle, SpikeStrips[s][sX], SpikeStrips[s][sY], SpikeStrips[s][sZ]))
					{
			  			GetVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
			 			arrDamage[3] = encode_tires(1, 1, 1, 1);
			   			UpdateVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
		  			}
				}
	   		}
		}
	}
}

// Timer Name: VehicleUpdate()
// TickRate: 35 secs.
Timer:VehicleUpdate[20000]()
{
    new engine,lights,alarm,doors,bonnet,boot,objective,modelid;
    for(new v = 0; v < MAX_VEHICLES; v++) if(GetVehicleModel(v))
	{

		modelid = GetVehicleModel(v);
	    GetVehicleParamsEx(v,engine,lights,alarm,doors,bonnet,boot,objective);
		switch(modelid)
		{
			case 520, 476, 593, 553, 513, 512, 577, 592, 511, 539, 464, 519: VehicleFuel[v] = 100;
			case 509, 481, 510: VehicleFuel[v] = 100, arr_Engine{v} = 1, SetVehicleParamsEx(v,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
	    if(engine == VEHICLE_PARAMS_ON)
		{
		    foreach(Player, i)
		    {
			    new	Float: f_vHealth;
				GetVehicleHealth(v, f_vHealth);
				if(f_vHealth < 350.0)
				{
					arr_Engine{v} = 0, SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
				}
			}
			if(VehicleFuel[v] > 0.0)
			{
				VehicleFuel[v]-=0.1;
				if(VehicleFuel[v] <= 0.0) SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
			}
			if(arr_Engine{v} == 0) SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	    }
	}
}
new TimerHunger[MAX_PLAYERS];
forward HungryTime(pid);
public HungryTime(pid)
{
	if(PlayerInfo[pid][pHunger] >= 30)
	{
		KillTimer(TimerHunger[pid]);
		SetPVarInt(pid, "hTimerOn", 0);
		return 1;
	}
	PlayerInfo[pid][pCondition] --;
	return 1;
}
forward ProgressBarCondition(pid);
public ProgressBarCondition(pid)
{
	if (GetPVarInt(pid, "ConditionBar") == 1)
	{
		if (PlayerInfo[pid][pCondition] > 20)
		{
		    new hour, minute, second;
			gettime(hour, minute, second);
			SetPlayerTime(pid, hour, minute);
			SetPlayerDrunkLevel(pid, 0);
		}
		if(PlayerInfo[pid][pCondition] < 20)
		{
		    if(PlayerInfo[pid][pUsePainkiller] == 1)
		    {
		        new hour, minute, second;
				gettime(hour, minute, second);
				SetPlayerTime(pid, hour, minute);
				SetPlayerDrunkLevel(pid, 0);
		    }
		    else
			{
				SetPlayerDrunkLevel(pid, 50000);
    			SetPlayerTime(pid, 0, 0);
				LoopingAnim(pid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				SetPlayerChatBubble(pid, "* coughs hard *", COLOR_PURPLE, 10.0, 3000);
			}
		}
		if(PlayerInfo[pid][pCondition] <= 40)
		{
				SetPlayerChatBubble(pid, "* coughs *", COLOR_PURPLE, 10.0, 3000);
		}
	}
	return 1;
}
//Hunger system
forward ProgressBarHunger(pid);
public ProgressBarHunger(pid)
{
	if (GetPVarInt(pid, "HungerBar") == 1)
	{
		if (PlayerInfo[pid][pHunger] > 0)
		{
			PlayerInfo[pid][pHunger] -= 1;
			if (GetPVarInt(pid, "hTimerOn") != 0)	SetPVarInt(pid, "hTimerOn", 0);
		}
		if(PlayerInfo[pid][pHunger] <= 0)
		{
			PlayerInfo[pid][pHunger] = 0;
			if (GetPVarInt(pid, "hTimerOn") == 0) TimerHunger[pid] = SetTimerEx("HungryTime",15000,true,"d",pid);
			SetPVarInt(pid, "hTimerOn", 1);
		}
	}
	return 1;
}
new TimerEnergy[MAX_PLAYERS];
forward TiredTime(pid);
public TiredTime(pid)
{
	if(PlayerInfo[pid][pEnergi] >= 30)
	{
		KillTimer(TimerEnergy[pid]);
		SetPVarInt(pid, "eTimerOn", 0);
		return 1;
	}
	PlayerInfo[pid][pCondition] --;
	return 1;
}

//Energy system
forward ProgressBarEnergy(pid);
public ProgressBarEnergy(pid)
{
	if (GetPVarInt(pid, "EnergyBar") == 1) {
		if (PlayerInfo[pid][pEnergi] > 0) {
			PlayerInfo[pid][pEnergi] -= 1;
			if (GetPVarInt(pid, "eTimerOn") != 0)	SetPVarInt(pid, "eTimerOn", 0);
		}
		if(PlayerInfo[pid][pEnergi] <= 0)
		{
			PlayerInfo[pid][pEnergi] = 0;
			if (GetPVarInt(pid, "eTimerOn") == 0) TimerEnergy[pid] = SetTimerEx("TiredTime",15000,true,"d",pid);
			SetPVarInt(pid, "eTimerOn", 1);
		}
	}
	return 1;
}
new TimerBladder[MAX_PLAYERS];
forward BladderrTime(pid);
public BladderrTime(pid)
{
	if(PlayerInfo[pid][pBladder] >= 30)
	{
		KillTimer(TimerBladder[pid]);
		SetPVarInt(pid, "bTimerOn", 0);
		return 1;
	}
	PlayerInfo[pid][pCondition] --;
	return 1;
}

//Energy system
forward ProgressBarBladder(pid);
public ProgressBarBladder(pid)
{
	if (GetPVarInt(pid, "BladderBar") == 1) {
		if (PlayerInfo[pid][pBladder] > 0) {
			PlayerInfo[pid][pBladder] -= 1;
			if (GetPVarInt(pid, "bTimerOn") != 0)	SetPVarInt(pid, "bTimerOn", 0);
		}
		if(PlayerInfo[pid][pBladder] <= 0)
		{
			PlayerInfo[pid][pBladder] = 0;
			if (GetPVarInt(pid, "bTimerOn") == 0) TimerBladder[pid] = SetTimerEx("BladderrTime",15000,true,"d",pid);
			SetPVarInt(pid, "bTimerOn", 1);
		}
	}
	return 1;
}
forward PLANTUPDATE(playerid);
public PLANTUPDATE(playerid)
{
	for(new x = 1; x < MAX_PLANT; x++)
	{
	    if(PlantInfo[x][plantTime] > 0)
	    {
	        PlantInfo[x][plantTime] --;
	        if(PlantInfo[x][plantTime] <= 45*60)
	        {
		        DestroyDynamicObject(PlantInfo[x][plantObject]);
		        PlantInfo[x][plantObject] = CreateDynamicObject(871, PlantInfo[x][plantPos][0], PlantInfo[x][plantPos][1], PlantInfo[x][plantPos][2]-1, 0.0, 0.0, 0.0);
	        }
	        if(PlantInfo[x][plantTime] <= 25*60)
	        {
		        DestroyDynamicObject(PlantInfo[x][plantObject]);
		        PlantInfo[x][plantObject] = CreateDynamicObject(19473, PlantInfo[x][plantPos][0], PlantInfo[x][plantPos][1], PlantInfo[x][plantPos][2]-1, 0.0, 0.0, 0.0);
	        }
	        if(PlantInfo[x][plantTime] <= 5*60)
	        {
		        DestroyDynamicObject(PlantInfo[x][plantObject]);
		        PlantInfo[x][plantObject] = CreateDynamicObject(687, PlantInfo[x][plantPos][0], PlantInfo[x][plantPos][1], PlantInfo[x][plantPos][2]-1, 0.0, 0.0, 0.0);
	        }
		}
	}
}
forward HBE(playerid);
public HBE(playerid)
{
	foreach(Player, i)
	{
			if(PlayerInfo[i][pCondition] > 100)
			{
			    PlayerInfo[i][pCondition]=100;
			}
			if(GetProgressBarValue(hungry[i])!=PlayerInfo[i][pHunger])
			{
			    SetProgressBarValue(hungry[i], PlayerInfo[i][pHunger]);
		    	UpdateProgressBar(hungry[i], i);
			}
			if(PlayerInfo[i][pHunger] >100)
			{
			    PlayerInfo[i][pHunger]=100;
			    SetProgressBarValue(hungry[i], 100);
			}
			if(GetProgressBarValue(hungry[i]) >= 70)
			{
			    SetProgressBarColor(hungry[i], 0x00FF0033);
			}
			if(GetProgressBarValue(hungry[i]) < 70)
			{
			    SetProgressBarColor(hungry[i], 0xFFFF0033);
			}
			if(GetProgressBarValue(hungry[i]) < 25)
			{
			    SetProgressBarColor(hungry[i], 0xFF000033);
			}
			if(GetProgressBarValue(hungry[i]) < 0)
			{
			    SetProgressBarValue(hungry[i], 0);
			}
			if(GetProgressBarValue(tired[i])!=PlayerInfo[i][pEnergi])
			{
			    SetProgressBarValue(tired[i], PlayerInfo[i][pEnergi]);
		    	UpdateProgressBar(tired[i], i);
			}
			if(PlayerInfo[i][pEnergi] >100)
			{
			    PlayerInfo[i][pEnergi]=100;
			    SetProgressBarValue(tired[i], 100);
			}
			if(GetProgressBarValue(tired[i]) >= 70)
			{
			    SetProgressBarColor(tired[i], 0x00FF0033);
			}
			if(GetProgressBarValue(tired[i]) < 70)
			{
			    SetProgressBarColor(tired[i], 0xFFFF0033);
			}
			if(GetProgressBarValue(tired[i]) < 25)
			{
			    SetProgressBarColor(tired[i], 0xFF000033);
			}
			if(GetProgressBarValue(tired[i]) < 0)
			{
			    SetProgressBarValue(tired[i], 0);
			}
			if(GetProgressBarValue(clean[i])!=PlayerInfo[i][pBladder])
			{
			    SetProgressBarValue(clean[i], PlayerInfo[i][pBladder]);
		    	UpdateProgressBar(clean[i], i);
			}
			if(PlayerInfo[i][pBladder] >100)
			{
			    PlayerInfo[i][pBladder]=100;
			    SetProgressBarValue(clean[i], 100);
			}
			if(GetProgressBarValue(clean[i]) >= 70)
			{
			    SetProgressBarColor(clean[i], 0x00FF0033);
			}
			if(GetProgressBarValue(clean[i]) < 70)
			{
			    SetProgressBarColor(clean[i], 0xFFFF0033);
			}
			if(GetProgressBarValue(clean[i]) < 25)
			{
			    SetProgressBarColor(clean[i], 0xFF000033);
			}
			if(GetProgressBarValue(clean[i]) < 0)
			{
			    SetProgressBarValue(clean[i], 0);
			}
   }
}
// Timer Name: PengurangData()
// TickRate: 1 secs.
Timer:PengurangData[1000]()
{
	foreach(Player, i)
	{
		if(gPlayerLogged{i})
		{
			if(PlayerRentInfo[i][prRentTime] > 0)
			{
			    if(PlayerRentInfo[i][prRentTime] == 300 && PlayerRentInfo[i][prVehicleRent] == 1)
			    {
					SendClientMessageEx(i, COLOR_ORANGE, "Waktu Sewa Kendaraan anda kurang 5 Menit lagi.");
			        PlayerRentInfo[i][prRentTime] --;
				}
				else if(PlayerRentInfo[i][prRentTime] <= 0 && PlayerRentInfo[i][prVehicleRent] == 1)
				{
					PlayerRentInfo[i][prTax] ++;
					if(PlayerRentInfo[i][prTax] == 60)
					{
					    PlayerInfo[i][pPayCheck] -= 25;
					    SendClientMessageEx(i, COLOR_LIGHTRED, "Anda akan dikenai denda setiap 1 menit. Apabila belum mengembalikan Kendaraan Sewa anda.");
					    PlayerRentInfo[i][prTax] = 0;
					}
				}
				else
				{
				    PlayerRentInfo[i][prRentTime] --;
				}
			}
			if(PlayerInfo[i][pMaskUse] == 1)
			{
			    for(new a = 0; a < MAX_PLAYERS; a++)
				{
					ShowPlayerNameTagForPlayer(a, i, false);
				}
			}
			if(PlayerInfo[i][pSweeperT] > 0)
			{
			    if(PlayerInfo[i][pSweeperT] == 1)
			    {
			        SendClientMessageEx(i,COLOR_ARWIN,"SIDEJOB: {FFFF00}Sekarang kamu dapat bekerja sebagai {00B6FF}Street Sweeper{FFFF00} kembali.");
			        PlayerInfo[i][pSweeperT] --;
				}
				else
				{
	    			PlayerInfo[i][pSweeperT] --;
				}
			}
			if(PlayerInfo[i][pBusTime] > 0)
			{
			    if(PlayerInfo[i][pBusTime] == 1)
			    {
			        SendClientMessageEx(i,COLOR_ARWIN,"SIDEJOB: {FFFF00}Sekarang kamu dapat bekerja sebagai {00B6FF}Bus Driver{FFFF00} kembali.");
			        PlayerInfo[i][pBusTime] --;
				}
				else
				{
	    			PlayerInfo[i][pBusTime] --;
				}
			}
			if(PlayerInfo[i][pTrainingTime] > 0)
			{
       			if(PlayerInfo[i][pTrainingTime] == 1)
			    {
			        SendClientMessageEx(i,COLOR_WHITE,"SKILL: Sekarang kamu bisa melakukan latihan kembali.");
			        PlayerInfo[i][pTrainingTime] --;
				}
				else
				{
	    			PlayerInfo[i][pTrainingTime] --;
				}
			}
			if(PlayerInfo[i][pCTime] > 0)
			{
			    if(PlayerInfo[i][pCTime] == 86400)
			    {
			        PlayerInfo[i][pCTime] --;
				}
				else
				{
				    PlayerInfo[i][pCTime] --;
				}
			}
			if(PlayerInfo[i][pCTime] == 0)
			{
			    PlayerInfo[i][pCarLic] = 0;
			}
			if(PlayerInfo[i][pCondition] > 100)
			{
			    PlayerInfo[i][pCondition] = 99;
			}
			if(PlayerInfo[i][pHunger] > 100)
			{
			    PlayerInfo[i][pHunger] = 99;
			}
			if(PlayerInfo[i][pBladder] > 100)
			{
			    PlayerInfo[i][pBladder] = 99;
			}
			if(PlayerInfo[i][pEnergi] > 100)
			{
			    PlayerInfo[i][pEnergi] = 99;
			}
			if(PlayerInfo[i][pHunger] < 0)
			{
			    PlayerInfo[i][pHunger] = 0;
			}
			if(PlayerInfo[i][pCondition] < 0)
			{
			    PlayerInfo[i][pCondition] = 0;
			}
			if(PlayerInfo[i][pBladder] < 0)
			{
			    PlayerInfo[i][pBladder] = 0;
			}
			if(PlayerInfo[i][pEnergi] < 0)
			{
			    PlayerInfo[i][pEnergi] = 0;
			}
			if(EquipmentStock < 0)
			{
			    EquipmentStock = 0;
			}
			if(stockplant < 0)
			{
			    stockplant = 0;
			}
			if(StockIkan < 0)
			{
			    StockIkan = 0;
			}
			if(stockcomp < 0)
			{
			    stockcomp = 0;
			}
			if(StockDPU < 0)
			{
			    StockDPU = 0;
			}
			if(stockpot < 0)
			{
			    stockpot = 0;
			}
			if(stockcrack < 0)
			{
			    stockcrack = 0;
			}
			if(EquipmentStock > 1000)
			{
			    EquipmentStock = 1000;
			}
		    if(PlayerInfo[i][pFTime] > 0)
			{
			    if(PlayerInfo[i][pFTime] == 1)
			    {
			        SendClientMessageEx(i,COLOR_YELLOW,"Fish : Sekarang kamu dapat memancing lagi.");
			        PlayerInfo[i][pFTime] --;
				}
				else
				{
	    			PlayerInfo[i][pFTime] --;
				}
			}
			if(PlayerInfo[i][pDonateRank] > 0 && PlayerInfo[i][pVIPLeft] < 1)
			{
						PlayerInfo[i][pDonateRank] = 0;
						PlayerInfo[i][pVIPJoinDate] = 0;
						PlayerInfo[i][pVIPLeft] = 0;
						format(PlayerInfo[i][pVIPExpDate],32,"null");
						format(PlayerInfo[i][pVIPName],32,"None");
						SendClientMessageEx(i, COLOR_VIP, "VIP anda telah habis hari ini, untuk menjadi VIP lagi, silahkan berdonasi :)");
			}
	        if(PlayerInfo[i][pHackWarnings] >= 1) {
				PlayerInfo[i][pHackWarnTime]++;

				if(PlayerInfo[i][pHackWarnTime] >= 10) {
					PlayerInfo[i][pHackWarnings] = 0;
					PlayerInfo[i][pHackWarnTime] = 0;
				}
			}
			if(PlayerInfo[i][pKTime] > 0)
			{
			    if(PlayerInfo[i][pKTime] == 86400)
			    {
			        SendClientMessageEx(i,COLOR_LIGHTBLUE,"  **Masa aktif KTP anda tinggal 1 hari lagi**  ");
					PlayerInfo[i][pKTime] --;
				}
				else
				{
				    PlayerInfo[i][pKTime] --;
				}
			}
			if(PlayerInfo[i][pKTime] == 0)
			{
			    PlayerInfo[i][pKTP] = 0;
			}
			if(PlayerInfo[i][pJTime] > 0)
			{
				if(PlayerInfo[i][pJTime] == 1)
			    {
			        SendClientMessageEx(i,COLOR_YELLOW,"JOB : Kamu sudah bisa /quitjob.");
			        PlayerInfo[i][pJTime] --;
				}
				else
				{
	    			PlayerInfo[i][pJTime] --;
				}
			}
			/*for(new s; s < 7; s++)
			{
			    if(PlayerInfo[i][pBodyCondition][s] > 150.0)
			    {
			        PlayerInfo[i][pBodyCondition][s] = 150.0;
				}
			}
			for(new idx = 0; idx < MAX_GYMOBJECT; idx++)
			{
				if(GYMInfo[idx][GYMOBJCondition] < 0)
				{
				    GYMInfo[idx][GYMOBJCondition] = 0;
    			}
			}*/
		}
	}
}
//ADO
forward RemovePlayerADO(playerid);
public RemovePlayerADO(playerid)
{
	DestroyDynamic3DTextLabel(PlayerADO[playerid]);
	SetPVarInt(playerid, "HaveADO", 0);
	return 1;
}

forward ClearBiz(id);
public ClearBiz(id)
{
	new string[500];
	BizzInfo[id][bOwned] = 0;
	format(BizzInfo[id][bOwner], 255, "Nobody");
	format(BizzInfo[id][bMessage], 255, "Nothing" );
	BizzInfo[id][bTill] = 0;
	BizzInfo[id][bProducts] = 50;
  	DestroyDynamic3DTextLabel(business1[id]);
	format(string, sizeof(string), "{00FFFF}[id:%d]\n{00D900}this businesses for sale!\n{FFFF00}Type: {FFFFFF}%s\n{FFFF00}Price: {FFFFFF}%s\n{00D900}use '/buybiz' for buy this businesses", id, RBT(id), FormatMoney(BizzInfo[id][bBuyPrice]));
	business2[id] = CreateStreamed3DTextLabel(string, COLOR_WHITE, BizzInfo[id][bEntranceX], BizzInfo[id][bEntranceY], BizzInfo[id][bEntranceZ]+0.75,2.0, 0, 0);
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	new string[1000];
	for(new i = 0; i < sizeof MoneyInfo; i++)
	{
		if(pickupid == MoneyInfo[i][mPickup]) // Moneybag
		{
		    if(MoneyInfo[i][mMoneybag] == 0) return 1;
		    if(IsPlayerInRangeOfPoint(playerid, 5.0, MoneyInfo[i][mbX], MoneyInfo[i][mbY], MoneyInfo[i][mbZ]))
           	{
			    new Float:plax, Float:play, Float:plaz;
			    new location[MAX_ZONE_NAME];
			    GivePlayerCash(playerid, MoneyInfo[i][mAmount]);
			    format(string, sizeof(string), "~w~You found the money bag worth~n~~g~$%s!", FormatMoney(MoneyInfo[i][mAmount]));
			    GameTextForPlayer(playerid, string, 5000, 3);
			    GetPlayerPos(playerid, plax, play, plaz);
			    PlayerPlaySound(playerid, 1056, plax, play, plaz);
			    DestroyDynamicPickup(MoneyInfo[i][mPickup]);
			    MoneyInfo[i][mCreated] = 0;
			    GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
				format(string, sizeof(string), "WARNING: %s has picked up a money bag in %s worth $%s.", RPN(playerid), location, FormatMoney(MoneyInfo[i][mAmount]));
				SendAdminMessage(COLOR_RED, string);
				format(string, sizeof(string), "{FF6347}%s has found the money bag in %s worth $%s!", RPN(playerid), location, FormatMoney(MoneyInfo[i][mAmount]));
				SendClientMessageToAll(COLOR_YELLOW, string);
				return 1;
		    }
		}
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
    foreach(Player, i)
    {
        if(GetPVarType(i, "bboxareaid"))
        {
            new station[256];
            GetPVarString(i, "BoomboxURL", station, sizeof(station));
            if(areaid == GetPVarInt(i, "bboxareaid"))
            {
                PlayAudioStreamForPlayer(playerid, station, GetPVarFloat(i, "bposX"), GetPVarFloat(i, "bposY"), GetPVarFloat(i, "bposZ"), 30.0, 1);
                SendClientMessage(playerid, COLOR_GREY, " You are listening to music coming out of a nearby boombox.");
                return 1;
            }
        }
        if( IsPlayerInRangeOfPoint(i, 50.0, -498.3253, -1330.9117, -28.1434) )
		{
		    SendClientMessage(i, COLOR_GREY, "(( KAMU BERADA DALAM ZONA OOC, HARAP MENJAGA ATTITUDE MASING-MASING ))");
		    return 1;
		}
    }
    return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    foreach(Player, i)
    {
        if(GetPVarType(i, "bboxareaid"))
        {
            if(areaid == GetPVarInt(i, "bboxareaid"))
            {
                StopAudioStreamForPlayer(playerid);
                SendClientMessage(playerid, COLOR_GREY, " You have went far away from the boombox.");
                return 1;
            }
        }
    }
    return 1;
}

stock ShowDescriptionText(playerid, string[], time = 3000)
{
    KillTimer(DescriptionTimer[playerid]);
    TextDrawSetString(DescriptionText[playerid], string);
    TextDrawShowForPlayer(playerid, DescriptionText[playerid]);
    DescriptionTimer[playerid] = SetTimerEx("HideDescriptionText", time, 0, "i", playerid);
    return 1;
}

forward HideDescriptionText(playerid);
public HideDescriptionText(playerid)
{
    TextDrawHideForPlayer(playerid, DescriptionText[playerid]);
    return 1;
}

stock RBT(id)
{
	new businesstype[128];
    if(BizzInfo[id][bType] > 0)
	{
		if(BizzInfo[id][bType] == 1) format(businesstype, 128, "24/7");
		else if(BizzInfo[id][bType] == 2) format(businesstype, 128, "Clothes Shop");
		else if(BizzInfo[id][bType] == 3) format(businesstype, 128, "Restaurant");
		else if(BizzInfo[id][bType] == 4) format(businesstype, 128, "Electronic Shop");
		else if(BizzInfo[id][bType] == 5) format(businesstype, 128, "Sport Shop");
		else if(BizzInfo[id][bType] == 6) format(businesstype, 128, "Bar or Dance Club");
		else if(BizzInfo[id][bType] == 7) format(businesstype, 128, "Petrol Station");
		else if(BizzInfo[id][bType] == 8) format(businesstype, 128, "GYM");
	}
	else
	{
		format(businesstype, 128, "Tidak diketahui");
	}
	return businesstype;
}

stock RLT(id)
{
	new locked[128];
	if(BizzInfo[id][bLocked] == 3) format(locked, 128, "Tersegel");
	if(BizzInfo[id][bLocked] == 1) format(locked, 128, "Terkunci");
	if(BizzInfo[id][bLocked] == 0) format(locked, 128, "Terbuka");
	return locked;
}
    stock isNumeric(const string[]) { //Thanks to it's creator.
            new length=strlen(string);
            if (length==0) return false;
            for (new i = 0; i < length; i++) {
                    if (
                    (string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+')
                    || (string[i]=='-' && i!=0)
                    || (string[i]=='+' && i!=0)
                    ) return false;
            }
            if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
            return true;
    }

stock SaveMod()
{
	new idx = 1, File:file;
	new string[10000];
	while(idx < MAX_MOD)
	{
		format(string, sizeof(string), "%f|%f|%f\r\n",
		Mod[idx][mPosX],
		Mod[idx][mPosY],
		Mod[idx][mPosZ]);
	    if(idx == 1)
	    {
	        file = fopen("modshop.cfg", io_write);
		}
		else
		{
		    file = fopen("modshop.cfg", io_append);
		}
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("ModShop Berhasil Disimpan");
	return 1;
}

stock LoadMod()
{
	new minfo[3][256];
	new string[10000];
	new File:file = fopen("modshop.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_MOD)
		{
			fread(file, string);
			split(string, minfo, '|');
			Mod[idx][mPosX] = floatstr(minfo[0]);
			Mod[idx][mPosY] = floatstr(minfo[1]);
			Mod[idx][mPosZ] = floatstr(minfo[2]);
			idx++;
		}
	}
	print("ModShop Berhasil Dimuat");
	return 1;
}
/*STOCK SAVING GYM
SaveGYMObject()
{
	new
		szFileStr[1024],
		File: fHandle = fopen("machine.cfg", io_write);

	for(new idx; idx < MAX_GYMOBJECT; idx++)
	{
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%f|%f|%f|%f|%f|%f\r\n",
		GYMInfo[idx][GYMOBJType],
		GYMInfo[idx][GYMOBJCondition],
		GYMInfo[idx][GYMOBJUsed],
		GYMInfo[idx][GYMOBJPos][0],
		GYMInfo[idx][GYMOBJPos][1],
		GYMInfo[idx][GYMOBJPos][2],
		GYMInfo[idx][GYMOBJPos][3],
		GYMInfo[idx][GYMOBJPos][4],
		GYMInfo[idx][GYMOBJPos][5]);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

LoadGYMObject()
{
	if(!fexist("machine.cfg")) return 1;
	new
		szFileStr[1024],
		File: iFileHandle = fopen("machine.cfg", io_read),
		idx;
		while(idx < sizeof(GYMInfo) && fread(iFileHandle, szFileStr))
		{
			sscanf(szFileStr, "p<|>iiiffffff",
			GYMInfo[idx][GYMOBJType],
			GYMInfo[idx][GYMOBJCondition],
			GYMInfo[idx][GYMOBJUsed],
			GYMInfo[idx][GYMOBJPos][0],
			GYMInfo[idx][GYMOBJPos][1],
			GYMInfo[idx][GYMOBJPos][2],
			GYMInfo[idx][GYMOBJPos][3],
			GYMInfo[idx][GYMOBJPos][4],
			GYMInfo[idx][GYMOBJPos][5]);
			++idx;
			if(GYMInfo[idx][GYMOBJPos][0])
			{
    				if(GYMInfo[idx][GYMOBJType] == 1)
				    {
						GYMInfo[idx][GYMOBJObject] = CreateDynamicObject(2627, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], GYMInfo[idx][GYMOBJPos][3], GYMInfo[idx][GYMOBJPos][4], GYMInfo[idx][GYMOBJPos][5]);
					}
					if(GYMInfo[idx][GYMOBJType] == 2)
				    {
						GYMInfo[idx][GYMOBJObject] = CreateDynamicObject(2630, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], GYMInfo[idx][GYMOBJPos][3], GYMInfo[idx][GYMOBJPos][4], GYMInfo[idx][GYMOBJPos][5]);
					}
					if(GYMInfo[idx][GYMOBJType] == 3)
				    {
						GYMInfo[idx][GYMOBJObject] = CreateDynamicObject(1985, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], GYMInfo[idx][GYMOBJPos][3], GYMInfo[idx][GYMOBJPos][4], GYMInfo[idx][GYMOBJPos][5]);
					}
				format(szFileStr, 128, "[ID:%d]\n{00FF00}Available\n%d/1000", idx, GYMInfo[idx][GYMOBJCondition]);
				GYMInfo[idx][GYMOBJText] = CreateStreamed3DTextLabel(szFileStr, COLOR_ARWIN, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], 5.0, 0, 0);
			}
		}
		print("GYMOBJECT Berhasil Dimuat");
		return fclose(iFileHandle);
}*/
stock SaveGYMObject()
{
	new idx = 1, File:file;
	new string[1024];
	while(idx < MAX_GYMOBJECT)
	{
		format(string, 1024, "%d|%d|%d|%f|%f|%f|%f|%f|%f\r\n",
		GYMInfo[idx][GYMOBJType],
		GYMInfo[idx][GYMOBJCondition],
		GYMInfo[idx][GYMOBJUsed],
		GYMInfo[idx][GYMOBJPos][0],
		GYMInfo[idx][GYMOBJPos][1],
		GYMInfo[idx][GYMOBJPos][2],
		GYMInfo[idx][GYMOBJPos][3],
		GYMInfo[idx][GYMOBJPos][4],
		GYMInfo[idx][GYMOBJPos][5]);
		if(idx == 1)
		{
		    file = fopen("machine.cfg", io_write);
		}
		else
		{
		    file = fopen("machine.cfg", io_append);
		}
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Machine Berhasil Disimpan");
	return 1;
}

stock LoadGYMObject()
{
	new rinfo[15][1024];
	new string[1024];
	new File:file = fopen("machine.cfg", io_read);
	if(file)
	{
	    new idx = 1;
	    while(idx < MAX_GYMOBJECT)
	    {
	        fread(file, string);
	        split(string, rinfo, '|');
	        GYMInfo[idx][GYMOBJType] = strval(rinfo[0]);
			GYMInfo[idx][GYMOBJCondition] = strval(rinfo[1]);
			GYMInfo[idx][GYMOBJUsed] = strval(rinfo[2]);
			GYMInfo[idx][GYMOBJPos][0] = floatstr(rinfo[3]);
			GYMInfo[idx][GYMOBJPos][1] = floatstr(rinfo[4]);
			GYMInfo[idx][GYMOBJPos][2] = floatstr(rinfo[5]);
			GYMInfo[idx][GYMOBJPos][3] = floatstr(rinfo[6]);
			GYMInfo[idx][GYMOBJPos][4] = floatstr(rinfo[7]);
			GYMInfo[idx][GYMOBJPos][5] = floatstr(rinfo[8]);
	        if(GYMInfo[idx][GYMOBJPos][0])
			{
    				if(GYMInfo[idx][GYMOBJType] == 1)
				    {
						GYMInfo[idx][GYMOBJObject] = CreateDynamicObject(2627, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], GYMInfo[idx][GYMOBJPos][3], GYMInfo[idx][GYMOBJPos][4], GYMInfo[idx][GYMOBJPos][5]);
					}
					if(GYMInfo[idx][GYMOBJType] == 2)
				    {
						GYMInfo[idx][GYMOBJObject] = CreateDynamicObject(2630, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], GYMInfo[idx][GYMOBJPos][3], GYMInfo[idx][GYMOBJPos][4], GYMInfo[idx][GYMOBJPos][5]);
					}
					if(GYMInfo[idx][GYMOBJType] == 3)
				    {
						GYMInfo[idx][GYMOBJObject] = CreateDynamicObject(1985, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], GYMInfo[idx][GYMOBJPos][3], GYMInfo[idx][GYMOBJPos][4], GYMInfo[idx][GYMOBJPos][5]);
					}
				format(string, 128, "[ID:%d]\n{00FF00}Available\n%d/1000", idx, GYMInfo[idx][GYMOBJCondition]);
				GYMInfo[idx][GYMOBJText] = CreateStreamed3DTextLabel(string, COLOR_ARWIN, GYMInfo[idx][GYMOBJPos][0], GYMInfo[idx][GYMOBJPos][1], GYMInfo[idx][GYMOBJPos][2], 5.0, 0, 0);
			}
			idx++;
		}
	}
	print("Machine Berhasil Dimuat");
	return 1;
}
/*/FUNCTIONS/STOCK PLANT
SavePlant()
{
	new
		szFileStr[1024],
		File: fHandle = fopen("plants.cfg", io_write);

	for(new idx; idx < MAX_PLANT; idx++)
	{
		format(szFileStr, 1024, "%d|%d|%f|%f|%f\r\n",
		PlantInfo[idx][plantTime],
		PlantInfo[idx][plantType],
		PlantInfo[idx][plantPos][0],
		PlantInfo[idx][plantPos][1],
		PlantInfo[idx][plantPos][2]);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

LoadPlant()
{
	if(!fexist("plants.cfg")) return 1;
	new
		szFileStr[1024],
		File: iFileHandle = fopen("plants.cfg", io_read),
		idx;
		while(idx < sizeof(PlantInfo) && fread(iFileHandle, szFileStr))
		{
			sscanf(szFileStr, "p<|>iifff",
			PlantInfo[idx][plantTime],
			PlantInfo[idx][plantType],
			PlantInfo[idx][plantPos][0],
			PlantInfo[idx][plantPos][1],
			PlantInfo[idx][plantPos][2]);
			++idx;
			if(PlantInfo[idx][plantPos][0])
			{
			    if(PlantInfo[idx][plantTime] <= 45*60)
		        {
			        PlantInfo[idx][plantObject] = CreateDynamicObject(871, PlantInfo[idx][plantPos][0], PlantInfo[idx][plantPos][1], PlantInfo[idx][plantPos][2]-1, 0.0, 0.0, 0.0);
		        }
		        if(PlantInfo[idx][plantTime] <= 25*60)
		        {
			        PlantInfo[idx][plantObject] = CreateDynamicObject(19473, PlantInfo[idx][plantPos][0], PlantInfo[idx][plantPos][1], PlantInfo[idx][plantPos][2]-1, 0.0, 0.0, 0.0);
		        }
		        if(PlantInfo[idx][plantTime] <= 5*60)
		        {
			        PlantInfo[idx][plantObject] = CreateDynamicObject(687, PlantInfo[idx][plantPos][0], PlantInfo[idx][plantPos][1], PlantInfo[idx][plantPos][2]-1, 0.0, 0.0, 0.0);
		        }
			}
		}
		print("Plants Berhasil Dimuat");
		return fclose(iFileHandle);
}
stock SavePlant()
{
	new idx = 1, File:file;
	new string[10000];
	while(idx < MAX_PLANT)
	{
		format(string, sizeof(string), "%d|%d|%f|%f|%f\r\n",
		PlantInfo[idx][plantTime],
		PlantInfo[idx][plantType],
		PlantInfo[idx][plantPos][0],
		PlantInfo[idx][plantPos][1],
		PlantInfo[idx][plantPos][2]);
	    if(idx == 1)
	    {
	        file = fopen("plants.cfg", io_write);
		}
		else
		{
		    file = fopen("plants.cfg", io_append);
		}
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Plants Berhasil Disimpan");
	return 1;
}

stock LoadPlant()
{
	new minfo[5][256];
	new string[10000];
	new File:file = fopen("plants.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_PLANT)
		{
			fread(file, string);
			split(string, minfo, '|');
			PlantInfo[idx][plantTime] = strval(minfo[0]);
			PlantInfo[idx][plantType] = strval(minfo[1]);
			PlantInfo[idx][plantPos][0] = floatstr(minfo[2]);
			PlantInfo[idx][plantPos][1] = floatstr(minfo[3]);
			PlantInfo[idx][plantPos][2] = floatstr(minfo[4]);
			if(PlantInfo[idx][plantPos][0])
			{
			    if(PlantInfo[idx][plantTime] <= 45*60)
		        {
			        PlantInfo[idx][plantObject] = CreateDynamicObject(871, PlantInfo[idx][plantPos][0], PlantInfo[idx][plantPos][1], PlantInfo[idx][plantPos][2]-1, 0.0, 0.0, 0.0);
		        }
		        if(PlantInfo[idx][plantTime] <= 25*60)
		        {
			        PlantInfo[idx][plantObject] = CreateDynamicObject(19473, PlantInfo[idx][plantPos][0], PlantInfo[idx][plantPos][1], PlantInfo[idx][plantPos][2]-1, 0.0, 0.0, 0.0);
		        }
		        if(PlantInfo[idx][plantTime] <= 5*60)
		        {
			        PlantInfo[idx][plantObject] = CreateDynamicObject(687, PlantInfo[idx][plantPos][0], PlantInfo[idx][plantPos][1], PlantInfo[idx][plantPos][2]-1, 0.0, 0.0, 0.0);
		        }
			}
			idx++;
		}
	}
	print("plants Berhasil Dimuat");
	return 1;
}*/
//HABIS SAMPAI DISINI
stock SaveBuy()
{
	new idx = 1, File:file;
	new string[10000];
	while(idx < MAX_BUYPOINT)
	{
		format(string, sizeof(string), "%f|%f|%f\r\n",
		BuyPoint[idx][bbPos][0],
		BuyPoint[idx][bbPos][1],
		BuyPoint[idx][bbPos][2]);
	    if(idx == 1)
	    {
	        file = fopen("buypoint.cfg", io_write);
		}
		else
		{
		    file = fopen("buypoint.cfg", io_append);
		}
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Buypoint Berhasil Disimpan");
	return 1;
}

stock LoadBuy()
{
	new minfo[3][256];
	new string[10000];
	new File:file = fopen("buypoint.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_BUYPOINT)
		{
			fread(file, string);
			split(string, minfo, '|');
			BuyPoint[idx][bbPos][0] = floatstr(minfo[0]);
			BuyPoint[idx][bbPos][1] = floatstr(minfo[1]);
			BuyPoint[idx][bbPos][2] = floatstr(minfo[2]);
			if(BuyPoint[idx][bbPos][0])
			{
				BuyPoint[idx][bbPickup] = CreateDynamicPickup(1274, 23, BuyPoint[idx][bbPos][0], BuyPoint[idx][bbPos][1], BuyPoint[idx][bbPos][2], -1);
				format(string, 128, "[ID:%d]\n{00FF00}Business buy point\n{FFFFFF}use '/buy' here", idx);
				BuyPoint[idx][bbText] = CreateStreamed3DTextLabel(string, COLOR_ARWIN, BuyPoint[idx][bbPos][0], BuyPoint[idx][bbPos][1], BuyPoint[idx][bbPos][2], 5.0, 0, 0);
			}
			idx++;
		}
	}
	print("Buypoint Berhasil Dimuat");
	return 1;
}

/////////////////////FARM OWNERSHIP Coded by AriWiwin14////////////////////////////
stock SaveFarm()
{
	new idx = 1, File:file;
	new string[10000];
	while(idx < MAX_FARM)
	{
	    format(string, sizeof(string), "%s|%s|%f|%f|%f|%d|%f|%f|%f|%d|%d|%d\r\n",
		FarmInfo[idx][FarmOwner],
		FarmInfo[idx][FarmName],
		FarmInfo[idx][FarmPosX],
		FarmInfo[idx][FarmPosY],
		FarmInfo[idx][FarmPosZ],
		FarmInfo[idx][FarmPrice],
		FarmInfo[idx][FarmRepX],
		FarmInfo[idx][FarmRepY],
		FarmInfo[idx][FarmRepZ],
		FarmInfo[idx][FarmSafeMoney],
		FarmInfo[idx][FarmPapanMT],
		FarmInfo[idx][FarmPlant]);
	    if(idx == 1)
	    {
	        file = fopen("farm.cfg", io_write);
		}
		else
		{
		    file = fopen("farm.cfg", io_append);
		}
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Ladang Berhasil Disimpan");
	return 1;
}
stock LoadFarm()
{
	new farminfo[12][256];
	new string[10000]/*, str[1024]*/;
	new File:file = fopen("farm.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_FARM)
		{
			fread(file, string);
			split(string, farminfo, '|');
			format(FarmInfo[idx][FarmOwner], 32, "%s", farminfo[0]);
			format(FarmInfo[idx][FarmName], 32, "%s", farminfo[1]);
			FarmInfo[idx][FarmPosX] = floatstr(farminfo[2]);
			FarmInfo[idx][FarmPosY] = floatstr(farminfo[3]);
			FarmInfo[idx][FarmPosZ] = floatstr(farminfo[4]);
			FarmInfo[idx][FarmPrice] = strval(farminfo[5]);
			FarmInfo[idx][FarmRepX] = floatstr(farminfo[6]);
			FarmInfo[idx][FarmRepY] = floatstr(farminfo[7]);
			FarmInfo[idx][FarmRepZ] = floatstr(farminfo[8]);
			FarmInfo[idx][FarmSafeMoney] = strval(farminfo[9]);
			FarmInfo[idx][FarmPapanMT] = strval(farminfo[10]);
			FarmInfo[idx][FarmPlant] = strval(farminfo[11]);
			if(FarmInfo[idx][FarmPosX])
			{
				FarmInfo[idx][FarmPickup] = CreateDynamicPickup(1239, 1, FarmInfo[idx][FarmPosX], FarmInfo[idx][FarmPosY], FarmInfo[idx][FarmPosZ], 0);
				if(!strcmp("Tidak Ada", FarmInfo[idx][FarmOwner]))
				{
					format(string, sizeof(string), "{FFFF00}Pemilik : {FFFFFF}%s\n{FFFF00}Price : {FFFFFF}%s{FFFF00}\nID: [%d]\n'/buyfarm' untuk membeli Ladang", FarmInfo[idx][FarmOwner], FormatMoney(FarmInfo[idx][FarmPrice]), idx);
					FarmInfo[idx][FarmText] = CreateStreamed3DTextLabel(string, COLOR_WHITE, FarmInfo[idx][FarmPosX], FarmInfo[idx][FarmPosY], FarmInfo[idx][FarmPosZ], 5, 0, 0);
				}
				else if(FarmInfo[idx][FarmPosX]) {
				    format(string, sizeof(string), "{FFFF00}Pemilik : {FFFFFF}%s\n{FFFF00}Price : {FFFFFF}%s{FFFF00}\nID: [%d]\n'/buyfarm' untuk membeli Ladang", FarmInfo[idx][FarmOwner], FormatMoney(FarmInfo[idx][FarmPrice]), idx);
					FarmInfo[idx][FarmText] = CreateStreamed3DTextLabel(string, COLOR_WHITE, FarmInfo[idx][FarmPosX], FarmInfo[idx][FarmPosY], FarmInfo[idx][FarmPosZ], 5, 0, 0); }
			}
			idx++;
		}
	}
	print("Ladang Berhasil Dimuat");
	return 1;
}
///////////////////////////////////END OF FARM OWNERSHIP Coded by AriWiwin14/////////////////////////////
/*stock SaveWS()
{
	new idx = 1, File:file;
	new string[10000];
	while(idx < MAX_WORKSHOP)
	{
	    format(string, sizeof(string), "%s|%s|%f|%f|%f|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|%d|%s\r\n",
  		WsInfo[idx][wsOwner],
		WsInfo[idx][wsName],
		WsInfo[idx][wsPosX],
		WsInfo[idx][wsPosY],
		WsInfo[idx][wsPosZ],
		WsInfo[idx][wsStatus],
		WsInfo[idx][wsPrice],
		WsInfo[idx][wsSafeMoney],
		WsInfo[idx][wsComponent],
		WsInfo[idx][wsPapanX],
		WsInfo[idx][wsPapanY],
		WsInfo[idx][wsPapanZ],
		WsInfo[idx][wsPapanRotX],
		WsInfo[idx][wsPapanRotY],
		WsInfo[idx][wsPapanRotZ],
		WsInfo[idx][wsPapanMT],
		WsInfo[idx][wsPapanText]);
	    if(idx == 1)
	    {
	        file = fopen("workshop.cfg", io_write);
		}
		else
		{
		    file = fopen("workshop.cfg", io_append);
		}
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("WorkShop Berhasil Disimpan");
	return 1;
}

stock LoadWorkshop()
{
	new winfo[40][256];
	new string[10000];
	new File:file = fopen("workshop.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_WORKSHOP)
		{
			fread(file, string);
			split(string, winfo, '|');
			format(WsInfo[idx][wsOwner], 32, "%s", winfo[0]);
			format(WsInfo[idx][wsName], 10000, "%s", winfo[1]);
			WsInfo[idx][wsPosX] = floatstr(winfo[2]);
			WsInfo[idx][wsPosY] = floatstr(winfo[3]);
			WsInfo[idx][wsPosZ] = floatstr(winfo[4]);
			WsInfo[idx][wsStatus] = strval(winfo[5]);
			WsInfo[idx][wsPrice] = strval(winfo[6]);
			WsInfo[idx][wsSafeMoney] = strval(winfo[7]);
			WsInfo[idx][wsComponent] = strval(winfo[8]);
			WsInfo[idx][wsPapanX] = floatstr(winfo[9]);
			WsInfo[idx][wsPapanY] = floatstr(winfo[10]);
			WsInfo[idx][wsPapanZ] = floatstr(winfo[11]);
			WsInfo[idx][wsPapanRotX] = floatstr(winfo[12]);
			WsInfo[idx][wsPapanRotY] = floatstr(winfo[13]);
			WsInfo[idx][wsPapanRotZ] = floatstr(winfo[14]);
			WsInfo[idx][wsPapanMT] = strval(winfo[15]);
			WsInfo[idx][wsPapanText] = strval(winfo[16]);
			if(WsInfo[idx][wsPosX])
			{
				if(!strcmp("Nothing", WsInfo[idx][wsOwner]))
				{
				    WsInfo[idx][wsPickup] = CreateDynamicPickup(1239, 1, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ], 0);
					format(string, sizeof(string), "Pemilik: %s\nPrice: $%s\nID: [%d]\n'/buyworkshop' untuk membeli Workshop", WsInfo[idx][wsOwner], FormatMoney(WsInfo[idx][wsPrice]), idx);
					WsInfo[idx][wsText] = CreateStreamed3DTextLabel(string, COLOR_WHITE, WsInfo[idx][wsPosX], WsInfo[idx][wsPosY], WsInfo[idx][wsPosZ], 5, 0, 0);
				}
				else
				{
					if(WsInfo[idx][wsPapanMT] == 1)
					{
						WsInfo[idx][wsPapan] = CreateDynamicObject(18244, WsInfo[idx][wsPapanX], WsInfo[idx][wsPapanY], WsInfo[idx][wsPapanZ], WsInfo[idx][wsPapanRotX], WsInfo[idx][wsPapanRotY], WsInfo[idx][wsPapanRotZ]);
                        format(string, sizeof(string), "%s", string);
						WsInfo[idx][wsPapanText] = SetDynamicObjectMaterialText(WsInfo[idx][wsPapan], 0, string, 120, "Arial", 24, 0, 0xFFFFFFFF, -16777216, 1);
					}
					else if(WsInfo[idx][wsPapanMT] == 0)
					{
						WsInfo[idx][wsPapan] = CreateDynamicObject(18244, WsInfo[idx][wsPapanX], WsInfo[idx][wsPapanY], WsInfo[idx][wsPapanZ], WsInfo[idx][wsPapanRotX], WsInfo[idx][wsPapanRotY], WsInfo[idx][wsPapanRotZ]);
						format(string, sizeof(string), "%s", string);
						WsInfo[idx][wsPapanText] = SetDynamicObjectMaterialText(WsInfo[idx][wsPapan], 0, string, 120, "Arial", 24, 0, 0xFFFFFFFF, -16777216, 1);
					}
				}
			}
			idx++;
		}
	}
	print("WorkShop Berhasil Dimuat");
	return 1;
}*/

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	if (PlayerInfo[playerid][pMaskUse] == 1){
		ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
	}
}
//Speedo
stock LuX_DistanceToPoint(vehicleid)
{
	new Float:LPlayerX, Float:LPlayerY, Float:LPlayerZ, Float:LReadPos;
	GetVehiclePos(vehicleid, LPlayerX, LPlayerY, LPlayerZ);
	LReadPos = floatsqroot(floatpower(floatabs(floatsub(LPlayerX, VehPosX[vehicleid])), 2)+floatpower(floatabs(floatsub(LPlayerY, VehPosY[vehicleid])), 2)+floatpower(floatabs(floatsub(LPlayerZ, VehPosZ[vehicleid])), 2));
	return floatround(LReadPos);
}

stock LuX_ReadPosition(vehicleid)
{
    new Float:LReadX, Float:LReadY, Float:LReadZ;
    GetVehiclePos(vehicleid, LReadX, LReadY, LReadZ);
	VehPosX[vehicleid]=LReadX; VehPosY[vehicleid]=LReadY; VehPosZ[vehicleid]=LReadZ;
}
stock PlayerZone(playerid, zone[])
{
	new ReadTmpZone[MAX_ZONE_NAME];
    GetPlayer3DZone(playerid, ReadTmpZone, sizeof(ReadTmpZone)); for(new i = 0; i != sizeof(SanAndreasZones); i++){
	if(strfind(ReadTmpZone, zone, true) != -1)
	return 1;
	}
	return 0;
}

//FlyMode
stock GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;

    if(lr < 0)
	{
		if(ud < 0) 		direction = MOVE_FORWARD_LEFT; 	// Up & Left key pressed
		else if(ud > 0) direction = MOVE_BACK_LEFT; 	// Back & Left key pressed
		else            direction = MOVE_LEFT;          // Left key pressed
	}
	else if(lr > 0) 	// Right pressed
	{
		if(ud < 0)      direction = MOVE_FORWARD_RIGHT;  // Up & Right key pressed
		else if(ud > 0) direction = MOVE_BACK_RIGHT;     // Back & Right key pressed
		else			direction = MOVE_RIGHT;          // Right key pressed
	}
	else if(ud < 0) 	direction = MOVE_FORWARD; 	// Up key pressed
	else if(ud > 0) 	direction = MOVE_BACK;		// Down key pressed

	return direction;
}

//--------------------------------------------------

stock MoveCamera(playerid)
{
	new Float:FV[3], Float:VCP[3];
	GetPlayerCameraPos(playerid, VCP[0], VCP[1], VCP[2]);          // 	Cameras position in space
    GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);  //  Where the camera is looking at

	// Increases the acceleration multiplier the longer the key is held
	if(noclipdata[playerid][accelmul] <= 1) noclipdata[playerid][accelmul] += ACCEL_RATE;

	// Determine the speed to move the camera based on the acceleration multiplier
	new Float:speed = MOVE_SPEED * noclipdata[playerid][accelmul];

	// Calculate the cameras next position based on their current position and the direction their camera is facing
	new Float:X, Float:Y, Float:Z;
	GetNextCameraPosition(noclipdata[playerid][mode], VCP, FV, X, Y, Z);
	MovePlayerObject(playerid, noclipdata[playerid][flyobject], X, Y, Z, speed);

	// Store the last time the camera was moved as now
	noclipdata[playerid][lastmove] = GetTickCount();
	return 1;
}

//--------------------------------------------------

stock GetNextCameraPosition(move_mode, Float:VCP[3], Float:FV[3], &Float:X, &Float:Y, &Float:Z)
{
    // Calculate the cameras next position based on their current position and the direction their camera is facing
    #define OFFSET_X (FV[0]*6000.0)
	#define OFFSET_Y (FV[1]*6000.0)
	#define OFFSET_Z (FV[2]*6000.0)
	switch(move_mode)
	{
		case MOVE_FORWARD:
		{
			X = VCP[0]+OFFSET_X;
			Y = VCP[1]+OFFSET_Y;
			Z = VCP[2]+OFFSET_Z;
		}
		case MOVE_BACK:
		{
			X = VCP[0]-OFFSET_X;
			Y = VCP[1]-OFFSET_Y;
			Z = VCP[2]-OFFSET_Z;
		}
		case MOVE_LEFT:
		{
			X = VCP[0]-OFFSET_Y;
			Y = VCP[1]+OFFSET_X;
			Z = VCP[2];
		}
		case MOVE_RIGHT:
		{
			X = VCP[0]+OFFSET_Y;
			Y = VCP[1]-OFFSET_X;
			Z = VCP[2];
		}
		case MOVE_BACK_LEFT:
		{
			X = VCP[0]+(-OFFSET_X - OFFSET_Y);
 			Y = VCP[1]+(-OFFSET_Y + OFFSET_X);
		 	Z = VCP[2]-OFFSET_Z;
		}
		case MOVE_BACK_RIGHT:
		{
			X = VCP[0]+(-OFFSET_X + OFFSET_Y);
 			Y = VCP[1]+(-OFFSET_Y - OFFSET_X);
		 	Z = VCP[2]-OFFSET_Z;
		}
		case MOVE_FORWARD_LEFT:
		{
			X = VCP[0]+(OFFSET_X  - OFFSET_Y);
			Y = VCP[1]+(OFFSET_Y  + OFFSET_X);
			Z = VCP[2]+OFFSET_Z;
		}
		case MOVE_FORWARD_RIGHT:
		{
			X = VCP[0]+(OFFSET_X  + OFFSET_Y);
			Y = VCP[1]+(OFFSET_Y  - OFFSET_X);
			Z = VCP[2]+OFFSET_Z;
		}
	}
}
//--------------------------------------------------

stock CancelFlyMode(playerid)
{
	DeletePVar(playerid, "FlyMode");
	CancelEdit(playerid);
	TogglePlayerSpectating(playerid, false);
	AC_BS_SetPlayerPos(playerid, flyPos[playerid][0],flyPos[playerid][1],flyPos[playerid][2]);
	DestroyPlayerObject(playerid, noclipdata[playerid][flyobject]);
	noclipdata[playerid][cameramode] = CAMERA_MODE_NONE;
	for(new j=0; j<11; j++) GetPlayerWeaponData(playerid, j, PlayerInfo[playerid][pGuns][j], PlayerInfo[playerid][pGunsAmmo][j]);
	return 1;
}

//--------------------------------------------------

stock FlyMode(playerid)
{
	// Create an invisible object for the players camera to be attached to
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	noclipdata[playerid][flyobject] = CreatePlayerObject(playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0);

	// Place the player in spectating mode so objects will be streamed based on camera location
	TogglePlayerSpectating(playerid, true);
	// Attach the players camera to the created object
	AttachCameraToPlayerObject(playerid, noclipdata[playerid][flyobject]);

	SetPVarInt(playerid, "FlyMode", 1);
	noclipdata[playerid][cameramode] = CAMERA_MODE_FLY;
	for(new j=0; j<11; j++) GetPlayerWeaponData(playerid, j, PlayerInfo[playerid][pGuns][j], PlayerInfo[playerid][pGunsAmmo][j]);
	return 1;
}
/*----------------------------------------------------------------------------*/

//System Tabrakan
stock GetVPlayerSpeed(playerid,bool:kmh)
{
	new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),Vx,Vy,Vz); else GetPlayerVelocity(playerid,Vx,Vy,Vz);
    rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
   	return kmh?floatround(rtn * 100 * 1.61):floatround(rtn * 100);
}

//LINE BUAT SISTEM UPGRADE BODY
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    foreach(Player, i)
	{
    	for(new v; v <MAX_PLAYERVEHICLES; ++v)
		{
		    new panel, doors, lights, tires, Float: HP;
		    if(PlayerVehicleInfo[i][v][pvBodyUpgrade] == 1)
		    {
			    GetVehicleHealth(vehicleid, HP);
			    GetVehicleDamageStatus(vehicleid, panel, doors, lights, tires);
			    if(HP >= 1500) UpdateVehicleDamageStatus(vehicleid, 0, 0, 0, 0);
			}
			else
			{
			    GetVehicleHealth(vehicleid, HP);
			    GetVehicleDamageStatus(vehicleid, panel, doors, lights, tires);
			    if(HP < 1500)
			    UpdateVehicleDamageStatus(vehicleid, panel, doors, lights, tires);
			    PlayerVehicleInfo[i][v][pvStatus][0] = panel;
			    PlayerVehicleInfo[i][v][pvStatus][1] = doors;
			    PlayerVehicleInfo[i][v][pvStatus][2] = lights;
			    PlayerVehicleInfo[i][v][pvStatus][3] = tires;
			    PlayerVehicleInfo[i][v][pvHealth] = HP;
			}
		}
  	}
	return 1;
}
stock intLen(iNum)
    return floatround(floatlog(floatabs(iNum) + 1), floatround_ceil);


stock GetToyCost(tid)
{
	if(tid == 18632) return 1000; if(tid == 18633) return 1500; if(tid == 18634) return 1000; if(tid == 18635) return 1000; if(tid == 18638) return 1500; if(tid == 19093) return 1500;
	if(tid == 19160) return 1500; if(tid == 18639) return 1500; if(tid == 18640) return 1000; if(tid == 18975) return 1000; if(tid == 19136) return 1000; if(tid == 19274) return 1000;
	if(tid == 18641) return 1500; if(tid == 18644) return 2000; if(tid == 18865) return 3000; if(tid == 18866) return 3000; if(tid == 18867) return 3000; if(tid == 18868) return 3000;
	if(tid == 18869) return 3000; if(tid == 18870) return 5000; if(tid == 18871) return 5000; if(tid == 18872) return 5000; if(tid == 18873) return 5000; if(tid == 18874) return 5000;
	if(tid == 18875) return 1500; if(tid == 18890) return 1000; if(tid == 18891) return 1000; if(tid == 18892) return 1000; if(tid == 18893) return 1000; if(tid == 18894) return 1000;
	if(tid == 18895) return 1000; if(tid == 18896) return 1000; if(tid == 18897) return 1000; if(tid == 18898) return 1000; if(tid == 18899) return 1000; if(tid == 18900) return 1000;
	if(tid == 18901) return 2000; if(tid == 18902) return 2000; if(tid == 18903) return 2000; if(tid == 18904) return 2000; if(tid == 18905) return 2000; if(tid == 18906) return 2000;
	if(tid == 18907) return 2000; if(tid == 18908) return 2000; if(tid == 18909) return 2000; if(tid == 18910) return 2000; if(tid == 18911) return 1000; if(tid == 18912) return 1000;
	if(tid == 18913) return 1000; if(tid == 18914) return 1000; if(tid == 18915) return 1000; if(tid == 18916) return 1000; if(tid == 18917) return 1000; if(tid == 18918) return 1000;
	if(tid == 18919) return 1000; if(tid == 18920) return 1000; if(tid == 18921) return 1000; if(tid == 18922) return 1000; if(tid == 18923) return 2000; if(tid == 18924) return 2000;
	if(tid == 18925) return 2000; if(tid == 18926) return 1000; if(tid == 18927) return 1000; if(tid == 18928) return 1000; if(tid == 18929) return 1000; if(tid == 18930) return 1000;
	if(tid == 18931) return 2000; if(tid == 18932) return 2000; if(tid == 18933) return 2000; if(tid == 18934) return 2000; if(tid == 18935) return 2000; if(tid == 18936) return 3000;
	if(tid == 18937) return 4000; if(tid == 18938) return 4000; if(tid == 18939) return 1500; if(tid == 18940) return 1500; if(tid == 18941) return 1500; if(tid == 18942) return 2000;
	if(tid == 18943) return 2000; if(tid == 18944) return 3000; if(tid == 18945) return 3000; if(tid == 18946) return 3000; if(tid == 18947) return 1000; if(tid == 18948) return 1000;
	if(tid == 18949) return 1000; if(tid == 18950) return 1000; if(tid == 18951) return 1000; if(tid == 18952) return 1500; if(tid == 18953) return 1000; if(tid == 18954) return 1500;
	if(tid == 18955) return 1500; if(tid == 18956) return 1500; if(tid == 18957) return 1500; if(tid == 18958) return 1500; if(tid == 18959) return 1500; if(tid == 18960) return 1500;
	if(tid == 18961) return 1500; if(tid == 18962) return 1500; if(tid == 18964) return 2000; if(tid == 18965) return 3000; if(tid == 18966) return 3000; if(tid == 18967) return 2000;
	if(tid == 18968) return 2000; if(tid == 18969) return 2000; if(tid == 18970) return 4000; if(tid == 18971) return 2000; if(tid == 18972) return 3000; if(tid == 18973) return 3000;
	if(tid == 18974) return 5000; if(tid == 18975) return 3000; if(tid == 18976) return 4000; if(tid == 18977) return 4000; if(tid == 18978) return 5000; if(tid == 18979) return 5000;
	if(tid == 19006) return 1000; if(tid == 19007) return 1000; if(tid == 19008) return 1000; if(tid == 19009) return 1000; if(tid == 19010) return 1000; if(tid == 19011) return 1000;
	if(tid == 19012) return 1000; if(tid == 19013) return 1000; if(tid == 19014) return 1000; if(tid == 19015) return 1000; if(tid == 19016) return 2000; if(tid == 19017) return 2000;
	if(tid == 19018) return 2000; if(tid == 19019) return 2000; if(tid == 19020) return 2000; if(tid == 19021) return 2000; if(tid == 19022) return 2000; if(tid == 19023) return 2000;
	if(tid == 19024) return 2000; if(tid == 19025) return 2000; if(tid == 19026) return 2000; if(tid == 19027) return 2000; if(tid == 19028) return 2000; if(tid == 19029) return 2000;
	if(tid == 19030) return 2000; if(tid == 19031) return 2000; if(tid == 19032) return 2000; if(tid == 19033) return 2000; if(tid == 19034) return 2000; if(tid == 19035) return 2000;
	if(tid == 19036) return 4000; if(tid == 19037) return 4000; if(tid == 19038) return 4000; if(tid == 19039) return 1000; if(tid == 19040) return 1000; if(tid == 19041) return 1000;
	if(tid == 19042) return 1000; if(tid == 19043) return 1000; if(tid == 19044) return 1000; if(tid == 19045) return 1000; if(tid == 19046) return 2000; if(tid == 19047) return 2000;
	if(tid == 19048) return 2000; if(tid == 19049) return 2000; if(tid == 19050) return 2000; if(tid == 19051) return 2000; if(tid == 19052) return 2000; if(tid == 19053) return 2000;
	if(tid == 19064) return 5000; if(tid == 19065) return 5000; if(tid == 19066) return 5000; if(tid == 19067) return 2000; if(tid == 19068) return 2000; if(tid == 19069) return 2000;
	if(tid == 19078) return 5000; if(tid == 19079) return 5000; if(tid == 19085) return 5000; if(tid == 19090) return 1500; if(tid == 19091) return 1500; if(tid == 19092) return 1500;
	if(tid == 19094) return 2000; if(tid == 19095) return 1500; if(tid == 19096) return 1500; if(tid == 19097) return 3000; if(tid == 19098) return 3000; if(tid == 19101) return 2000;
	if(tid == 19102) return 2000; if(tid == 19103) return 2000; if(tid == 19104) return 2000; if(tid == 19105) return 2000; if(tid == 19106) return 2000; if(tid == 19107) return 4000;
	if(tid == 19108) return 4000; if(tid == 19109) return 4000; if(tid == 19110) return 4000; if(tid == 19111) return 4000; if(tid == 19112) return 4000; if(tid == 19113) return 1000;
	if(tid == 19114) return 2000; if(tid == 19115) return 3000; if(tid == 19116) return 1500; if(tid == 19117) return 1500; if(tid == 19118) return 1500; if(tid == 19119) return 1000;
	if(tid == 19120) return 1000; if(tid == 19137) return 5000; if(tid == 19163) return 1000;
	return -1;
}

stock LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if(GetPVarInt(playerid, "Injured") == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
	if (gPlayerUsingLoopingAnim[playerid] == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
	gPlayerUsingLoopingAnim[playerid] = 1;
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
	TextDrawShowForPlayer(playerid,txtAnimHelper);
	animation[playerid]++;
}

stock OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if (gPlayerUsingLoopingAnim[playerid] == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
	animation[playerid]++;
}

stock StopLoopingAnim(playerid)
{
	if(GetPVarInt(playerid, "Injured") == 1) return -1;
	gPlayerUsingLoopingAnim[playerid] = 0;
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

public IsAtBlueBusStop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
    	if(IsPlayerInRangeOfPoint(playerid,2.0,2868.9033,-1416.4062,11.0131) || IsPlayerInRangeOfPoint(playerid,2.0,2636.3242,-1693.125,10.9544) || IsPlayerInRangeOfPoint(playerid,2.0,2649.0073,-1710.6044,11.1854)
    	   || IsPlayerInRangeOfPoint(playerid,2.0,2243.8457,-1725.9121,13.5960) || IsPlayerInRangeOfPoint(playerid,2.0,2252.8876,-1738.8710,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,1948.3310,-1454.3525,13.5960)
    	   || IsPlayerInRangeOfPoint(playerid,2.0,1926.4199,-1472.3593,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,1571.0644,-2188.0107,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,1712.9423,-1818.7148,13.6260))
		{
			return 1;
		}
	}
	return 0;
}

public IsAtBlackBusStop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
    	if(IsPlayerInRangeOfPoint(playerid,2.0,1567.0966,-1725.4755,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,1544.9990,-1739.0458,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,1503.9716,-1027.7617,23.7701)
    	   || IsPlayerInRangeOfPoint(playerid,2.0,1440.3242,-1040.7060,23.9073) || IsPlayerInRangeOfPoint(playerid,2.0,1188.8359,-1354.6279,13.6483) || IsPlayerInRangeOfPoint(playerid,2.0,1212.8427,-1327.8398,13.6470)
    	   || IsPlayerInRangeOfPoint(playerid,2.0,861.7125,-1313.3009,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,850.6757,-1333.9707,13.6153) || IsPlayerInRangeOfPoint(playerid,2.0,393.6944,-1766.2702,5.6197)
    	   || IsPlayerInRangeOfPoint(playerid,2.0,1705.5898,-1805.8476,13.5300))
		{
			return 1;
		}
	}
	return 0;
}

public ResetView(playerid)
{
	TogglePlayerSpectating(playerid, 0);
    AC_BS_SetPlayerInterior(playerid, 1);
    AC_BS_SetPlayerPos(playerid, Playerx[playerid], Playery[playerid], Playerz[playerid]);
    SetPlayerFacingAngle(playerid, Playera[playerid]);
    SetPlayerSkin(playerid, PlayerSkin[playerid]);
    SetCameraBehindPlayer(playerid);
    if(PlayerSitting[playerid] == 1)
    {
        LoopingAnim(playerid,"PED","SEAT_idle",30.0,1,0,0,0,0);
    }
    if(BusID[playerid] == 1)
    {
        AC_BS_SetPlayerVirtualWorld(playerid, 2);
    }
    else
    {
        AC_BS_SetPlayerVirtualWorld(playerid, 3);
    }
    Playerx[playerid] = 0;
}

public CPOff(playerid)
{
	DisablePlayerCheckpoint(playerid);
}

stock RPNU(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

stock RPN(playerid)
{
	new string[25];
	if(PlayerInfo[playerid][pMaskUse] == 0)format(string, sizeof(string), "%s", RemoveUnderScore(playerid));
	else if(PlayerInfo[playerid][pMaskUse] == 1)format(string, sizeof(string), "%s", PlayerInfo[playerid][pNormalName]);
	return string;
}

stock NORPN(playerid)
{
	new astring[25];
	if(PlayerInfo[playerid][pMaskUse] == 0)format(astring, sizeof(astring), "%s", RemoveUnderScore(playerid));
	else if(PlayerInfo[playerid][pMaskUse] == 1)format(astring, sizeof(astring), "%s", PlayerInfo[playerid][pNormalName]);
	return astring;
}
stock RPIP(playerid)
{
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}
stock RPIDFN(playername[])
{
  for(new i = 0; i <= MAX_PLAYERS; i++)
  {
    if(IsPlayerConnected(i))
    {
      new playername2[MAX_PLAYER_NAME];
      GetPlayerName(i, playername2, sizeof(playername2));
      if(strcmp(playername2, playername, true, strlen(playername)) == 0)
      {
        return i;
      }
    }
  }
  return INVALID_PLAYER_ID;
}
stock ORANK(playerid)
{
	new name[32];
	if(PlayerInfo[playerid][pLevel] == 1) format(name, sizeof(name), "Newbie");
	else if(PlayerInfo[playerid][pLevel] == 2) format(name, sizeof(name), "Regular Player");
	else if(PlayerInfo[playerid][pLevel] == 3) format(name, sizeof(name), "Junior Player");
	else if(PlayerInfo[playerid][pLevel] == 4) format(name, sizeof(name), "Second Player");
	else if(PlayerInfo[playerid][pLevel] == 5) format(name, sizeof(name), "Senior Player");
	else if(PlayerInfo[playerid][pLevel] == 6) format(name, sizeof(name), "Big Slave");
	else if(PlayerInfo[playerid][pLevel] == 7) format(name, sizeof(name), "Royal Slave");
	else if(PlayerInfo[playerid][pLevel] == 8) format(name, sizeof(name), "Perfect Slave");
	else if(PlayerInfo[playerid][pLevel] == 9) format(name, sizeof(name), "Get a Life");
	else if(PlayerInfo[playerid][pLevel] == 10) format(name, sizeof(name), "Take a Life");
	else if(PlayerInfo[playerid][pLevel] == 11) format(name, sizeof(name), "9 Life");
	else if(PlayerInfo[playerid][pLevel] == 12) format(name, sizeof(name), "Big Ranked");
	else if(PlayerInfo[playerid][pLevel] == 13) format(name, sizeof(name), "High Ranked");
	else if(PlayerInfo[playerid][pLevel] == 14) format(name, sizeof(name), "Big Roller");
	else if(PlayerInfo[playerid][pLevel] == 15) format(name, sizeof(name), "High Roller");
	else if(PlayerInfo[playerid][pLevel] == 16) format(name, sizeof(name), "Get a Roller");
	else if(PlayerInfo[playerid][pLevel] == 17) format(name, sizeof(name), "9 Life Roller");
	else if(PlayerInfo[playerid][pLevel] == 18) format(name, sizeof(name), "Loyal Player");
	else if(PlayerInfo[playerid][pLevel] == 19) format(name, sizeof(name), "Perfect Player");
	else if(PlayerInfo[playerid][pLevel] == 21) format(name, sizeof(name), "Level 21");
	else if(PlayerInfo[playerid][pLevel] == 22) format(name, sizeof(name), "Level 22");
	else if(PlayerInfo[playerid][pLevel] == 23) format(name, sizeof(name), "Level 23");
	else if(PlayerInfo[playerid][pLevel] == 24) format(name, sizeof(name), "Level 24");
	else if(PlayerInfo[playerid][pLevel] == 25) format(name, sizeof(name), "Level 25");
	else if(PlayerInfo[playerid][pLevel] == 26) format(name, sizeof(name), "Level 26");
	else if(PlayerInfo[playerid][pLevel] == 27) format(name, sizeof(name), "Level 27");
	else if(PlayerInfo[playerid][pLevel] == 28) format(name, sizeof(name), "Level 28");
	else if(PlayerInfo[playerid][pLevel] == 29) format(name, sizeof(name), "Level 29");
	else if(PlayerInfo[playerid][pLevel] == 30) format(name, sizeof(name), "Level 30");
	else if(PlayerInfo[playerid][pLevel] == 31) format(name, sizeof(name), "Level 31");
	else if(PlayerInfo[playerid][pLevel] == 32) format(name, sizeof(name), "Level 32");
	else if(PlayerInfo[playerid][pLevel] == 33) format(name, sizeof(name), "Level 33");
	else if(PlayerInfo[playerid][pLevel] == 33) format(name, sizeof(name), "Level 34");
	else if(PlayerInfo[playerid][pLevel] == 33) format(name, sizeof(name), "Level 35");
	return name;
}
stock AntiAdv(playerid, text[])
{
    // Anti Adv
    new strR[255], is1=0, r=0;
 	while(strlen(text[is1]))
 	{
  		if('0'<=text[is1]<='9')
  		{
	 		new is2=is1+1, p=0;
	   		while(p==0)
		  	{
		   		if('0'<=text[is2]<='9'&&strlen(text[is2]))
			   	{
				   is2++;
				}
			 	else
			  	{
				   	strmid(strR[r],text,is1,is2,255);
				   	if(strval(strR[r])<255) r++;
				    is1=is2;
				    p=1;
		    	}
		    }
	    }
    	is1++;
 	}
 	if(r>=4)
 	{
	  	new strMy[255];
	  	format(strMy, sizeof(strMy), "{FF6347}AdmCmd: %s is attempting to Server Advertise: %s", NORPN(playerid), text);
	  	ABroadCast(COLOR_DARKRED, strMy, 1);
	   	new pr2;
	  	for(new z=0;z<r;z++)
	  	{

		   	while((pr2=strfind(text,strR[z],true))!=-1)
			{
				for(new i=pr2,j=pr2+strlen(strR[z]);i<j;i++)
				{
					text[i]='*';
				}
			}
	  	}
	  	return 1;
 	}
 	return 0;
}
stock GetDirectedXY(type, id, &Float:x, &Float:y, Float:distance, Direction)
{
        new Float:rx, Float:ry, Float:a;
        if(type == 1){
                GetPlayerFacingAngle(id, a);
        }else if(type == 2){
                GetObjectRot(id, rx, ry, a);
        }
        if(Direction <= 0){
                x -= (distance * floatsin(-a, degrees));
                y -= (distance * floatcos(-a, degrees));
        }else if(Direction >= 1){
                x += (distance * floatsin(-a, degrees));
                y += (distance * floatcos(-a, degrees));
        }
}
stock RWN(weaponid)
{
	new name[32];
	GetWeaponName(weaponid, name, sizeof(name));
	if(weaponid == 0) format(name, sizeof(name), "Fist");
	return name;
}
stock RAN(playerid)
{
	new name[64];
	if(PlayerInfo[playerid][pAdmin] == 1) format(name, sizeof(name), "Volunteer");
	else if(PlayerInfo[playerid][pAdmin] == 2) format(name, sizeof(name), "Helper");
	else if(PlayerInfo[playerid][pAdmin] == 3) format(name, sizeof(name), "Senior Helper");
	else if(PlayerInfo[playerid][pAdmin] == 4) format(name, sizeof(name), "Admin Level 1");
	else if(PlayerInfo[playerid][pAdmin] == 5) format(name, sizeof(name), "Admin Level 2");
	else if(PlayerInfo[playerid][pAdmin] == 6) format(name, sizeof(name), "Admin Level 3");
	else if(PlayerInfo[playerid][pAdmin] == 7) format(name, sizeof(name), "Admin Level 4");
 	else if(PlayerInfo[playerid][pAdmin] == 8) format(name, sizeof(name), "Second Manager");
 	else if(PlayerInfo[playerid][pAdmin] == 9) format(name, sizeof(name), "First Manager");
	else if(PlayerInfo[playerid][pAdmin] == 10) format(name, sizeof(name), "Vice Head Admin");
	else if(PlayerInfo[playerid][pAdmin] == 11) format(name, sizeof(name), "Head Admin");
	else format(name, sizeof(name), "Admin");
	return name;
}
stock GetHouse2DZone(id, zone[], len)
{
	new Float:x = HouseInfo[id][hExteriorX], Float:y = HouseInfo[id][hExteriorY];
 	for(new i = 0; i != sizeof(SanAndreasZones); i++ )
	{
		if(x >= SanAndreasZones[i][Zone_Area][0] && x <= SanAndreasZones[i][Zone_Area][3] && y >= SanAndreasZones[i][Zone_Area][1] && y <= SanAndreasZones[i][Zone_Area][4])
			return format(zone, len, SanAndreasZones[i][Zone_Name], 0);
	}
	return 0;
}

stock GetBiz2DZone(id, zone[], len)
{
	new Float:x = BizzInfo[id][bEntranceX], Float:y = BizzInfo[id][bEntranceY];
 	for(new i = 0; i != sizeof(SanAndreasZones); i++ )
	{
		if(x >= SanAndreasZones[i][Zone_Area][0] && x <= SanAndreasZones[i][Zone_Area][3] && y >= SanAndreasZones[i][Zone_Area][1] && y <= SanAndreasZones[i][Zone_Area][4])
			return format(zone, len, SanAndreasZones[i][Zone_Name], 0);
	}
	return 0;
}

stock SELLFARM(farmid)
{
	new String[10000];
	format(String, sizeof(String), "{FFFF00}Pemilik : {FFFFFF}%s\n{FFFF00}Price : {FFFFFF}%s{FFFF00}\nID: [%d]\n'/buyfarm' untuk membeli Ladang", FarmInfo[farmid][FarmOwner], FormatMoney(FarmInfo[farmid][FarmPrice]), farmid);
	UpdateDynamic3DTextLabelText(FarmInfo[farmid][FarmText], COLOR_RED, String);
	SaveFarm();
}
stock IsPlayerOwnerOfFARM(playerid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	for(new d = 0; d < MAX_FARM; d++)
    {
	    if(strcmp(FarmInfo[d][FarmOwner],owner, true ) == 0)
	    {
			return d;
		}
	}
	return -1;
}
stock IsPlayerOwnerOfFARMEx(playerid, farmid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	if(strcmp(FarmInfo[farmid][FarmOwner],owner, true ) == 0)
	{
	    return 1;
	}
	return 0;
}
// sobeit detector
forward s3mp4kdetector(playerid);
public s3mp4kdetector(playerid)
{
    new Float:x, Float:y, Float:z;
    GetPlayerCameraFrontVector(playerid, x, y, z);
    #pragma unused x
    #pragma unused y
    if(z < -0.8)
    {
        TogglePlayerControllable(playerid, 0);
        new string[528];
        format(string, sizeof(string), "%s[id:%d] Connect menggunakan s0beit, mohon segera di spec.", GetName(playerid), playerid);
		ABroadCast(COLOR_LIGHTRED, string, 1);
        }
    else
    {
        TogglePlayerControllable(playerid, 1);
	}
    return 1;
}
forward OnPlayerStartSwimming(playerid);
forward IsPlayerSwimming(playerid);
forward OnPlayerStopSwimming(playerid);

stock IsPlayerInWater( playerid ) {
        new Float:Z;
        GetPlayerPos(playerid, Z, Z, Z);
        if(Z < 0.7) switch(GetPlayerAnimationIndex(playerid)) { case 1543,1538,1539,1250: return (true); }
        if(GetPlayerDistanceFromPoint(playerid, -965, 2438, 42) <= 700 && Z < 45) return (true);
        new Float:water_places[][] =
        {
                {25.0,  2313.0, -1417.0,        23.0},
                {15.0,  1280.0, -773.0,         1082.0},
                {15.0,  1279.0, -804.0,         86.0},
                {20.0,  1094.0, -674.0,         111.0},
                {26.0,  194.0,  -1232.0,        76.0},
                {25.0,  2583.0, 2385.0,         15.0},
                {25.0,  225.0,  -1187.0,        73.0},
                {50.0,  1973.0, -1198.0,        17.0}
        };
        for(new t=0; t < sizeof water_places; t++)
        if(GetPlayerDistanceFromPoint(playerid, water_places[t][1], water_places[t][2], water_places[t][3]) <= water_places[t][0]) return (true);
        return (false);
}

public IsPlayerSwimming(playerid)
{
    if(swimming[playerid]) return 1;
    return 0;
}
public OnPlayerStopSwimming(playerid)
{
	return 1;
}
public OnPlayerStartSwimming(playerid)
{
	new string[445];
        if( !IsPlayerInWater( playerid ) )
        format(string, sizeof(string), "%s[id:%d] terdeteksi FlyHack. mohon segera di spec.", GetName(playerid), playerid); // ini string/ bisa di sebut text
		ABroadCast(COLOR_LIGHTRED, string, 1); // ini message ke aDMINS CACAD
    return 1;
}

stock HexToInt(string[]) // Created by Zamaroth
{
	if (string[0] == 0) return 0;

	new
		i,
		cur = 1,
		res = 0
	;

	for (i = strlen(string); i > 0; i --) {
		if (string[i-1] < 58) res = res + cur * (string[i-1]-48); else res = res + cur * (string[i-1]-65+10);
		cur = cur * 16;
	}
	return res;
}
